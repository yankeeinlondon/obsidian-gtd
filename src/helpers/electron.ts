/* eslint-disable @typescript-eslint/no-explicit-any */
import { 
	BrowserWindow,
	type PowerMonitor, 
	type SystemPreferences, 
	type Dialog, 
	type Screen, 
	type Clipboard,
	type PushNotifications,
	type Net,
	type DesktopCapturer,
	type InAppPurchase,
	type NativeTheme,
	type NativeImage,
	type WebContents,
	type WebFrameMain,
	type ShareMenu
} from "electron";
import { AnyFunction } from "inferred-types";


/**
 * Provides reference to the global instance of **Electron** provided by
 * Electron.
 */
export const electron = ({
	ShareMenu: (globalThis as any).electron.ShareMenu as ShareMenu,
	BrowserWindow: (globalThis as any).electron.BrowserWindow as BrowserWindow,
	systemPreferences: (globalThis as any).electron.systemPreferences as SystemPreferences,
	powerMonitor: (globalThis as any).electron.powerMonitor as PowerMonitor,
	dialog: (globalThis as any).electron.dialog as Dialog,
	screen: (globalThis as any).electron.screen as Screen,
	clipboard: (globalThis as any).electron.clipboard as Clipboard,
	pushNotifications: (globalThis as any).electron.pushNotifications as PushNotifications,
	net: (globalThis as any).electron.net as Net,
	desktopCapturer: (globalThis as any).electron.desktopCapturer as DesktopCapturer,
	inAppPurchase: (globalThis as any).electron.inAppPurchase as InAppPurchase,
	nativeTheme: (globalThis as any).electron.nativeTheme as NativeTheme,
	nativeImage: (globalThis as any).electron.nativeImage as NativeImage,
	webContents: (globalThis as any).electron.webContents as WebContents,
	webFrameMain: (globalThis as any).electron.webFrameMain as WebFrameMain,
	/**
	 * takes API surface offered at `global.electronWindow`
	 */
	window: {
		hasShadow: (globalThis as any).electronWindow.hasShadow as AnyFunction,
		hide: (globalThis as any).electronWindow.hide as AnyFunction,
		isAlwaysOnTop: (globalThis as any).electronWindow.isAlwaysOnTop as AnyFunction,
		isDevToolsOpened: (globalThis as any).electronWindow.isDevToolsOpened as () => boolean,
		isDevToolsFocused: (globalThis as any).electronWindow.isDevToolsOpened as () => boolean,
		isMovable: (globalThis as any).electronWindow.isMovable as () => boolean,
		isEnabled: (globalThis as any).electronWindow.isEnabled as () => boolean,
		isFocusable: (globalThis as any).electronWindow.isFocusable as () => boolean,
		isClosable: (globalThis as any).electronWindow.isClosable as () => boolean,
		isDestroyed: (globalThis as any).electronWindow.isDestroyed as () => boolean,
		isFocused: (globalThis as any).electronWindow.isFocused as () => boolean,
		isFullScreen: (globalThis as any).electronWindow.isFullScreen as () => boolean,
		isFullScreenable: (globalThis as any).electronWindow.isFullScreenable as () => boolean,
		isHiddenInMissionControl: (globalThis as any).electronWindow.isHiddenInMissionControl as () => boolean,
		isKiosk: (globalThis as any).electronWindow.isKiosk as () => boolean,
		isMaximizable: (globalThis as any).electronWindow.isMaximizable as () => boolean,
		isMaximized: (globalThis as any).electronWindow.isMaximized as () => boolean,
		isMenuBarAutoHide: (globalThis as any).electronWindow.isMenuBarAutoHide as () => boolean,
		isMenuBarVisible: (globalThis as any).electronWindow.isMenuBarVisible as () => boolean,
		isResizable: (globalThis as any).electronWindow.isResizable as () => boolean,
		isMinimizable: (globalThis as any).electronWindow.isMinimizable as () => boolean,
		isMinimized: (globalThis as any).electronWindow.isMinimized as () => boolean,
		isModal: (globalThis as any).electronWindow.isModal as () => boolean,
		isNormal: (globalThis as any).electronWindow.isNormal as () => boolean,
		isSimpleFullScreen: (globalThis as any).electronWindow.isSimpleFullScreen as () => boolean,
		isWebViewFocused: (globalThis as any).electronWindow.isWebViewFocused as () => boolean,
		listenerCount: (globalThis as any).electronWindow.listenerCount as () => number,
		listeners: (globalThis as any).electronWindow.listeners as () => unknown[],
		loadURL: (globalThis as any).electronWindow.loadURL as () => string,
		loadFile: (globalThis as any).electronWindow.loadFile as () => string,
		minimize: (globalThis as any).electronWindow.minimize as () => unknown,
		moveAbove: (globalThis as any).electronWindow.moveAbove as () => unknown,
		moveTop: (globalThis as any).electronWindow.moveTop as () => unknown,
		moveTabToNewWindow: (globalThis as any).electronWindow.moveTabToNewWindow as AnyFunction,
		mergeAllWindows: (globalThis as any).electronWindow.mergeAllWindows as AnyFunction,
		openDevTools: (globalThis as any).electronWindow.openDevTools as () => unknown,
		previewFile: (globalThis as any).electronWindow.previewFile as AnyFunction,
		rawListeners: (globalThis as any).electronWindow.rawListeners as AnyFunction,
		reload: (globalThis as any).electronWindow.reload as AnyFunction,
		removeAllListeners: (globalThis as any).electronWindow.removeAllListeners as AnyFunction,
		removeBrowserView: (globalThis as any).electronWindow.removeBrowserView as AnyFunction,
		removeListener: (globalThis as any).electronWindow.removeListener as AnyFunction,
		removeMenu: (globalThis as any).electronWindow.removeMenu as AnyFunction,
		restore: (globalThis as any).electronWindow.restore as AnyFunction,
		selectNextTab: (globalThis as any).electronWindow.selectNextTab as AnyFunction,
		selectPreviousTab: (globalThis as any).electronWindow.selectPreviousTab as AnyFunction,
		send: (globalThis as any).electronWindow.send as AnyFunction,
		setAlwaysOnTop: (globalThis as any).electronWindow.setAlwaysOnTop as AnyFunction,
		setAspectRatio: (globalThis as any).electronWindow.setAspectRatio as AnyFunction,
		setAutoHideCursor: (globalThis as any).electronWindow.setAutoHideCursor as AnyFunction,
		setAutoHideMenuBar: (globalThis as any).electronWindow.setAutoHideMenuBar as AnyFunction,
		setBackgroundColor: (globalThis as any).electronWindow.setBackgroundColor as AnyFunction,
		setBackgroundMaterial: (globalThis as any).electronWindow.setBackgroundMaterial as AnyFunction,
		setBackgroundThrottling: (globalThis as any).electronWindow.setBackgroundThrottling as AnyFunction,
		setBrowserView: (globalThis as any).electronWindow.setBrowserView as AnyFunction,
		setClosable: (globalThis as any).electronWindow.setClosable as AnyFunction,
		setContentBounds: (globalThis as any).electronWindow.setContentBounds as AnyFunction,
		setContentProtection: (globalThis as any).electronWindow.setContentProtection as AnyFunction,
		setContentSize: (globalThis as any).electronWindow.setContentSize as AnyFunction,
		setContentView: (globalThis as any).electronWindow.setContentView as AnyFunction,
		setDocumentEdited: (globalThis as any).electronWindow.setDocumentEdited as AnyFunction,
		setEnabled: (globalThis as any).electronWindow.setEnabled as AnyFunction,
		setFocusable: (globalThis as any).electronWindow.setFocusable as AnyFunction,
		setFullScreen: (globalThis as any).electronWindow.setFullScreen as AnyFunction,
		setFullScreenable: (globalThis as any).electronWindow.setFullScreenable as AnyFunction,
		setHasShadow: (globalThis as any).electronWindow.setHasShadow as AnyFunction,
		setHiddenInMissionControl: (globalThis as any).electronWindow.setHiddenInMissionControl as AnyFunction,
		setIcon: (globalThis as any).electronWindow.setIcon as AnyFunction,
		setIgnoredMouseEvents: (globalThis as any).electronWindow.setIgnoredMouseEvents as AnyFunction,
		setKiosk: (globalThis as any).electronWindow.setKiosk as AnyFunction,
		setMaxListeners: (globalThis as any).electronWindow.setMaxListeners as AnyFunction,
		setMaximizable: (globalThis as any).electronWindow.setMaximizable as AnyFunction,
		setMaximumSize: (globalThis as any).electronWindow.setMaximumSize as AnyFunction,
		setMenu: (globalThis as any).electronWindow.setMenu as AnyFunction,
		setMenuBarVisibility: (globalThis as any).electronWindow.setMenuBarVisibility as AnyFunction,
		setMinimizable: (globalThis as any).electronWindow.setMinimizable as AnyFunction,
		setMinimumSize: (globalThis as any).electronWindow.setMinimumSize as AnyFunction,
		setMovable: (globalThis as any).electronWindow.setMovable as AnyFunction,
		setOpacity: (globalThis as any).electronWindow.setOpacity as AnyFunction,
		setOverlayIcon: (globalThis as any).electronWindow.setOverlayIcon as AnyFunction,
		setParentWindow: (globalThis as any).electronWindow.setParentWindow as AnyFunction,
		setPosition: (globalThis as any).electronWindow.setPosition as AnyFunction,
		setProgressBar: (globalThis as any).electronWindow.setProgressBar as AnyFunction,
		setRepresentedFilename: (globalThis as any).electronWindow.setRepresentedFilename as AnyFunction,
		setResizable: (globalThis as any).electronWindow.setResizable as AnyFunction,
		setShape: (globalThis as any).electronWindow.setShape as AnyFunction,
		setSheetOffset: (globalThis as any).electronWindow.setSheetOffset as AnyFunction,
		setSimpleFullScreen: (globalThis as any).electronWindow.setSimpleFullScreen as AnyFunction,
		setSize: (globalThis as any).electronWindow.setSize as AnyFunction,
		setSkipTaskbar: (globalThis as any).electronWindow.setSkipTaskbar as AnyFunction,
		setThumbarButtons: (globalThis as any).electronWindow.setThumbarButtons as AnyFunction,
		setTitle: (globalThis as any).electronWindow.setTitle as AnyFunction,
		setTopBrowserView: (globalThis as any).electronWindow.setTopBrowserView as AnyFunction,
		setTrafficLightPosition: (globalThis as any).electronWindow.setTrafficLightPosition as AnyFunction,
		setVibrancy: (globalThis as any).electronWindow.setVibrancy as AnyFunction,
		setVisibleOnAllWorkspaces: (globalThis as any).electronWindow.setVisibleOnAllWorkspaces as AnyFunction,
		setWindowButtonPosition: (globalThis as any).electronWindow.setWindowButtonPosition as AnyFunction,
		setWindowButtonVisibility: (globalThis as any).electronWindow.setWindowButtonVisibility as AnyFunction,
		show: (globalThis as any).electronWindow.show as AnyFunction,
		showDefinitionForSelection: (globalThis as any).electronWindow.showDefinitionForSelection as AnyFunction,
		showInactive: (globalThis as any).electronWindow.showInactive as AnyFunction,
		toggleDevTools: (globalThis as any).electronWindow.toggleDevTools as AnyFunction,
		toggleTabBar: (globalThis as any).electronWindow.toggleTabBar as AnyFunction,
		unmaximize: (globalThis as any).electronWindow.unmaximize as AnyFunction,
		webContents: (globalThis as any).electronWindow.webContents as AnyFunction,
	},
	/**
	 * exposing the global resource `electron.remote`
	 */
	remote: {
		ShareMenu: (globalThis as any).electron.remote.ShareMenu as ShareMenu,
		BrowserWindow: (globalThis as any).electron.remote.BrowserWindow as BrowserWindow,
		systemPreferences: (globalThis as any).electron.remote.systemPreferences as SystemPreferences,
		powerMonitor: (globalThis as any).electron.remote.powerMonitor as PowerMonitor,
		dialog: (globalThis as any).electron.remote.dialog as Dialog,
		screen: (globalThis as any).electron.remote.screen as Screen,
		clipboard: (globalThis as any).electron.remote.clipboard as Clipboard,
		pushNotifications: (globalThis as any).electron.remote.pushNotifications as PushNotifications,
		net: (globalThis as any).electron.remote.net as Net,
		desktopCapturer: (globalThis as any).electron.remote.desktopCapturer as DesktopCapturer,
		inAppPurchase: (globalThis as any).electron.remote.inAppPurchase as InAppPurchase,
		nativeTheme: (globalThis as any).electron.remote.nativeTheme as NativeTheme,
		nativeImage: (globalThis as any).electron.remote.nativeImage as NativeImage,
		webContents: (globalThis as any).electron.remote.webContents as WebContents,
		webFrameMain: (globalThis as any).electron.remote.webFrameMain as WebFrameMain,
	}
})
