var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __toESM = (mod, isNodeMode, target) => {
  target = mod != null ? __create(__getProtoOf(mod)) : {};
  const to = isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target;
  for (let key of __getOwnPropNames(mod))
    if (!__hasOwnProp.call(to, key))
      __defProp(to, key, {
        get: () => mod[key],
        enumerable: true
      });
  return to;
};
var __commonJS = (cb, mod) => () => (mod || cb((mod = { exports: {} }).exports, mod), mod.exports);

// node_modules/fp-ts/lib/function.js
var require_function = __commonJS((exports) => {
  var identity = function(a) {
    return a;
  };
  var constant = function(a) {
    return function() {
      return a;
    };
  };
  var flip3 = function(f) {
    return function() {
      var args = [];
      for (var _i = 0;_i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      if (args.length > 1) {
        return f(args[1], args[0]);
      }
      return function(a) {
        return f(a)(args[0]);
      };
    };
  };
  var flow = function(ab, bc, cd, de, ef, fg, gh, hi, ij) {
    switch (arguments.length) {
      case 1:
        return ab;
      case 2:
        return function() {
          return bc(ab.apply(this, arguments));
        };
      case 3:
        return function() {
          return cd(bc(ab.apply(this, arguments)));
        };
      case 4:
        return function() {
          return de(cd(bc(ab.apply(this, arguments))));
        };
      case 5:
        return function() {
          return ef(de(cd(bc(ab.apply(this, arguments)))));
        };
      case 6:
        return function() {
          return fg(ef(de(cd(bc(ab.apply(this, arguments))))));
        };
      case 7:
        return function() {
          return gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))));
        };
      case 8:
        return function() {
          return hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments))))))));
        };
      case 9:
        return function() {
          return ij(hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))))));
        };
    }
    return;
  };
  var tuple = function() {
    var t = [];
    for (var _i = 0;_i < arguments.length; _i++) {
      t[_i] = arguments[_i];
    }
    return t;
  };
  var increment2 = function(n) {
    return n + 1;
  };
  var decrement = function(n) {
    return n - 1;
  };
  var absurd = function(_) {
    throw new Error("Called `absurd` function which should be uncallable");
  };
  var tupled = function(f) {
    return function(a) {
      return f.apply(undefined, a);
    };
  };
  var untupled = function(f) {
    return function() {
      var a = [];
      for (var _i = 0;_i < arguments.length; _i++) {
        a[_i] = arguments[_i];
      }
      return f(a);
    };
  };
  var pipe = function(a, ab, bc, cd, de, ef, fg, gh, hi) {
    switch (arguments.length) {
      case 1:
        return a;
      case 2:
        return ab(a);
      case 3:
        return bc(ab(a));
      case 4:
        return cd(bc(ab(a)));
      case 5:
        return de(cd(bc(ab(a))));
      case 6:
        return ef(de(cd(bc(ab(a)))));
      case 7:
        return fg(ef(de(cd(bc(ab(a))))));
      case 8:
        return gh(fg(ef(de(cd(bc(ab(a)))))));
      case 9:
        return hi(gh(fg(ef(de(cd(bc(ab(a))))))));
      default: {
        var ret = arguments[0];
        for (var i = 1;i < arguments.length; i++) {
          ret = arguments[i](ret);
        }
        return ret;
      }
    }
  };
  var not2 = function(predicate) {
    return function(a) {
      return !predicate(a);
    };
  };
  var __spreadArray = exports && exports.__spreadArray || function(to, from, pack) {
    if (pack || arguments.length === 2)
      for (var i = 0, l = from.length, ar;i < l; i++) {
        if (ar || !(i in from)) {
          if (!ar)
            ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
        }
      }
    return to.concat(ar || Array.prototype.slice.call(from));
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.dual = exports.getEndomorphismMonoid = exports.SK = exports.hole = exports.constVoid = exports.constUndefined = exports.constNull = exports.constFalse = exports.constTrue = exports.unsafeCoerce = exports.apply = exports.getRing = exports.getSemiring = exports.getMonoid = exports.getSemigroup = exports.getBooleanAlgebra = undefined;
  exports.identity = identity;
  exports.constant = constant;
  exports.flip = flip3;
  exports.flow = flow;
  exports.tuple = tuple;
  exports.increment = increment2;
  exports.decrement = decrement;
  exports.absurd = absurd;
  exports.tupled = tupled;
  exports.untupled = untupled;
  exports.pipe = pipe;
  exports.not = not2;
  var getBooleanAlgebra = function(B) {
    return function() {
      return {
        meet: function(x, y) {
          return function(a) {
            return B.meet(x(a), y(a));
          };
        },
        join: function(x, y) {
          return function(a) {
            return B.join(x(a), y(a));
          };
        },
        zero: function() {
          return B.zero;
        },
        one: function() {
          return B.one;
        },
        implies: function(x, y) {
          return function(a) {
            return B.implies(x(a), y(a));
          };
        },
        not: function(x) {
          return function(a) {
            return B.not(x(a));
          };
        }
      };
    };
  };
  exports.getBooleanAlgebra = getBooleanAlgebra;
  var getSemigroup = function(S) {
    return function() {
      return {
        concat: function(f, g) {
          return function(a) {
            return S.concat(f(a), g(a));
          };
        }
      };
    };
  };
  exports.getSemigroup = getSemigroup;
  var getMonoid = function(M) {
    var getSemigroupM = (0, exports.getSemigroup)(M);
    return function() {
      return {
        concat: getSemigroupM().concat,
        empty: function() {
          return M.empty;
        }
      };
    };
  };
  exports.getMonoid = getMonoid;
  var getSemiring = function(S) {
    return {
      add: function(f, g) {
        return function(x) {
          return S.add(f(x), g(x));
        };
      },
      zero: function() {
        return S.zero;
      },
      mul: function(f, g) {
        return function(x) {
          return S.mul(f(x), g(x));
        };
      },
      one: function() {
        return S.one;
      }
    };
  };
  exports.getSemiring = getSemiring;
  var getRing = function(R) {
    var S = (0, exports.getSemiring)(R);
    return {
      add: S.add,
      mul: S.mul,
      one: S.one,
      zero: S.zero,
      sub: function(f, g) {
        return function(x) {
          return R.sub(f(x), g(x));
        };
      }
    };
  };
  exports.getRing = getRing;
  var apply = function(a) {
    return function(f) {
      return f(a);
    };
  };
  exports.apply = apply;
  exports.unsafeCoerce = identity;
  exports.constTrue = constant(true);
  exports.constFalse = constant(false);
  exports.constNull = constant(null);
  exports.constUndefined = constant(undefined);
  exports.constVoid = exports.constUndefined;
  exports.hole = absurd;
  var SK = function(_, b) {
    return b;
  };
  exports.SK = SK;
  var getEndomorphismMonoid = function() {
    return {
      concat: function(first, second) {
        return flow(first, second);
      },
      empty: identity
    };
  };
  exports.getEndomorphismMonoid = getEndomorphismMonoid;
  var dual = function(arity, body) {
    var isDataFirst = typeof arity === "number" ? function(args) {
      return args.length >= arity;
    } : arity;
    return function() {
      var args = Array.from(arguments);
      if (isDataFirst(arguments)) {
        return body.apply(this, args);
      }
      return function(self) {
        return body.apply(undefined, __spreadArray([self], args, false));
      };
    };
  };
  exports.dual = dual;
});

// node_modules/webidl-conversions/lib/index.js
var require_lib2 = __commonJS((exports) => {
  var makeException = function(ErrorType, message, options2) {
    if (options2.globals) {
      ErrorType = options2.globals[ErrorType.name];
    }
    return new ErrorType(`${options2.context ? options2.context : "Value"} ${message}.`);
  };
  var toNumber = function(value, options2) {
    if (typeof value === "bigint") {
      throw makeException(TypeError, "is a BigInt which cannot be converted to a number", options2);
    }
    if (!options2.globals) {
      return Number(value);
    }
    return options2.globals.Number(value);
  };
  var evenRound = function(x) {
    if (x > 0 && x % 1 === 0.5 && (x & 1) === 0 || x < 0 && x % 1 === -0.5 && (x & 1) === 1) {
      return censorNegativeZero(Math.floor(x));
    }
    return censorNegativeZero(Math.round(x));
  };
  var integerPart = function(n) {
    return censorNegativeZero(Math.trunc(n));
  };
  var sign = function(x) {
    return x < 0 ? -1 : 1;
  };
  var modulo = function(x, y) {
    const signMightNotMatch = x % y;
    if (sign(y) !== sign(signMightNotMatch)) {
      return signMightNotMatch + y;
    }
    return signMightNotMatch;
  };
  var censorNegativeZero = function(x) {
    return x === 0 ? 0 : x;
  };
  var createIntegerConversion = function(bitLength, { unsigned }) {
    let lowerBound, upperBound;
    if (unsigned) {
      lowerBound = 0;
      upperBound = 2 ** bitLength - 1;
    } else {
      lowerBound = -(2 ** (bitLength - 1));
      upperBound = 2 ** (bitLength - 1) - 1;
    }
    const twoToTheBitLength = 2 ** bitLength;
    const twoToOneLessThanTheBitLength = 2 ** (bitLength - 1);
    return (value, options2 = {}) => {
      let x = toNumber(value, options2);
      x = censorNegativeZero(x);
      if (options2.enforceRange) {
        if (!Number.isFinite(x)) {
          throw makeException(TypeError, "is not a finite number", options2);
        }
        x = integerPart(x);
        if (x < lowerBound || x > upperBound) {
          throw makeException(TypeError, `is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`, options2);
        }
        return x;
      }
      if (!Number.isNaN(x) && options2.clamp) {
        x = Math.min(Math.max(x, lowerBound), upperBound);
        x = evenRound(x);
        return x;
      }
      if (!Number.isFinite(x) || x === 0) {
        return 0;
      }
      x = integerPart(x);
      if (x >= lowerBound && x <= upperBound) {
        return x;
      }
      x = modulo(x, twoToTheBitLength);
      if (!unsigned && x >= twoToOneLessThanTheBitLength) {
        return x - twoToTheBitLength;
      }
      return x;
    };
  };
  var createLongLongConversion = function(bitLength, { unsigned }) {
    const upperBound = Number.MAX_SAFE_INTEGER;
    const lowerBound = unsigned ? 0 : Number.MIN_SAFE_INTEGER;
    const asBigIntN = unsigned ? BigInt.asUintN : BigInt.asIntN;
    return (value, options2 = {}) => {
      let x = toNumber(value, options2);
      x = censorNegativeZero(x);
      if (options2.enforceRange) {
        if (!Number.isFinite(x)) {
          throw makeException(TypeError, "is not a finite number", options2);
        }
        x = integerPart(x);
        if (x < lowerBound || x > upperBound) {
          throw makeException(TypeError, `is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`, options2);
        }
        return x;
      }
      if (!Number.isNaN(x) && options2.clamp) {
        x = Math.min(Math.max(x, lowerBound), upperBound);
        x = evenRound(x);
        return x;
      }
      if (!Number.isFinite(x) || x === 0) {
        return 0;
      }
      let xBigInt = BigInt(integerPart(x));
      xBigInt = asBigIntN(bitLength, xBigInt);
      return Number(xBigInt);
    };
  };
  var isNonSharedArrayBuffer = function(value) {
    try {
      abByteLengthGetter.call(value);
      return true;
    } catch {
      return false;
    }
  };
  var isSharedArrayBuffer = function(value) {
    try {
      sabByteLengthGetter.call(value);
      return true;
    } catch {
      return false;
    }
  };
  var isArrayBufferDetached = function(value) {
    try {
      new Uint8Array(value);
      return false;
    } catch {
      return true;
    }
  };
  exports.any = (value) => {
    return value;
  };
  exports.undefined = () => {
    return;
  };
  exports.boolean = (value) => {
    return Boolean(value);
  };
  exports.byte = createIntegerConversion(8, { unsigned: false });
  exports.octet = createIntegerConversion(8, { unsigned: true });
  exports.short = createIntegerConversion(16, { unsigned: false });
  exports["unsigned short"] = createIntegerConversion(16, { unsigned: true });
  exports.long = createIntegerConversion(32, { unsigned: false });
  exports["unsigned long"] = createIntegerConversion(32, { unsigned: true });
  exports["long long"] = createLongLongConversion(64, { unsigned: false });
  exports["unsigned long long"] = createLongLongConversion(64, { unsigned: true });
  exports.double = (value, options2 = {}) => {
    const x = toNumber(value, options2);
    if (!Number.isFinite(x)) {
      throw makeException(TypeError, "is not a finite floating-point value", options2);
    }
    return x;
  };
  exports["unrestricted double"] = (value, options2 = {}) => {
    const x = toNumber(value, options2);
    return x;
  };
  exports.float = (value, options2 = {}) => {
    const x = toNumber(value, options2);
    if (!Number.isFinite(x)) {
      throw makeException(TypeError, "is not a finite floating-point value", options2);
    }
    if (Object.is(x, -0)) {
      return x;
    }
    const y = Math.fround(x);
    if (!Number.isFinite(y)) {
      throw makeException(TypeError, "is outside the range of a single-precision floating-point value", options2);
    }
    return y;
  };
  exports["unrestricted float"] = (value, options2 = {}) => {
    const x = toNumber(value, options2);
    if (isNaN(x)) {
      return x;
    }
    if (Object.is(x, -0)) {
      return x;
    }
    return Math.fround(x);
  };
  exports.DOMString = (value, options2 = {}) => {
    if (options2.treatNullAsEmptyString && value === null) {
      return "";
    }
    if (typeof value === "symbol") {
      throw makeException(TypeError, "is a symbol, which cannot be converted to a string", options2);
    }
    const StringCtor = options2.globals ? options2.globals.String : String;
    return StringCtor(value);
  };
  exports.ByteString = (value, options2 = {}) => {
    const x = exports.DOMString(value, options2);
    let c;
    for (let i = 0;(c = x.codePointAt(i)) !== undefined; ++i) {
      if (c > 255) {
        throw makeException(TypeError, "is not a valid ByteString", options2);
      }
    }
    return x;
  };
  exports.USVString = (value, options2 = {}) => {
    const S = exports.DOMString(value, options2);
    const n = S.length;
    const U = [];
    for (let i = 0;i < n; ++i) {
      const c = S.charCodeAt(i);
      if (c < 55296 || c > 57343) {
        U.push(String.fromCodePoint(c));
      } else if (56320 <= c && c <= 57343) {
        U.push(String.fromCodePoint(65533));
      } else if (i === n - 1) {
        U.push(String.fromCodePoint(65533));
      } else {
        const d = S.charCodeAt(i + 1);
        if (56320 <= d && d <= 57343) {
          const a = c & 1023;
          const b = d & 1023;
          U.push(String.fromCodePoint((2 << 15) + (2 << 9) * a + b));
          ++i;
        } else {
          U.push(String.fromCodePoint(65533));
        }
      }
    }
    return U.join("");
  };
  exports.object = (value, options2 = {}) => {
    if (value === null || typeof value !== "object" && typeof value !== "function") {
      throw makeException(TypeError, "is not an object", options2);
    }
    return value;
  };
  var abByteLengthGetter = Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, "byteLength").get;
  var sabByteLengthGetter = typeof SharedArrayBuffer === "function" ? Object.getOwnPropertyDescriptor(SharedArrayBuffer.prototype, "byteLength").get : null;
  exports.ArrayBuffer = (value, options2 = {}) => {
    if (!isNonSharedArrayBuffer(value)) {
      if (options2.allowShared && !isSharedArrayBuffer(value)) {
        throw makeException(TypeError, "is not an ArrayBuffer or SharedArrayBuffer", options2);
      }
      throw makeException(TypeError, "is not an ArrayBuffer", options2);
    }
    if (isArrayBufferDetached(value)) {
      throw makeException(TypeError, "is a detached ArrayBuffer", options2);
    }
    return value;
  };
  var dvByteLengthGetter = Object.getOwnPropertyDescriptor(DataView.prototype, "byteLength").get;
  exports.DataView = (value, options2 = {}) => {
    try {
      dvByteLengthGetter.call(value);
    } catch (e) {
      throw makeException(TypeError, "is not a DataView", options2);
    }
    if (!options2.allowShared && isSharedArrayBuffer(value.buffer)) {
      throw makeException(TypeError, "is backed by a SharedArrayBuffer, which is not allowed", options2);
    }
    if (isArrayBufferDetached(value.buffer)) {
      throw makeException(TypeError, "is backed by a detached ArrayBuffer", options2);
    }
    return value;
  };
  var typedArrayNameGetter = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(Uint8Array).prototype, Symbol.toStringTag).get;
  [
    Int8Array,
    Int16Array,
    Int32Array,
    Uint8Array,
    Uint16Array,
    Uint32Array,
    Uint8ClampedArray,
    Float32Array,
    Float64Array
  ].forEach((func) => {
    const { name } = func;
    const article = /^[AEIOU]/u.test(name) ? "an" : "a";
    exports[name] = (value, options2 = {}) => {
      if (!ArrayBuffer.isView(value) || typedArrayNameGetter.call(value) !== name) {
        throw makeException(TypeError, `is not ${article} ${name} object`, options2);
      }
      if (!options2.allowShared && isSharedArrayBuffer(value.buffer)) {
        throw makeException(TypeError, "is a view on a SharedArrayBuffer, which is not allowed", options2);
      }
      if (isArrayBufferDetached(value.buffer)) {
        throw makeException(TypeError, "is a view on a detached ArrayBuffer", options2);
      }
      return value;
    };
  });
  exports.ArrayBufferView = (value, options2 = {}) => {
    if (!ArrayBuffer.isView(value)) {
      throw makeException(TypeError, "is not a view on an ArrayBuffer or SharedArrayBuffer", options2);
    }
    if (!options2.allowShared && isSharedArrayBuffer(value.buffer)) {
      throw makeException(TypeError, "is a view on a SharedArrayBuffer, which is not allowed", options2);
    }
    if (isArrayBufferDetached(value.buffer)) {
      throw makeException(TypeError, "is a view on a detached ArrayBuffer", options2);
    }
    return value;
  };
  exports.BufferSource = (value, options2 = {}) => {
    if (ArrayBuffer.isView(value)) {
      if (!options2.allowShared && isSharedArrayBuffer(value.buffer)) {
        throw makeException(TypeError, "is a view on a SharedArrayBuffer, which is not allowed", options2);
      }
      if (isArrayBufferDetached(value.buffer)) {
        throw makeException(TypeError, "is a view on a detached ArrayBuffer", options2);
      }
      return value;
    }
    if (!options2.allowShared && !isNonSharedArrayBuffer(value)) {
      throw makeException(TypeError, "is not an ArrayBuffer or a view on one", options2);
    }
    if (options2.allowShared && !isSharedArrayBuffer(value) && !isNonSharedArrayBuffer(value)) {
      throw makeException(TypeError, "is not an ArrayBuffer, SharedArrayBuffer, or a view on one", options2);
    }
    if (isArrayBufferDetached(value)) {
      throw makeException(TypeError, "is a detached ArrayBuffer", options2);
    }
    return value;
  };
  exports.DOMTimeStamp = exports["unsigned long long"];
});

// node_modules/whatwg-url/lib/utils.js
var require_utils2 = __commonJS((exports, module) => {
  var isObject4 = function(value) {
    return typeof value === "object" && value !== null || typeof value === "function";
  };
  var define = function(target, source) {
    for (const key of Reflect.ownKeys(source)) {
      const descriptor = Reflect.getOwnPropertyDescriptor(source, key);
      if (descriptor && !Reflect.defineProperty(target, key, descriptor)) {
        throw new TypeError(`Cannot redefine property: ${String(key)}`);
      }
    }
  };
  var newObjectInRealm = function(globalObject, object) {
    const ctorRegistry = initCtorRegistry(globalObject);
    return Object.defineProperties(Object.create(ctorRegistry["%Object.prototype%"]), Object.getOwnPropertyDescriptors(object));
  };
  var initCtorRegistry = function(globalObject) {
    if (hasOwn(globalObject, ctorRegistrySymbol)) {
      return globalObject[ctorRegistrySymbol];
    }
    const ctorRegistry = Object.create(null);
    ctorRegistry["%Object.prototype%"] = globalObject.Object.prototype;
    ctorRegistry["%IteratorPrototype%"] = Object.getPrototypeOf(Object.getPrototypeOf(new globalObject.Array()[Symbol.iterator]()));
    try {
      ctorRegistry["%AsyncIteratorPrototype%"] = Object.getPrototypeOf(Object.getPrototypeOf(globalObject.eval("(async function* () {})").prototype));
    } catch {
      ctorRegistry["%AsyncIteratorPrototype%"] = AsyncIteratorPrototype;
    }
    globalObject[ctorRegistrySymbol] = ctorRegistry;
    return ctorRegistry;
  };
  var getSameObject = function(wrapper, prop, creator) {
    if (!wrapper[sameObjectCaches]) {
      wrapper[sameObjectCaches] = Object.create(null);
    }
    if (prop in wrapper[sameObjectCaches]) {
      return wrapper[sameObjectCaches][prop];
    }
    wrapper[sameObjectCaches][prop] = creator();
    return wrapper[sameObjectCaches][prop];
  };
  var wrapperForImpl = function(impl) {
    return impl ? impl[wrapperSymbol] : null;
  };
  var implForWrapper = function(wrapper) {
    return wrapper ? wrapper[implSymbol] : null;
  };
  var tryWrapperForImpl = function(impl) {
    const wrapper = wrapperForImpl(impl);
    return wrapper ? wrapper : impl;
  };
  var tryImplForWrapper = function(wrapper) {
    const impl = implForWrapper(wrapper);
    return impl ? impl : wrapper;
  };
  var isArrayIndexPropName = function(P) {
    if (typeof P !== "string") {
      return false;
    }
    const i = P >>> 0;
    if (i === 2 ** 32 - 1) {
      return false;
    }
    const s2 = `${i}`;
    if (P !== s2) {
      return false;
    }
    return true;
  };
  var isArrayBuffer = function(value) {
    try {
      byteLengthGetter.call(value);
      return true;
    } catch (e) {
      return false;
    }
  };
  var iteratorResult = function([key, value], kind) {
    let result;
    switch (kind) {
      case "key":
        result = key;
        break;
      case "value":
        result = value;
        break;
      case "key+value":
        result = [key, value];
        break;
    }
    return { value: result, done: false };
  };
  var hasOwn = Function.prototype.call.bind(Object.prototype.hasOwnProperty);
  var wrapperSymbol = Symbol("wrapper");
  var implSymbol = Symbol("impl");
  var sameObjectCaches = Symbol("SameObject caches");
  var ctorRegistrySymbol = Symbol.for("[webidl2js] constructor registry");
  var AsyncIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf(async function* () {
  }).prototype);
  var iterInternalSymbol = Symbol("internal");
  var byteLengthGetter = Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, "byteLength").get;
  var supportsPropertyIndex = Symbol("supports property index");
  var supportedPropertyIndices = Symbol("supported property indices");
  var supportsPropertyName = Symbol("supports property name");
  var supportedPropertyNames = Symbol("supported property names");
  var indexedGet = Symbol("indexed property get");
  var indexedSetNew = Symbol("indexed property set new");
  var indexedSetExisting = Symbol("indexed property set existing");
  var namedGet = Symbol("named property get");
  var namedSetNew = Symbol("named property set new");
  var namedSetExisting = Symbol("named property set existing");
  var namedDelete = Symbol("named property delete");
  var asyncIteratorNext = Symbol("async iterator get the next iteration result");
  var asyncIteratorReturn = Symbol("async iterator return steps");
  var asyncIteratorInit = Symbol("async iterator initialization steps");
  var asyncIteratorEOI = Symbol("async iterator end of iteration");
  module.exports = exports = {
    isObject: isObject4,
    hasOwn,
    define,
    newObjectInRealm,
    wrapperSymbol,
    implSymbol,
    getSameObject,
    ctorRegistrySymbol,
    initCtorRegistry,
    wrapperForImpl,
    implForWrapper,
    tryWrapperForImpl,
    tryImplForWrapper,
    iterInternalSymbol,
    isArrayBuffer,
    isArrayIndexPropName,
    supportsPropertyIndex,
    supportedPropertyIndices,
    supportsPropertyName,
    supportedPropertyNames,
    indexedGet,
    indexedSetNew,
    indexedSetExisting,
    namedGet,
    namedSetNew,
    namedSetExisting,
    namedDelete,
    asyncIteratorNext,
    asyncIteratorReturn,
    asyncIteratorInit,
    asyncIteratorEOI,
    iteratorResult
  };
});

// node_modules/punycode/punycode.js
var require_punycode2 = __commonJS((exports, module) => {
  var error3 = function(type) {
    throw new RangeError(errors[type]);
  };
  var map = function(array, callback) {
    const result = [];
    let length = array.length;
    while (length--) {
      result[length] = callback(array[length]);
    }
    return result;
  };
  var mapDomain = function(domain, callback) {
    const parts = domain.split("@");
    let result = "";
    if (parts.length > 1) {
      result = parts[0] + "@";
      domain = parts[1];
    }
    domain = domain.replace(regexSeparators, ".");
    const labels = domain.split(".");
    const encoded = map(labels, callback).join(".");
    return result + encoded;
  };
  var ucs2decode = function(string) {
    const output = [];
    let counter = 0;
    const length = string.length;
    while (counter < length) {
      const value = string.charCodeAt(counter++);
      if (value >= 55296 && value <= 56319 && counter < length) {
        const extra = string.charCodeAt(counter++);
        if ((extra & 64512) == 56320) {
          output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
        } else {
          output.push(value);
          counter--;
        }
      } else {
        output.push(value);
      }
    }
    return output;
  };
  var maxInt = 2147483647;
  var base = 36;
  var tMin = 1;
  var tMax = 26;
  var skew = 38;
  var damp = 700;
  var initialBias = 72;
  var initialN = 128;
  var delimiter = "-";
  var regexPunycode = /^xn--/;
  var regexNonASCII = /[^\0-\x7F]/;
  var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g;
  var errors = {
    overflow: "Overflow: input needs wider integers to process",
    "not-basic": "Illegal input >= 0x80 (not a basic code point)",
    "invalid-input": "Invalid input"
  };
  var baseMinusTMin = base - tMin;
  var floor = Math.floor;
  var stringFromCharCode = String.fromCharCode;
  var ucs2encode = (codePoints) => String.fromCodePoint(...codePoints);
  var basicToDigit = function(codePoint) {
    if (codePoint >= 48 && codePoint < 58) {
      return 26 + (codePoint - 48);
    }
    if (codePoint >= 65 && codePoint < 91) {
      return codePoint - 65;
    }
    if (codePoint >= 97 && codePoint < 123) {
      return codePoint - 97;
    }
    return base;
  };
  var digitToBasic = function(digit, flag) {
    return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
  };
  var adapt = function(delta, numPoints, firstTime) {
    let k = 0;
    delta = firstTime ? floor(delta / damp) : delta >> 1;
    delta += floor(delta / numPoints);
    for (;delta > baseMinusTMin * tMax >> 1; k += base) {
      delta = floor(delta / baseMinusTMin);
    }
    return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
  };
  var decode = function(input) {
    const output = [];
    const inputLength = input.length;
    let i = 0;
    let n = initialN;
    let bias = initialBias;
    let basic = input.lastIndexOf(delimiter);
    if (basic < 0) {
      basic = 0;
    }
    for (let j = 0;j < basic; ++j) {
      if (input.charCodeAt(j) >= 128) {
        error3("not-basic");
      }
      output.push(input.charCodeAt(j));
    }
    for (let index = basic > 0 ? basic + 1 : 0;index < inputLength; ) {
      const oldi = i;
      for (let w = 1, k = base;; k += base) {
        if (index >= inputLength) {
          error3("invalid-input");
        }
        const digit = basicToDigit(input.charCodeAt(index++));
        if (digit >= base) {
          error3("invalid-input");
        }
        if (digit > floor((maxInt - i) / w)) {
          error3("overflow");
        }
        i += digit * w;
        const t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
        if (digit < t) {
          break;
        }
        const baseMinusT = base - t;
        if (w > floor(maxInt / baseMinusT)) {
          error3("overflow");
        }
        w *= baseMinusT;
      }
      const out = output.length + 1;
      bias = adapt(i - oldi, out, oldi == 0);
      if (floor(i / out) > maxInt - n) {
        error3("overflow");
      }
      n += floor(i / out);
      i %= out;
      output.splice(i++, 0, n);
    }
    return String.fromCodePoint(...output);
  };
  var encode = function(input) {
    const output = [];
    input = ucs2decode(input);
    const inputLength = input.length;
    let n = initialN;
    let delta = 0;
    let bias = initialBias;
    for (const currentValue of input) {
      if (currentValue < 128) {
        output.push(stringFromCharCode(currentValue));
      }
    }
    const basicLength = output.length;
    let handledCPCount = basicLength;
    if (basicLength) {
      output.push(delimiter);
    }
    while (handledCPCount < inputLength) {
      let m = maxInt;
      for (const currentValue of input) {
        if (currentValue >= n && currentValue < m) {
          m = currentValue;
        }
      }
      const handledCPCountPlusOne = handledCPCount + 1;
      if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
        error3("overflow");
      }
      delta += (m - n) * handledCPCountPlusOne;
      n = m;
      for (const currentValue of input) {
        if (currentValue < n && ++delta > maxInt) {
          error3("overflow");
        }
        if (currentValue === n) {
          let q = delta;
          for (let k = base;; k += base) {
            const t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
            if (q < t) {
              break;
            }
            const qMinusT = q - t;
            const baseMinusT = base - t;
            output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
            q = floor(qMinusT / baseMinusT);
          }
          output.push(stringFromCharCode(digitToBasic(q, 0)));
          bias = adapt(delta, handledCPCountPlusOne, handledCPCount === basicLength);
          delta = 0;
          ++handledCPCount;
        }
      }
      ++delta;
      ++n;
    }
    return output.join("");
  };
  var toUnicode = function(input) {
    return mapDomain(input, function(string) {
      return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
    });
  };
  var toASCII = function(input) {
    return mapDomain(input, function(string) {
      return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
    });
  };
  var punycode = {
    version: "2.3.1",
    ucs2: {
      decode: ucs2decode,
      encode: ucs2encode
    },
    decode,
    encode,
    toASCII,
    toUnicode
  };
  module.exports = punycode;
});

// node_modules/tr46/lib/regexes.js
var require_regexes = __commonJS((exports, module) => {
  var combiningMarks = /[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CF3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u180F\u1885\u1886\u18A9\u1920-\u192B\u1930-\u193B\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\u{101FD}\u{102E0}\u{10376}-\u{1037A}\u{10A01}-\u{10A03}\u{10A05}\u{10A06}\u{10A0C}-\u{10A0F}\u{10A38}-\u{10A3A}\u{10A3F}\u{10AE5}\u{10AE6}\u{10D24}-\u{10D27}\u{10EAB}\u{10EAC}\u{10EFD}-\u{10EFF}\u{10F46}-\u{10F50}\u{10F82}-\u{10F85}\u{11000}-\u{11002}\u{11038}-\u{11046}\u{11070}\u{11073}\u{11074}\u{1107F}-\u{11082}\u{110B0}-\u{110BA}\u{110C2}\u{11100}-\u{11102}\u{11127}-\u{11134}\u{11145}\u{11146}\u{11173}\u{11180}-\u{11182}\u{111B3}-\u{111C0}\u{111C9}-\u{111CC}\u{111CE}\u{111CF}\u{1122C}-\u{11237}\u{1123E}\u{11241}\u{112DF}-\u{112EA}\u{11300}-\u{11303}\u{1133B}\u{1133C}\u{1133E}-\u{11344}\u{11347}\u{11348}\u{1134B}-\u{1134D}\u{11357}\u{11362}\u{11363}\u{11366}-\u{1136C}\u{11370}-\u{11374}\u{11435}-\u{11446}\u{1145E}\u{114B0}-\u{114C3}\u{115AF}-\u{115B5}\u{115B8}-\u{115C0}\u{115DC}\u{115DD}\u{11630}-\u{11640}\u{116AB}-\u{116B7}\u{1171D}-\u{1172B}\u{1182C}-\u{1183A}\u{11930}-\u{11935}\u{11937}\u{11938}\u{1193B}-\u{1193E}\u{11940}\u{11942}\u{11943}\u{119D1}-\u{119D7}\u{119DA}-\u{119E0}\u{119E4}\u{11A01}-\u{11A0A}\u{11A33}-\u{11A39}\u{11A3B}-\u{11A3E}\u{11A47}\u{11A51}-\u{11A5B}\u{11A8A}-\u{11A99}\u{11C2F}-\u{11C36}\u{11C38}-\u{11C3F}\u{11C92}-\u{11CA7}\u{11CA9}-\u{11CB6}\u{11D31}-\u{11D36}\u{11D3A}\u{11D3C}\u{11D3D}\u{11D3F}-\u{11D45}\u{11D47}\u{11D8A}-\u{11D8E}\u{11D90}\u{11D91}\u{11D93}-\u{11D97}\u{11EF3}-\u{11EF6}\u{11F00}\u{11F01}\u{11F03}\u{11F34}-\u{11F3A}\u{11F3E}-\u{11F42}\u{13440}\u{13447}-\u{13455}\u{16AF0}-\u{16AF4}\u{16B30}-\u{16B36}\u{16F4F}\u{16F51}-\u{16F87}\u{16F8F}-\u{16F92}\u{16FE4}\u{16FF0}\u{16FF1}\u{1BC9D}\u{1BC9E}\u{1CF00}-\u{1CF2D}\u{1CF30}-\u{1CF46}\u{1D165}-\u{1D169}\u{1D16D}-\u{1D172}\u{1D17B}-\u{1D182}\u{1D185}-\u{1D18B}\u{1D1AA}-\u{1D1AD}\u{1D242}-\u{1D244}\u{1DA00}-\u{1DA36}\u{1DA3B}-\u{1DA6C}\u{1DA75}\u{1DA84}\u{1DA9B}-\u{1DA9F}\u{1DAA1}-\u{1DAAF}\u{1E000}-\u{1E006}\u{1E008}-\u{1E018}\u{1E01B}-\u{1E021}\u{1E023}\u{1E024}\u{1E026}-\u{1E02A}\u{1E08F}\u{1E130}-\u{1E136}\u{1E2AE}\u{1E2EC}-\u{1E2EF}\u{1E4EC}-\u{1E4EF}\u{1E8D0}-\u{1E8D6}\u{1E944}-\u{1E94A}\u{E0100}-\u{E01EF}]/u;
  var combiningClassVirama = /[\u094D\u09CD\u0A4D\u0ACD\u0B4D\u0BCD\u0C4D\u0CCD\u0D3B\u0D3C\u0D4D\u0DCA\u0E3A\u0EBA\u0F84\u1039\u103A\u1714\u1715\u1734\u17D2\u1A60\u1B44\u1BAA\u1BAB\u1BF2\u1BF3\u2D7F\uA806\uA82C\uA8C4\uA953\uA9C0\uAAF6\uABED\u{10A3F}\u{11046}\u{11070}\u{1107F}\u{110B9}\u{11133}\u{11134}\u{111C0}\u{11235}\u{112EA}\u{1134D}\u{11442}\u{114C2}\u{115BF}\u{1163F}\u{116B6}\u{1172B}\u{11839}\u{1193D}\u{1193E}\u{119E0}\u{11A34}\u{11A47}\u{11A99}\u{11C3F}\u{11D44}\u{11D45}\u{11D97}\u{11F41}\u{11F42}]/u;
  var validZWNJ = /[\u0620\u0626\u0628\u062A-\u062E\u0633-\u063F\u0641-\u0647\u0649\u064A\u066E\u066F\u0678-\u0687\u069A-\u06BF\u06C1\u06C2\u06CC\u06CE\u06D0\u06D1\u06FA-\u06FC\u06FF\u0712-\u0714\u071A-\u071D\u071F-\u0727\u0729\u072B\u072D\u072E\u074E-\u0758\u075C-\u076A\u076D-\u0770\u0772\u0775-\u0777\u077A-\u077F\u07CA-\u07EA\u0841-\u0845\u0848\u084A-\u0853\u0855\u0860\u0862-\u0865\u0868\u0886\u0889-\u088D\u08A0-\u08A9\u08AF\u08B0\u08B3-\u08B8\u08BA-\u08C8\u1807\u1820-\u1878\u1887-\u18A8\u18AA\uA840-\uA872\u{10AC0}-\u{10AC4}\u{10ACD}\u{10AD3}-\u{10ADC}\u{10ADE}-\u{10AE0}\u{10AEB}-\u{10AEE}\u{10B80}\u{10B82}\u{10B86}-\u{10B88}\u{10B8A}\u{10B8B}\u{10B8D}\u{10B90}\u{10BAD}\u{10BAE}\u{10D00}-\u{10D21}\u{10D23}\u{10F30}-\u{10F32}\u{10F34}-\u{10F44}\u{10F51}-\u{10F53}\u{10F70}-\u{10F73}\u{10F76}-\u{10F81}\u{10FB0}\u{10FB2}\u{10FB3}\u{10FB8}\u{10FBB}\u{10FBC}\u{10FBE}\u{10FBF}\u{10FC1}\u{10FC4}\u{10FCA}\u{10FCB}\u{1E900}-\u{1E943}][\xAD\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u061C\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u070F\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B55\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C04\u0C3C\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC6\u0CCC\u0CCD\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0D81\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732\u1733\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u180F\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ACE\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DFF\u200B\u200E\u200F\u202A-\u202E\u2060-\u2064\u206A-\u206F\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA82C\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFEFF\uFFF9-\uFFFB\u{101FD}\u{102E0}\u{10376}-\u{1037A}\u{10A01}-\u{10A03}\u{10A05}\u{10A06}\u{10A0C}-\u{10A0F}\u{10A38}-\u{10A3A}\u{10A3F}\u{10AE5}\u{10AE6}\u{10D24}-\u{10D27}\u{10EAB}\u{10EAC}\u{10EFD}-\u{10EFF}\u{10F46}-\u{10F50}\u{10F82}-\u{10F85}\u{11001}\u{11038}-\u{11046}\u{11070}\u{11073}\u{11074}\u{1107F}-\u{11081}\u{110B3}-\u{110B6}\u{110B9}\u{110BA}\u{110C2}\u{11100}-\u{11102}\u{11127}-\u{1112B}\u{1112D}-\u{11134}\u{11173}\u{11180}\u{11181}\u{111B6}-\u{111BE}\u{111C9}-\u{111CC}\u{111CF}\u{1122F}-\u{11231}\u{11234}\u{11236}\u{11237}\u{1123E}\u{11241}\u{112DF}\u{112E3}-\u{112EA}\u{11300}\u{11301}\u{1133B}\u{1133C}\u{11340}\u{11366}-\u{1136C}\u{11370}-\u{11374}\u{11438}-\u{1143F}\u{11442}-\u{11444}\u{11446}\u{1145E}\u{114B3}-\u{114B8}\u{114BA}\u{114BF}\u{114C0}\u{114C2}\u{114C3}\u{115B2}-\u{115B5}\u{115BC}\u{115BD}\u{115BF}\u{115C0}\u{115DC}\u{115DD}\u{11633}-\u{1163A}\u{1163D}\u{1163F}\u{11640}\u{116AB}\u{116AD}\u{116B0}-\u{116B5}\u{116B7}\u{1171D}-\u{1171F}\u{11722}-\u{11725}\u{11727}-\u{1172B}\u{1182F}-\u{11837}\u{11839}\u{1183A}\u{1193B}\u{1193C}\u{1193E}\u{11943}\u{119D4}-\u{119D7}\u{119DA}\u{119DB}\u{119E0}\u{11A01}-\u{11A0A}\u{11A33}-\u{11A38}\u{11A3B}-\u{11A3E}\u{11A47}\u{11A51}-\u{11A56}\u{11A59}-\u{11A5B}\u{11A8A}-\u{11A96}\u{11A98}\u{11A99}\u{11C30}-\u{11C36}\u{11C38}-\u{11C3D}\u{11C3F}\u{11C92}-\u{11CA7}\u{11CAA}-\u{11CB0}\u{11CB2}\u{11CB3}\u{11CB5}\u{11CB6}\u{11D31}-\u{11D36}\u{11D3A}\u{11D3C}\u{11D3D}\u{11D3F}-\u{11D45}\u{11D47}\u{11D90}\u{11D91}\u{11D95}\u{11D97}\u{11EF3}\u{11EF4}\u{11F00}\u{11F01}\u{11F36}-\u{11F3A}\u{11F40}\u{11F42}\u{13430}-\u{13440}\u{13447}-\u{13455}\u{16AF0}-\u{16AF4}\u{16B30}-\u{16B36}\u{16F4F}\u{16F8F}-\u{16F92}\u{16FE4}\u{1BC9D}\u{1BC9E}\u{1BCA0}-\u{1BCA3}\u{1CF00}-\u{1CF2D}\u{1CF30}-\u{1CF46}\u{1D167}-\u{1D169}\u{1D173}-\u{1D182}\u{1D185}-\u{1D18B}\u{1D1AA}-\u{1D1AD}\u{1D242}-\u{1D244}\u{1DA00}-\u{1DA36}\u{1DA3B}-\u{1DA6C}\u{1DA75}\u{1DA84}\u{1DA9B}-\u{1DA9F}\u{1DAA1}-\u{1DAAF}\u{1E000}-\u{1E006}\u{1E008}-\u{1E018}\u{1E01B}-\u{1E021}\u{1E023}\u{1E024}\u{1E026}-\u{1E02A}\u{1E08F}\u{1E130}-\u{1E136}\u{1E2AE}\u{1E2EC}-\u{1E2EF}\u{1E4EC}-\u{1E4EF}\u{1E8D0}-\u{1E8D6}\u{1E944}-\u{1E94B}\u{E0001}\u{E0020}-\u{E007F}\u{E0100}-\u{E01EF}]*\u200C[\xAD\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u061C\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u070F\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B55\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C04\u0C3C\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC6\u0CCC\u0CCD\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0D81\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732\u1733\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u180F\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ACE\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DFF\u200B\u200E\u200F\u202A-\u202E\u2060-\u2064\u206A-\u206F\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA82C\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFEFF\uFFF9-\uFFFB\u{101FD}\u{102E0}\u{10376}-\u{1037A}\u{10A01}-\u{10A03}\u{10A05}\u{10A06}\u{10A0C}-\u{10A0F}\u{10A38}-\u{10A3A}\u{10A3F}\u{10AE5}\u{10AE6}\u{10D24}-\u{10D27}\u{10EAB}\u{10EAC}\u{10EFD}-\u{10EFF}\u{10F46}-\u{10F50}\u{10F82}-\u{10F85}\u{11001}\u{11038}-\u{11046}\u{11070}\u{11073}\u{11074}\u{1107F}-\u{11081}\u{110B3}-\u{110B6}\u{110B9}\u{110BA}\u{110C2}\u{11100}-\u{11102}\u{11127}-\u{1112B}\u{1112D}-\u{11134}\u{11173}\u{11180}\u{11181}\u{111B6}-\u{111BE}\u{111C9}-\u{111CC}\u{111CF}\u{1122F}-\u{11231}\u{11234}\u{11236}\u{11237}\u{1123E}\u{11241}\u{112DF}\u{112E3}-\u{112EA}\u{11300}\u{11301}\u{1133B}\u{1133C}\u{11340}\u{11366}-\u{1136C}\u{11370}-\u{11374}\u{11438}-\u{1143F}\u{11442}-\u{11444}\u{11446}\u{1145E}\u{114B3}-\u{114B8}\u{114BA}\u{114BF}\u{114C0}\u{114C2}\u{114C3}\u{115B2}-\u{115B5}\u{115BC}\u{115BD}\u{115BF}\u{115C0}\u{115DC}\u{115DD}\u{11633}-\u{1163A}\u{1163D}\u{1163F}\u{11640}\u{116AB}\u{116AD}\u{116B0}-\u{116B5}\u{116B7}\u{1171D}-\u{1171F}\u{11722}-\u{11725}\u{11727}-\u{1172B}\u{1182F}-\u{11837}\u{11839}\u{1183A}\u{1193B}\u{1193C}\u{1193E}\u{11943}\u{119D4}-\u{119D7}\u{119DA}\u{119DB}\u{119E0}\u{11A01}-\u{11A0A}\u{11A33}-\u{11A38}\u{11A3B}-\u{11A3E}\u{11A47}\u{11A51}-\u{11A56}\u{11A59}-\u{11A5B}\u{11A8A}-\u{11A96}\u{11A98}\u{11A99}\u{11C30}-\u{11C36}\u{11C38}-\u{11C3D}\u{11C3F}\u{11C92}-\u{11CA7}\u{11CAA}-\u{11CB0}\u{11CB2}\u{11CB3}\u{11CB5}\u{11CB6}\u{11D31}-\u{11D36}\u{11D3A}\u{11D3C}\u{11D3D}\u{11D3F}-\u{11D45}\u{11D47}\u{11D90}\u{11D91}\u{11D95}\u{11D97}\u{11EF3}\u{11EF4}\u{11F00}\u{11F01}\u{11F36}-\u{11F3A}\u{11F40}\u{11F42}\u{13430}-\u{13440}\u{13447}-\u{13455}\u{16AF0}-\u{16AF4}\u{16B30}-\u{16B36}\u{16F4F}\u{16F8F}-\u{16F92}\u{16FE4}\u{1BC9D}\u{1BC9E}\u{1BCA0}-\u{1BCA3}\u{1CF00}-\u{1CF2D}\u{1CF30}-\u{1CF46}\u{1D167}-\u{1D169}\u{1D173}-\u{1D182}\u{1D185}-\u{1D18B}\u{1D1AA}-\u{1D1AD}\u{1D242}-\u{1D244}\u{1DA00}-\u{1DA36}\u{1DA3B}-\u{1DA6C}\u{1DA75}\u{1DA84}\u{1DA9B}-\u{1DA9F}\u{1DAA1}-\u{1DAAF}\u{1E000}-\u{1E006}\u{1E008}-\u{1E018}\u{1E01B}-\u{1E021}\u{1E023}\u{1E024}\u{1E026}-\u{1E02A}\u{1E08F}\u{1E130}-\u{1E136}\u{1E2AE}\u{1E2EC}-\u{1E2EF}\u{1E4EC}-\u{1E4EF}\u{1E8D0}-\u{1E8D6}\u{1E944}-\u{1E94B}\u{E0001}\u{E0020}-\u{E007F}\u{E0100}-\u{E01EF}]*[\u0620\u0622-\u063F\u0641-\u064A\u066E\u066F\u0671-\u0673\u0675-\u06D3\u06D5\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u077F\u07CA-\u07EA\u0840-\u0858\u0860\u0862-\u0865\u0867-\u086A\u0870-\u0882\u0886\u0889-\u088E\u08A0-\u08AC\u08AE-\u08C8\u1807\u1820-\u1878\u1887-\u18A8\u18AA\uA840-\uA871\u{10AC0}-\u{10AC5}\u{10AC7}\u{10AC9}\u{10ACA}\u{10ACE}-\u{10AD6}\u{10AD8}-\u{10AE1}\u{10AE4}\u{10AEB}-\u{10AEF}\u{10B80}-\u{10B91}\u{10BA9}-\u{10BAE}\u{10D01}-\u{10D23}\u{10F30}-\u{10F44}\u{10F51}-\u{10F54}\u{10F70}-\u{10F81}\u{10FB0}\u{10FB2}-\u{10FB6}\u{10FB8}-\u{10FBF}\u{10FC1}-\u{10FC4}\u{10FC9}\u{10FCA}\u{1E900}-\u{1E943}]/u;
  var bidiDomain = /[\u05BE\u05C0\u05C3\u05C6\u05D0-\u05EA\u05EF-\u05F4\u0600-\u0605\u0608\u060B\u060D\u061B-\u064A\u0660-\u0669\u066B-\u066F\u0671-\u06D5\u06DD\u06E5\u06E6\u06EE\u06EF\u06FA-\u070D\u070F\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07C0-\u07EA\u07F4\u07F5\u07FA\u07FE-\u0815\u081A\u0824\u0828\u0830-\u083E\u0840-\u0858\u085E\u0860-\u086A\u0870-\u088E\u0890\u0891\u08A0-\u08C9\u08E2\u200F\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBC2\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFC\uFE70-\uFE74\uFE76-\uFEFC\u{10800}-\u{10805}\u{10808}\u{1080A}-\u{10835}\u{10837}\u{10838}\u{1083C}\u{1083F}-\u{10855}\u{10857}-\u{1089E}\u{108A7}-\u{108AF}\u{108E0}-\u{108F2}\u{108F4}\u{108F5}\u{108FB}-\u{1091B}\u{10920}-\u{10939}\u{1093F}\u{10980}-\u{109B7}\u{109BC}-\u{109CF}\u{109D2}-\u{10A00}\u{10A10}-\u{10A13}\u{10A15}-\u{10A17}\u{10A19}-\u{10A35}\u{10A40}-\u{10A48}\u{10A50}-\u{10A58}\u{10A60}-\u{10A9F}\u{10AC0}-\u{10AE4}\u{10AEB}-\u{10AF6}\u{10B00}-\u{10B35}\u{10B40}-\u{10B55}\u{10B58}-\u{10B72}\u{10B78}-\u{10B91}\u{10B99}-\u{10B9C}\u{10BA9}-\u{10BAF}\u{10C00}-\u{10C48}\u{10C80}-\u{10CB2}\u{10CC0}-\u{10CF2}\u{10CFA}-\u{10D23}\u{10D30}-\u{10D39}\u{10E60}-\u{10E7E}\u{10E80}-\u{10EA9}\u{10EAD}\u{10EB0}\u{10EB1}\u{10F00}-\u{10F27}\u{10F30}-\u{10F45}\u{10F51}-\u{10F59}\u{10F70}-\u{10F81}\u{10F86}-\u{10F89}\u{10FB0}-\u{10FCB}\u{10FE0}-\u{10FF6}\u{1E800}-\u{1E8C4}\u{1E8C7}-\u{1E8CF}\u{1E900}-\u{1E943}\u{1E94B}\u{1E950}-\u{1E959}\u{1E95E}\u{1E95F}\u{1EC71}-\u{1ECB4}\u{1ED01}-\u{1ED3D}\u{1EE00}-\u{1EE03}\u{1EE05}-\u{1EE1F}\u{1EE21}\u{1EE22}\u{1EE24}\u{1EE27}\u{1EE29}-\u{1EE32}\u{1EE34}-\u{1EE37}\u{1EE39}\u{1EE3B}\u{1EE42}\u{1EE47}\u{1EE49}\u{1EE4B}\u{1EE4D}-\u{1EE4F}\u{1EE51}\u{1EE52}\u{1EE54}\u{1EE57}\u{1EE59}\u{1EE5B}\u{1EE5D}\u{1EE5F}\u{1EE61}\u{1EE62}\u{1EE64}\u{1EE67}-\u{1EE6A}\u{1EE6C}-\u{1EE72}\u{1EE74}-\u{1EE77}\u{1EE79}-\u{1EE7C}\u{1EE7E}\u{1EE80}-\u{1EE89}\u{1EE8B}-\u{1EE9B}\u{1EEA1}-\u{1EEA3}\u{1EEA5}-\u{1EEA9}\u{1EEAB}-\u{1EEBB}]/u;
  var bidiS1LTR = /[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02B8\u02BB-\u02C1\u02D0\u02D1\u02E0-\u02E4\u02EE\u0370-\u0373\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0482\u048A-\u052F\u0531-\u0556\u0559-\u0589\u0903-\u0939\u093B\u093D-\u0940\u0949-\u094C\u094E-\u0950\u0958-\u0961\u0964-\u0980\u0982\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD-\u09C0\u09C7\u09C8\u09CB\u09CC\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E1\u09E6-\u09F1\u09F4-\u09FA\u09FC\u09FD\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3E-\u0A40\u0A59-\u0A5C\u0A5E\u0A66-\u0A6F\u0A72-\u0A74\u0A76\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD-\u0AC0\u0AC9\u0ACB\u0ACC\u0AD0\u0AE0\u0AE1\u0AE6-\u0AF0\u0AF9\u0B02\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B3E\u0B40\u0B47\u0B48\u0B4B\u0B4C\u0B57\u0B5C\u0B5D\u0B5F-\u0B61\u0B66-\u0B77\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE\u0BBF\u0BC1\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD0\u0BD7\u0BE6-\u0BF2\u0C01-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C41-\u0C44\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C66-\u0C6F\u0C77\u0C7F\u0C80\u0C82-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD-\u0CC4\u0CC6-\u0CC8\u0CCA\u0CCB\u0CD5\u0CD6\u0CDD\u0CDE\u0CE0\u0CE1\u0CE6-\u0CEF\u0CF1-\u0CF3\u0D02-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D4E\u0D4F\u0D54-\u0D61\u0D66-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCF-\u0DD1\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2-\u0DF4\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E4F-\u0E5B\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00-\u0F17\u0F1A-\u0F34\u0F36\u0F38\u0F3E-\u0F47\u0F49-\u0F6C\u0F7F\u0F85\u0F88-\u0F8C\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE-\u0FDA\u1000-\u102C\u1031\u1038\u103B\u103C\u103F-\u1057\u105A-\u105D\u1061-\u1070\u1075-\u1081\u1083\u1084\u1087-\u108C\u108E-\u109C\u109E-\u10C5\u10C7\u10CD\u10D0-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1360-\u137C\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u167F\u1681-\u169A\u16A0-\u16F8\u1700-\u1711\u1715\u171F-\u1731\u1734-\u1736\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17B6\u17BE-\u17C5\u17C7\u17C8\u17D4-\u17DA\u17DC\u17E0-\u17E9\u1810-\u1819\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1923-\u1926\u1929-\u192B\u1930\u1931\u1933-\u1938\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A16\u1A19\u1A1A\u1A1E-\u1A55\u1A57\u1A61\u1A63\u1A64\u1A6D-\u1A72\u1A80-\u1A89\u1A90-\u1A99\u1AA0-\u1AAD\u1B04-\u1B33\u1B35\u1B3B\u1B3D-\u1B41\u1B43-\u1B4C\u1B50-\u1B6A\u1B74-\u1B7E\u1B82-\u1BA1\u1BA6\u1BA7\u1BAA\u1BAE-\u1BE5\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2\u1BF3\u1BFC-\u1C2B\u1C34\u1C35\u1C3B-\u1C49\u1C4D-\u1C88\u1C90-\u1CBA\u1CBD-\u1CC7\u1CD3\u1CE1\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5-\u1CF7\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200E\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u214F\u2160-\u2188\u2336-\u237A\u2395\u249C-\u24E9\u26AC\u2800-\u28FF\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D70\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u302E\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u3190-\u31BF\u31F0-\u321C\u3220-\u324F\u3260-\u327B\u327F-\u32B0\u32C0-\u32CB\u32D0-\u3376\u337B-\u33DD\u33E0-\u33FE\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA60C\uA610-\uA62B\uA640-\uA66E\uA680-\uA69D\uA6A0-\uA6EF\uA6F2-\uA6F7\uA722-\uA787\uA789-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA824\uA827\uA830-\uA837\uA840-\uA873\uA880-\uA8C3\uA8CE-\uA8D9\uA8F2-\uA8FE\uA900-\uA925\uA92E-\uA946\uA952\uA953\uA95F-\uA97C\uA983-\uA9B2\uA9B4\uA9B5\uA9BA\uA9BB\uA9BE-\uA9CD\uA9CF-\uA9D9\uA9DE-\uA9E4\uA9E6-\uA9FE\uAA00-\uAA28\uAA2F\uAA30\uAA33\uAA34\uAA40-\uAA42\uAA44-\uAA4B\uAA4D\uAA50-\uAA59\uAA5C-\uAA7B\uAA7D-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAAEB\uAAEE-\uAAF5\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB69\uAB70-\uABE4\uABE6\uABE7\uABE9-\uABEC\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uD800-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC\u{10000}-\u{1000B}\u{1000D}-\u{10026}\u{10028}-\u{1003A}\u{1003C}\u{1003D}\u{1003F}-\u{1004D}\u{10050}-\u{1005D}\u{10080}-\u{100FA}\u{10100}\u{10102}\u{10107}-\u{10133}\u{10137}-\u{1013F}\u{1018D}\u{1018E}\u{101D0}-\u{101FC}\u{10280}-\u{1029C}\u{102A0}-\u{102D0}\u{10300}-\u{10323}\u{1032D}-\u{1034A}\u{10350}-\u{10375}\u{10380}-\u{1039D}\u{1039F}-\u{103C3}\u{103C8}-\u{103D5}\u{10400}-\u{1049D}\u{104A0}-\u{104A9}\u{104B0}-\u{104D3}\u{104D8}-\u{104FB}\u{10500}-\u{10527}\u{10530}-\u{10563}\u{1056F}-\u{1057A}\u{1057C}-\u{1058A}\u{1058C}-\u{10592}\u{10594}\u{10595}\u{10597}-\u{105A1}\u{105A3}-\u{105B1}\u{105B3}-\u{105B9}\u{105BB}\u{105BC}\u{10600}-\u{10736}\u{10740}-\u{10755}\u{10760}-\u{10767}\u{10780}-\u{10785}\u{10787}-\u{107B0}\u{107B2}-\u{107BA}\u{11000}\u{11002}-\u{11037}\u{11047}-\u{1104D}\u{11066}-\u{1106F}\u{11071}\u{11072}\u{11075}\u{11082}-\u{110B2}\u{110B7}\u{110B8}\u{110BB}-\u{110C1}\u{110CD}\u{110D0}-\u{110E8}\u{110F0}-\u{110F9}\u{11103}-\u{11126}\u{1112C}\u{11136}-\u{11147}\u{11150}-\u{11172}\u{11174}-\u{11176}\u{11182}-\u{111B5}\u{111BF}-\u{111C8}\u{111CD}\u{111CE}\u{111D0}-\u{111DF}\u{111E1}-\u{111F4}\u{11200}-\u{11211}\u{11213}-\u{1122E}\u{11232}\u{11233}\u{11235}\u{11238}-\u{1123D}\u{1123F}\u{11240}\u{11280}-\u{11286}\u{11288}\u{1128A}-\u{1128D}\u{1128F}-\u{1129D}\u{1129F}-\u{112A9}\u{112B0}-\u{112DE}\u{112E0}-\u{112E2}\u{112F0}-\u{112F9}\u{11302}\u{11303}\u{11305}-\u{1130C}\u{1130F}\u{11310}\u{11313}-\u{11328}\u{1132A}-\u{11330}\u{11332}\u{11333}\u{11335}-\u{11339}\u{1133D}-\u{1133F}\u{11341}-\u{11344}\u{11347}\u{11348}\u{1134B}-\u{1134D}\u{11350}\u{11357}\u{1135D}-\u{11363}\u{11400}-\u{11437}\u{11440}\u{11441}\u{11445}\u{11447}-\u{1145B}\u{1145D}\u{1145F}-\u{11461}\u{11480}-\u{114B2}\u{114B9}\u{114BB}-\u{114BE}\u{114C1}\u{114C4}-\u{114C7}\u{114D0}-\u{114D9}\u{11580}-\u{115B1}\u{115B8}-\u{115BB}\u{115BE}\u{115C1}-\u{115DB}\u{11600}-\u{11632}\u{1163B}\u{1163C}\u{1163E}\u{11641}-\u{11644}\u{11650}-\u{11659}\u{11680}-\u{116AA}\u{116AC}\u{116AE}\u{116AF}\u{116B6}\u{116B8}\u{116B9}\u{116C0}-\u{116C9}\u{11700}-\u{1171A}\u{11720}\u{11721}\u{11726}\u{11730}-\u{11746}\u{11800}-\u{1182E}\u{11838}\u{1183B}\u{118A0}-\u{118F2}\u{118FF}-\u{11906}\u{11909}\u{1190C}-\u{11913}\u{11915}\u{11916}\u{11918}-\u{11935}\u{11937}\u{11938}\u{1193D}\u{1193F}-\u{11942}\u{11944}-\u{11946}\u{11950}-\u{11959}\u{119A0}-\u{119A7}\u{119AA}-\u{119D3}\u{119DC}-\u{119DF}\u{119E1}-\u{119E4}\u{11A00}\u{11A07}\u{11A08}\u{11A0B}-\u{11A32}\u{11A39}\u{11A3A}\u{11A3F}-\u{11A46}\u{11A50}\u{11A57}\u{11A58}\u{11A5C}-\u{11A89}\u{11A97}\u{11A9A}-\u{11AA2}\u{11AB0}-\u{11AF8}\u{11B00}-\u{11B09}\u{11C00}-\u{11C08}\u{11C0A}-\u{11C2F}\u{11C3E}-\u{11C45}\u{11C50}-\u{11C6C}\u{11C70}-\u{11C8F}\u{11CA9}\u{11CB1}\u{11CB4}\u{11D00}-\u{11D06}\u{11D08}\u{11D09}\u{11D0B}-\u{11D30}\u{11D46}\u{11D50}-\u{11D59}\u{11D60}-\u{11D65}\u{11D67}\u{11D68}\u{11D6A}-\u{11D8E}\u{11D93}\u{11D94}\u{11D96}\u{11D98}\u{11DA0}-\u{11DA9}\u{11EE0}-\u{11EF2}\u{11EF5}-\u{11EF8}\u{11F02}-\u{11F10}\u{11F12}-\u{11F35}\u{11F3E}\u{11F3F}\u{11F41}\u{11F43}-\u{11F59}\u{11FB0}\u{11FC0}-\u{11FD4}\u{11FFF}-\u{12399}\u{12400}-\u{1246E}\u{12470}-\u{12474}\u{12480}-\u{12543}\u{12F90}-\u{12FF2}\u{13000}-\u{1343F}\u{13441}-\u{13446}\u{14400}-\u{14646}\u{16800}-\u{16A38}\u{16A40}-\u{16A5E}\u{16A60}-\u{16A69}\u{16A6E}-\u{16ABE}\u{16AC0}-\u{16AC9}\u{16AD0}-\u{16AED}\u{16AF5}\u{16B00}-\u{16B2F}\u{16B37}-\u{16B45}\u{16B50}-\u{16B59}\u{16B5B}-\u{16B61}\u{16B63}-\u{16B77}\u{16B7D}-\u{16B8F}\u{16E40}-\u{16E9A}\u{16F00}-\u{16F4A}\u{16F50}-\u{16F87}\u{16F93}-\u{16F9F}\u{16FE0}\u{16FE1}\u{16FE3}\u{16FF0}\u{16FF1}\u{17000}-\u{187F7}\u{18800}-\u{18CD5}\u{18D00}-\u{18D08}\u{1AFF0}-\u{1AFF3}\u{1AFF5}-\u{1AFFB}\u{1AFFD}\u{1AFFE}\u{1B000}-\u{1B122}\u{1B132}\u{1B150}-\u{1B152}\u{1B155}\u{1B164}-\u{1B167}\u{1B170}-\u{1B2FB}\u{1BC00}-\u{1BC6A}\u{1BC70}-\u{1BC7C}\u{1BC80}-\u{1BC88}\u{1BC90}-\u{1BC99}\u{1BC9C}\u{1BC9F}\u{1CF50}-\u{1CFC3}\u{1D000}-\u{1D0F5}\u{1D100}-\u{1D126}\u{1D129}-\u{1D166}\u{1D16A}-\u{1D172}\u{1D183}\u{1D184}\u{1D18C}-\u{1D1A9}\u{1D1AE}-\u{1D1E8}\u{1D2C0}-\u{1D2D3}\u{1D2E0}-\u{1D2F3}\u{1D360}-\u{1D378}\u{1D400}-\u{1D454}\u{1D456}-\u{1D49C}\u{1D49E}\u{1D49F}\u{1D4A2}\u{1D4A5}\u{1D4A6}\u{1D4A9}-\u{1D4AC}\u{1D4AE}-\u{1D4B9}\u{1D4BB}\u{1D4BD}-\u{1D4C3}\u{1D4C5}-\u{1D505}\u{1D507}-\u{1D50A}\u{1D50D}-\u{1D514}\u{1D516}-\u{1D51C}\u{1D51E}-\u{1D539}\u{1D53B}-\u{1D53E}\u{1D540}-\u{1D544}\u{1D546}\u{1D54A}-\u{1D550}\u{1D552}-\u{1D6A5}\u{1D6A8}-\u{1D6DA}\u{1D6DC}-\u{1D714}\u{1D716}-\u{1D74E}\u{1D750}-\u{1D788}\u{1D78A}-\u{1D7C2}\u{1D7C4}-\u{1D7CB}\u{1D800}-\u{1D9FF}\u{1DA37}-\u{1DA3A}\u{1DA6D}-\u{1DA74}\u{1DA76}-\u{1DA83}\u{1DA85}-\u{1DA8B}\u{1DF00}-\u{1DF1E}\u{1DF25}-\u{1DF2A}\u{1E030}-\u{1E06D}\u{1E100}-\u{1E12C}\u{1E137}-\u{1E13D}\u{1E140}-\u{1E149}\u{1E14E}\u{1E14F}\u{1E290}-\u{1E2AD}\u{1E2C0}-\u{1E2EB}\u{1E2F0}-\u{1E2F9}\u{1E4D0}-\u{1E4EB}\u{1E4F0}-\u{1E4F9}\u{1E7E0}-\u{1E7E6}\u{1E7E8}-\u{1E7EB}\u{1E7ED}\u{1E7EE}\u{1E7F0}-\u{1E7FE}\u{1F110}-\u{1F12E}\u{1F130}-\u{1F169}\u{1F170}-\u{1F1AC}\u{1F1E6}-\u{1F202}\u{1F210}-\u{1F23B}\u{1F240}-\u{1F248}\u{1F250}\u{1F251}\u{20000}-\u{2A6DF}\u{2A700}-\u{2B739}\u{2B740}-\u{2B81D}\u{2B820}-\u{2CEA1}\u{2CEB0}-\u{2EBE0}\u{2EBF0}-\u{2EE5D}\u{2F800}-\u{2FA1D}\u{30000}-\u{3134A}\u{31350}-\u{323AF}\u{F0000}-\u{FFFFD}\u{100000}-\u{10FFFD}]/u;
  var bidiS1RTL = /[\u05BE\u05C0\u05C3\u05C6\u05D0-\u05EA\u05EF-\u05F4\u0608\u060B\u060D\u061B-\u064A\u066D-\u066F\u0671-\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u070D\u070F\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07C0-\u07EA\u07F4\u07F5\u07FA\u07FE-\u0815\u081A\u0824\u0828\u0830-\u083E\u0840-\u0858\u085E\u0860-\u086A\u0870-\u088E\u08A0-\u08C9\u200F\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBC2\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFC\uFE70-\uFE74\uFE76-\uFEFC\u{10800}-\u{10805}\u{10808}\u{1080A}-\u{10835}\u{10837}\u{10838}\u{1083C}\u{1083F}-\u{10855}\u{10857}-\u{1089E}\u{108A7}-\u{108AF}\u{108E0}-\u{108F2}\u{108F4}\u{108F5}\u{108FB}-\u{1091B}\u{10920}-\u{10939}\u{1093F}\u{10980}-\u{109B7}\u{109BC}-\u{109CF}\u{109D2}-\u{10A00}\u{10A10}-\u{10A13}\u{10A15}-\u{10A17}\u{10A19}-\u{10A35}\u{10A40}-\u{10A48}\u{10A50}-\u{10A58}\u{10A60}-\u{10A9F}\u{10AC0}-\u{10AE4}\u{10AEB}-\u{10AF6}\u{10B00}-\u{10B35}\u{10B40}-\u{10B55}\u{10B58}-\u{10B72}\u{10B78}-\u{10B91}\u{10B99}-\u{10B9C}\u{10BA9}-\u{10BAF}\u{10C00}-\u{10C48}\u{10C80}-\u{10CB2}\u{10CC0}-\u{10CF2}\u{10CFA}-\u{10D23}\u{10E80}-\u{10EA9}\u{10EAD}\u{10EB0}\u{10EB1}\u{10F00}-\u{10F27}\u{10F30}-\u{10F45}\u{10F51}-\u{10F59}\u{10F70}-\u{10F81}\u{10F86}-\u{10F89}\u{10FB0}-\u{10FCB}\u{10FE0}-\u{10FF6}\u{1E800}-\u{1E8C4}\u{1E8C7}-\u{1E8CF}\u{1E900}-\u{1E943}\u{1E94B}\u{1E950}-\u{1E959}\u{1E95E}\u{1E95F}\u{1EC71}-\u{1ECB4}\u{1ED01}-\u{1ED3D}\u{1EE00}-\u{1EE03}\u{1EE05}-\u{1EE1F}\u{1EE21}\u{1EE22}\u{1EE24}\u{1EE27}\u{1EE29}-\u{1EE32}\u{1EE34}-\u{1EE37}\u{1EE39}\u{1EE3B}\u{1EE42}\u{1EE47}\u{1EE49}\u{1EE4B}\u{1EE4D}-\u{1EE4F}\u{1EE51}\u{1EE52}\u{1EE54}\u{1EE57}\u{1EE59}\u{1EE5B}\u{1EE5D}\u{1EE5F}\u{1EE61}\u{1EE62}\u{1EE64}\u{1EE67}-\u{1EE6A}\u{1EE6C}-\u{1EE72}\u{1EE74}-\u{1EE77}\u{1EE79}-\u{1EE7C}\u{1EE7E}\u{1EE80}-\u{1EE89}\u{1EE8B}-\u{1EE9B}\u{1EEA1}-\u{1EEA3}\u{1EEA5}-\u{1EEA9}\u{1EEAB}-\u{1EEBB}]/u;
  var bidiS2 = /^[\0-\x08\x0E-\x1B!-@\[-`\{-\x84\x86-\xA9\xAB-\xB4\xB6-\xB9\xBB-\xBF\xD7\xF7\u02B9\u02BA\u02C2-\u02CF\u02D2-\u02DF\u02E5-\u02ED\u02EF-\u036F\u0374\u0375\u037E\u0384\u0385\u0387\u03F6\u0483-\u0489\u058A\u058D-\u058F\u0591-\u05C7\u05D0-\u05EA\u05EF-\u05F4\u0600-\u070D\u070F-\u074A\u074D-\u07B1\u07C0-\u07FA\u07FD-\u082D\u0830-\u083E\u0840-\u085B\u085E\u0860-\u086A\u0870-\u088E\u0890\u0891\u0898-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u09F2\u09F3\u09FB\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AF1\u0AFA-\u0AFF\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B55\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0BF3-\u0BFA\u0C00\u0C04\u0C3C\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C78-\u0C7E\u0C81\u0CBC\u0CCC\u0CCD\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0D81\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E3F\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0F18\u0F19\u0F35\u0F37\u0F39-\u0F3D\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1390-\u1399\u1400\u169B\u169C\u1712-\u1714\u1732\u1733\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DB\u17DD\u17F0-\u17F9\u1800-\u180F\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1940\u1944\u1945\u19DE-\u19FF\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ACE\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DFF\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u200B-\u200D\u200F-\u2027\u202F-\u205E\u2060-\u2064\u206A-\u2070\u2074-\u207E\u2080-\u208E\u20A0-\u20C0\u20D0-\u20F0\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u2150-\u215F\u2189-\u218B\u2190-\u2335\u237B-\u2394\u2396-\u2426\u2440-\u244A\u2460-\u249B\u24EA-\u26AB\u26AD-\u27FF\u2900-\u2B73\u2B76-\u2B95\u2B97-\u2BFF\u2CE5-\u2CEA\u2CEF-\u2CF1\u2CF9-\u2CFF\u2D7F\u2DE0-\u2E5D\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFF\u3001-\u3004\u3008-\u3020\u302A-\u302D\u3030\u3036\u3037\u303D-\u303F\u3099-\u309C\u30A0\u30FB\u31C0-\u31E3\u31EF\u321D\u321E\u3250-\u325F\u327C-\u327E\u32B1-\u32BF\u32CC-\u32CF\u3377-\u337A\u33DE\u33DF\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA60D-\uA60F\uA66F-\uA67F\uA69E\uA69F\uA6F0\uA6F1\uA700-\uA721\uA788\uA802\uA806\uA80B\uA825\uA826\uA828-\uA82C\uA838\uA839\uA874-\uA877\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uAB6A\uAB6B\uABE5\uABE8\uABED\uFB1D-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBC2\uFBD3-\uFD8F\uFD92-\uFDC7\uFDCF\uFDF0-\uFE19\uFE20-\uFE52\uFE54-\uFE66\uFE68-\uFE6B\uFE70-\uFE74\uFE76-\uFEFC\uFEFF\uFF01-\uFF20\uFF3B-\uFF40\uFF5B-\uFF65\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFF9-\uFFFD\u{10101}\u{10140}-\u{1018C}\u{10190}-\u{1019C}\u{101A0}\u{101FD}\u{102E0}-\u{102FB}\u{10376}-\u{1037A}\u{10800}-\u{10805}\u{10808}\u{1080A}-\u{10835}\u{10837}\u{10838}\u{1083C}\u{1083F}-\u{10855}\u{10857}-\u{1089E}\u{108A7}-\u{108AF}\u{108E0}-\u{108F2}\u{108F4}\u{108F5}\u{108FB}-\u{1091B}\u{1091F}-\u{10939}\u{1093F}\u{10980}-\u{109B7}\u{109BC}-\u{109CF}\u{109D2}-\u{10A03}\u{10A05}\u{10A06}\u{10A0C}-\u{10A13}\u{10A15}-\u{10A17}\u{10A19}-\u{10A35}\u{10A38}-\u{10A3A}\u{10A3F}-\u{10A48}\u{10A50}-\u{10A58}\u{10A60}-\u{10A9F}\u{10AC0}-\u{10AE6}\u{10AEB}-\u{10AF6}\u{10B00}-\u{10B35}\u{10B39}-\u{10B55}\u{10B58}-\u{10B72}\u{10B78}-\u{10B91}\u{10B99}-\u{10B9C}\u{10BA9}-\u{10BAF}\u{10C00}-\u{10C48}\u{10C80}-\u{10CB2}\u{10CC0}-\u{10CF2}\u{10CFA}-\u{10D27}\u{10D30}-\u{10D39}\u{10E60}-\u{10E7E}\u{10E80}-\u{10EA9}\u{10EAB}-\u{10EAD}\u{10EB0}\u{10EB1}\u{10EFD}-\u{10F27}\u{10F30}-\u{10F59}\u{10F70}-\u{10F89}\u{10FB0}-\u{10FCB}\u{10FE0}-\u{10FF6}\u{11001}\u{11038}-\u{11046}\u{11052}-\u{11065}\u{11070}\u{11073}\u{11074}\u{1107F}-\u{11081}\u{110B3}-\u{110B6}\u{110B9}\u{110BA}\u{110C2}\u{11100}-\u{11102}\u{11127}-\u{1112B}\u{1112D}-\u{11134}\u{11173}\u{11180}\u{11181}\u{111B6}-\u{111BE}\u{111C9}-\u{111CC}\u{111CF}\u{1122F}-\u{11231}\u{11234}\u{11236}\u{11237}\u{1123E}\u{11241}\u{112DF}\u{112E3}-\u{112EA}\u{11300}\u{11301}\u{1133B}\u{1133C}\u{11340}\u{11366}-\u{1136C}\u{11370}-\u{11374}\u{11438}-\u{1143F}\u{11442}-\u{11444}\u{11446}\u{1145E}\u{114B3}-\u{114B8}\u{114BA}\u{114BF}\u{114C0}\u{114C2}\u{114C3}\u{115B2}-\u{115B5}\u{115BC}\u{115BD}\u{115BF}\u{115C0}\u{115DC}\u{115DD}\u{11633}-\u{1163A}\u{1163D}\u{1163F}\u{11640}\u{11660}-\u{1166C}\u{116AB}\u{116AD}\u{116B0}-\u{116B5}\u{116B7}\u{1171D}-\u{1171F}\u{11722}-\u{11725}\u{11727}-\u{1172B}\u{1182F}-\u{11837}\u{11839}\u{1183A}\u{1193B}\u{1193C}\u{1193E}\u{11943}\u{119D4}-\u{119D7}\u{119DA}\u{119DB}\u{119E0}\u{11A01}-\u{11A06}\u{11A09}\u{11A0A}\u{11A33}-\u{11A38}\u{11A3B}-\u{11A3E}\u{11A47}\u{11A51}-\u{11A56}\u{11A59}-\u{11A5B}\u{11A8A}-\u{11A96}\u{11A98}\u{11A99}\u{11C30}-\u{11C36}\u{11C38}-\u{11C3D}\u{11C92}-\u{11CA7}\u{11CAA}-\u{11CB0}\u{11CB2}\u{11CB3}\u{11CB5}\u{11CB6}\u{11D31}-\u{11D36}\u{11D3A}\u{11D3C}\u{11D3D}\u{11D3F}-\u{11D45}\u{11D47}\u{11D90}\u{11D91}\u{11D95}\u{11D97}\u{11EF3}\u{11EF4}\u{11F00}\u{11F01}\u{11F36}-\u{11F3A}\u{11F40}\u{11F42}\u{11FD5}-\u{11FF1}\u{13440}\u{13447}-\u{13455}\u{16AF0}-\u{16AF4}\u{16B30}-\u{16B36}\u{16F4F}\u{16F8F}-\u{16F92}\u{16FE2}\u{16FE4}\u{1BC9D}\u{1BC9E}\u{1BCA0}-\u{1BCA3}\u{1CF00}-\u{1CF2D}\u{1CF30}-\u{1CF46}\u{1D167}-\u{1D169}\u{1D173}-\u{1D182}\u{1D185}-\u{1D18B}\u{1D1AA}-\u{1D1AD}\u{1D1E9}\u{1D1EA}\u{1D200}-\u{1D245}\u{1D300}-\u{1D356}\u{1D6DB}\u{1D715}\u{1D74F}\u{1D789}\u{1D7C3}\u{1D7CE}-\u{1D7FF}\u{1DA00}-\u{1DA36}\u{1DA3B}-\u{1DA6C}\u{1DA75}\u{1DA84}\u{1DA9B}-\u{1DA9F}\u{1DAA1}-\u{1DAAF}\u{1E000}-\u{1E006}\u{1E008}-\u{1E018}\u{1E01B}-\u{1E021}\u{1E023}\u{1E024}\u{1E026}-\u{1E02A}\u{1E08F}\u{1E130}-\u{1E136}\u{1E2AE}\u{1E2EC}-\u{1E2EF}\u{1E2FF}\u{1E4EC}-\u{1E4EF}\u{1E800}-\u{1E8C4}\u{1E8C7}-\u{1E8D6}\u{1E900}-\u{1E94B}\u{1E950}-\u{1E959}\u{1E95E}\u{1E95F}\u{1EC71}-\u{1ECB4}\u{1ED01}-\u{1ED3D}\u{1EE00}-\u{1EE03}\u{1EE05}-\u{1EE1F}\u{1EE21}\u{1EE22}\u{1EE24}\u{1EE27}\u{1EE29}-\u{1EE32}\u{1EE34}-\u{1EE37}\u{1EE39}\u{1EE3B}\u{1EE42}\u{1EE47}\u{1EE49}\u{1EE4B}\u{1EE4D}-\u{1EE4F}\u{1EE51}\u{1EE52}\u{1EE54}\u{1EE57}\u{1EE59}\u{1EE5B}\u{1EE5D}\u{1EE5F}\u{1EE61}\u{1EE62}\u{1EE64}\u{1EE67}-\u{1EE6A}\u{1EE6C}-\u{1EE72}\u{1EE74}-\u{1EE77}\u{1EE79}-\u{1EE7C}\u{1EE7E}\u{1EE80}-\u{1EE89}\u{1EE8B}-\u{1EE9B}\u{1EEA1}-\u{1EEA3}\u{1EEA5}-\u{1EEA9}\u{1EEAB}-\u{1EEBB}\u{1EEF0}\u{1EEF1}\u{1F000}-\u{1F02B}\u{1F030}-\u{1F093}\u{1F0A0}-\u{1F0AE}\u{1F0B1}-\u{1F0BF}\u{1F0C1}-\u{1F0CF}\u{1F0D1}-\u{1F0F5}\u{1F100}-\u{1F10F}\u{1F12F}\u{1F16A}-\u{1F16F}\u{1F1AD}\u{1F260}-\u{1F265}\u{1F300}-\u{1F6D7}\u{1F6DC}-\u{1F6EC}\u{1F6F0}-\u{1F6FC}\u{1F700}-\u{1F776}\u{1F77B}-\u{1F7D9}\u{1F7E0}-\u{1F7EB}\u{1F7F0}\u{1F800}-\u{1F80B}\u{1F810}-\u{1F847}\u{1F850}-\u{1F859}\u{1F860}-\u{1F887}\u{1F890}-\u{1F8AD}\u{1F8B0}\u{1F8B1}\u{1F900}-\u{1FA53}\u{1FA60}-\u{1FA6D}\u{1FA70}-\u{1FA7C}\u{1FA80}-\u{1FA88}\u{1FA90}-\u{1FABD}\u{1FABF}-\u{1FAC5}\u{1FACE}-\u{1FADB}\u{1FAE0}-\u{1FAE8}\u{1FAF0}-\u{1FAF8}\u{1FB00}-\u{1FB92}\u{1FB94}-\u{1FBCA}\u{1FBF0}-\u{1FBF9}\u{E0001}\u{E0020}-\u{E007F}\u{E0100}-\u{E01EF}]*$/u;
  var bidiS3 = /[0-9\xB2\xB3\xB9\u05BE\u05C0\u05C3\u05C6\u05D0-\u05EA\u05EF-\u05F4\u0600-\u0605\u0608\u060B\u060D\u061B-\u064A\u0660-\u0669\u066B-\u066F\u0671-\u06D5\u06DD\u06E5\u06E6\u06EE-\u070D\u070F\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07C0-\u07EA\u07F4\u07F5\u07FA\u07FE-\u0815\u081A\u0824\u0828\u0830-\u083E\u0840-\u0858\u085E\u0860-\u086A\u0870-\u088E\u0890\u0891\u08A0-\u08C9\u08E2\u200F\u2070\u2074-\u2079\u2080-\u2089\u2488-\u249B\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBC2\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFC\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\u{102E1}-\u{102FB}\u{10800}-\u{10805}\u{10808}\u{1080A}-\u{10835}\u{10837}\u{10838}\u{1083C}\u{1083F}-\u{10855}\u{10857}-\u{1089E}\u{108A7}-\u{108AF}\u{108E0}-\u{108F2}\u{108F4}\u{108F5}\u{108FB}-\u{1091B}\u{10920}-\u{10939}\u{1093F}\u{10980}-\u{109B7}\u{109BC}-\u{109CF}\u{109D2}-\u{10A00}\u{10A10}-\u{10A13}\u{10A15}-\u{10A17}\u{10A19}-\u{10A35}\u{10A40}-\u{10A48}\u{10A50}-\u{10A58}\u{10A60}-\u{10A9F}\u{10AC0}-\u{10AE4}\u{10AEB}-\u{10AF6}\u{10B00}-\u{10B35}\u{10B40}-\u{10B55}\u{10B58}-\u{10B72}\u{10B78}-\u{10B91}\u{10B99}-\u{10B9C}\u{10BA9}-\u{10BAF}\u{10C00}-\u{10C48}\u{10C80}-\u{10CB2}\u{10CC0}-\u{10CF2}\u{10CFA}-\u{10D23}\u{10D30}-\u{10D39}\u{10E60}-\u{10E7E}\u{10E80}-\u{10EA9}\u{10EAD}\u{10EB0}\u{10EB1}\u{10F00}-\u{10F27}\u{10F30}-\u{10F45}\u{10F51}-\u{10F59}\u{10F70}-\u{10F81}\u{10F86}-\u{10F89}\u{10FB0}-\u{10FCB}\u{10FE0}-\u{10FF6}\u{1D7CE}-\u{1D7FF}\u{1E800}-\u{1E8C4}\u{1E8C7}-\u{1E8CF}\u{1E900}-\u{1E943}\u{1E94B}\u{1E950}-\u{1E959}\u{1E95E}\u{1E95F}\u{1EC71}-\u{1ECB4}\u{1ED01}-\u{1ED3D}\u{1EE00}-\u{1EE03}\u{1EE05}-\u{1EE1F}\u{1EE21}\u{1EE22}\u{1EE24}\u{1EE27}\u{1EE29}-\u{1EE32}\u{1EE34}-\u{1EE37}\u{1EE39}\u{1EE3B}\u{1EE42}\u{1EE47}\u{1EE49}\u{1EE4B}\u{1EE4D}-\u{1EE4F}\u{1EE51}\u{1EE52}\u{1EE54}\u{1EE57}\u{1EE59}\u{1EE5B}\u{1EE5D}\u{1EE5F}\u{1EE61}\u{1EE62}\u{1EE64}\u{1EE67}-\u{1EE6A}\u{1EE6C}-\u{1EE72}\u{1EE74}-\u{1EE77}\u{1EE79}-\u{1EE7C}\u{1EE7E}\u{1EE80}-\u{1EE89}\u{1EE8B}-\u{1EE9B}\u{1EEA1}-\u{1EEA3}\u{1EEA5}-\u{1EEA9}\u{1EEAB}-\u{1EEBB}\u{1F100}-\u{1F10A}\u{1FBF0}-\u{1FBF9}][\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B55\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C04\u0C3C\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CCC\u0CCD\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0D81\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732\u1733\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u180F\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ACE\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA82C\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\u{101FD}\u{102E0}\u{10376}-\u{1037A}\u{10A01}-\u{10A03}\u{10A05}\u{10A06}\u{10A0C}-\u{10A0F}\u{10A38}-\u{10A3A}\u{10A3F}\u{10AE5}\u{10AE6}\u{10D24}-\u{10D27}\u{10EAB}\u{10EAC}\u{10EFD}-\u{10EFF}\u{10F46}-\u{10F50}\u{10F82}-\u{10F85}\u{11001}\u{11038}-\u{11046}\u{11070}\u{11073}\u{11074}\u{1107F}-\u{11081}\u{110B3}-\u{110B6}\u{110B9}\u{110BA}\u{110C2}\u{11100}-\u{11102}\u{11127}-\u{1112B}\u{1112D}-\u{11134}\u{11173}\u{11180}\u{11181}\u{111B6}-\u{111BE}\u{111C9}-\u{111CC}\u{111CF}\u{1122F}-\u{11231}\u{11234}\u{11236}\u{11237}\u{1123E}\u{11241}\u{112DF}\u{112E3}-\u{112EA}\u{11300}\u{11301}\u{1133B}\u{1133C}\u{11340}\u{11366}-\u{1136C}\u{11370}-\u{11374}\u{11438}-\u{1143F}\u{11442}-\u{11444}\u{11446}\u{1145E}\u{114B3}-\u{114B8}\u{114BA}\u{114BF}\u{114C0}\u{114C2}\u{114C3}\u{115B2}-\u{115B5}\u{115BC}\u{115BD}\u{115BF}\u{115C0}\u{115DC}\u{115DD}\u{11633}-\u{1163A}\u{1163D}\u{1163F}\u{11640}\u{116AB}\u{116AD}\u{116B0}-\u{116B5}\u{116B7}\u{1171D}-\u{1171F}\u{11722}-\u{11725}\u{11727}-\u{1172B}\u{1182F}-\u{11837}\u{11839}\u{1183A}\u{1193B}\u{1193C}\u{1193E}\u{11943}\u{119D4}-\u{119D7}\u{119DA}\u{119DB}\u{119E0}\u{11A01}-\u{11A06}\u{11A09}\u{11A0A}\u{11A33}-\u{11A38}\u{11A3B}-\u{11A3E}\u{11A47}\u{11A51}-\u{11A56}\u{11A59}-\u{11A5B}\u{11A8A}-\u{11A96}\u{11A98}\u{11A99}\u{11C30}-\u{11C36}\u{11C38}-\u{11C3D}\u{11C92}-\u{11CA7}\u{11CAA}-\u{11CB0}\u{11CB2}\u{11CB3}\u{11CB5}\u{11CB6}\u{11D31}-\u{11D36}\u{11D3A}\u{11D3C}\u{11D3D}\u{11D3F}-\u{11D45}\u{11D47}\u{11D90}\u{11D91}\u{11D95}\u{11D97}\u{11EF3}\u{11EF4}\u{11F00}\u{11F01}\u{11F36}-\u{11F3A}\u{11F40}\u{11F42}\u{13440}\u{13447}-\u{13455}\u{16AF0}-\u{16AF4}\u{16B30}-\u{16B36}\u{16F4F}\u{16F8F}-\u{16F92}\u{16FE4}\u{1BC9D}\u{1BC9E}\u{1CF00}-\u{1CF2D}\u{1CF30}-\u{1CF46}\u{1D167}-\u{1D169}\u{1D17B}-\u{1D182}\u{1D185}-\u{1D18B}\u{1D1AA}-\u{1D1AD}\u{1D242}-\u{1D244}\u{1DA00}-\u{1DA36}\u{1DA3B}-\u{1DA6C}\u{1DA75}\u{1DA84}\u{1DA9B}-\u{1DA9F}\u{1DAA1}-\u{1DAAF}\u{1E000}-\u{1E006}\u{1E008}-\u{1E018}\u{1E01B}-\u{1E021}\u{1E023}\u{1E024}\u{1E026}-\u{1E02A}\u{1E08F}\u{1E130}-\u{1E136}\u{1E2AE}\u{1E2EC}-\u{1E2EF}\u{1E4EC}-\u{1E4EF}\u{1E8D0}-\u{1E8D6}\u{1E944}-\u{1E94A}\u{E0100}-\u{E01EF}]*$/u;
  var bidiS4EN = /[0-9\xB2\xB3\xB9\u06F0-\u06F9\u2070\u2074-\u2079\u2080-\u2089\u2488-\u249B\uFF10-\uFF19\u{102E1}-\u{102FB}\u{1D7CE}-\u{1D7FF}\u{1F100}-\u{1F10A}\u{1FBF0}-\u{1FBF9}]/u;
  var bidiS4AN = /[\u0600-\u0605\u0660-\u0669\u066B\u066C\u06DD\u0890\u0891\u08E2\u{10D30}-\u{10D39}\u{10E60}-\u{10E7E}]/u;
  var bidiS5 = /^[\0-\x08\x0E-\x1B!-\x84\x86-\u0377\u037A-\u037F\u0384-\u038A\u038C\u038E-\u03A1\u03A3-\u052F\u0531-\u0556\u0559-\u058A\u058D-\u058F\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0606\u0607\u0609\u060A\u060C\u060E-\u061A\u064B-\u065F\u066A\u0670\u06D6-\u06DC\u06DE-\u06E4\u06E7-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07F6-\u07F9\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09FE\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A76\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AF1\u0AF9-\u0AFF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B77\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BFA\u0C00-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3C-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C5D\u0C60-\u0C63\u0C66-\u0C6F\u0C77-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDD\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1-\u0CF3\u0D00-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4F\u0D54-\u0D63\u0D66-\u0D7F\u0D81-\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2-\u0DF4\u0E01-\u0E3A\u0E3F-\u0E5B\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECE\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00-\u0F47\u0F49-\u0F6C\u0F71-\u0F97\u0F99-\u0FBC\u0FBE-\u0FCC\u0FCE-\u0FDA\u1000-\u10C5\u10C7\u10CD\u10D0-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u137C\u1380-\u1399\u13A0-\u13F5\u13F8-\u13FD\u1400-\u167F\u1681-\u169C\u16A0-\u16F8\u1700-\u1715\u171F-\u1736\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17DD\u17E0-\u17E9\u17F0-\u17F9\u1800-\u1819\u1820-\u1878\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1940\u1944-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u19DE-\u1A1B\u1A1E-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA0-\u1AAD\u1AB0-\u1ACE\u1B00-\u1B4C\u1B50-\u1B7E\u1B80-\u1BF3\u1BFC-\u1C37\u1C3B-\u1C49\u1C4D-\u1C88\u1C90-\u1CBA\u1CBD-\u1CC7\u1CD0-\u1CFA\u1D00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FC4\u1FC6-\u1FD3\u1FD6-\u1FDB\u1FDD-\u1FEF\u1FF2-\u1FF4\u1FF6-\u1FFE\u200B-\u200E\u2010-\u2027\u202F-\u205E\u2060-\u2064\u206A-\u2071\u2074-\u208E\u2090-\u209C\u20A0-\u20C0\u20D0-\u20F0\u2100-\u218B\u2190-\u2426\u2440-\u244A\u2460-\u2B73\u2B76-\u2B95\u2B97-\u2CF3\u2CF9-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D70\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2E5D\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFF\u3001-\u303F\u3041-\u3096\u3099-\u30FF\u3105-\u312F\u3131-\u318E\u3190-\u31E3\u31EF-\u321E\u3220-\uA48C\uA490-\uA4C6\uA4D0-\uA62B\uA640-\uA6F7\uA700-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA82C\uA830-\uA839\uA840-\uA877\uA880-\uA8C5\uA8CE-\uA8D9\uA8E0-\uA953\uA95F-\uA97C\uA980-\uA9CD\uA9CF-\uA9D9\uA9DE-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA5C-\uAAC2\uAADB-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB6B\uAB70-\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uD800-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1E\uFB29\uFD3E-\uFD4F\uFDCF\uFDFD-\uFE19\uFE20-\uFE52\uFE54-\uFE66\uFE68-\uFE6B\uFEFF\uFF01-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFF9-\uFFFD\u{10000}-\u{1000B}\u{1000D}-\u{10026}\u{10028}-\u{1003A}\u{1003C}\u{1003D}\u{1003F}-\u{1004D}\u{10050}-\u{1005D}\u{10080}-\u{100FA}\u{10100}-\u{10102}\u{10107}-\u{10133}\u{10137}-\u{1018E}\u{10190}-\u{1019C}\u{101A0}\u{101D0}-\u{101FD}\u{10280}-\u{1029C}\u{102A0}-\u{102D0}\u{102E0}-\u{102FB}\u{10300}-\u{10323}\u{1032D}-\u{1034A}\u{10350}-\u{1037A}\u{10380}-\u{1039D}\u{1039F}-\u{103C3}\u{103C8}-\u{103D5}\u{10400}-\u{1049D}\u{104A0}-\u{104A9}\u{104B0}-\u{104D3}\u{104D8}-\u{104FB}\u{10500}-\u{10527}\u{10530}-\u{10563}\u{1056F}-\u{1057A}\u{1057C}-\u{1058A}\u{1058C}-\u{10592}\u{10594}\u{10595}\u{10597}-\u{105A1}\u{105A3}-\u{105B1}\u{105B3}-\u{105B9}\u{105BB}\u{105BC}\u{10600}-\u{10736}\u{10740}-\u{10755}\u{10760}-\u{10767}\u{10780}-\u{10785}\u{10787}-\u{107B0}\u{107B2}-\u{107BA}\u{1091F}\u{10A01}-\u{10A03}\u{10A05}\u{10A06}\u{10A0C}-\u{10A0F}\u{10A38}-\u{10A3A}\u{10A3F}\u{10AE5}\u{10AE6}\u{10B39}-\u{10B3F}\u{10D24}-\u{10D27}\u{10EAB}\u{10EAC}\u{10EFD}-\u{10EFF}\u{10F46}-\u{10F50}\u{10F82}-\u{10F85}\u{11000}-\u{1104D}\u{11052}-\u{11075}\u{1107F}-\u{110C2}\u{110CD}\u{110D0}-\u{110E8}\u{110F0}-\u{110F9}\u{11100}-\u{11134}\u{11136}-\u{11147}\u{11150}-\u{11176}\u{11180}-\u{111DF}\u{111E1}-\u{111F4}\u{11200}-\u{11211}\u{11213}-\u{11241}\u{11280}-\u{11286}\u{11288}\u{1128A}-\u{1128D}\u{1128F}-\u{1129D}\u{1129F}-\u{112A9}\u{112B0}-\u{112EA}\u{112F0}-\u{112F9}\u{11300}-\u{11303}\u{11305}-\u{1130C}\u{1130F}\u{11310}\u{11313}-\u{11328}\u{1132A}-\u{11330}\u{11332}\u{11333}\u{11335}-\u{11339}\u{1133B}-\u{11344}\u{11347}\u{11348}\u{1134B}-\u{1134D}\u{11350}\u{11357}\u{1135D}-\u{11363}\u{11366}-\u{1136C}\u{11370}-\u{11374}\u{11400}-\u{1145B}\u{1145D}-\u{11461}\u{11480}-\u{114C7}\u{114D0}-\u{114D9}\u{11580}-\u{115B5}\u{115B8}-\u{115DD}\u{11600}-\u{11644}\u{11650}-\u{11659}\u{11660}-\u{1166C}\u{11680}-\u{116B9}\u{116C0}-\u{116C9}\u{11700}-\u{1171A}\u{1171D}-\u{1172B}\u{11730}-\u{11746}\u{11800}-\u{1183B}\u{118A0}-\u{118F2}\u{118FF}-\u{11906}\u{11909}\u{1190C}-\u{11913}\u{11915}\u{11916}\u{11918}-\u{11935}\u{11937}\u{11938}\u{1193B}-\u{11946}\u{11950}-\u{11959}\u{119A0}-\u{119A7}\u{119AA}-\u{119D7}\u{119DA}-\u{119E4}\u{11A00}-\u{11A47}\u{11A50}-\u{11AA2}\u{11AB0}-\u{11AF8}\u{11B00}-\u{11B09}\u{11C00}-\u{11C08}\u{11C0A}-\u{11C36}\u{11C38}-\u{11C45}\u{11C50}-\u{11C6C}\u{11C70}-\u{11C8F}\u{11C92}-\u{11CA7}\u{11CA9}-\u{11CB6}\u{11D00}-\u{11D06}\u{11D08}\u{11D09}\u{11D0B}-\u{11D36}\u{11D3A}\u{11D3C}\u{11D3D}\u{11D3F}-\u{11D47}\u{11D50}-\u{11D59}\u{11D60}-\u{11D65}\u{11D67}\u{11D68}\u{11D6A}-\u{11D8E}\u{11D90}\u{11D91}\u{11D93}-\u{11D98}\u{11DA0}-\u{11DA9}\u{11EE0}-\u{11EF8}\u{11F00}-\u{11F10}\u{11F12}-\u{11F3A}\u{11F3E}-\u{11F59}\u{11FB0}\u{11FC0}-\u{11FF1}\u{11FFF}-\u{12399}\u{12400}-\u{1246E}\u{12470}-\u{12474}\u{12480}-\u{12543}\u{12F90}-\u{12FF2}\u{13000}-\u{13455}\u{14400}-\u{14646}\u{16800}-\u{16A38}\u{16A40}-\u{16A5E}\u{16A60}-\u{16A69}\u{16A6E}-\u{16ABE}\u{16AC0}-\u{16AC9}\u{16AD0}-\u{16AED}\u{16AF0}-\u{16AF5}\u{16B00}-\u{16B45}\u{16B50}-\u{16B59}\u{16B5B}-\u{16B61}\u{16B63}-\u{16B77}\u{16B7D}-\u{16B8F}\u{16E40}-\u{16E9A}\u{16F00}-\u{16F4A}\u{16F4F}-\u{16F87}\u{16F8F}-\u{16F9F}\u{16FE0}-\u{16FE4}\u{16FF0}\u{16FF1}\u{17000}-\u{187F7}\u{18800}-\u{18CD5}\u{18D00}-\u{18D08}\u{1AFF0}-\u{1AFF3}\u{1AFF5}-\u{1AFFB}\u{1AFFD}\u{1AFFE}\u{1B000}-\u{1B122}\u{1B132}\u{1B150}-\u{1B152}\u{1B155}\u{1B164}-\u{1B167}\u{1B170}-\u{1B2FB}\u{1BC00}-\u{1BC6A}\u{1BC70}-\u{1BC7C}\u{1BC80}-\u{1BC88}\u{1BC90}-\u{1BC99}\u{1BC9C}-\u{1BCA3}\u{1CF00}-\u{1CF2D}\u{1CF30}-\u{1CF46}\u{1CF50}-\u{1CFC3}\u{1D000}-\u{1D0F5}\u{1D100}-\u{1D126}\u{1D129}-\u{1D1EA}\u{1D200}-\u{1D245}\u{1D2C0}-\u{1D2D3}\u{1D2E0}-\u{1D2F3}\u{1D300}-\u{1D356}\u{1D360}-\u{1D378}\u{1D400}-\u{1D454}\u{1D456}-\u{1D49C}\u{1D49E}\u{1D49F}\u{1D4A2}\u{1D4A5}\u{1D4A6}\u{1D4A9}-\u{1D4AC}\u{1D4AE}-\u{1D4B9}\u{1D4BB}\u{1D4BD}-\u{1D4C3}\u{1D4C5}-\u{1D505}\u{1D507}-\u{1D50A}\u{1D50D}-\u{1D514}\u{1D516}-\u{1D51C}\u{1D51E}-\u{1D539}\u{1D53B}-\u{1D53E}\u{1D540}-\u{1D544}\u{1D546}\u{1D54A}-\u{1D550}\u{1D552}-\u{1D6A5}\u{1D6A8}-\u{1D7CB}\u{1D7CE}-\u{1DA8B}\u{1DA9B}-\u{1DA9F}\u{1DAA1}-\u{1DAAF}\u{1DF00}-\u{1DF1E}\u{1DF25}-\u{1DF2A}\u{1E000}-\u{1E006}\u{1E008}-\u{1E018}\u{1E01B}-\u{1E021}\u{1E023}\u{1E024}\u{1E026}-\u{1E02A}\u{1E030}-\u{1E06D}\u{1E08F}\u{1E100}-\u{1E12C}\u{1E130}-\u{1E13D}\u{1E140}-\u{1E149}\u{1E14E}\u{1E14F}\u{1E290}-\u{1E2AE}\u{1E2C0}-\u{1E2F9}\u{1E2FF}\u{1E4D0}-\u{1E4F9}\u{1E7E0}-\u{1E7E6}\u{1E7E8}-\u{1E7EB}\u{1E7ED}\u{1E7EE}\u{1E7F0}-\u{1E7FE}\u{1E8D0}-\u{1E8D6}\u{1E944}-\u{1E94A}\u{1EEF0}\u{1EEF1}\u{1F000}-\u{1F02B}\u{1F030}-\u{1F093}\u{1F0A0}-\u{1F0AE}\u{1F0B1}-\u{1F0BF}\u{1F0C1}-\u{1F0CF}\u{1F0D1}-\u{1F0F5}\u{1F100}-\u{1F1AD}\u{1F1E6}-\u{1F202}\u{1F210}-\u{1F23B}\u{1F240}-\u{1F248}\u{1F250}\u{1F251}\u{1F260}-\u{1F265}\u{1F300}-\u{1F6D7}\u{1F6DC}-\u{1F6EC}\u{1F6F0}-\u{1F6FC}\u{1F700}-\u{1F776}\u{1F77B}-\u{1F7D9}\u{1F7E0}-\u{1F7EB}\u{1F7F0}\u{1F800}-\u{1F80B}\u{1F810}-\u{1F847}\u{1F850}-\u{1F859}\u{1F860}-\u{1F887}\u{1F890}-\u{1F8AD}\u{1F8B0}\u{1F8B1}\u{1F900}-\u{1FA53}\u{1FA60}-\u{1FA6D}\u{1FA70}-\u{1FA7C}\u{1FA80}-\u{1FA88}\u{1FA90}-\u{1FABD}\u{1FABF}-\u{1FAC5}\u{1FACE}-\u{1FADB}\u{1FAE0}-\u{1FAE8}\u{1FAF0}-\u{1FAF8}\u{1FB00}-\u{1FB92}\u{1FB94}-\u{1FBCA}\u{1FBF0}-\u{1FBF9}\u{20000}-\u{2A6DF}\u{2A700}-\u{2B739}\u{2B740}-\u{2B81D}\u{2B820}-\u{2CEA1}\u{2CEB0}-\u{2EBE0}\u{2EBF0}-\u{2EE5D}\u{2F800}-\u{2FA1D}\u{30000}-\u{3134A}\u{31350}-\u{323AF}\u{E0001}\u{E0020}-\u{E007F}\u{E0100}-\u{E01EF}\u{F0000}-\u{FFFFD}\u{100000}-\u{10FFFD}]*$/u;
  var bidiS6 = /[0-9A-Za-z\xAA\xB2\xB3\xB5\xB9\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02B8\u02BB-\u02C1\u02D0\u02D1\u02E0-\u02E4\u02EE\u0370-\u0373\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0482\u048A-\u052F\u0531-\u0556\u0559-\u0589\u06F0-\u06F9\u0903-\u0939\u093B\u093D-\u0940\u0949-\u094C\u094E-\u0950\u0958-\u0961\u0964-\u0980\u0982\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD-\u09C0\u09C7\u09C8\u09CB\u09CC\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E1\u09E6-\u09F1\u09F4-\u09FA\u09FC\u09FD\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3E-\u0A40\u0A59-\u0A5C\u0A5E\u0A66-\u0A6F\u0A72-\u0A74\u0A76\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD-\u0AC0\u0AC9\u0ACB\u0ACC\u0AD0\u0AE0\u0AE1\u0AE6-\u0AF0\u0AF9\u0B02\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B3E\u0B40\u0B47\u0B48\u0B4B\u0B4C\u0B57\u0B5C\u0B5D\u0B5F-\u0B61\u0B66-\u0B77\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE\u0BBF\u0BC1\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD0\u0BD7\u0BE6-\u0BF2\u0C01-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C41-\u0C44\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C66-\u0C6F\u0C77\u0C7F\u0C80\u0C82-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD-\u0CC4\u0CC6-\u0CC8\u0CCA\u0CCB\u0CD5\u0CD6\u0CDD\u0CDE\u0CE0\u0CE1\u0CE6-\u0CEF\u0CF1-\u0CF3\u0D02-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D4E\u0D4F\u0D54-\u0D61\u0D66-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCF-\u0DD1\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2-\u0DF4\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E4F-\u0E5B\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00-\u0F17\u0F1A-\u0F34\u0F36\u0F38\u0F3E-\u0F47\u0F49-\u0F6C\u0F7F\u0F85\u0F88-\u0F8C\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE-\u0FDA\u1000-\u102C\u1031\u1038\u103B\u103C\u103F-\u1057\u105A-\u105D\u1061-\u1070\u1075-\u1081\u1083\u1084\u1087-\u108C\u108E-\u109C\u109E-\u10C5\u10C7\u10CD\u10D0-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1360-\u137C\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u167F\u1681-\u169A\u16A0-\u16F8\u1700-\u1711\u1715\u171F-\u1731\u1734-\u1736\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17B6\u17BE-\u17C5\u17C7\u17C8\u17D4-\u17DA\u17DC\u17E0-\u17E9\u1810-\u1819\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1923-\u1926\u1929-\u192B\u1930\u1931\u1933-\u1938\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A16\u1A19\u1A1A\u1A1E-\u1A55\u1A57\u1A61\u1A63\u1A64\u1A6D-\u1A72\u1A80-\u1A89\u1A90-\u1A99\u1AA0-\u1AAD\u1B04-\u1B33\u1B35\u1B3B\u1B3D-\u1B41\u1B43-\u1B4C\u1B50-\u1B6A\u1B74-\u1B7E\u1B82-\u1BA1\u1BA6\u1BA7\u1BAA\u1BAE-\u1BE5\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2\u1BF3\u1BFC-\u1C2B\u1C34\u1C35\u1C3B-\u1C49\u1C4D-\u1C88\u1C90-\u1CBA\u1CBD-\u1CC7\u1CD3\u1CE1\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5-\u1CF7\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200E\u2070\u2071\u2074-\u2079\u207F-\u2089\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u214F\u2160-\u2188\u2336-\u237A\u2395\u2488-\u24E9\u26AC\u2800-\u28FF\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D70\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u302E\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u3190-\u31BF\u31F0-\u321C\u3220-\u324F\u3260-\u327B\u327F-\u32B0\u32C0-\u32CB\u32D0-\u3376\u337B-\u33DD\u33E0-\u33FE\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA60C\uA610-\uA62B\uA640-\uA66E\uA680-\uA69D\uA6A0-\uA6EF\uA6F2-\uA6F7\uA722-\uA787\uA789-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA824\uA827\uA830-\uA837\uA840-\uA873\uA880-\uA8C3\uA8CE-\uA8D9\uA8F2-\uA8FE\uA900-\uA925\uA92E-\uA946\uA952\uA953\uA95F-\uA97C\uA983-\uA9B2\uA9B4\uA9B5\uA9BA\uA9BB\uA9BE-\uA9CD\uA9CF-\uA9D9\uA9DE-\uA9E4\uA9E6-\uA9FE\uAA00-\uAA28\uAA2F\uAA30\uAA33\uAA34\uAA40-\uAA42\uAA44-\uAA4B\uAA4D\uAA50-\uAA59\uAA5C-\uAA7B\uAA7D-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAAEB\uAAEE-\uAAF5\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB69\uAB70-\uABE4\uABE6\uABE7\uABE9-\uABEC\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uD800-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFF10-\uFF19\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC\u{10000}-\u{1000B}\u{1000D}-\u{10026}\u{10028}-\u{1003A}\u{1003C}\u{1003D}\u{1003F}-\u{1004D}\u{10050}-\u{1005D}\u{10080}-\u{100FA}\u{10100}\u{10102}\u{10107}-\u{10133}\u{10137}-\u{1013F}\u{1018D}\u{1018E}\u{101D0}-\u{101FC}\u{10280}-\u{1029C}\u{102A0}-\u{102D0}\u{102E1}-\u{102FB}\u{10300}-\u{10323}\u{1032D}-\u{1034A}\u{10350}-\u{10375}\u{10380}-\u{1039D}\u{1039F}-\u{103C3}\u{103C8}-\u{103D5}\u{10400}-\u{1049D}\u{104A0}-\u{104A9}\u{104B0}-\u{104D3}\u{104D8}-\u{104FB}\u{10500}-\u{10527}\u{10530}-\u{10563}\u{1056F}-\u{1057A}\u{1057C}-\u{1058A}\u{1058C}-\u{10592}\u{10594}\u{10595}\u{10597}-\u{105A1}\u{105A3}-\u{105B1}\u{105B3}-\u{105B9}\u{105BB}\u{105BC}\u{10600}-\u{10736}\u{10740}-\u{10755}\u{10760}-\u{10767}\u{10780}-\u{10785}\u{10787}-\u{107B0}\u{107B2}-\u{107BA}\u{11000}\u{11002}-\u{11037}\u{11047}-\u{1104D}\u{11066}-\u{1106F}\u{11071}\u{11072}\u{11075}\u{11082}-\u{110B2}\u{110B7}\u{110B8}\u{110BB}-\u{110C1}\u{110CD}\u{110D0}-\u{110E8}\u{110F0}-\u{110F9}\u{11103}-\u{11126}\u{1112C}\u{11136}-\u{11147}\u{11150}-\u{11172}\u{11174}-\u{11176}\u{11182}-\u{111B5}\u{111BF}-\u{111C8}\u{111CD}\u{111CE}\u{111D0}-\u{111DF}\u{111E1}-\u{111F4}\u{11200}-\u{11211}\u{11213}-\u{1122E}\u{11232}\u{11233}\u{11235}\u{11238}-\u{1123D}\u{1123F}\u{11240}\u{11280}-\u{11286}\u{11288}\u{1128A}-\u{1128D}\u{1128F}-\u{1129D}\u{1129F}-\u{112A9}\u{112B0}-\u{112DE}\u{112E0}-\u{112E2}\u{112F0}-\u{112F9}\u{11302}\u{11303}\u{11305}-\u{1130C}\u{1130F}\u{11310}\u{11313}-\u{11328}\u{1132A}-\u{11330}\u{11332}\u{11333}\u{11335}-\u{11339}\u{1133D}-\u{1133F}\u{11341}-\u{11344}\u{11347}\u{11348}\u{1134B}-\u{1134D}\u{11350}\u{11357}\u{1135D}-\u{11363}\u{11400}-\u{11437}\u{11440}\u{11441}\u{11445}\u{11447}-\u{1145B}\u{1145D}\u{1145F}-\u{11461}\u{11480}-\u{114B2}\u{114B9}\u{114BB}-\u{114BE}\u{114C1}\u{114C4}-\u{114C7}\u{114D0}-\u{114D9}\u{11580}-\u{115B1}\u{115B8}-\u{115BB}\u{115BE}\u{115C1}-\u{115DB}\u{11600}-\u{11632}\u{1163B}\u{1163C}\u{1163E}\u{11641}-\u{11644}\u{11650}-\u{11659}\u{11680}-\u{116AA}\u{116AC}\u{116AE}\u{116AF}\u{116B6}\u{116B8}\u{116B9}\u{116C0}-\u{116C9}\u{11700}-\u{1171A}\u{11720}\u{11721}\u{11726}\u{11730}-\u{11746}\u{11800}-\u{1182E}\u{11838}\u{1183B}\u{118A0}-\u{118F2}\u{118FF}-\u{11906}\u{11909}\u{1190C}-\u{11913}\u{11915}\u{11916}\u{11918}-\u{11935}\u{11937}\u{11938}\u{1193D}\u{1193F}-\u{11942}\u{11944}-\u{11946}\u{11950}-\u{11959}\u{119A0}-\u{119A7}\u{119AA}-\u{119D3}\u{119DC}-\u{119DF}\u{119E1}-\u{119E4}\u{11A00}\u{11A07}\u{11A08}\u{11A0B}-\u{11A32}\u{11A39}\u{11A3A}\u{11A3F}-\u{11A46}\u{11A50}\u{11A57}\u{11A58}\u{11A5C}-\u{11A89}\u{11A97}\u{11A9A}-\u{11AA2}\u{11AB0}-\u{11AF8}\u{11B00}-\u{11B09}\u{11C00}-\u{11C08}\u{11C0A}-\u{11C2F}\u{11C3E}-\u{11C45}\u{11C50}-\u{11C6C}\u{11C70}-\u{11C8F}\u{11CA9}\u{11CB1}\u{11CB4}\u{11D00}-\u{11D06}\u{11D08}\u{11D09}\u{11D0B}-\u{11D30}\u{11D46}\u{11D50}-\u{11D59}\u{11D60}-\u{11D65}\u{11D67}\u{11D68}\u{11D6A}-\u{11D8E}\u{11D93}\u{11D94}\u{11D96}\u{11D98}\u{11DA0}-\u{11DA9}\u{11EE0}-\u{11EF2}\u{11EF5}-\u{11EF8}\u{11F02}-\u{11F10}\u{11F12}-\u{11F35}\u{11F3E}\u{11F3F}\u{11F41}\u{11F43}-\u{11F59}\u{11FB0}\u{11FC0}-\u{11FD4}\u{11FFF}-\u{12399}\u{12400}-\u{1246E}\u{12470}-\u{12474}\u{12480}-\u{12543}\u{12F90}-\u{12FF2}\u{13000}-\u{1343F}\u{13441}-\u{13446}\u{14400}-\u{14646}\u{16800}-\u{16A38}\u{16A40}-\u{16A5E}\u{16A60}-\u{16A69}\u{16A6E}-\u{16ABE}\u{16AC0}-\u{16AC9}\u{16AD0}-\u{16AED}\u{16AF5}\u{16B00}-\u{16B2F}\u{16B37}-\u{16B45}\u{16B50}-\u{16B59}\u{16B5B}-\u{16B61}\u{16B63}-\u{16B77}\u{16B7D}-\u{16B8F}\u{16E40}-\u{16E9A}\u{16F00}-\u{16F4A}\u{16F50}-\u{16F87}\u{16F93}-\u{16F9F}\u{16FE0}\u{16FE1}\u{16FE3}\u{16FF0}\u{16FF1}\u{17000}-\u{187F7}\u{18800}-\u{18CD5}\u{18D00}-\u{18D08}\u{1AFF0}-\u{1AFF3}\u{1AFF5}-\u{1AFFB}\u{1AFFD}\u{1AFFE}\u{1B000}-\u{1B122}\u{1B132}\u{1B150}-\u{1B152}\u{1B155}\u{1B164}-\u{1B167}\u{1B170}-\u{1B2FB}\u{1BC00}-\u{1BC6A}\u{1BC70}-\u{1BC7C}\u{1BC80}-\u{1BC88}\u{1BC90}-\u{1BC99}\u{1BC9C}\u{1BC9F}\u{1CF50}-\u{1CFC3}\u{1D000}-\u{1D0F5}\u{1D100}-\u{1D126}\u{1D129}-\u{1D166}\u{1D16A}-\u{1D172}\u{1D183}\u{1D184}\u{1D18C}-\u{1D1A9}\u{1D1AE}-\u{1D1E8}\u{1D2C0}-\u{1D2D3}\u{1D2E0}-\u{1D2F3}\u{1D360}-\u{1D378}\u{1D400}-\u{1D454}\u{1D456}-\u{1D49C}\u{1D49E}\u{1D49F}\u{1D4A2}\u{1D4A5}\u{1D4A6}\u{1D4A9}-\u{1D4AC}\u{1D4AE}-\u{1D4B9}\u{1D4BB}\u{1D4BD}-\u{1D4C3}\u{1D4C5}-\u{1D505}\u{1D507}-\u{1D50A}\u{1D50D}-\u{1D514}\u{1D516}-\u{1D51C}\u{1D51E}-\u{1D539}\u{1D53B}-\u{1D53E}\u{1D540}-\u{1D544}\u{1D546}\u{1D54A}-\u{1D550}\u{1D552}-\u{1D6A5}\u{1D6A8}-\u{1D6DA}\u{1D6DC}-\u{1D714}\u{1D716}-\u{1D74E}\u{1D750}-\u{1D788}\u{1D78A}-\u{1D7C2}\u{1D7C4}-\u{1D7CB}\u{1D7CE}-\u{1D9FF}\u{1DA37}-\u{1DA3A}\u{1DA6D}-\u{1DA74}\u{1DA76}-\u{1DA83}\u{1DA85}-\u{1DA8B}\u{1DF00}-\u{1DF1E}\u{1DF25}-\u{1DF2A}\u{1E030}-\u{1E06D}\u{1E100}-\u{1E12C}\u{1E137}-\u{1E13D}\u{1E140}-\u{1E149}\u{1E14E}\u{1E14F}\u{1E290}-\u{1E2AD}\u{1E2C0}-\u{1E2EB}\u{1E2F0}-\u{1E2F9}\u{1E4D0}-\u{1E4EB}\u{1E4F0}-\u{1E4F9}\u{1E7E0}-\u{1E7E6}\u{1E7E8}-\u{1E7EB}\u{1E7ED}\u{1E7EE}\u{1E7F0}-\u{1E7FE}\u{1F100}-\u{1F10A}\u{1F110}-\u{1F12E}\u{1F130}-\u{1F169}\u{1F170}-\u{1F1AC}\u{1F1E6}-\u{1F202}\u{1F210}-\u{1F23B}\u{1F240}-\u{1F248}\u{1F250}\u{1F251}\u{1FBF0}-\u{1FBF9}\u{20000}-\u{2A6DF}\u{2A700}-\u{2B739}\u{2B740}-\u{2B81D}\u{2B820}-\u{2CEA1}\u{2CEB0}-\u{2EBE0}\u{2EBF0}-\u{2EE5D}\u{2F800}-\u{2FA1D}\u{30000}-\u{3134A}\u{31350}-\u{323AF}\u{F0000}-\u{FFFFD}\u{100000}-\u{10FFFD}][\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B55\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C04\u0C3C\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CCC\u0CCD\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0D81\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732\u1733\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u180F\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ACE\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA82C\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\u{101FD}\u{102E0}\u{10376}-\u{1037A}\u{10A01}-\u{10A03}\u{10A05}\u{10A06}\u{10A0C}-\u{10A0F}\u{10A38}-\u{10A3A}\u{10A3F}\u{10AE5}\u{10AE6}\u{10D24}-\u{10D27}\u{10EAB}\u{10EAC}\u{10EFD}-\u{10EFF}\u{10F46}-\u{10F50}\u{10F82}-\u{10F85}\u{11001}\u{11038}-\u{11046}\u{11070}\u{11073}\u{11074}\u{1107F}-\u{11081}\u{110B3}-\u{110B6}\u{110B9}\u{110BA}\u{110C2}\u{11100}-\u{11102}\u{11127}-\u{1112B}\u{1112D}-\u{11134}\u{11173}\u{11180}\u{11181}\u{111B6}-\u{111BE}\u{111C9}-\u{111CC}\u{111CF}\u{1122F}-\u{11231}\u{11234}\u{11236}\u{11237}\u{1123E}\u{11241}\u{112DF}\u{112E3}-\u{112EA}\u{11300}\u{11301}\u{1133B}\u{1133C}\u{11340}\u{11366}-\u{1136C}\u{11370}-\u{11374}\u{11438}-\u{1143F}\u{11442}-\u{11444}\u{11446}\u{1145E}\u{114B3}-\u{114B8}\u{114BA}\u{114BF}\u{114C0}\u{114C2}\u{114C3}\u{115B2}-\u{115B5}\u{115BC}\u{115BD}\u{115BF}\u{115C0}\u{115DC}\u{115DD}\u{11633}-\u{1163A}\u{1163D}\u{1163F}\u{11640}\u{116AB}\u{116AD}\u{116B0}-\u{116B5}\u{116B7}\u{1171D}-\u{1171F}\u{11722}-\u{11725}\u{11727}-\u{1172B}\u{1182F}-\u{11837}\u{11839}\u{1183A}\u{1193B}\u{1193C}\u{1193E}\u{11943}\u{119D4}-\u{119D7}\u{119DA}\u{119DB}\u{119E0}\u{11A01}-\u{11A06}\u{11A09}\u{11A0A}\u{11A33}-\u{11A38}\u{11A3B}-\u{11A3E}\u{11A47}\u{11A51}-\u{11A56}\u{11A59}-\u{11A5B}\u{11A8A}-\u{11A96}\u{11A98}\u{11A99}\u{11C30}-\u{11C36}\u{11C38}-\u{11C3D}\u{11C92}-\u{11CA7}\u{11CAA}-\u{11CB0}\u{11CB2}\u{11CB3}\u{11CB5}\u{11CB6}\u{11D31}-\u{11D36}\u{11D3A}\u{11D3C}\u{11D3D}\u{11D3F}-\u{11D45}\u{11D47}\u{11D90}\u{11D91}\u{11D95}\u{11D97}\u{11EF3}\u{11EF4}\u{11F00}\u{11F01}\u{11F36}-\u{11F3A}\u{11F40}\u{11F42}\u{13440}\u{13447}-\u{13455}\u{16AF0}-\u{16AF4}\u{16B30}-\u{16B36}\u{16F4F}\u{16F8F}-\u{16F92}\u{16FE4}\u{1BC9D}\u{1BC9E}\u{1CF00}-\u{1CF2D}\u{1CF30}-\u{1CF46}\u{1D167}-\u{1D169}\u{1D17B}-\u{1D182}\u{1D185}-\u{1D18B}\u{1D1AA}-\u{1D1AD}\u{1D242}-\u{1D244}\u{1DA00}-\u{1DA36}\u{1DA3B}-\u{1DA6C}\u{1DA75}\u{1DA84}\u{1DA9B}-\u{1DA9F}\u{1DAA1}-\u{1DAAF}\u{1E000}-\u{1E006}\u{1E008}-\u{1E018}\u{1E01B}-\u{1E021}\u{1E023}\u{1E024}\u{1E026}-\u{1E02A}\u{1E08F}\u{1E130}-\u{1E136}\u{1E2AE}\u{1E2EC}-\u{1E2EF}\u{1E4EC}-\u{1E4EF}\u{1E8D0}-\u{1E8D6}\u{1E944}-\u{1E94A}\u{E0100}-\u{E01EF}]*$/u;
  module.exports = {
    combiningMarks,
    combiningClassVirama,
    validZWNJ,
    bidiDomain,
    bidiS1LTR,
    bidiS1RTL,
    bidiS2,
    bidiS3,
    bidiS4EN,
    bidiS4AN,
    bidiS5,
    bidiS6
  };
});

// node_modules/tr46/lib/mappingTable.json
var require_mappingTable = __commonJS((exports, module) => {
  module.exports = [[[0, 44], 4], [[45, 46], 2], [47, 4], [[48, 57], 2], [[58, 64], 4], [65, 1, "a"], [66, 1, "b"], [67, 1, "c"], [68, 1, "d"], [69, 1, "e"], [70, 1, "f"], [71, 1, "g"], [72, 1, "h"], [73, 1, "i"], [74, 1, "j"], [75, 1, "k"], [76, 1, "l"], [77, 1, "m"], [78, 1, "n"], [79, 1, "o"], [80, 1, "p"], [81, 1, "q"], [82, 1, "r"], [83, 1, "s"], [84, 1, "t"], [85, 1, "u"], [86, 1, "v"], [87, 1, "w"], [88, 1, "x"], [89, 1, "y"], [90, 1, "z"], [[91, 96], 4], [[97, 122], 2], [[123, 127], 4], [[128, 159], 3], [160, 5, " "], [[161, 167], 2], [168, 5, " ̈"], [169, 2], [170, 1, "a"], [[171, 172], 2], [173, 7], [174, 2], [175, 5, " ̄"], [[176, 177], 2], [178, 1, "2"], [179, 1, "3"], [180, 5, " ́"], [181, 1, "μ"], [182, 2], [183, 2], [184, 5, " ̧"], [185, 1, "1"], [186, 1, "o"], [187, 2], [188, 1, "1⁄4"], [189, 1, "1⁄2"], [190, 1, "3⁄4"], [191, 2], [192, 1, "à"], [193, 1, "á"], [194, 1, "â"], [195, 1, "ã"], [196, 1, "ä"], [197, 1, "å"], [198, 1, "æ"], [199, 1, "ç"], [200, 1, "è"], [201, 1, "é"], [202, 1, "ê"], [203, 1, "ë"], [204, 1, "ì"], [205, 1, "í"], [206, 1, "î"], [207, 1, "ï"], [208, 1, "ð"], [209, 1, "ñ"], [210, 1, "ò"], [211, 1, "ó"], [212, 1, "ô"], [213, 1, "õ"], [214, 1, "ö"], [215, 2], [216, 1, "ø"], [217, 1, "ù"], [218, 1, "ú"], [219, 1, "û"], [220, 1, "ü"], [221, 1, "ý"], [222, 1, "þ"], [223, 6, "ss"], [[224, 246], 2], [247, 2], [[248, 255], 2], [256, 1, "ā"], [257, 2], [258, 1, "ă"], [259, 2], [260, 1, "ą"], [261, 2], [262, 1, "ć"], [263, 2], [264, 1, "ĉ"], [265, 2], [266, 1, "ċ"], [267, 2], [268, 1, "č"], [269, 2], [270, 1, "ď"], [271, 2], [272, 1, "đ"], [273, 2], [274, 1, "ē"], [275, 2], [276, 1, "ĕ"], [277, 2], [278, 1, "ė"], [279, 2], [280, 1, "ę"], [281, 2], [282, 1, "ě"], [283, 2], [284, 1, "ĝ"], [285, 2], [286, 1, "ğ"], [287, 2], [288, 1, "ġ"], [289, 2], [290, 1, "ģ"], [291, 2], [292, 1, "ĥ"], [293, 2], [294, 1, "ħ"], [295, 2], [296, 1, "ĩ"], [297, 2], [298, 1, "ī"], [299, 2], [300, 1, "ĭ"], [301, 2], [302, 1, "į"], [303, 2], [304, 1, "i̇"], [305, 2], [[306, 307], 1, "ij"], [308, 1, "ĵ"], [309, 2], [310, 1, "ķ"], [[311, 312], 2], [313, 1, "ĺ"], [314, 2], [315, 1, "ļ"], [316, 2], [317, 1, "ľ"], [318, 2], [[319, 320], 1, "l·"], [321, 1, "ł"], [322, 2], [323, 1, "ń"], [324, 2], [325, 1, "ņ"], [326, 2], [327, 1, "ň"], [328, 2], [329, 1, "ʼn"], [330, 1, "ŋ"], [331, 2], [332, 1, "ō"], [333, 2], [334, 1, "ŏ"], [335, 2], [336, 1, "ő"], [337, 2], [338, 1, "œ"], [339, 2], [340, 1, "ŕ"], [341, 2], [342, 1, "ŗ"], [343, 2], [344, 1, "ř"], [345, 2], [346, 1, "ś"], [347, 2], [348, 1, "ŝ"], [349, 2], [350, 1, "ş"], [351, 2], [352, 1, "š"], [353, 2], [354, 1, "ţ"], [355, 2], [356, 1, "ť"], [357, 2], [358, 1, "ŧ"], [359, 2], [360, 1, "ũ"], [361, 2], [362, 1, "ū"], [363, 2], [364, 1, "ŭ"], [365, 2], [366, 1, "ů"], [367, 2], [368, 1, "ű"], [369, 2], [370, 1, "ų"], [371, 2], [372, 1, "ŵ"], [373, 2], [374, 1, "ŷ"], [375, 2], [376, 1, "ÿ"], [377, 1, "ź"], [378, 2], [379, 1, "ż"], [380, 2], [381, 1, "ž"], [382, 2], [383, 1, "s"], [384, 2], [385, 1, "ɓ"], [386, 1, "ƃ"], [387, 2], [388, 1, "ƅ"], [389, 2], [390, 1, "ɔ"], [391, 1, "ƈ"], [392, 2], [393, 1, "ɖ"], [394, 1, "ɗ"], [395, 1, "ƌ"], [[396, 397], 2], [398, 1, "ǝ"], [399, 1, "ə"], [400, 1, "ɛ"], [401, 1, "ƒ"], [402, 2], [403, 1, "ɠ"], [404, 1, "ɣ"], [405, 2], [406, 1, "ɩ"], [407, 1, "ɨ"], [408, 1, "ƙ"], [[409, 411], 2], [412, 1, "ɯ"], [413, 1, "ɲ"], [414, 2], [415, 1, "ɵ"], [416, 1, "ơ"], [417, 2], [418, 1, "ƣ"], [419, 2], [420, 1, "ƥ"], [421, 2], [422, 1, "ʀ"], [423, 1, "ƨ"], [424, 2], [425, 1, "ʃ"], [[426, 427], 2], [428, 1, "ƭ"], [429, 2], [430, 1, "ʈ"], [431, 1, "ư"], [432, 2], [433, 1, "ʊ"], [434, 1, "ʋ"], [435, 1, "ƴ"], [436, 2], [437, 1, "ƶ"], [438, 2], [439, 1, "ʒ"], [440, 1, "ƹ"], [[441, 443], 2], [444, 1, "ƽ"], [[445, 451], 2], [[452, 454], 1, "dž"], [[455, 457], 1, "lj"], [[458, 460], 1, "nj"], [461, 1, "ǎ"], [462, 2], [463, 1, "ǐ"], [464, 2], [465, 1, "ǒ"], [466, 2], [467, 1, "ǔ"], [468, 2], [469, 1, "ǖ"], [470, 2], [471, 1, "ǘ"], [472, 2], [473, 1, "ǚ"], [474, 2], [475, 1, "ǜ"], [[476, 477], 2], [478, 1, "ǟ"], [479, 2], [480, 1, "ǡ"], [481, 2], [482, 1, "ǣ"], [483, 2], [484, 1, "ǥ"], [485, 2], [486, 1, "ǧ"], [487, 2], [488, 1, "ǩ"], [489, 2], [490, 1, "ǫ"], [491, 2], [492, 1, "ǭ"], [493, 2], [494, 1, "ǯ"], [[495, 496], 2], [[497, 499], 1, "dz"], [500, 1, "ǵ"], [501, 2], [502, 1, "ƕ"], [503, 1, "ƿ"], [504, 1, "ǹ"], [505, 2], [506, 1, "ǻ"], [507, 2], [508, 1, "ǽ"], [509, 2], [510, 1, "ǿ"], [511, 2], [512, 1, "ȁ"], [513, 2], [514, 1, "ȃ"], [515, 2], [516, 1, "ȅ"], [517, 2], [518, 1, "ȇ"], [519, 2], [520, 1, "ȉ"], [521, 2], [522, 1, "ȋ"], [523, 2], [524, 1, "ȍ"], [525, 2], [526, 1, "ȏ"], [527, 2], [528, 1, "ȑ"], [529, 2], [530, 1, "ȓ"], [531, 2], [532, 1, "ȕ"], [533, 2], [534, 1, "ȗ"], [535, 2], [536, 1, "ș"], [537, 2], [538, 1, "ț"], [539, 2], [540, 1, "ȝ"], [541, 2], [542, 1, "ȟ"], [543, 2], [544, 1, "ƞ"], [545, 2], [546, 1, "ȣ"], [547, 2], [548, 1, "ȥ"], [549, 2], [550, 1, "ȧ"], [551, 2], [552, 1, "ȩ"], [553, 2], [554, 1, "ȫ"], [555, 2], [556, 1, "ȭ"], [557, 2], [558, 1, "ȯ"], [559, 2], [560, 1, "ȱ"], [561, 2], [562, 1, "ȳ"], [563, 2], [[564, 566], 2], [[567, 569], 2], [570, 1, "ⱥ"], [571, 1, "ȼ"], [572, 2], [573, 1, "ƚ"], [574, 1, "ⱦ"], [[575, 576], 2], [577, 1, "ɂ"], [578, 2], [579, 1, "ƀ"], [580, 1, "ʉ"], [581, 1, "ʌ"], [582, 1, "ɇ"], [583, 2], [584, 1, "ɉ"], [585, 2], [586, 1, "ɋ"], [587, 2], [588, 1, "ɍ"], [589, 2], [590, 1, "ɏ"], [591, 2], [[592, 680], 2], [[681, 685], 2], [[686, 687], 2], [688, 1, "h"], [689, 1, "ɦ"], [690, 1, "j"], [691, 1, "r"], [692, 1, "ɹ"], [693, 1, "ɻ"], [694, 1, "ʁ"], [695, 1, "w"], [696, 1, "y"], [[697, 705], 2], [[706, 709], 2], [[710, 721], 2], [[722, 727], 2], [728, 5, " ̆"], [729, 5, " ̇"], [730, 5, " ̊"], [731, 5, " ̨"], [732, 5, " ̃"], [733, 5, " ̋"], [734, 2], [735, 2], [736, 1, "ɣ"], [737, 1, "l"], [738, 1, "s"], [739, 1, "x"], [740, 1, "ʕ"], [[741, 745], 2], [[746, 747], 2], [748, 2], [749, 2], [750, 2], [[751, 767], 2], [[768, 831], 2], [832, 1, "̀"], [833, 1, "́"], [834, 2], [835, 1, "̓"], [836, 1, "̈́"], [837, 1, "ι"], [[838, 846], 2], [847, 7], [[848, 855], 2], [[856, 860], 2], [[861, 863], 2], [[864, 865], 2], [866, 2], [[867, 879], 2], [880, 1, "ͱ"], [881, 2], [882, 1, "ͳ"], [883, 2], [884, 1, "ʹ"], [885, 2], [886, 1, "ͷ"], [887, 2], [[888, 889], 3], [890, 5, " ι"], [[891, 893], 2], [894, 5, ";"], [895, 1, "ϳ"], [[896, 899], 3], [900, 5, " ́"], [901, 5, " ̈́"], [902, 1, "ά"], [903, 1, "·"], [904, 1, "έ"], [905, 1, "ή"], [906, 1, "ί"], [907, 3], [908, 1, "ό"], [909, 3], [910, 1, "ύ"], [911, 1, "ώ"], [912, 2], [913, 1, "α"], [914, 1, "β"], [915, 1, "γ"], [916, 1, "δ"], [917, 1, "ε"], [918, 1, "ζ"], [919, 1, "η"], [920, 1, "θ"], [921, 1, "ι"], [922, 1, "κ"], [923, 1, "λ"], [924, 1, "μ"], [925, 1, "ν"], [926, 1, "ξ"], [927, 1, "ο"], [928, 1, "π"], [929, 1, "ρ"], [930, 3], [931, 1, "σ"], [932, 1, "τ"], [933, 1, "υ"], [934, 1, "φ"], [935, 1, "χ"], [936, 1, "ψ"], [937, 1, "ω"], [938, 1, "ϊ"], [939, 1, "ϋ"], [[940, 961], 2], [962, 6, "σ"], [[963, 974], 2], [975, 1, "ϗ"], [976, 1, "β"], [977, 1, "θ"], [978, 1, "υ"], [979, 1, "ύ"], [980, 1, "ϋ"], [981, 1, "φ"], [982, 1, "π"], [983, 2], [984, 1, "ϙ"], [985, 2], [986, 1, "ϛ"], [987, 2], [988, 1, "ϝ"], [989, 2], [990, 1, "ϟ"], [991, 2], [992, 1, "ϡ"], [993, 2], [994, 1, "ϣ"], [995, 2], [996, 1, "ϥ"], [997, 2], [998, 1, "ϧ"], [999, 2], [1000, 1, "ϩ"], [1001, 2], [1002, 1, "ϫ"], [1003, 2], [1004, 1, "ϭ"], [1005, 2], [1006, 1, "ϯ"], [1007, 2], [1008, 1, "κ"], [1009, 1, "ρ"], [1010, 1, "σ"], [1011, 2], [1012, 1, "θ"], [1013, 1, "ε"], [1014, 2], [1015, 1, "ϸ"], [1016, 2], [1017, 1, "σ"], [1018, 1, "ϻ"], [1019, 2], [1020, 2], [1021, 1, "ͻ"], [1022, 1, "ͼ"], [1023, 1, "ͽ"], [1024, 1, "ѐ"], [1025, 1, "ё"], [1026, 1, "ђ"], [1027, 1, "ѓ"], [1028, 1, "є"], [1029, 1, "ѕ"], [1030, 1, "і"], [1031, 1, "ї"], [1032, 1, "ј"], [1033, 1, "љ"], [1034, 1, "њ"], [1035, 1, "ћ"], [1036, 1, "ќ"], [1037, 1, "ѝ"], [1038, 1, "ў"], [1039, 1, "џ"], [1040, 1, "а"], [1041, 1, "б"], [1042, 1, "в"], [1043, 1, "г"], [1044, 1, "д"], [1045, 1, "е"], [1046, 1, "ж"], [1047, 1, "з"], [1048, 1, "и"], [1049, 1, "й"], [1050, 1, "к"], [1051, 1, "л"], [1052, 1, "м"], [1053, 1, "н"], [1054, 1, "о"], [1055, 1, "п"], [1056, 1, "р"], [1057, 1, "с"], [1058, 1, "т"], [1059, 1, "у"], [1060, 1, "ф"], [1061, 1, "х"], [1062, 1, "ц"], [1063, 1, "ч"], [1064, 1, "ш"], [1065, 1, "щ"], [1066, 1, "ъ"], [1067, 1, "ы"], [1068, 1, "ь"], [1069, 1, "э"], [1070, 1, "ю"], [1071, 1, "я"], [[1072, 1103], 2], [1104, 2], [[1105, 1116], 2], [1117, 2], [[1118, 1119], 2], [1120, 1, "ѡ"], [1121, 2], [1122, 1, "ѣ"], [1123, 2], [1124, 1, "ѥ"], [1125, 2], [1126, 1, "ѧ"], [1127, 2], [1128, 1, "ѩ"], [1129, 2], [1130, 1, "ѫ"], [1131, 2], [1132, 1, "ѭ"], [1133, 2], [1134, 1, "ѯ"], [1135, 2], [1136, 1, "ѱ"], [1137, 2], [1138, 1, "ѳ"], [1139, 2], [1140, 1, "ѵ"], [1141, 2], [1142, 1, "ѷ"], [1143, 2], [1144, 1, "ѹ"], [1145, 2], [1146, 1, "ѻ"], [1147, 2], [1148, 1, "ѽ"], [1149, 2], [1150, 1, "ѿ"], [1151, 2], [1152, 1, "ҁ"], [1153, 2], [1154, 2], [[1155, 1158], 2], [1159, 2], [[1160, 1161], 2], [1162, 1, "ҋ"], [1163, 2], [1164, 1, "ҍ"], [1165, 2], [1166, 1, "ҏ"], [1167, 2], [1168, 1, "ґ"], [1169, 2], [1170, 1, "ғ"], [1171, 2], [1172, 1, "ҕ"], [1173, 2], [1174, 1, "җ"], [1175, 2], [1176, 1, "ҙ"], [1177, 2], [1178, 1, "қ"], [1179, 2], [1180, 1, "ҝ"], [1181, 2], [1182, 1, "ҟ"], [1183, 2], [1184, 1, "ҡ"], [1185, 2], [1186, 1, "ң"], [1187, 2], [1188, 1, "ҥ"], [1189, 2], [1190, 1, "ҧ"], [1191, 2], [1192, 1, "ҩ"], [1193, 2], [1194, 1, "ҫ"], [1195, 2], [1196, 1, "ҭ"], [1197, 2], [1198, 1, "ү"], [1199, 2], [1200, 1, "ұ"], [1201, 2], [1202, 1, "ҳ"], [1203, 2], [1204, 1, "ҵ"], [1205, 2], [1206, 1, "ҷ"], [1207, 2], [1208, 1, "ҹ"], [1209, 2], [1210, 1, "һ"], [1211, 2], [1212, 1, "ҽ"], [1213, 2], [1214, 1, "ҿ"], [1215, 2], [1216, 3], [1217, 1, "ӂ"], [1218, 2], [1219, 1, "ӄ"], [1220, 2], [1221, 1, "ӆ"], [1222, 2], [1223, 1, "ӈ"], [1224, 2], [1225, 1, "ӊ"], [1226, 2], [1227, 1, "ӌ"], [1228, 2], [1229, 1, "ӎ"], [1230, 2], [1231, 2], [1232, 1, "ӑ"], [1233, 2], [1234, 1, "ӓ"], [1235, 2], [1236, 1, "ӕ"], [1237, 2], [1238, 1, "ӗ"], [1239, 2], [1240, 1, "ә"], [1241, 2], [1242, 1, "ӛ"], [1243, 2], [1244, 1, "ӝ"], [1245, 2], [1246, 1, "ӟ"], [1247, 2], [1248, 1, "ӡ"], [1249, 2], [1250, 1, "ӣ"], [1251, 2], [1252, 1, "ӥ"], [1253, 2], [1254, 1, "ӧ"], [1255, 2], [1256, 1, "ө"], [1257, 2], [1258, 1, "ӫ"], [1259, 2], [1260, 1, "ӭ"], [1261, 2], [1262, 1, "ӯ"], [1263, 2], [1264, 1, "ӱ"], [1265, 2], [1266, 1, "ӳ"], [1267, 2], [1268, 1, "ӵ"], [1269, 2], [1270, 1, "ӷ"], [1271, 2], [1272, 1, "ӹ"], [1273, 2], [1274, 1, "ӻ"], [1275, 2], [1276, 1, "ӽ"], [1277, 2], [1278, 1, "ӿ"], [1279, 2], [1280, 1, "ԁ"], [1281, 2], [1282, 1, "ԃ"], [1283, 2], [1284, 1, "ԅ"], [1285, 2], [1286, 1, "ԇ"], [1287, 2], [1288, 1, "ԉ"], [1289, 2], [1290, 1, "ԋ"], [1291, 2], [1292, 1, "ԍ"], [1293, 2], [1294, 1, "ԏ"], [1295, 2], [1296, 1, "ԑ"], [1297, 2], [1298, 1, "ԓ"], [1299, 2], [1300, 1, "ԕ"], [1301, 2], [1302, 1, "ԗ"], [1303, 2], [1304, 1, "ԙ"], [1305, 2], [1306, 1, "ԛ"], [1307, 2], [1308, 1, "ԝ"], [1309, 2], [1310, 1, "ԟ"], [1311, 2], [1312, 1, "ԡ"], [1313, 2], [1314, 1, "ԣ"], [1315, 2], [1316, 1, "ԥ"], [1317, 2], [1318, 1, "ԧ"], [1319, 2], [1320, 1, "ԩ"], [1321, 2], [1322, 1, "ԫ"], [1323, 2], [1324, 1, "ԭ"], [1325, 2], [1326, 1, "ԯ"], [1327, 2], [1328, 3], [1329, 1, "ա"], [1330, 1, "բ"], [1331, 1, "գ"], [1332, 1, "դ"], [1333, 1, "ե"], [1334, 1, "զ"], [1335, 1, "է"], [1336, 1, "ը"], [1337, 1, "թ"], [1338, 1, "ժ"], [1339, 1, "ի"], [1340, 1, "լ"], [1341, 1, "խ"], [1342, 1, "ծ"], [1343, 1, "կ"], [1344, 1, "հ"], [1345, 1, "ձ"], [1346, 1, "ղ"], [1347, 1, "ճ"], [1348, 1, "մ"], [1349, 1, "յ"], [1350, 1, "ն"], [1351, 1, "շ"], [1352, 1, "ո"], [1353, 1, "չ"], [1354, 1, "պ"], [1355, 1, "ջ"], [1356, 1, "ռ"], [1357, 1, "ս"], [1358, 1, "վ"], [1359, 1, "տ"], [1360, 1, "ր"], [1361, 1, "ց"], [1362, 1, "ւ"], [1363, 1, "փ"], [1364, 1, "ք"], [1365, 1, "օ"], [1366, 1, "ֆ"], [[1367, 1368], 3], [1369, 2], [[1370, 1375], 2], [1376, 2], [[1377, 1414], 2], [1415, 1, "եւ"], [1416, 2], [1417, 2], [1418, 2], [[1419, 1420], 3], [[1421, 1422], 2], [1423, 2], [1424, 3], [[1425, 1441], 2], [1442, 2], [[1443, 1455], 2], [[1456, 1465], 2], [1466, 2], [[1467, 1469], 2], [1470, 2], [1471, 2], [1472, 2], [[1473, 1474], 2], [1475, 2], [1476, 2], [1477, 2], [1478, 2], [1479, 2], [[1480, 1487], 3], [[1488, 1514], 2], [[1515, 1518], 3], [1519, 2], [[1520, 1524], 2], [[1525, 1535], 3], [[1536, 1539], 3], [1540, 3], [1541, 3], [[1542, 1546], 2], [1547, 2], [1548, 2], [[1549, 1551], 2], [[1552, 1557], 2], [[1558, 1562], 2], [1563, 2], [1564, 3], [1565, 2], [1566, 2], [1567, 2], [1568, 2], [[1569, 1594], 2], [[1595, 1599], 2], [1600, 2], [[1601, 1618], 2], [[1619, 1621], 2], [[1622, 1624], 2], [[1625, 1630], 2], [1631, 2], [[1632, 1641], 2], [[1642, 1645], 2], [[1646, 1647], 2], [[1648, 1652], 2], [1653, 1, "اٴ"], [1654, 1, "وٴ"], [1655, 1, "ۇٴ"], [1656, 1, "يٴ"], [[1657, 1719], 2], [[1720, 1721], 2], [[1722, 1726], 2], [1727, 2], [[1728, 1742], 2], [1743, 2], [[1744, 1747], 2], [1748, 2], [[1749, 1756], 2], [1757, 3], [1758, 2], [[1759, 1768], 2], [1769, 2], [[1770, 1773], 2], [[1774, 1775], 2], [[1776, 1785], 2], [[1786, 1790], 2], [1791, 2], [[1792, 1805], 2], [1806, 3], [1807, 3], [[1808, 1836], 2], [[1837, 1839], 2], [[1840, 1866], 2], [[1867, 1868], 3], [[1869, 1871], 2], [[1872, 1901], 2], [[1902, 1919], 2], [[1920, 1968], 2], [1969, 2], [[1970, 1983], 3], [[1984, 2037], 2], [[2038, 2042], 2], [[2043, 2044], 3], [2045, 2], [[2046, 2047], 2], [[2048, 2093], 2], [[2094, 2095], 3], [[2096, 2110], 2], [2111, 3], [[2112, 2139], 2], [[2140, 2141], 3], [2142, 2], [2143, 3], [[2144, 2154], 2], [[2155, 2159], 3], [[2160, 2183], 2], [2184, 2], [[2185, 2190], 2], [2191, 3], [[2192, 2193], 3], [[2194, 2199], 3], [[2200, 2207], 2], [2208, 2], [2209, 2], [[2210, 2220], 2], [[2221, 2226], 2], [[2227, 2228], 2], [2229, 2], [[2230, 2237], 2], [[2238, 2247], 2], [[2248, 2258], 2], [2259, 2], [[2260, 2273], 2], [2274, 3], [2275, 2], [[2276, 2302], 2], [2303, 2], [2304, 2], [[2305, 2307], 2], [2308, 2], [[2309, 2361], 2], [[2362, 2363], 2], [[2364, 2381], 2], [2382, 2], [2383, 2], [[2384, 2388], 2], [2389, 2], [[2390, 2391], 2], [2392, 1, "क़"], [2393, 1, "ख़"], [2394, 1, "ग़"], [2395, 1, "ज़"], [2396, 1, "ड़"], [2397, 1, "ढ़"], [2398, 1, "फ़"], [2399, 1, "य़"], [[2400, 2403], 2], [[2404, 2405], 2], [[2406, 2415], 2], [2416, 2], [[2417, 2418], 2], [[2419, 2423], 2], [2424, 2], [[2425, 2426], 2], [[2427, 2428], 2], [2429, 2], [[2430, 2431], 2], [2432, 2], [[2433, 2435], 2], [2436, 3], [[2437, 2444], 2], [[2445, 2446], 3], [[2447, 2448], 2], [[2449, 2450], 3], [[2451, 2472], 2], [2473, 3], [[2474, 2480], 2], [2481, 3], [2482, 2], [[2483, 2485], 3], [[2486, 2489], 2], [[2490, 2491], 3], [2492, 2], [2493, 2], [[2494, 2500], 2], [[2501, 2502], 3], [[2503, 2504], 2], [[2505, 2506], 3], [[2507, 2509], 2], [2510, 2], [[2511, 2518], 3], [2519, 2], [[2520, 2523], 3], [2524, 1, "ড়"], [2525, 1, "ঢ়"], [2526, 3], [2527, 1, "য়"], [[2528, 2531], 2], [[2532, 2533], 3], [[2534, 2545], 2], [[2546, 2554], 2], [2555, 2], [2556, 2], [2557, 2], [2558, 2], [[2559, 2560], 3], [2561, 2], [2562, 2], [2563, 2], [2564, 3], [[2565, 2570], 2], [[2571, 2574], 3], [[2575, 2576], 2], [[2577, 2578], 3], [[2579, 2600], 2], [2601, 3], [[2602, 2608], 2], [2609, 3], [2610, 2], [2611, 1, "ਲ਼"], [2612, 3], [2613, 2], [2614, 1, "ਸ਼"], [2615, 3], [[2616, 2617], 2], [[2618, 2619], 3], [2620, 2], [2621, 3], [[2622, 2626], 2], [[2627, 2630], 3], [[2631, 2632], 2], [[2633, 2634], 3], [[2635, 2637], 2], [[2638, 2640], 3], [2641, 2], [[2642, 2648], 3], [2649, 1, "ਖ਼"], [2650, 1, "ਗ਼"], [2651, 1, "ਜ਼"], [2652, 2], [2653, 3], [2654, 1, "ਫ਼"], [[2655, 2661], 3], [[2662, 2676], 2], [2677, 2], [2678, 2], [[2679, 2688], 3], [[2689, 2691], 2], [2692, 3], [[2693, 2699], 2], [2700, 2], [2701, 2], [2702, 3], [[2703, 2705], 2], [2706, 3], [[2707, 2728], 2], [2729, 3], [[2730, 2736], 2], [2737, 3], [[2738, 2739], 2], [2740, 3], [[2741, 2745], 2], [[2746, 2747], 3], [[2748, 2757], 2], [2758, 3], [[2759, 2761], 2], [2762, 3], [[2763, 2765], 2], [[2766, 2767], 3], [2768, 2], [[2769, 2783], 3], [2784, 2], [[2785, 2787], 2], [[2788, 2789], 3], [[2790, 2799], 2], [2800, 2], [2801, 2], [[2802, 2808], 3], [2809, 2], [[2810, 2815], 2], [2816, 3], [[2817, 2819], 2], [2820, 3], [[2821, 2828], 2], [[2829, 2830], 3], [[2831, 2832], 2], [[2833, 2834], 3], [[2835, 2856], 2], [2857, 3], [[2858, 2864], 2], [2865, 3], [[2866, 2867], 2], [2868, 3], [2869, 2], [[2870, 2873], 2], [[2874, 2875], 3], [[2876, 2883], 2], [2884, 2], [[2885, 2886], 3], [[2887, 2888], 2], [[2889, 2890], 3], [[2891, 2893], 2], [[2894, 2900], 3], [2901, 2], [[2902, 2903], 2], [[2904, 2907], 3], [2908, 1, "ଡ଼"], [2909, 1, "ଢ଼"], [2910, 3], [[2911, 2913], 2], [[2914, 2915], 2], [[2916, 2917], 3], [[2918, 2927], 2], [2928, 2], [2929, 2], [[2930, 2935], 2], [[2936, 2945], 3], [[2946, 2947], 2], [2948, 3], [[2949, 2954], 2], [[2955, 2957], 3], [[2958, 2960], 2], [2961, 3], [[2962, 2965], 2], [[2966, 2968], 3], [[2969, 2970], 2], [2971, 3], [2972, 2], [2973, 3], [[2974, 2975], 2], [[2976, 2978], 3], [[2979, 2980], 2], [[2981, 2983], 3], [[2984, 2986], 2], [[2987, 2989], 3], [[2990, 2997], 2], [2998, 2], [[2999, 3001], 2], [[3002, 3005], 3], [[3006, 3010], 2], [[3011, 3013], 3], [[3014, 3016], 2], [3017, 3], [[3018, 3021], 2], [[3022, 3023], 3], [3024, 2], [[3025, 3030], 3], [3031, 2], [[3032, 3045], 3], [3046, 2], [[3047, 3055], 2], [[3056, 3058], 2], [[3059, 3066], 2], [[3067, 3071], 3], [3072, 2], [[3073, 3075], 2], [3076, 2], [[3077, 3084], 2], [3085, 3], [[3086, 3088], 2], [3089, 3], [[3090, 3112], 2], [3113, 3], [[3114, 3123], 2], [3124, 2], [[3125, 3129], 2], [[3130, 3131], 3], [3132, 2], [3133, 2], [[3134, 3140], 2], [3141, 3], [[3142, 3144], 2], [3145, 3], [[3146, 3149], 2], [[3150, 3156], 3], [[3157, 3158], 2], [3159, 3], [[3160, 3161], 2], [3162, 2], [[3163, 3164], 3], [3165, 2], [[3166, 3167], 3], [[3168, 3169], 2], [[3170, 3171], 2], [[3172, 3173], 3], [[3174, 3183], 2], [[3184, 3190], 3], [3191, 2], [[3192, 3199], 2], [3200, 2], [3201, 2], [[3202, 3203], 2], [3204, 2], [[3205, 3212], 2], [3213, 3], [[3214, 3216], 2], [3217, 3], [[3218, 3240], 2], [3241, 3], [[3242, 3251], 2], [3252, 3], [[3253, 3257], 2], [[3258, 3259], 3], [[3260, 3261], 2], [[3262, 3268], 2], [3269, 3], [[3270, 3272], 2], [3273, 3], [[3274, 3277], 2], [[3278, 3284], 3], [[3285, 3286], 2], [[3287, 3292], 3], [3293, 2], [3294, 2], [3295, 3], [[3296, 3297], 2], [[3298, 3299], 2], [[3300, 3301], 3], [[3302, 3311], 2], [3312, 3], [[3313, 3314], 2], [3315, 2], [[3316, 3327], 3], [3328, 2], [3329, 2], [[3330, 3331], 2], [3332, 2], [[3333, 3340], 2], [3341, 3], [[3342, 3344], 2], [3345, 3], [[3346, 3368], 2], [3369, 2], [[3370, 3385], 2], [3386, 2], [[3387, 3388], 2], [3389, 2], [[3390, 3395], 2], [3396, 2], [3397, 3], [[3398, 3400], 2], [3401, 3], [[3402, 3405], 2], [3406, 2], [3407, 2], [[3408, 3411], 3], [[3412, 3414], 2], [3415, 2], [[3416, 3422], 2], [3423, 2], [[3424, 3425], 2], [[3426, 3427], 2], [[3428, 3429], 3], [[3430, 3439], 2], [[3440, 3445], 2], [[3446, 3448], 2], [3449, 2], [[3450, 3455], 2], [3456, 3], [3457, 2], [[3458, 3459], 2], [3460, 3], [[3461, 3478], 2], [[3479, 3481], 3], [[3482, 3505], 2], [3506, 3], [[3507, 3515], 2], [3516, 3], [3517, 2], [[3518, 3519], 3], [[3520, 3526], 2], [[3527, 3529], 3], [3530, 2], [[3531, 3534], 3], [[3535, 3540], 2], [3541, 3], [3542, 2], [3543, 3], [[3544, 3551], 2], [[3552, 3557], 3], [[3558, 3567], 2], [[3568, 3569], 3], [[3570, 3571], 2], [3572, 2], [[3573, 3584], 3], [[3585, 3634], 2], [3635, 1, "ํา"], [[3636, 3642], 2], [[3643, 3646], 3], [3647, 2], [[3648, 3662], 2], [3663, 2], [[3664, 3673], 2], [[3674, 3675], 2], [[3676, 3712], 3], [[3713, 3714], 2], [3715, 3], [3716, 2], [3717, 3], [3718, 2], [[3719, 3720], 2], [3721, 2], [3722, 2], [3723, 3], [3724, 2], [3725, 2], [[3726, 3731], 2], [[3732, 3735], 2], [3736, 2], [[3737, 3743], 2], [3744, 2], [[3745, 3747], 2], [3748, 3], [3749, 2], [3750, 3], [3751, 2], [[3752, 3753], 2], [[3754, 3755], 2], [3756, 2], [[3757, 3762], 2], [3763, 1, "ໍາ"], [[3764, 3769], 2], [3770, 2], [[3771, 3773], 2], [[3774, 3775], 3], [[3776, 3780], 2], [3781, 3], [3782, 2], [3783, 3], [[3784, 3789], 2], [3790, 2], [3791, 3], [[3792, 3801], 2], [[3802, 3803], 3], [3804, 1, "ຫນ"], [3805, 1, "ຫມ"], [[3806, 3807], 2], [[3808, 3839], 3], [3840, 2], [[3841, 3850], 2], [3851, 2], [3852, 1, "་"], [[3853, 3863], 2], [[3864, 3865], 2], [[3866, 3871], 2], [[3872, 3881], 2], [[3882, 3892], 2], [3893, 2], [3894, 2], [3895, 2], [3896, 2], [3897, 2], [[3898, 3901], 2], [[3902, 3906], 2], [3907, 1, "གྷ"], [[3908, 3911], 2], [3912, 3], [[3913, 3916], 2], [3917, 1, "ཌྷ"], [[3918, 3921], 2], [3922, 1, "དྷ"], [[3923, 3926], 2], [3927, 1, "བྷ"], [[3928, 3931], 2], [3932, 1, "ཛྷ"], [[3933, 3944], 2], [3945, 1, "ཀྵ"], [3946, 2], [[3947, 3948], 2], [[3949, 3952], 3], [[3953, 3954], 2], [3955, 1, "ཱི"], [3956, 2], [3957, 1, "ཱུ"], [3958, 1, "ྲྀ"], [3959, 1, "ྲཱྀ"], [3960, 1, "ླྀ"], [3961, 1, "ླཱྀ"], [[3962, 3968], 2], [3969, 1, "ཱྀ"], [[3970, 3972], 2], [3973, 2], [[3974, 3979], 2], [[3980, 3983], 2], [[3984, 3986], 2], [3987, 1, "ྒྷ"], [[3988, 3989], 2], [3990, 2], [3991, 2], [3992, 3], [[3993, 3996], 2], [3997, 1, "ྜྷ"], [[3998, 4001], 2], [4002, 1, "ྡྷ"], [[4003, 4006], 2], [4007, 1, "ྦྷ"], [[4008, 4011], 2], [4012, 1, "ྫྷ"], [4013, 2], [[4014, 4016], 2], [[4017, 4023], 2], [4024, 2], [4025, 1, "ྐྵ"], [[4026, 4028], 2], [4029, 3], [[4030, 4037], 2], [4038, 2], [[4039, 4044], 2], [4045, 3], [4046, 2], [4047, 2], [[4048, 4049], 2], [[4050, 4052], 2], [[4053, 4056], 2], [[4057, 4058], 2], [[4059, 4095], 3], [[4096, 4129], 2], [4130, 2], [[4131, 4135], 2], [4136, 2], [[4137, 4138], 2], [4139, 2], [[4140, 4146], 2], [[4147, 4149], 2], [[4150, 4153], 2], [[4154, 4159], 2], [[4160, 4169], 2], [[4170, 4175], 2], [[4176, 4185], 2], [[4186, 4249], 2], [[4250, 4253], 2], [[4254, 4255], 2], [[4256, 4293], 3], [4294, 3], [4295, 1, "ⴧ"], [[4296, 4300], 3], [4301, 1, "ⴭ"], [[4302, 4303], 3], [[4304, 4342], 2], [[4343, 4344], 2], [[4345, 4346], 2], [4347, 2], [4348, 1, "ნ"], [[4349, 4351], 2], [[4352, 4441], 2], [[4442, 4446], 2], [[4447, 4448], 3], [[4449, 4514], 2], [[4515, 4519], 2], [[4520, 4601], 2], [[4602, 4607], 2], [[4608, 4614], 2], [4615, 2], [[4616, 4678], 2], [4679, 2], [4680, 2], [4681, 3], [[4682, 4685], 2], [[4686, 4687], 3], [[4688, 4694], 2], [4695, 3], [4696, 2], [4697, 3], [[4698, 4701], 2], [[4702, 4703], 3], [[4704, 4742], 2], [4743, 2], [4744, 2], [4745, 3], [[4746, 4749], 2], [[4750, 4751], 3], [[4752, 4782], 2], [4783, 2], [4784, 2], [4785, 3], [[4786, 4789], 2], [[4790, 4791], 3], [[4792, 4798], 2], [4799, 3], [4800, 2], [4801, 3], [[4802, 4805], 2], [[4806, 4807], 3], [[4808, 4814], 2], [4815, 2], [[4816, 4822], 2], [4823, 3], [[4824, 4846], 2], [4847, 2], [[4848, 4878], 2], [4879, 2], [4880, 2], [4881, 3], [[4882, 4885], 2], [[4886, 4887], 3], [[4888, 4894], 2], [4895, 2], [[4896, 4934], 2], [4935, 2], [[4936, 4954], 2], [[4955, 4956], 3], [[4957, 4958], 2], [4959, 2], [4960, 2], [[4961, 4988], 2], [[4989, 4991], 3], [[4992, 5007], 2], [[5008, 5017], 2], [[5018, 5023], 3], [[5024, 5108], 2], [5109, 2], [[5110, 5111], 3], [5112, 1, "Ᏸ"], [5113, 1, "Ᏹ"], [5114, 1, "Ᏺ"], [5115, 1, "Ᏻ"], [5116, 1, "Ᏼ"], [5117, 1, "Ᏽ"], [[5118, 5119], 3], [5120, 2], [[5121, 5740], 2], [[5741, 5742], 2], [[5743, 5750], 2], [[5751, 5759], 2], [5760, 3], [[5761, 5786], 2], [[5787, 5788], 2], [[5789, 5791], 3], [[5792, 5866], 2], [[5867, 5872], 2], [[5873, 5880], 2], [[5881, 5887], 3], [[5888, 5900], 2], [5901, 2], [[5902, 5908], 2], [5909, 2], [[5910, 5918], 3], [5919, 2], [[5920, 5940], 2], [[5941, 5942], 2], [[5943, 5951], 3], [[5952, 5971], 2], [[5972, 5983], 3], [[5984, 5996], 2], [5997, 3], [[5998, 6000], 2], [6001, 3], [[6002, 6003], 2], [[6004, 6015], 3], [[6016, 6067], 2], [[6068, 6069], 3], [[6070, 6099], 2], [[6100, 6102], 2], [6103, 2], [[6104, 6107], 2], [6108, 2], [6109, 2], [[6110, 6111], 3], [[6112, 6121], 2], [[6122, 6127], 3], [[6128, 6137], 2], [[6138, 6143], 3], [[6144, 6149], 2], [6150, 3], [[6151, 6154], 2], [[6155, 6157], 7], [6158, 3], [6159, 7], [[6160, 6169], 2], [[6170, 6175], 3], [[6176, 6263], 2], [6264, 2], [[6265, 6271], 3], [[6272, 6313], 2], [6314, 2], [[6315, 6319], 3], [[6320, 6389], 2], [[6390, 6399], 3], [[6400, 6428], 2], [[6429, 6430], 2], [6431, 3], [[6432, 6443], 2], [[6444, 6447], 3], [[6448, 6459], 2], [[6460, 6463], 3], [6464, 2], [[6465, 6467], 3], [[6468, 6469], 2], [[6470, 6509], 2], [[6510, 6511], 3], [[6512, 6516], 2], [[6517, 6527], 3], [[6528, 6569], 2], [[6570, 6571], 2], [[6572, 6575], 3], [[6576, 6601], 2], [[6602, 6607], 3], [[6608, 6617], 2], [6618, 2], [[6619, 6621], 3], [[6622, 6623], 2], [[6624, 6655], 2], [[6656, 6683], 2], [[6684, 6685], 3], [[6686, 6687], 2], [[6688, 6750], 2], [6751, 3], [[6752, 6780], 2], [[6781, 6782], 3], [[6783, 6793], 2], [[6794, 6799], 3], [[6800, 6809], 2], [[6810, 6815], 3], [[6816, 6822], 2], [6823, 2], [[6824, 6829], 2], [[6830, 6831], 3], [[6832, 6845], 2], [6846, 2], [[6847, 6848], 2], [[6849, 6862], 2], [[6863, 6911], 3], [[6912, 6987], 2], [6988, 2], [[6989, 6991], 3], [[6992, 7001], 2], [[7002, 7018], 2], [[7019, 7027], 2], [[7028, 7036], 2], [[7037, 7038], 2], [7039, 3], [[7040, 7082], 2], [[7083, 7085], 2], [[7086, 7097], 2], [[7098, 7103], 2], [[7104, 7155], 2], [[7156, 7163], 3], [[7164, 7167], 2], [[7168, 7223], 2], [[7224, 7226], 3], [[7227, 7231], 2], [[7232, 7241], 2], [[7242, 7244], 3], [[7245, 7293], 2], [[7294, 7295], 2], [7296, 1, "в"], [7297, 1, "д"], [7298, 1, "о"], [7299, 1, "с"], [[7300, 7301], 1, "т"], [7302, 1, "ъ"], [7303, 1, "ѣ"], [7304, 1, "ꙋ"], [[7305, 7311], 3], [7312, 1, "ა"], [7313, 1, "ბ"], [7314, 1, "გ"], [7315, 1, "დ"], [7316, 1, "ე"], [7317, 1, "ვ"], [7318, 1, "ზ"], [7319, 1, "თ"], [7320, 1, "ი"], [7321, 1, "კ"], [7322, 1, "ლ"], [7323, 1, "მ"], [7324, 1, "ნ"], [7325, 1, "ო"], [7326, 1, "პ"], [7327, 1, "ჟ"], [7328, 1, "რ"], [7329, 1, "ს"], [7330, 1, "ტ"], [7331, 1, "უ"], [7332, 1, "ფ"], [7333, 1, "ქ"], [7334, 1, "ღ"], [7335, 1, "ყ"], [7336, 1, "შ"], [7337, 1, "ჩ"], [7338, 1, "ც"], [7339, 1, "ძ"], [7340, 1, "წ"], [7341, 1, "ჭ"], [7342, 1, "ხ"], [7343, 1, "ჯ"], [7344, 1, "ჰ"], [7345, 1, "ჱ"], [7346, 1, "ჲ"], [7347, 1, "ჳ"], [7348, 1, "ჴ"], [7349, 1, "ჵ"], [7350, 1, "ჶ"], [7351, 1, "ჷ"], [7352, 1, "ჸ"], [7353, 1, "ჹ"], [7354, 1, "ჺ"], [[7355, 7356], 3], [7357, 1, "ჽ"], [7358, 1, "ჾ"], [7359, 1, "ჿ"], [[7360, 7367], 2], [[7368, 7375], 3], [[7376, 7378], 2], [7379, 2], [[7380, 7410], 2], [[7411, 7414], 2], [7415, 2], [[7416, 7417], 2], [7418, 2], [[7419, 7423], 3], [[7424, 7467], 2], [7468, 1, "a"], [7469, 1, "æ"], [7470, 1, "b"], [7471, 2], [7472, 1, "d"], [7473, 1, "e"], [7474, 1, "ǝ"], [7475, 1, "g"], [7476, 1, "h"], [7477, 1, "i"], [7478, 1, "j"], [7479, 1, "k"], [7480, 1, "l"], [7481, 1, "m"], [7482, 1, "n"], [7483, 2], [7484, 1, "o"], [7485, 1, "ȣ"], [7486, 1, "p"], [7487, 1, "r"], [7488, 1, "t"], [7489, 1, "u"], [7490, 1, "w"], [7491, 1, "a"], [7492, 1, "ɐ"], [7493, 1, "ɑ"], [7494, 1, "ᴂ"], [7495, 1, "b"], [7496, 1, "d"], [7497, 1, "e"], [7498, 1, "ə"], [7499, 1, "ɛ"], [7500, 1, "ɜ"], [7501, 1, "g"], [7502, 2], [7503, 1, "k"], [7504, 1, "m"], [7505, 1, "ŋ"], [7506, 1, "o"], [7507, 1, "ɔ"], [7508, 1, "ᴖ"], [7509, 1, "ᴗ"], [7510, 1, "p"], [7511, 1, "t"], [7512, 1, "u"], [7513, 1, "ᴝ"], [7514, 1, "ɯ"], [7515, 1, "v"], [7516, 1, "ᴥ"], [7517, 1, "β"], [7518, 1, "γ"], [7519, 1, "δ"], [7520, 1, "φ"], [7521, 1, "χ"], [7522, 1, "i"], [7523, 1, "r"], [7524, 1, "u"], [7525, 1, "v"], [7526, 1, "β"], [7527, 1, "γ"], [7528, 1, "ρ"], [7529, 1, "φ"], [7530, 1, "χ"], [7531, 2], [[7532, 7543], 2], [7544, 1, "н"], [[7545, 7578], 2], [7579, 1, "ɒ"], [7580, 1, "c"], [7581, 1, "ɕ"], [7582, 1, "ð"], [7583, 1, "ɜ"], [7584, 1, "f"], [7585, 1, "ɟ"], [7586, 1, "ɡ"], [7587, 1, "ɥ"], [7588, 1, "ɨ"], [7589, 1, "ɩ"], [7590, 1, "ɪ"], [7591, 1, "ᵻ"], [7592, 1, "ʝ"], [7593, 1, "ɭ"], [7594, 1, "ᶅ"], [7595, 1, "ʟ"], [7596, 1, "ɱ"], [7597, 1, "ɰ"], [7598, 1, "ɲ"], [7599, 1, "ɳ"], [7600, 1, "ɴ"], [7601, 1, "ɵ"], [7602, 1, "ɸ"], [7603, 1, "ʂ"], [7604, 1, "ʃ"], [7605, 1, "ƫ"], [7606, 1, "ʉ"], [7607, 1, "ʊ"], [7608, 1, "ᴜ"], [7609, 1, "ʋ"], [7610, 1, "ʌ"], [7611, 1, "z"], [7612, 1, "ʐ"], [7613, 1, "ʑ"], [7614, 1, "ʒ"], [7615, 1, "θ"], [[7616, 7619], 2], [[7620, 7626], 2], [[7627, 7654], 2], [[7655, 7669], 2], [[7670, 7673], 2], [7674, 2], [7675, 2], [7676, 2], [7677, 2], [[7678, 7679], 2], [7680, 1, "ḁ"], [7681, 2], [7682, 1, "ḃ"], [7683, 2], [7684, 1, "ḅ"], [7685, 2], [7686, 1, "ḇ"], [7687, 2], [7688, 1, "ḉ"], [7689, 2], [7690, 1, "ḋ"], [7691, 2], [7692, 1, "ḍ"], [7693, 2], [7694, 1, "ḏ"], [7695, 2], [7696, 1, "ḑ"], [7697, 2], [7698, 1, "ḓ"], [7699, 2], [7700, 1, "ḕ"], [7701, 2], [7702, 1, "ḗ"], [7703, 2], [7704, 1, "ḙ"], [7705, 2], [7706, 1, "ḛ"], [7707, 2], [7708, 1, "ḝ"], [7709, 2], [7710, 1, "ḟ"], [7711, 2], [7712, 1, "ḡ"], [7713, 2], [7714, 1, "ḣ"], [7715, 2], [7716, 1, "ḥ"], [7717, 2], [7718, 1, "ḧ"], [7719, 2], [7720, 1, "ḩ"], [7721, 2], [7722, 1, "ḫ"], [7723, 2], [7724, 1, "ḭ"], [7725, 2], [7726, 1, "ḯ"], [7727, 2], [7728, 1, "ḱ"], [7729, 2], [7730, 1, "ḳ"], [7731, 2], [7732, 1, "ḵ"], [7733, 2], [7734, 1, "ḷ"], [7735, 2], [7736, 1, "ḹ"], [7737, 2], [7738, 1, "ḻ"], [7739, 2], [7740, 1, "ḽ"], [7741, 2], [7742, 1, "ḿ"], [7743, 2], [7744, 1, "ṁ"], [7745, 2], [7746, 1, "ṃ"], [7747, 2], [7748, 1, "ṅ"], [7749, 2], [7750, 1, "ṇ"], [7751, 2], [7752, 1, "ṉ"], [7753, 2], [7754, 1, "ṋ"], [7755, 2], [7756, 1, "ṍ"], [7757, 2], [7758, 1, "ṏ"], [7759, 2], [7760, 1, "ṑ"], [7761, 2], [7762, 1, "ṓ"], [7763, 2], [7764, 1, "ṕ"], [7765, 2], [7766, 1, "ṗ"], [7767, 2], [7768, 1, "ṙ"], [7769, 2], [7770, 1, "ṛ"], [7771, 2], [7772, 1, "ṝ"], [7773, 2], [7774, 1, "ṟ"], [7775, 2], [7776, 1, "ṡ"], [7777, 2], [7778, 1, "ṣ"], [7779, 2], [7780, 1, "ṥ"], [7781, 2], [7782, 1, "ṧ"], [7783, 2], [7784, 1, "ṩ"], [7785, 2], [7786, 1, "ṫ"], [7787, 2], [7788, 1, "ṭ"], [7789, 2], [7790, 1, "ṯ"], [7791, 2], [7792, 1, "ṱ"], [7793, 2], [7794, 1, "ṳ"], [7795, 2], [7796, 1, "ṵ"], [7797, 2], [7798, 1, "ṷ"], [7799, 2], [7800, 1, "ṹ"], [7801, 2], [7802, 1, "ṻ"], [7803, 2], [7804, 1, "ṽ"], [7805, 2], [7806, 1, "ṿ"], [7807, 2], [7808, 1, "ẁ"], [7809, 2], [7810, 1, "ẃ"], [7811, 2], [7812, 1, "ẅ"], [7813, 2], [7814, 1, "ẇ"], [7815, 2], [7816, 1, "ẉ"], [7817, 2], [7818, 1, "ẋ"], [7819, 2], [7820, 1, "ẍ"], [7821, 2], [7822, 1, "ẏ"], [7823, 2], [7824, 1, "ẑ"], [7825, 2], [7826, 1, "ẓ"], [7827, 2], [7828, 1, "ẕ"], [[7829, 7833], 2], [7834, 1, "aʾ"], [7835, 1, "ṡ"], [[7836, 7837], 2], [7838, 1, "ß"], [7839, 2], [7840, 1, "ạ"], [7841, 2], [7842, 1, "ả"], [7843, 2], [7844, 1, "ấ"], [7845, 2], [7846, 1, "ầ"], [7847, 2], [7848, 1, "ẩ"], [7849, 2], [7850, 1, "ẫ"], [7851, 2], [7852, 1, "ậ"], [7853, 2], [7854, 1, "ắ"], [7855, 2], [7856, 1, "ằ"], [7857, 2], [7858, 1, "ẳ"], [7859, 2], [7860, 1, "ẵ"], [7861, 2], [7862, 1, "ặ"], [7863, 2], [7864, 1, "ẹ"], [7865, 2], [7866, 1, "ẻ"], [7867, 2], [7868, 1, "ẽ"], [7869, 2], [7870, 1, "ế"], [7871, 2], [7872, 1, "ề"], [7873, 2], [7874, 1, "ể"], [7875, 2], [7876, 1, "ễ"], [7877, 2], [7878, 1, "ệ"], [7879, 2], [7880, 1, "ỉ"], [7881, 2], [7882, 1, "ị"], [7883, 2], [7884, 1, "ọ"], [7885, 2], [7886, 1, "ỏ"], [7887, 2], [7888, 1, "ố"], [7889, 2], [7890, 1, "ồ"], [7891, 2], [7892, 1, "ổ"], [7893, 2], [7894, 1, "ỗ"], [7895, 2], [7896, 1, "ộ"], [7897, 2], [7898, 1, "ớ"], [7899, 2], [7900, 1, "ờ"], [7901, 2], [7902, 1, "ở"], [7903, 2], [7904, 1, "ỡ"], [7905, 2], [7906, 1, "ợ"], [7907, 2], [7908, 1, "ụ"], [7909, 2], [7910, 1, "ủ"], [7911, 2], [7912, 1, "ứ"], [7913, 2], [7914, 1, "ừ"], [7915, 2], [7916, 1, "ử"], [7917, 2], [7918, 1, "ữ"], [7919, 2], [7920, 1, "ự"], [7921, 2], [7922, 1, "ỳ"], [7923, 2], [7924, 1, "ỵ"], [7925, 2], [7926, 1, "ỷ"], [7927, 2], [7928, 1, "ỹ"], [7929, 2], [7930, 1, "ỻ"], [7931, 2], [7932, 1, "ỽ"], [7933, 2], [7934, 1, "ỿ"], [7935, 2], [[7936, 7943], 2], [7944, 1, "ἀ"], [7945, 1, "ἁ"], [7946, 1, "ἂ"], [7947, 1, "ἃ"], [7948, 1, "ἄ"], [7949, 1, "ἅ"], [7950, 1, "ἆ"], [7951, 1, "ἇ"], [[7952, 7957], 2], [[7958, 7959], 3], [7960, 1, "ἐ"], [7961, 1, "ἑ"], [7962, 1, "ἒ"], [7963, 1, "ἓ"], [7964, 1, "ἔ"], [7965, 1, "ἕ"], [[7966, 7967], 3], [[7968, 7975], 2], [7976, 1, "ἠ"], [7977, 1, "ἡ"], [7978, 1, "ἢ"], [7979, 1, "ἣ"], [7980, 1, "ἤ"], [7981, 1, "ἥ"], [7982, 1, "ἦ"], [7983, 1, "ἧ"], [[7984, 7991], 2], [7992, 1, "ἰ"], [7993, 1, "ἱ"], [7994, 1, "ἲ"], [7995, 1, "ἳ"], [7996, 1, "ἴ"], [7997, 1, "ἵ"], [7998, 1, "ἶ"], [7999, 1, "ἷ"], [[8000, 8005], 2], [[8006, 8007], 3], [8008, 1, "ὀ"], [8009, 1, "ὁ"], [8010, 1, "ὂ"], [8011, 1, "ὃ"], [8012, 1, "ὄ"], [8013, 1, "ὅ"], [[8014, 8015], 3], [[8016, 8023], 2], [8024, 3], [8025, 1, "ὑ"], [8026, 3], [8027, 1, "ὓ"], [8028, 3], [8029, 1, "ὕ"], [8030, 3], [8031, 1, "ὗ"], [[8032, 8039], 2], [8040, 1, "ὠ"], [8041, 1, "ὡ"], [8042, 1, "ὢ"], [8043, 1, "ὣ"], [8044, 1, "ὤ"], [8045, 1, "ὥ"], [8046, 1, "ὦ"], [8047, 1, "ὧ"], [8048, 2], [8049, 1, "ά"], [8050, 2], [8051, 1, "έ"], [8052, 2], [8053, 1, "ή"], [8054, 2], [8055, 1, "ί"], [8056, 2], [8057, 1, "ό"], [8058, 2], [8059, 1, "ύ"], [8060, 2], [8061, 1, "ώ"], [[8062, 8063], 3], [8064, 1, "ἀι"], [8065, 1, "ἁι"], [8066, 1, "ἂι"], [8067, 1, "ἃι"], [8068, 1, "ἄι"], [8069, 1, "ἅι"], [8070, 1, "ἆι"], [8071, 1, "ἇι"], [8072, 1, "ἀι"], [8073, 1, "ἁι"], [8074, 1, "ἂι"], [8075, 1, "ἃι"], [8076, 1, "ἄι"], [8077, 1, "ἅι"], [8078, 1, "ἆι"], [8079, 1, "ἇι"], [8080, 1, "ἠι"], [8081, 1, "ἡι"], [8082, 1, "ἢι"], [8083, 1, "ἣι"], [8084, 1, "ἤι"], [8085, 1, "ἥι"], [8086, 1, "ἦι"], [8087, 1, "ἧι"], [8088, 1, "ἠι"], [8089, 1, "ἡι"], [8090, 1, "ἢι"], [8091, 1, "ἣι"], [8092, 1, "ἤι"], [8093, 1, "ἥι"], [8094, 1, "ἦι"], [8095, 1, "ἧι"], [8096, 1, "ὠι"], [8097, 1, "ὡι"], [8098, 1, "ὢι"], [8099, 1, "ὣι"], [8100, 1, "ὤι"], [8101, 1, "ὥι"], [8102, 1, "ὦι"], [8103, 1, "ὧι"], [8104, 1, "ὠι"], [8105, 1, "ὡι"], [8106, 1, "ὢι"], [8107, 1, "ὣι"], [8108, 1, "ὤι"], [8109, 1, "ὥι"], [8110, 1, "ὦι"], [8111, 1, "ὧι"], [[8112, 8113], 2], [8114, 1, "ὰι"], [8115, 1, "αι"], [8116, 1, "άι"], [8117, 3], [8118, 2], [8119, 1, "ᾶι"], [8120, 1, "ᾰ"], [8121, 1, "ᾱ"], [8122, 1, "ὰ"], [8123, 1, "ά"], [8124, 1, "αι"], [8125, 5, " ̓"], [8126, 1, "ι"], [8127, 5, " ̓"], [8128, 5, " ͂"], [8129, 5, " ̈͂"], [8130, 1, "ὴι"], [8131, 1, "ηι"], [8132, 1, "ήι"], [8133, 3], [8134, 2], [8135, 1, "ῆι"], [8136, 1, "ὲ"], [8137, 1, "έ"], [8138, 1, "ὴ"], [8139, 1, "ή"], [8140, 1, "ηι"], [8141, 5, " ̓̀"], [8142, 5, " ̓́"], [8143, 5, " ̓͂"], [[8144, 8146], 2], [8147, 1, "ΐ"], [[8148, 8149], 3], [[8150, 8151], 2], [8152, 1, "ῐ"], [8153, 1, "ῑ"], [8154, 1, "ὶ"], [8155, 1, "ί"], [8156, 3], [8157, 5, " ̔̀"], [8158, 5, " ̔́"], [8159, 5, " ̔͂"], [[8160, 8162], 2], [8163, 1, "ΰ"], [[8164, 8167], 2], [8168, 1, "ῠ"], [8169, 1, "ῡ"], [8170, 1, "ὺ"], [8171, 1, "ύ"], [8172, 1, "ῥ"], [8173, 5, " ̈̀"], [8174, 5, " ̈́"], [8175, 5, "`"], [[8176, 8177], 3], [8178, 1, "ὼι"], [8179, 1, "ωι"], [8180, 1, "ώι"], [8181, 3], [8182, 2], [8183, 1, "ῶι"], [8184, 1, "ὸ"], [8185, 1, "ό"], [8186, 1, "ὼ"], [8187, 1, "ώ"], [8188, 1, "ωι"], [8189, 5, " ́"], [8190, 5, " ̔"], [8191, 3], [[8192, 8202], 5, " "], [8203, 7], [[8204, 8205], 6, ""], [[8206, 8207], 3], [8208, 2], [8209, 1, "‐"], [[8210, 8214], 2], [8215, 5, " ̳"], [[8216, 8227], 2], [[8228, 8230], 3], [8231, 2], [[8232, 8238], 3], [8239, 5, " "], [[8240, 8242], 2], [8243, 1, "′′"], [8244, 1, "′′′"], [8245, 2], [8246, 1, "‵‵"], [8247, 1, "‵‵‵"], [[8248, 8251], 2], [8252, 5, "!!"], [8253, 2], [8254, 5, " ̅"], [[8255, 8262], 2], [8263, 5, "??"], [8264, 5, "?!"], [8265, 5, "!?"], [[8266, 8269], 2], [[8270, 8274], 2], [[8275, 8276], 2], [[8277, 8278], 2], [8279, 1, "′′′′"], [[8280, 8286], 2], [8287, 5, " "], [8288, 7], [[8289, 8291], 3], [8292, 7], [8293, 3], [[8294, 8297], 3], [[8298, 8303], 3], [8304, 1, "0"], [8305, 1, "i"], [[8306, 8307], 3], [8308, 1, "4"], [8309, 1, "5"], [8310, 1, "6"], [8311, 1, "7"], [8312, 1, "8"], [8313, 1, "9"], [8314, 5, "+"], [8315, 1, "−"], [8316, 5, "="], [8317, 5, "("], [8318, 5, ")"], [8319, 1, "n"], [8320, 1, "0"], [8321, 1, "1"], [8322, 1, "2"], [8323, 1, "3"], [8324, 1, "4"], [8325, 1, "5"], [8326, 1, "6"], [8327, 1, "7"], [8328, 1, "8"], [8329, 1, "9"], [8330, 5, "+"], [8331, 1, "−"], [8332, 5, "="], [8333, 5, "("], [8334, 5, ")"], [8335, 3], [8336, 1, "a"], [8337, 1, "e"], [8338, 1, "o"], [8339, 1, "x"], [8340, 1, "ə"], [8341, 1, "h"], [8342, 1, "k"], [8343, 1, "l"], [8344, 1, "m"], [8345, 1, "n"], [8346, 1, "p"], [8347, 1, "s"], [8348, 1, "t"], [[8349, 8351], 3], [[8352, 8359], 2], [8360, 1, "rs"], [[8361, 8362], 2], [8363, 2], [8364, 2], [[8365, 8367], 2], [[8368, 8369], 2], [[8370, 8373], 2], [[8374, 8376], 2], [8377, 2], [8378, 2], [[8379, 8381], 2], [8382, 2], [8383, 2], [8384, 2], [[8385, 8399], 3], [[8400, 8417], 2], [[8418, 8419], 2], [[8420, 8426], 2], [8427, 2], [[8428, 8431], 2], [8432, 2], [[8433, 8447], 3], [8448, 5, "a/c"], [8449, 5, "a/s"], [8450, 1, "c"], [8451, 1, "°c"], [8452, 2], [8453, 5, "c/o"], [8454, 5, "c/u"], [8455, 1, "ɛ"], [8456, 2], [8457, 1, "°f"], [8458, 1, "g"], [[8459, 8462], 1, "h"], [8463, 1, "ħ"], [[8464, 8465], 1, "i"], [[8466, 8467], 1, "l"], [8468, 2], [8469, 1, "n"], [8470, 1, "no"], [[8471, 8472], 2], [8473, 1, "p"], [8474, 1, "q"], [[8475, 8477], 1, "r"], [[8478, 8479], 2], [8480, 1, "sm"], [8481, 1, "tel"], [8482, 1, "tm"], [8483, 2], [8484, 1, "z"], [8485, 2], [8486, 1, "ω"], [8487, 2], [8488, 1, "z"], [8489, 2], [8490, 1, "k"], [8491, 1, "å"], [8492, 1, "b"], [8493, 1, "c"], [8494, 2], [[8495, 8496], 1, "e"], [8497, 1, "f"], [8498, 3], [8499, 1, "m"], [8500, 1, "o"], [8501, 1, "א"], [8502, 1, "ב"], [8503, 1, "ג"], [8504, 1, "ד"], [8505, 1, "i"], [8506, 2], [8507, 1, "fax"], [8508, 1, "π"], [[8509, 8510], 1, "γ"], [8511, 1, "π"], [8512, 1, "∑"], [[8513, 8516], 2], [[8517, 8518], 1, "d"], [8519, 1, "e"], [8520, 1, "i"], [8521, 1, "j"], [[8522, 8523], 2], [8524, 2], [8525, 2], [8526, 2], [8527, 2], [8528, 1, "1⁄7"], [8529, 1, "1⁄9"], [8530, 1, "1⁄10"], [8531, 1, "1⁄3"], [8532, 1, "2⁄3"], [8533, 1, "1⁄5"], [8534, 1, "2⁄5"], [8535, 1, "3⁄5"], [8536, 1, "4⁄5"], [8537, 1, "1⁄6"], [8538, 1, "5⁄6"], [8539, 1, "1⁄8"], [8540, 1, "3⁄8"], [8541, 1, "5⁄8"], [8542, 1, "7⁄8"], [8543, 1, "1⁄"], [8544, 1, "i"], [8545, 1, "ii"], [8546, 1, "iii"], [8547, 1, "iv"], [8548, 1, "v"], [8549, 1, "vi"], [8550, 1, "vii"], [8551, 1, "viii"], [8552, 1, "ix"], [8553, 1, "x"], [8554, 1, "xi"], [8555, 1, "xii"], [8556, 1, "l"], [8557, 1, "c"], [8558, 1, "d"], [8559, 1, "m"], [8560, 1, "i"], [8561, 1, "ii"], [8562, 1, "iii"], [8563, 1, "iv"], [8564, 1, "v"], [8565, 1, "vi"], [8566, 1, "vii"], [8567, 1, "viii"], [8568, 1, "ix"], [8569, 1, "x"], [8570, 1, "xi"], [8571, 1, "xii"], [8572, 1, "l"], [8573, 1, "c"], [8574, 1, "d"], [8575, 1, "m"], [[8576, 8578], 2], [8579, 3], [8580, 2], [[8581, 8584], 2], [8585, 1, "0⁄3"], [[8586, 8587], 2], [[8588, 8591], 3], [[8592, 8682], 2], [[8683, 8691], 2], [[8692, 8703], 2], [[8704, 8747], 2], [8748, 1, "∫∫"], [8749, 1, "∫∫∫"], [8750, 2], [8751, 1, "∮∮"], [8752, 1, "∮∮∮"], [[8753, 8945], 2], [[8946, 8959], 2], [8960, 2], [8961, 2], [[8962, 9000], 2], [9001, 1, "〈"], [9002, 1, "〉"], [[9003, 9082], 2], [9083, 2], [9084, 2], [[9085, 9114], 2], [[9115, 9166], 2], [[9167, 9168], 2], [[9169, 9179], 2], [[9180, 9191], 2], [9192, 2], [[9193, 9203], 2], [[9204, 9210], 2], [[9211, 9214], 2], [9215, 2], [[9216, 9252], 2], [[9253, 9254], 2], [[9255, 9279], 3], [[9280, 9290], 2], [[9291, 9311], 3], [9312, 1, "1"], [9313, 1, "2"], [9314, 1, "3"], [9315, 1, "4"], [9316, 1, "5"], [9317, 1, "6"], [9318, 1, "7"], [9319, 1, "8"], [9320, 1, "9"], [9321, 1, "10"], [9322, 1, "11"], [9323, 1, "12"], [9324, 1, "13"], [9325, 1, "14"], [9326, 1, "15"], [9327, 1, "16"], [9328, 1, "17"], [9329, 1, "18"], [9330, 1, "19"], [9331, 1, "20"], [9332, 5, "(1)"], [9333, 5, "(2)"], [9334, 5, "(3)"], [9335, 5, "(4)"], [9336, 5, "(5)"], [9337, 5, "(6)"], [9338, 5, "(7)"], [9339, 5, "(8)"], [9340, 5, "(9)"], [9341, 5, "(10)"], [9342, 5, "(11)"], [9343, 5, "(12)"], [9344, 5, "(13)"], [9345, 5, "(14)"], [9346, 5, "(15)"], [9347, 5, "(16)"], [9348, 5, "(17)"], [9349, 5, "(18)"], [9350, 5, "(19)"], [9351, 5, "(20)"], [[9352, 9371], 3], [9372, 5, "(a)"], [9373, 5, "(b)"], [9374, 5, "(c)"], [9375, 5, "(d)"], [9376, 5, "(e)"], [9377, 5, "(f)"], [9378, 5, "(g)"], [9379, 5, "(h)"], [9380, 5, "(i)"], [9381, 5, "(j)"], [9382, 5, "(k)"], [9383, 5, "(l)"], [9384, 5, "(m)"], [9385, 5, "(n)"], [9386, 5, "(o)"], [9387, 5, "(p)"], [9388, 5, "(q)"], [9389, 5, "(r)"], [9390, 5, "(s)"], [9391, 5, "(t)"], [9392, 5, "(u)"], [9393, 5, "(v)"], [9394, 5, "(w)"], [9395, 5, "(x)"], [9396, 5, "(y)"], [9397, 5, "(z)"], [9398, 1, "a"], [9399, 1, "b"], [9400, 1, "c"], [9401, 1, "d"], [9402, 1, "e"], [9403, 1, "f"], [9404, 1, "g"], [9405, 1, "h"], [9406, 1, "i"], [9407, 1, "j"], [9408, 1, "k"], [9409, 1, "l"], [9410, 1, "m"], [9411, 1, "n"], [9412, 1, "o"], [9413, 1, "p"], [9414, 1, "q"], [9415, 1, "r"], [9416, 1, "s"], [9417, 1, "t"], [9418, 1, "u"], [9419, 1, "v"], [9420, 1, "w"], [9421, 1, "x"], [9422, 1, "y"], [9423, 1, "z"], [9424, 1, "a"], [9425, 1, "b"], [9426, 1, "c"], [9427, 1, "d"], [9428, 1, "e"], [9429, 1, "f"], [9430, 1, "g"], [9431, 1, "h"], [9432, 1, "i"], [9433, 1, "j"], [9434, 1, "k"], [9435, 1, "l"], [9436, 1, "m"], [9437, 1, "n"], [9438, 1, "o"], [9439, 1, "p"], [9440, 1, "q"], [9441, 1, "r"], [9442, 1, "s"], [9443, 1, "t"], [9444, 1, "u"], [9445, 1, "v"], [9446, 1, "w"], [9447, 1, "x"], [9448, 1, "y"], [9449, 1, "z"], [9450, 1, "0"], [[9451, 9470], 2], [9471, 2], [[9472, 9621], 2], [[9622, 9631], 2], [[9632, 9711], 2], [[9712, 9719], 2], [[9720, 9727], 2], [[9728, 9747], 2], [[9748, 9749], 2], [[9750, 9751], 2], [9752, 2], [9753, 2], [[9754, 9839], 2], [[9840, 9841], 2], [[9842, 9853], 2], [[9854, 9855], 2], [[9856, 9865], 2], [[9866, 9873], 2], [[9874, 9884], 2], [9885, 2], [[9886, 9887], 2], [[9888, 9889], 2], [[9890, 9905], 2], [9906, 2], [[9907, 9916], 2], [[9917, 9919], 2], [[9920, 9923], 2], [[9924, 9933], 2], [9934, 2], [[9935, 9953], 2], [9954, 2], [9955, 2], [[9956, 9959], 2], [[9960, 9983], 2], [9984, 2], [[9985, 9988], 2], [9989, 2], [[9990, 9993], 2], [[9994, 9995], 2], [[9996, 10023], 2], [10024, 2], [[10025, 10059], 2], [10060, 2], [10061, 2], [10062, 2], [[10063, 10066], 2], [[10067, 10069], 2], [10070, 2], [10071, 2], [[10072, 10078], 2], [[10079, 10080], 2], [[10081, 10087], 2], [[10088, 10101], 2], [[10102, 10132], 2], [[10133, 10135], 2], [[10136, 10159], 2], [10160, 2], [[10161, 10174], 2], [10175, 2], [[10176, 10182], 2], [[10183, 10186], 2], [10187, 2], [10188, 2], [10189, 2], [[10190, 10191], 2], [[10192, 10219], 2], [[10220, 10223], 2], [[10224, 10239], 2], [[10240, 10495], 2], [[10496, 10763], 2], [10764, 1, "∫∫∫∫"], [[10765, 10867], 2], [10868, 5, "::="], [10869, 5, "=="], [10870, 5, "==="], [[10871, 10971], 2], [10972, 1, "⫝̸"], [[10973, 11007], 2], [[11008, 11021], 2], [[11022, 11027], 2], [[11028, 11034], 2], [[11035, 11039], 2], [[11040, 11043], 2], [[11044, 11084], 2], [[11085, 11087], 2], [[11088, 11092], 2], [[11093, 11097], 2], [[11098, 11123], 2], [[11124, 11125], 3], [[11126, 11157], 2], [11158, 3], [11159, 2], [[11160, 11193], 2], [[11194, 11196], 2], [[11197, 11208], 2], [11209, 2], [[11210, 11217], 2], [11218, 2], [[11219, 11243], 2], [[11244, 11247], 2], [[11248, 11262], 2], [11263, 2], [11264, 1, "ⰰ"], [11265, 1, "ⰱ"], [11266, 1, "ⰲ"], [11267, 1, "ⰳ"], [11268, 1, "ⰴ"], [11269, 1, "ⰵ"], [11270, 1, "ⰶ"], [11271, 1, "ⰷ"], [11272, 1, "ⰸ"], [11273, 1, "ⰹ"], [11274, 1, "ⰺ"], [11275, 1, "ⰻ"], [11276, 1, "ⰼ"], [11277, 1, "ⰽ"], [11278, 1, "ⰾ"], [11279, 1, "ⰿ"], [11280, 1, "ⱀ"], [11281, 1, "ⱁ"], [11282, 1, "ⱂ"], [11283, 1, "ⱃ"], [11284, 1, "ⱄ"], [11285, 1, "ⱅ"], [11286, 1, "ⱆ"], [11287, 1, "ⱇ"], [11288, 1, "ⱈ"], [11289, 1, "ⱉ"], [11290, 1, "ⱊ"], [11291, 1, "ⱋ"], [11292, 1, "ⱌ"], [11293, 1, "ⱍ"], [11294, 1, "ⱎ"], [11295, 1, "ⱏ"], [11296, 1, "ⱐ"], [11297, 1, "ⱑ"], [11298, 1, "ⱒ"], [11299, 1, "ⱓ"], [11300, 1, "ⱔ"], [11301, 1, "ⱕ"], [11302, 1, "ⱖ"], [11303, 1, "ⱗ"], [11304, 1, "ⱘ"], [11305, 1, "ⱙ"], [11306, 1, "ⱚ"], [11307, 1, "ⱛ"], [11308, 1, "ⱜ"], [11309, 1, "ⱝ"], [11310, 1, "ⱞ"], [11311, 1, "ⱟ"], [[11312, 11358], 2], [11359, 2], [11360, 1, "ⱡ"], [11361, 2], [11362, 1, "ɫ"], [11363, 1, "ᵽ"], [11364, 1, "ɽ"], [[11365, 11366], 2], [11367, 1, "ⱨ"], [11368, 2], [11369, 1, "ⱪ"], [11370, 2], [11371, 1, "ⱬ"], [11372, 2], [11373, 1, "ɑ"], [11374, 1, "ɱ"], [11375, 1, "ɐ"], [11376, 1, "ɒ"], [11377, 2], [11378, 1, "ⱳ"], [11379, 2], [11380, 2], [11381, 1, "ⱶ"], [[11382, 11383], 2], [[11384, 11387], 2], [11388, 1, "j"], [11389, 1, "v"], [11390, 1, "ȿ"], [11391, 1, "ɀ"], [11392, 1, "ⲁ"], [11393, 2], [11394, 1, "ⲃ"], [11395, 2], [11396, 1, "ⲅ"], [11397, 2], [11398, 1, "ⲇ"], [11399, 2], [11400, 1, "ⲉ"], [11401, 2], [11402, 1, "ⲋ"], [11403, 2], [11404, 1, "ⲍ"], [11405, 2], [11406, 1, "ⲏ"], [11407, 2], [11408, 1, "ⲑ"], [11409, 2], [11410, 1, "ⲓ"], [11411, 2], [11412, 1, "ⲕ"], [11413, 2], [11414, 1, "ⲗ"], [11415, 2], [11416, 1, "ⲙ"], [11417, 2], [11418, 1, "ⲛ"], [11419, 2], [11420, 1, "ⲝ"], [11421, 2], [11422, 1, "ⲟ"], [11423, 2], [11424, 1, "ⲡ"], [11425, 2], [11426, 1, "ⲣ"], [11427, 2], [11428, 1, "ⲥ"], [11429, 2], [11430, 1, "ⲧ"], [11431, 2], [11432, 1, "ⲩ"], [11433, 2], [11434, 1, "ⲫ"], [11435, 2], [11436, 1, "ⲭ"], [11437, 2], [11438, 1, "ⲯ"], [11439, 2], [11440, 1, "ⲱ"], [11441, 2], [11442, 1, "ⲳ"], [11443, 2], [11444, 1, "ⲵ"], [11445, 2], [11446, 1, "ⲷ"], [11447, 2], [11448, 1, "ⲹ"], [11449, 2], [11450, 1, "ⲻ"], [11451, 2], [11452, 1, "ⲽ"], [11453, 2], [11454, 1, "ⲿ"], [11455, 2], [11456, 1, "ⳁ"], [11457, 2], [11458, 1, "ⳃ"], [11459, 2], [11460, 1, "ⳅ"], [11461, 2], [11462, 1, "ⳇ"], [11463, 2], [11464, 1, "ⳉ"], [11465, 2], [11466, 1, "ⳋ"], [11467, 2], [11468, 1, "ⳍ"], [11469, 2], [11470, 1, "ⳏ"], [11471, 2], [11472, 1, "ⳑ"], [11473, 2], [11474, 1, "ⳓ"], [11475, 2], [11476, 1, "ⳕ"], [11477, 2], [11478, 1, "ⳗ"], [11479, 2], [11480, 1, "ⳙ"], [11481, 2], [11482, 1, "ⳛ"], [11483, 2], [11484, 1, "ⳝ"], [11485, 2], [11486, 1, "ⳟ"], [11487, 2], [11488, 1, "ⳡ"], [11489, 2], [11490, 1, "ⳣ"], [[11491, 11492], 2], [[11493, 11498], 2], [11499, 1, "ⳬ"], [11500, 2], [11501, 1, "ⳮ"], [[11502, 11505], 2], [11506, 1, "ⳳ"], [11507, 2], [[11508, 11512], 3], [[11513, 11519], 2], [[11520, 11557], 2], [11558, 3], [11559, 2], [[11560, 11564], 3], [11565, 2], [[11566, 11567], 3], [[11568, 11621], 2], [[11622, 11623], 2], [[11624, 11630], 3], [11631, 1, "ⵡ"], [11632, 2], [[11633, 11646], 3], [11647, 2], [[11648, 11670], 2], [[11671, 11679], 3], [[11680, 11686], 2], [11687, 3], [[11688, 11694], 2], [11695, 3], [[11696, 11702], 2], [11703, 3], [[11704, 11710], 2], [11711, 3], [[11712, 11718], 2], [11719, 3], [[11720, 11726], 2], [11727, 3], [[11728, 11734], 2], [11735, 3], [[11736, 11742], 2], [11743, 3], [[11744, 11775], 2], [[11776, 11799], 2], [[11800, 11803], 2], [[11804, 11805], 2], [[11806, 11822], 2], [11823, 2], [11824, 2], [11825, 2], [[11826, 11835], 2], [[11836, 11842], 2], [[11843, 11844], 2], [[11845, 11849], 2], [[11850, 11854], 2], [11855, 2], [[11856, 11858], 2], [[11859, 11869], 2], [[11870, 11903], 3], [[11904, 11929], 2], [11930, 3], [[11931, 11934], 2], [11935, 1, "母"], [[11936, 12018], 2], [12019, 1, "龟"], [[12020, 12031], 3], [12032, 1, "一"], [12033, 1, "丨"], [12034, 1, "丶"], [12035, 1, "丿"], [12036, 1, "乙"], [12037, 1, "亅"], [12038, 1, "二"], [12039, 1, "亠"], [12040, 1, "人"], [12041, 1, "儿"], [12042, 1, "入"], [12043, 1, "八"], [12044, 1, "冂"], [12045, 1, "冖"], [12046, 1, "冫"], [12047, 1, "几"], [12048, 1, "凵"], [12049, 1, "刀"], [12050, 1, "力"], [12051, 1, "勹"], [12052, 1, "匕"], [12053, 1, "匚"], [12054, 1, "匸"], [12055, 1, "十"], [12056, 1, "卜"], [12057, 1, "卩"], [12058, 1, "厂"], [12059, 1, "厶"], [12060, 1, "又"], [12061, 1, "口"], [12062, 1, "囗"], [12063, 1, "土"], [12064, 1, "士"], [12065, 1, "夂"], [12066, 1, "夊"], [12067, 1, "夕"], [12068, 1, "大"], [12069, 1, "女"], [12070, 1, "子"], [12071, 1, "宀"], [12072, 1, "寸"], [12073, 1, "小"], [12074, 1, "尢"], [12075, 1, "尸"], [12076, 1, "屮"], [12077, 1, "山"], [12078, 1, "巛"], [12079, 1, "工"], [12080, 1, "己"], [12081, 1, "巾"], [12082, 1, "干"], [12083, 1, "幺"], [12084, 1, "广"], [12085, 1, "廴"], [12086, 1, "廾"], [12087, 1, "弋"], [12088, 1, "弓"], [12089, 1, "彐"], [12090, 1, "彡"], [12091, 1, "彳"], [12092, 1, "心"], [12093, 1, "戈"], [12094, 1, "戶"], [12095, 1, "手"], [12096, 1, "支"], [12097, 1, "攴"], [12098, 1, "文"], [12099, 1, "斗"], [12100, 1, "斤"], [12101, 1, "方"], [12102, 1, "无"], [12103, 1, "日"], [12104, 1, "曰"], [12105, 1, "月"], [12106, 1, "木"], [12107, 1, "欠"], [12108, 1, "止"], [12109, 1, "歹"], [12110, 1, "殳"], [12111, 1, "毋"], [12112, 1, "比"], [12113, 1, "毛"], [12114, 1, "氏"], [12115, 1, "气"], [12116, 1, "水"], [12117, 1, "火"], [12118, 1, "爪"], [12119, 1, "父"], [12120, 1, "爻"], [12121, 1, "爿"], [12122, 1, "片"], [12123, 1, "牙"], [12124, 1, "牛"], [12125, 1, "犬"], [12126, 1, "玄"], [12127, 1, "玉"], [12128, 1, "瓜"], [12129, 1, "瓦"], [12130, 1, "甘"], [12131, 1, "生"], [12132, 1, "用"], [12133, 1, "田"], [12134, 1, "疋"], [12135, 1, "疒"], [12136, 1, "癶"], [12137, 1, "白"], [12138, 1, "皮"], [12139, 1, "皿"], [12140, 1, "目"], [12141, 1, "矛"], [12142, 1, "矢"], [12143, 1, "石"], [12144, 1, "示"], [12145, 1, "禸"], [12146, 1, "禾"], [12147, 1, "穴"], [12148, 1, "立"], [12149, 1, "竹"], [12150, 1, "米"], [12151, 1, "糸"], [12152, 1, "缶"], [12153, 1, "网"], [12154, 1, "羊"], [12155, 1, "羽"], [12156, 1, "老"], [12157, 1, "而"], [12158, 1, "耒"], [12159, 1, "耳"], [12160, 1, "聿"], [12161, 1, "肉"], [12162, 1, "臣"], [12163, 1, "自"], [12164, 1, "至"], [12165, 1, "臼"], [12166, 1, "舌"], [12167, 1, "舛"], [12168, 1, "舟"], [12169, 1, "艮"], [12170, 1, "色"], [12171, 1, "艸"], [12172, 1, "虍"], [12173, 1, "虫"], [12174, 1, "血"], [12175, 1, "行"], [12176, 1, "衣"], [12177, 1, "襾"], [12178, 1, "見"], [12179, 1, "角"], [12180, 1, "言"], [12181, 1, "谷"], [12182, 1, "豆"], [12183, 1, "豕"], [12184, 1, "豸"], [12185, 1, "貝"], [12186, 1, "赤"], [12187, 1, "走"], [12188, 1, "足"], [12189, 1, "身"], [12190, 1, "車"], [12191, 1, "辛"], [12192, 1, "辰"], [12193, 1, "辵"], [12194, 1, "邑"], [12195, 1, "酉"], [12196, 1, "釆"], [12197, 1, "里"], [12198, 1, "金"], [12199, 1, "長"], [12200, 1, "門"], [12201, 1, "阜"], [12202, 1, "隶"], [12203, 1, "隹"], [12204, 1, "雨"], [12205, 1, "靑"], [12206, 1, "非"], [12207, 1, "面"], [12208, 1, "革"], [12209, 1, "韋"], [12210, 1, "韭"], [12211, 1, "音"], [12212, 1, "頁"], [12213, 1, "風"], [12214, 1, "飛"], [12215, 1, "食"], [12216, 1, "首"], [12217, 1, "香"], [12218, 1, "馬"], [12219, 1, "骨"], [12220, 1, "高"], [12221, 1, "髟"], [12222, 1, "鬥"], [12223, 1, "鬯"], [12224, 1, "鬲"], [12225, 1, "鬼"], [12226, 1, "魚"], [12227, 1, "鳥"], [12228, 1, "鹵"], [12229, 1, "鹿"], [12230, 1, "麥"], [12231, 1, "麻"], [12232, 1, "黃"], [12233, 1, "黍"], [12234, 1, "黑"], [12235, 1, "黹"], [12236, 1, "黽"], [12237, 1, "鼎"], [12238, 1, "鼓"], [12239, 1, "鼠"], [12240, 1, "鼻"], [12241, 1, "齊"], [12242, 1, "齒"], [12243, 1, "龍"], [12244, 1, "龜"], [12245, 1, "龠"], [[12246, 12271], 3], [[12272, 12283], 3], [[12284, 12287], 3], [12288, 5, " "], [12289, 2], [12290, 1, "."], [[12291, 12292], 2], [[12293, 12295], 2], [[12296, 12329], 2], [[12330, 12333], 2], [[12334, 12341], 2], [12342, 1, "〒"], [12343, 2], [12344, 1, "十"], [12345, 1, "卄"], [12346, 1, "卅"], [12347, 2], [12348, 2], [12349, 2], [12350, 2], [12351, 2], [12352, 3], [[12353, 12436], 2], [[12437, 12438], 2], [[12439, 12440], 3], [[12441, 12442], 2], [12443, 5, " ゙"], [12444, 5, " ゚"], [[12445, 12446], 2], [12447, 1, "より"], [12448, 2], [[12449, 12542], 2], [12543, 1, "コト"], [[12544, 12548], 3], [[12549, 12588], 2], [12589, 2], [12590, 2], [12591, 2], [12592, 3], [12593, 1, "ᄀ"], [12594, 1, "ᄁ"], [12595, 1, "ᆪ"], [12596, 1, "ᄂ"], [12597, 1, "ᆬ"], [12598, 1, "ᆭ"], [12599, 1, "ᄃ"], [12600, 1, "ᄄ"], [12601, 1, "ᄅ"], [12602, 1, "ᆰ"], [12603, 1, "ᆱ"], [12604, 1, "ᆲ"], [12605, 1, "ᆳ"], [12606, 1, "ᆴ"], [12607, 1, "ᆵ"], [12608, 1, "ᄚ"], [12609, 1, "ᄆ"], [12610, 1, "ᄇ"], [12611, 1, "ᄈ"], [12612, 1, "ᄡ"], [12613, 1, "ᄉ"], [12614, 1, "ᄊ"], [12615, 1, "ᄋ"], [12616, 1, "ᄌ"], [12617, 1, "ᄍ"], [12618, 1, "ᄎ"], [12619, 1, "ᄏ"], [12620, 1, "ᄐ"], [12621, 1, "ᄑ"], [12622, 1, "ᄒ"], [12623, 1, "ᅡ"], [12624, 1, "ᅢ"], [12625, 1, "ᅣ"], [12626, 1, "ᅤ"], [12627, 1, "ᅥ"], [12628, 1, "ᅦ"], [12629, 1, "ᅧ"], [12630, 1, "ᅨ"], [12631, 1, "ᅩ"], [12632, 1, "ᅪ"], [12633, 1, "ᅫ"], [12634, 1, "ᅬ"], [12635, 1, "ᅭ"], [12636, 1, "ᅮ"], [12637, 1, "ᅯ"], [12638, 1, "ᅰ"], [12639, 1, "ᅱ"], [12640, 1, "ᅲ"], [12641, 1, "ᅳ"], [12642, 1, "ᅴ"], [12643, 1, "ᅵ"], [12644, 3], [12645, 1, "ᄔ"], [12646, 1, "ᄕ"], [12647, 1, "ᇇ"], [12648, 1, "ᇈ"], [12649, 1, "ᇌ"], [12650, 1, "ᇎ"], [12651, 1, "ᇓ"], [12652, 1, "ᇗ"], [12653, 1, "ᇙ"], [12654, 1, "ᄜ"], [12655, 1, "ᇝ"], [12656, 1, "ᇟ"], [12657, 1, "ᄝ"], [12658, 1, "ᄞ"], [12659, 1, "ᄠ"], [12660, 1, "ᄢ"], [12661, 1, "ᄣ"], [12662, 1, "ᄧ"], [12663, 1, "ᄩ"], [12664, 1, "ᄫ"], [12665, 1, "ᄬ"], [12666, 1, "ᄭ"], [12667, 1, "ᄮ"], [12668, 1, "ᄯ"], [12669, 1, "ᄲ"], [12670, 1, "ᄶ"], [12671, 1, "ᅀ"], [12672, 1, "ᅇ"], [12673, 1, "ᅌ"], [12674, 1, "ᇱ"], [12675, 1, "ᇲ"], [12676, 1, "ᅗ"], [12677, 1, "ᅘ"], [12678, 1, "ᅙ"], [12679, 1, "ᆄ"], [12680, 1, "ᆅ"], [12681, 1, "ᆈ"], [12682, 1, "ᆑ"], [12683, 1, "ᆒ"], [12684, 1, "ᆔ"], [12685, 1, "ᆞ"], [12686, 1, "ᆡ"], [12687, 3], [[12688, 12689], 2], [12690, 1, "一"], [12691, 1, "二"], [12692, 1, "三"], [12693, 1, "四"], [12694, 1, "上"], [12695, 1, "中"], [12696, 1, "下"], [12697, 1, "甲"], [12698, 1, "乙"], [12699, 1, "丙"], [12700, 1, "丁"], [12701, 1, "天"], [12702, 1, "地"], [12703, 1, "人"], [[12704, 12727], 2], [[12728, 12730], 2], [[12731, 12735], 2], [[12736, 12751], 2], [[12752, 12771], 2], [[12772, 12782], 3], [12783, 3], [[12784, 12799], 2], [12800, 5, "(ᄀ)"], [12801, 5, "(ᄂ)"], [12802, 5, "(ᄃ)"], [12803, 5, "(ᄅ)"], [12804, 5, "(ᄆ)"], [12805, 5, "(ᄇ)"], [12806, 5, "(ᄉ)"], [12807, 5, "(ᄋ)"], [12808, 5, "(ᄌ)"], [12809, 5, "(ᄎ)"], [12810, 5, "(ᄏ)"], [12811, 5, "(ᄐ)"], [12812, 5, "(ᄑ)"], [12813, 5, "(ᄒ)"], [12814, 5, "(가)"], [12815, 5, "(나)"], [12816, 5, "(다)"], [12817, 5, "(라)"], [12818, 5, "(마)"], [12819, 5, "(바)"], [12820, 5, "(사)"], [12821, 5, "(아)"], [12822, 5, "(자)"], [12823, 5, "(차)"], [12824, 5, "(카)"], [12825, 5, "(타)"], [12826, 5, "(파)"], [12827, 5, "(하)"], [12828, 5, "(주)"], [12829, 5, "(오전)"], [12830, 5, "(오후)"], [12831, 3], [12832, 5, "(一)"], [12833, 5, "(二)"], [12834, 5, "(三)"], [12835, 5, "(四)"], [12836, 5, "(五)"], [12837, 5, "(六)"], [12838, 5, "(七)"], [12839, 5, "(八)"], [12840, 5, "(九)"], [12841, 5, "(十)"], [12842, 5, "(月)"], [12843, 5, "(火)"], [12844, 5, "(水)"], [12845, 5, "(木)"], [12846, 5, "(金)"], [12847, 5, "(土)"], [12848, 5, "(日)"], [12849, 5, "(株)"], [12850, 5, "(有)"], [12851, 5, "(社)"], [12852, 5, "(名)"], [12853, 5, "(特)"], [12854, 5, "(財)"], [12855, 5, "(祝)"], [12856, 5, "(労)"], [12857, 5, "(代)"], [12858, 5, "(呼)"], [12859, 5, "(学)"], [12860, 5, "(監)"], [12861, 5, "(企)"], [12862, 5, "(資)"], [12863, 5, "(協)"], [12864, 5, "(祭)"], [12865, 5, "(休)"], [12866, 5, "(自)"], [12867, 5, "(至)"], [12868, 1, "問"], [12869, 1, "幼"], [12870, 1, "文"], [12871, 1, "箏"], [[12872, 12879], 2], [12880, 1, "pte"], [12881, 1, "21"], [12882, 1, "22"], [12883, 1, "23"], [12884, 1, "24"], [12885, 1, "25"], [12886, 1, "26"], [12887, 1, "27"], [12888, 1, "28"], [12889, 1, "29"], [12890, 1, "30"], [12891, 1, "31"], [12892, 1, "32"], [12893, 1, "33"], [12894, 1, "34"], [12895, 1, "35"], [12896, 1, "ᄀ"], [12897, 1, "ᄂ"], [12898, 1, "ᄃ"], [12899, 1, "ᄅ"], [12900, 1, "ᄆ"], [12901, 1, "ᄇ"], [12902, 1, "ᄉ"], [12903, 1, "ᄋ"], [12904, 1, "ᄌ"], [12905, 1, "ᄎ"], [12906, 1, "ᄏ"], [12907, 1, "ᄐ"], [12908, 1, "ᄑ"], [12909, 1, "ᄒ"], [12910, 1, "가"], [12911, 1, "나"], [12912, 1, "다"], [12913, 1, "라"], [12914, 1, "마"], [12915, 1, "바"], [12916, 1, "사"], [12917, 1, "아"], [12918, 1, "자"], [12919, 1, "차"], [12920, 1, "카"], [12921, 1, "타"], [12922, 1, "파"], [12923, 1, "하"], [12924, 1, "참고"], [12925, 1, "주의"], [12926, 1, "우"], [12927, 2], [12928, 1, "一"], [12929, 1, "二"], [12930, 1, "三"], [12931, 1, "四"], [12932, 1, "五"], [12933, 1, "六"], [12934, 1, "七"], [12935, 1, "八"], [12936, 1, "九"], [12937, 1, "十"], [12938, 1, "月"], [12939, 1, "火"], [12940, 1, "水"], [12941, 1, "木"], [12942, 1, "金"], [12943, 1, "土"], [12944, 1, "日"], [12945, 1, "株"], [12946, 1, "有"], [12947, 1, "社"], [12948, 1, "名"], [12949, 1, "特"], [12950, 1, "財"], [12951, 1, "祝"], [12952, 1, "労"], [12953, 1, "秘"], [12954, 1, "男"], [12955, 1, "女"], [12956, 1, "適"], [12957, 1, "優"], [12958, 1, "印"], [12959, 1, "注"], [12960, 1, "項"], [12961, 1, "休"], [12962, 1, "写"], [12963, 1, "正"], [12964, 1, "上"], [12965, 1, "中"], [12966, 1, "下"], [12967, 1, "左"], [12968, 1, "右"], [12969, 1, "医"], [12970, 1, "宗"], [12971, 1, "学"], [12972, 1, "監"], [12973, 1, "企"], [12974, 1, "資"], [12975, 1, "協"], [12976, 1, "夜"], [12977, 1, "36"], [12978, 1, "37"], [12979, 1, "38"], [12980, 1, "39"], [12981, 1, "40"], [12982, 1, "41"], [12983, 1, "42"], [12984, 1, "43"], [12985, 1, "44"], [12986, 1, "45"], [12987, 1, "46"], [12988, 1, "47"], [12989, 1, "48"], [12990, 1, "49"], [12991, 1, "50"], [12992, 1, "1月"], [12993, 1, "2月"], [12994, 1, "3月"], [12995, 1, "4月"], [12996, 1, "5月"], [12997, 1, "6月"], [12998, 1, "7月"], [12999, 1, "8月"], [13000, 1, "9月"], [13001, 1, "10月"], [13002, 1, "11月"], [13003, 1, "12月"], [13004, 1, "hg"], [13005, 1, "erg"], [13006, 1, "ev"], [13007, 1, "ltd"], [13008, 1, "ア"], [13009, 1, "イ"], [13010, 1, "ウ"], [13011, 1, "エ"], [13012, 1, "オ"], [13013, 1, "カ"], [13014, 1, "キ"], [13015, 1, "ク"], [13016, 1, "ケ"], [13017, 1, "コ"], [13018, 1, "サ"], [13019, 1, "シ"], [13020, 1, "ス"], [13021, 1, "セ"], [13022, 1, "ソ"], [13023, 1, "タ"], [13024, 1, "チ"], [13025, 1, "ツ"], [13026, 1, "テ"], [13027, 1, "ト"], [13028, 1, "ナ"], [13029, 1, "ニ"], [13030, 1, "ヌ"], [13031, 1, "ネ"], [13032, 1, "ノ"], [13033, 1, "ハ"], [13034, 1, "ヒ"], [13035, 1, "フ"], [13036, 1, "ヘ"], [13037, 1, "ホ"], [13038, 1, "マ"], [13039, 1, "ミ"], [13040, 1, "ム"], [13041, 1, "メ"], [13042, 1, "モ"], [13043, 1, "ヤ"], [13044, 1, "ユ"], [13045, 1, "ヨ"], [13046, 1, "ラ"], [13047, 1, "リ"], [13048, 1, "ル"], [13049, 1, "レ"], [13050, 1, "ロ"], [13051, 1, "ワ"], [13052, 1, "ヰ"], [13053, 1, "ヱ"], [13054, 1, "ヲ"], [13055, 1, "令和"], [13056, 1, "アパート"], [13057, 1, "アルファ"], [13058, 1, "アンペア"], [13059, 1, "アール"], [13060, 1, "イニング"], [13061, 1, "インチ"], [13062, 1, "ウォン"], [13063, 1, "エスクード"], [13064, 1, "エーカー"], [13065, 1, "オンス"], [13066, 1, "オーム"], [13067, 1, "カイリ"], [13068, 1, "カラット"], [13069, 1, "カロリー"], [13070, 1, "ガロン"], [13071, 1, "ガンマ"], [13072, 1, "ギガ"], [13073, 1, "ギニー"], [13074, 1, "キュリー"], [13075, 1, "ギルダー"], [13076, 1, "キロ"], [13077, 1, "キログラム"], [13078, 1, "キロメートル"], [13079, 1, "キロワット"], [13080, 1, "グラム"], [13081, 1, "グラムトン"], [13082, 1, "クルゼイロ"], [13083, 1, "クローネ"], [13084, 1, "ケース"], [13085, 1, "コルナ"], [13086, 1, "コーポ"], [13087, 1, "サイクル"], [13088, 1, "サンチーム"], [13089, 1, "シリング"], [13090, 1, "センチ"], [13091, 1, "セント"], [13092, 1, "ダース"], [13093, 1, "デシ"], [13094, 1, "ドル"], [13095, 1, "トン"], [13096, 1, "ナノ"], [13097, 1, "ノット"], [13098, 1, "ハイツ"], [13099, 1, "パーセント"], [13100, 1, "パーツ"], [13101, 1, "バーレル"], [13102, 1, "ピアストル"], [13103, 1, "ピクル"], [13104, 1, "ピコ"], [13105, 1, "ビル"], [13106, 1, "ファラッド"], [13107, 1, "フィート"], [13108, 1, "ブッシェル"], [13109, 1, "フラン"], [13110, 1, "ヘクタール"], [13111, 1, "ペソ"], [13112, 1, "ペニヒ"], [13113, 1, "ヘルツ"], [13114, 1, "ペンス"], [13115, 1, "ページ"], [13116, 1, "ベータ"], [13117, 1, "ポイント"], [13118, 1, "ボルト"], [13119, 1, "ホン"], [13120, 1, "ポンド"], [13121, 1, "ホール"], [13122, 1, "ホーン"], [13123, 1, "マイクロ"], [13124, 1, "マイル"], [13125, 1, "マッハ"], [13126, 1, "マルク"], [13127, 1, "マンション"], [13128, 1, "ミクロン"], [13129, 1, "ミリ"], [13130, 1, "ミリバール"], [13131, 1, "メガ"], [13132, 1, "メガトン"], [13133, 1, "メートル"], [13134, 1, "ヤード"], [13135, 1, "ヤール"], [13136, 1, "ユアン"], [13137, 1, "リットル"], [13138, 1, "リラ"], [13139, 1, "ルピー"], [13140, 1, "ルーブル"], [13141, 1, "レム"], [13142, 1, "レントゲン"], [13143, 1, "ワット"], [13144, 1, "0点"], [13145, 1, "1点"], [13146, 1, "2点"], [13147, 1, "3点"], [13148, 1, "4点"], [13149, 1, "5点"], [13150, 1, "6点"], [13151, 1, "7点"], [13152, 1, "8点"], [13153, 1, "9点"], [13154, 1, "10点"], [13155, 1, "11点"], [13156, 1, "12点"], [13157, 1, "13点"], [13158, 1, "14点"], [13159, 1, "15点"], [13160, 1, "16点"], [13161, 1, "17点"], [13162, 1, "18点"], [13163, 1, "19点"], [13164, 1, "20点"], [13165, 1, "21点"], [13166, 1, "22点"], [13167, 1, "23点"], [13168, 1, "24点"], [13169, 1, "hpa"], [13170, 1, "da"], [13171, 1, "au"], [13172, 1, "bar"], [13173, 1, "ov"], [13174, 1, "pc"], [13175, 1, "dm"], [13176, 1, "dm2"], [13177, 1, "dm3"], [13178, 1, "iu"], [13179, 1, "平成"], [13180, 1, "昭和"], [13181, 1, "大正"], [13182, 1, "明治"], [13183, 1, "株式会社"], [13184, 1, "pa"], [13185, 1, "na"], [13186, 1, "μa"], [13187, 1, "ma"], [13188, 1, "ka"], [13189, 1, "kb"], [13190, 1, "mb"], [13191, 1, "gb"], [13192, 1, "cal"], [13193, 1, "kcal"], [13194, 1, "pf"], [13195, 1, "nf"], [13196, 1, "μf"], [13197, 1, "μg"], [13198, 1, "mg"], [13199, 1, "kg"], [13200, 1, "hz"], [13201, 1, "khz"], [13202, 1, "mhz"], [13203, 1, "ghz"], [13204, 1, "thz"], [13205, 1, "μl"], [13206, 1, "ml"], [13207, 1, "dl"], [13208, 1, "kl"], [13209, 1, "fm"], [13210, 1, "nm"], [13211, 1, "μm"], [13212, 1, "mm"], [13213, 1, "cm"], [13214, 1, "km"], [13215, 1, "mm2"], [13216, 1, "cm2"], [13217, 1, "m2"], [13218, 1, "km2"], [13219, 1, "mm3"], [13220, 1, "cm3"], [13221, 1, "m3"], [13222, 1, "km3"], [13223, 1, "m∕s"], [13224, 1, "m∕s2"], [13225, 1, "pa"], [13226, 1, "kpa"], [13227, 1, "mpa"], [13228, 1, "gpa"], [13229, 1, "rad"], [13230, 1, "rad∕s"], [13231, 1, "rad∕s2"], [13232, 1, "ps"], [13233, 1, "ns"], [13234, 1, "μs"], [13235, 1, "ms"], [13236, 1, "pv"], [13237, 1, "nv"], [13238, 1, "μv"], [13239, 1, "mv"], [13240, 1, "kv"], [13241, 1, "mv"], [13242, 1, "pw"], [13243, 1, "nw"], [13244, 1, "μw"], [13245, 1, "mw"], [13246, 1, "kw"], [13247, 1, "mw"], [13248, 1, "kω"], [13249, 1, "mω"], [13250, 3], [13251, 1, "bq"], [13252, 1, "cc"], [13253, 1, "cd"], [13254, 1, "c∕kg"], [13255, 3], [13256, 1, "db"], [13257, 1, "gy"], [13258, 1, "ha"], [13259, 1, "hp"], [13260, 1, "in"], [13261, 1, "kk"], [13262, 1, "km"], [13263, 1, "kt"], [13264, 1, "lm"], [13265, 1, "ln"], [13266, 1, "log"], [13267, 1, "lx"], [13268, 1, "mb"], [13269, 1, "mil"], [13270, 1, "mol"], [13271, 1, "ph"], [13272, 3], [13273, 1, "ppm"], [13274, 1, "pr"], [13275, 1, "sr"], [13276, 1, "sv"], [13277, 1, "wb"], [13278, 1, "v∕m"], [13279, 1, "a∕m"], [13280, 1, "1日"], [13281, 1, "2日"], [13282, 1, "3日"], [13283, 1, "4日"], [13284, 1, "5日"], [13285, 1, "6日"], [13286, 1, "7日"], [13287, 1, "8日"], [13288, 1, "9日"], [13289, 1, "10日"], [13290, 1, "11日"], [13291, 1, "12日"], [13292, 1, "13日"], [13293, 1, "14日"], [13294, 1, "15日"], [13295, 1, "16日"], [13296, 1, "17日"], [13297, 1, "18日"], [13298, 1, "19日"], [13299, 1, "20日"], [13300, 1, "21日"], [13301, 1, "22日"], [13302, 1, "23日"], [13303, 1, "24日"], [13304, 1, "25日"], [13305, 1, "26日"], [13306, 1, "27日"], [13307, 1, "28日"], [13308, 1, "29日"], [13309, 1, "30日"], [13310, 1, "31日"], [13311, 1, "gal"], [[13312, 19893], 2], [[19894, 19903], 2], [[19904, 19967], 2], [[19968, 40869], 2], [[40870, 40891], 2], [[40892, 40899], 2], [[40900, 40907], 2], [40908, 2], [[40909, 40917], 2], [[40918, 40938], 2], [[40939, 40943], 2], [[40944, 40956], 2], [[40957, 40959], 2], [[40960, 42124], 2], [[42125, 42127], 3], [[42128, 42145], 2], [[42146, 42147], 2], [[42148, 42163], 2], [42164, 2], [[42165, 42176], 2], [42177, 2], [[42178, 42180], 2], [42181, 2], [42182, 2], [[42183, 42191], 3], [[42192, 42237], 2], [[42238, 42239], 2], [[42240, 42508], 2], [[42509, 42511], 2], [[42512, 42539], 2], [[42540, 42559], 3], [42560, 1, "ꙁ"], [42561, 2], [42562, 1, "ꙃ"], [42563, 2], [42564, 1, "ꙅ"], [42565, 2], [42566, 1, "ꙇ"], [42567, 2], [42568, 1, "ꙉ"], [42569, 2], [42570, 1, "ꙋ"], [42571, 2], [42572, 1, "ꙍ"], [42573, 2], [42574, 1, "ꙏ"], [42575, 2], [42576, 1, "ꙑ"], [42577, 2], [42578, 1, "ꙓ"], [42579, 2], [42580, 1, "ꙕ"], [42581, 2], [42582, 1, "ꙗ"], [42583, 2], [42584, 1, "ꙙ"], [42585, 2], [42586, 1, "ꙛ"], [42587, 2], [42588, 1, "ꙝ"], [42589, 2], [42590, 1, "ꙟ"], [42591, 2], [42592, 1, "ꙡ"], [42593, 2], [42594, 1, "ꙣ"], [42595, 2], [42596, 1, "ꙥ"], [42597, 2], [42598, 1, "ꙧ"], [42599, 2], [42600, 1, "ꙩ"], [42601, 2], [42602, 1, "ꙫ"], [42603, 2], [42604, 1, "ꙭ"], [[42605, 42607], 2], [[42608, 42611], 2], [[42612, 42619], 2], [[42620, 42621], 2], [42622, 2], [42623, 2], [42624, 1, "ꚁ"], [42625, 2], [42626, 1, "ꚃ"], [42627, 2], [42628, 1, "ꚅ"], [42629, 2], [42630, 1, "ꚇ"], [42631, 2], [42632, 1, "ꚉ"], [42633, 2], [42634, 1, "ꚋ"], [42635, 2], [42636, 1, "ꚍ"], [42637, 2], [42638, 1, "ꚏ"], [42639, 2], [42640, 1, "ꚑ"], [42641, 2], [42642, 1, "ꚓ"], [42643, 2], [42644, 1, "ꚕ"], [42645, 2], [42646, 1, "ꚗ"], [42647, 2], [42648, 1, "ꚙ"], [42649, 2], [42650, 1, "ꚛ"], [42651, 2], [42652, 1, "ъ"], [42653, 1, "ь"], [42654, 2], [42655, 2], [[42656, 42725], 2], [[42726, 42735], 2], [[42736, 42737], 2], [[42738, 42743], 2], [[42744, 42751], 3], [[42752, 42774], 2], [[42775, 42778], 2], [[42779, 42783], 2], [[42784, 42785], 2], [42786, 1, "ꜣ"], [42787, 2], [42788, 1, "ꜥ"], [42789, 2], [42790, 1, "ꜧ"], [42791, 2], [42792, 1, "ꜩ"], [42793, 2], [42794, 1, "ꜫ"], [42795, 2], [42796, 1, "ꜭ"], [42797, 2], [42798, 1, "ꜯ"], [[42799, 42801], 2], [42802, 1, "ꜳ"], [42803, 2], [42804, 1, "ꜵ"], [42805, 2], [42806, 1, "ꜷ"], [42807, 2], [42808, 1, "ꜹ"], [42809, 2], [42810, 1, "ꜻ"], [42811, 2], [42812, 1, "ꜽ"], [42813, 2], [42814, 1, "ꜿ"], [42815, 2], [42816, 1, "ꝁ"], [42817, 2], [42818, 1, "ꝃ"], [42819, 2], [42820, 1, "ꝅ"], [42821, 2], [42822, 1, "ꝇ"], [42823, 2], [42824, 1, "ꝉ"], [42825, 2], [42826, 1, "ꝋ"], [42827, 2], [42828, 1, "ꝍ"], [42829, 2], [42830, 1, "ꝏ"], [42831, 2], [42832, 1, "ꝑ"], [42833, 2], [42834, 1, "ꝓ"], [42835, 2], [42836, 1, "ꝕ"], [42837, 2], [42838, 1, "ꝗ"], [42839, 2], [42840, 1, "ꝙ"], [42841, 2], [42842, 1, "ꝛ"], [42843, 2], [42844, 1, "ꝝ"], [42845, 2], [42846, 1, "ꝟ"], [42847, 2], [42848, 1, "ꝡ"], [42849, 2], [42850, 1, "ꝣ"], [42851, 2], [42852, 1, "ꝥ"], [42853, 2], [42854, 1, "ꝧ"], [42855, 2], [42856, 1, "ꝩ"], [42857, 2], [42858, 1, "ꝫ"], [42859, 2], [42860, 1, "ꝭ"], [42861, 2], [42862, 1, "ꝯ"], [42863, 2], [42864, 1, "ꝯ"], [[42865, 42872], 2], [42873, 1, "ꝺ"], [42874, 2], [42875, 1, "ꝼ"], [42876, 2], [42877, 1, "ᵹ"], [42878, 1, "ꝿ"], [42879, 2], [42880, 1, "ꞁ"], [42881, 2], [42882, 1, "ꞃ"], [42883, 2], [42884, 1, "ꞅ"], [42885, 2], [42886, 1, "ꞇ"], [[42887, 42888], 2], [[42889, 42890], 2], [42891, 1, "ꞌ"], [42892, 2], [42893, 1, "ɥ"], [42894, 2], [42895, 2], [42896, 1, "ꞑ"], [42897, 2], [42898, 1, "ꞓ"], [42899, 2], [[42900, 42901], 2], [42902, 1, "ꞗ"], [42903, 2], [42904, 1, "ꞙ"], [42905, 2], [42906, 1, "ꞛ"], [42907, 2], [42908, 1, "ꞝ"], [42909, 2], [42910, 1, "ꞟ"], [42911, 2], [42912, 1, "ꞡ"], [42913, 2], [42914, 1, "ꞣ"], [42915, 2], [42916, 1, "ꞥ"], [42917, 2], [42918, 1, "ꞧ"], [42919, 2], [42920, 1, "ꞩ"], [42921, 2], [42922, 1, "ɦ"], [42923, 1, "ɜ"], [42924, 1, "ɡ"], [42925, 1, "ɬ"], [42926, 1, "ɪ"], [42927, 2], [42928, 1, "ʞ"], [42929, 1, "ʇ"], [42930, 1, "ʝ"], [42931, 1, "ꭓ"], [42932, 1, "ꞵ"], [42933, 2], [42934, 1, "ꞷ"], [42935, 2], [42936, 1, "ꞹ"], [42937, 2], [42938, 1, "ꞻ"], [42939, 2], [42940, 1, "ꞽ"], [42941, 2], [42942, 1, "ꞿ"], [42943, 2], [42944, 1, "ꟁ"], [42945, 2], [42946, 1, "ꟃ"], [42947, 2], [42948, 1, "ꞔ"], [42949, 1, "ʂ"], [42950, 1, "ᶎ"], [42951, 1, "ꟈ"], [42952, 2], [42953, 1, "ꟊ"], [42954, 2], [[42955, 42959], 3], [42960, 1, "ꟑ"], [42961, 2], [42962, 3], [42963, 2], [42964, 3], [42965, 2], [42966, 1, "ꟗ"], [42967, 2], [42968, 1, "ꟙ"], [42969, 2], [[42970, 42993], 3], [42994, 1, "c"], [42995, 1, "f"], [42996, 1, "q"], [42997, 1, "ꟶ"], [42998, 2], [42999, 2], [43000, 1, "ħ"], [43001, 1, "œ"], [43002, 2], [[43003, 43007], 2], [[43008, 43047], 2], [[43048, 43051], 2], [43052, 2], [[43053, 43055], 3], [[43056, 43065], 2], [[43066, 43071], 3], [[43072, 43123], 2], [[43124, 43127], 2], [[43128, 43135], 3], [[43136, 43204], 2], [43205, 2], [[43206, 43213], 3], [[43214, 43215], 2], [[43216, 43225], 2], [[43226, 43231], 3], [[43232, 43255], 2], [[43256, 43258], 2], [43259, 2], [43260, 2], [43261, 2], [[43262, 43263], 2], [[43264, 43309], 2], [[43310, 43311], 2], [[43312, 43347], 2], [[43348, 43358], 3], [43359, 2], [[43360, 43388], 2], [[43389, 43391], 3], [[43392, 43456], 2], [[43457, 43469], 2], [43470, 3], [[43471, 43481], 2], [[43482, 43485], 3], [[43486, 43487], 2], [[43488, 43518], 2], [43519, 3], [[43520, 43574], 2], [[43575, 43583], 3], [[43584, 43597], 2], [[43598, 43599], 3], [[43600, 43609], 2], [[43610, 43611], 3], [[43612, 43615], 2], [[43616, 43638], 2], [[43639, 43641], 2], [[43642, 43643], 2], [[43644, 43647], 2], [[43648, 43714], 2], [[43715, 43738], 3], [[43739, 43741], 2], [[43742, 43743], 2], [[43744, 43759], 2], [[43760, 43761], 2], [[43762, 43766], 2], [[43767, 43776], 3], [[43777, 43782], 2], [[43783, 43784], 3], [[43785, 43790], 2], [[43791, 43792], 3], [[43793, 43798], 2], [[43799, 43807], 3], [[43808, 43814], 2], [43815, 3], [[43816, 43822], 2], [43823, 3], [[43824, 43866], 2], [43867, 2], [43868, 1, "ꜧ"], [43869, 1, "ꬷ"], [43870, 1, "ɫ"], [43871, 1, "ꭒ"], [[43872, 43875], 2], [[43876, 43877], 2], [[43878, 43879], 2], [43880, 2], [43881, 1, "ʍ"], [[43882, 43883], 2], [[43884, 43887], 3], [43888, 1, "Ꭰ"], [43889, 1, "Ꭱ"], [43890, 1, "Ꭲ"], [43891, 1, "Ꭳ"], [43892, 1, "Ꭴ"], [43893, 1, "Ꭵ"], [43894, 1, "Ꭶ"], [43895, 1, "Ꭷ"], [43896, 1, "Ꭸ"], [43897, 1, "Ꭹ"], [43898, 1, "Ꭺ"], [43899, 1, "Ꭻ"], [43900, 1, "Ꭼ"], [43901, 1, "Ꭽ"], [43902, 1, "Ꭾ"], [43903, 1, "Ꭿ"], [43904, 1, "Ꮀ"], [43905, 1, "Ꮁ"], [43906, 1, "Ꮂ"], [43907, 1, "Ꮃ"], [43908, 1, "Ꮄ"], [43909, 1, "Ꮅ"], [43910, 1, "Ꮆ"], [43911, 1, "Ꮇ"], [43912, 1, "Ꮈ"], [43913, 1, "Ꮉ"], [43914, 1, "Ꮊ"], [43915, 1, "Ꮋ"], [43916, 1, "Ꮌ"], [43917, 1, "Ꮍ"], [43918, 1, "Ꮎ"], [43919, 1, "Ꮏ"], [43920, 1, "Ꮐ"], [43921, 1, "Ꮑ"], [43922, 1, "Ꮒ"], [43923, 1, "Ꮓ"], [43924, 1, "Ꮔ"], [43925, 1, "Ꮕ"], [43926, 1, "Ꮖ"], [43927, 1, "Ꮗ"], [43928, 1, "Ꮘ"], [43929, 1, "Ꮙ"], [43930, 1, "Ꮚ"], [43931, 1, "Ꮛ"], [43932, 1, "Ꮜ"], [43933, 1, "Ꮝ"], [43934, 1, "Ꮞ"], [43935, 1, "Ꮟ"], [43936, 1, "Ꮠ"], [43937, 1, "Ꮡ"], [43938, 1, "Ꮢ"], [43939, 1, "Ꮣ"], [43940, 1, "Ꮤ"], [43941, 1, "Ꮥ"], [43942, 1, "Ꮦ"], [43943, 1, "Ꮧ"], [43944, 1, "Ꮨ"], [43945, 1, "Ꮩ"], [43946, 1, "Ꮪ"], [43947, 1, "Ꮫ"], [43948, 1, "Ꮬ"], [43949, 1, "Ꮭ"], [43950, 1, "Ꮮ"], [43951, 1, "Ꮯ"], [43952, 1, "Ꮰ"], [43953, 1, "Ꮱ"], [43954, 1, "Ꮲ"], [43955, 1, "Ꮳ"], [43956, 1, "Ꮴ"], [43957, 1, "Ꮵ"], [43958, 1, "Ꮶ"], [43959, 1, "Ꮷ"], [43960, 1, "Ꮸ"], [43961, 1, "Ꮹ"], [43962, 1, "Ꮺ"], [43963, 1, "Ꮻ"], [43964, 1, "Ꮼ"], [43965, 1, "Ꮽ"], [43966, 1, "Ꮾ"], [43967, 1, "Ꮿ"], [[43968, 44010], 2], [44011, 2], [[44012, 44013], 2], [[44014, 44015], 3], [[44016, 44025], 2], [[44026, 44031], 3], [[44032, 55203], 2], [[55204, 55215], 3], [[55216, 55238], 2], [[55239, 55242], 3], [[55243, 55291], 2], [[55292, 55295], 3], [[55296, 57343], 3], [[57344, 63743], 3], [63744, 1, "豈"], [63745, 1, "更"], [63746, 1, "車"], [63747, 1, "賈"], [63748, 1, "滑"], [63749, 1, "串"], [63750, 1, "句"], [[63751, 63752], 1, "龜"], [63753, 1, "契"], [63754, 1, "金"], [63755, 1, "喇"], [63756, 1, "奈"], [63757, 1, "懶"], [63758, 1, "癩"], [63759, 1, "羅"], [63760, 1, "蘿"], [63761, 1, "螺"], [63762, 1, "裸"], [63763, 1, "邏"], [63764, 1, "樂"], [63765, 1, "洛"], [63766, 1, "烙"], [63767, 1, "珞"], [63768, 1, "落"], [63769, 1, "酪"], [63770, 1, "駱"], [63771, 1, "亂"], [63772, 1, "卵"], [63773, 1, "欄"], [63774, 1, "爛"], [63775, 1, "蘭"], [63776, 1, "鸞"], [63777, 1, "嵐"], [63778, 1, "濫"], [63779, 1, "藍"], [63780, 1, "襤"], [63781, 1, "拉"], [63782, 1, "臘"], [63783, 1, "蠟"], [63784, 1, "廊"], [63785, 1, "朗"], [63786, 1, "浪"], [63787, 1, "狼"], [63788, 1, "郎"], [63789, 1, "來"], [63790, 1, "冷"], [63791, 1, "勞"], [63792, 1, "擄"], [63793, 1, "櫓"], [63794, 1, "爐"], [63795, 1, "盧"], [63796, 1, "老"], [63797, 1, "蘆"], [63798, 1, "虜"], [63799, 1, "路"], [63800, 1, "露"], [63801, 1, "魯"], [63802, 1, "鷺"], [63803, 1, "碌"], [63804, 1, "祿"], [63805, 1, "綠"], [63806, 1, "菉"], [63807, 1, "錄"], [63808, 1, "鹿"], [63809, 1, "論"], [63810, 1, "壟"], [63811, 1, "弄"], [63812, 1, "籠"], [63813, 1, "聾"], [63814, 1, "牢"], [63815, 1, "磊"], [63816, 1, "賂"], [63817, 1, "雷"], [63818, 1, "壘"], [63819, 1, "屢"], [63820, 1, "樓"], [63821, 1, "淚"], [63822, 1, "漏"], [63823, 1, "累"], [63824, 1, "縷"], [63825, 1, "陋"], [63826, 1, "勒"], [63827, 1, "肋"], [63828, 1, "凜"], [63829, 1, "凌"], [63830, 1, "稜"], [63831, 1, "綾"], [63832, 1, "菱"], [63833, 1, "陵"], [63834, 1, "讀"], [63835, 1, "拏"], [63836, 1, "樂"], [63837, 1, "諾"], [63838, 1, "丹"], [63839, 1, "寧"], [63840, 1, "怒"], [63841, 1, "率"], [63842, 1, "異"], [63843, 1, "北"], [63844, 1, "磻"], [63845, 1, "便"], [63846, 1, "復"], [63847, 1, "不"], [63848, 1, "泌"], [63849, 1, "數"], [63850, 1, "索"], [63851, 1, "參"], [63852, 1, "塞"], [63853, 1, "省"], [63854, 1, "葉"], [63855, 1, "說"], [63856, 1, "殺"], [63857, 1, "辰"], [63858, 1, "沈"], [63859, 1, "拾"], [63860, 1, "若"], [63861, 1, "掠"], [63862, 1, "略"], [63863, 1, "亮"], [63864, 1, "兩"], [63865, 1, "凉"], [63866, 1, "梁"], [63867, 1, "糧"], [63868, 1, "良"], [63869, 1, "諒"], [63870, 1, "量"], [63871, 1, "勵"], [63872, 1, "呂"], [63873, 1, "女"], [63874, 1, "廬"], [63875, 1, "旅"], [63876, 1, "濾"], [63877, 1, "礪"], [63878, 1, "閭"], [63879, 1, "驪"], [63880, 1, "麗"], [63881, 1, "黎"], [63882, 1, "力"], [63883, 1, "曆"], [63884, 1, "歷"], [63885, 1, "轢"], [63886, 1, "年"], [63887, 1, "憐"], [63888, 1, "戀"], [63889, 1, "撚"], [63890, 1, "漣"], [63891, 1, "煉"], [63892, 1, "璉"], [63893, 1, "秊"], [63894, 1, "練"], [63895, 1, "聯"], [63896, 1, "輦"], [63897, 1, "蓮"], [63898, 1, "連"], [63899, 1, "鍊"], [63900, 1, "列"], [63901, 1, "劣"], [63902, 1, "咽"], [63903, 1, "烈"], [63904, 1, "裂"], [63905, 1, "說"], [63906, 1, "廉"], [63907, 1, "念"], [63908, 1, "捻"], [63909, 1, "殮"], [63910, 1, "簾"], [63911, 1, "獵"], [63912, 1, "令"], [63913, 1, "囹"], [63914, 1, "寧"], [63915, 1, "嶺"], [63916, 1, "怜"], [63917, 1, "玲"], [63918, 1, "瑩"], [63919, 1, "羚"], [63920, 1, "聆"], [63921, 1, "鈴"], [63922, 1, "零"], [63923, 1, "靈"], [63924, 1, "領"], [63925, 1, "例"], [63926, 1, "禮"], [63927, 1, "醴"], [63928, 1, "隸"], [63929, 1, "惡"], [63930, 1, "了"], [63931, 1, "僚"], [63932, 1, "寮"], [63933, 1, "尿"], [63934, 1, "料"], [63935, 1, "樂"], [63936, 1, "燎"], [63937, 1, "療"], [63938, 1, "蓼"], [63939, 1, "遼"], [63940, 1, "龍"], [63941, 1, "暈"], [63942, 1, "阮"], [63943, 1, "劉"], [63944, 1, "杻"], [63945, 1, "柳"], [63946, 1, "流"], [63947, 1, "溜"], [63948, 1, "琉"], [63949, 1, "留"], [63950, 1, "硫"], [63951, 1, "紐"], [63952, 1, "類"], [63953, 1, "六"], [63954, 1, "戮"], [63955, 1, "陸"], [63956, 1, "倫"], [63957, 1, "崙"], [63958, 1, "淪"], [63959, 1, "輪"], [63960, 1, "律"], [63961, 1, "慄"], [63962, 1, "栗"], [63963, 1, "率"], [63964, 1, "隆"], [63965, 1, "利"], [63966, 1, "吏"], [63967, 1, "履"], [63968, 1, "易"], [63969, 1, "李"], [63970, 1, "梨"], [63971, 1, "泥"], [63972, 1, "理"], [63973, 1, "痢"], [63974, 1, "罹"], [63975, 1, "裏"], [63976, 1, "裡"], [63977, 1, "里"], [63978, 1, "離"], [63979, 1, "匿"], [63980, 1, "溺"], [63981, 1, "吝"], [63982, 1, "燐"], [63983, 1, "璘"], [63984, 1, "藺"], [63985, 1, "隣"], [63986, 1, "鱗"], [63987, 1, "麟"], [63988, 1, "林"], [63989, 1, "淋"], [63990, 1, "臨"], [63991, 1, "立"], [63992, 1, "笠"], [63993, 1, "粒"], [63994, 1, "狀"], [63995, 1, "炙"], [63996, 1, "識"], [63997, 1, "什"], [63998, 1, "茶"], [63999, 1, "刺"], [64000, 1, "切"], [64001, 1, "度"], [64002, 1, "拓"], [64003, 1, "糖"], [64004, 1, "宅"], [64005, 1, "洞"], [64006, 1, "暴"], [64007, 1, "輻"], [64008, 1, "行"], [64009, 1, "降"], [64010, 1, "見"], [64011, 1, "廓"], [64012, 1, "兀"], [64013, 1, "嗀"], [[64014, 64015], 2], [64016, 1, "塚"], [64017, 2], [64018, 1, "晴"], [[64019, 64020], 2], [64021, 1, "凞"], [64022, 1, "猪"], [64023, 1, "益"], [64024, 1, "礼"], [64025, 1, "神"], [64026, 1, "祥"], [64027, 1, "福"], [64028, 1, "靖"], [64029, 1, "精"], [64030, 1, "羽"], [64031, 2], [64032, 1, "蘒"], [64033, 2], [64034, 1, "諸"], [[64035, 64036], 2], [64037, 1, "逸"], [64038, 1, "都"], [[64039, 64041], 2], [64042, 1, "飯"], [64043, 1, "飼"], [64044, 1, "館"], [64045, 1, "鶴"], [64046, 1, "郞"], [64047, 1, "隷"], [64048, 1, "侮"], [64049, 1, "僧"], [64050, 1, "免"], [64051, 1, "勉"], [64052, 1, "勤"], [64053, 1, "卑"], [64054, 1, "喝"], [64055, 1, "嘆"], [64056, 1, "器"], [64057, 1, "塀"], [64058, 1, "墨"], [64059, 1, "層"], [64060, 1, "屮"], [64061, 1, "悔"], [64062, 1, "慨"], [64063, 1, "憎"], [64064, 1, "懲"], [64065, 1, "敏"], [64066, 1, "既"], [64067, 1, "暑"], [64068, 1, "梅"], [64069, 1, "海"], [64070, 1, "渚"], [64071, 1, "漢"], [64072, 1, "煮"], [64073, 1, "爫"], [64074, 1, "琢"], [64075, 1, "碑"], [64076, 1, "社"], [64077, 1, "祉"], [64078, 1, "祈"], [64079, 1, "祐"], [64080, 1, "祖"], [64081, 1, "祝"], [64082, 1, "禍"], [64083, 1, "禎"], [64084, 1, "穀"], [64085, 1, "突"], [64086, 1, "節"], [64087, 1, "練"], [64088, 1, "縉"], [64089, 1, "繁"], [64090, 1, "署"], [64091, 1, "者"], [64092, 1, "臭"], [[64093, 64094], 1, "艹"], [64095, 1, "著"], [64096, 1, "褐"], [64097, 1, "視"], [64098, 1, "謁"], [64099, 1, "謹"], [64100, 1, "賓"], [64101, 1, "贈"], [64102, 1, "辶"], [64103, 1, "逸"], [64104, 1, "難"], [64105, 1, "響"], [64106, 1, "頻"], [64107, 1, "恵"], [64108, 1, "𤋮"], [64109, 1, "舘"], [[64110, 64111], 3], [64112, 1, "並"], [64113, 1, "况"], [64114, 1, "全"], [64115, 1, "侀"], [64116, 1, "充"], [64117, 1, "冀"], [64118, 1, "勇"], [64119, 1, "勺"], [64120, 1, "喝"], [64121, 1, "啕"], [64122, 1, "喙"], [64123, 1, "嗢"], [64124, 1, "塚"], [64125, 1, "墳"], [64126, 1, "奄"], [64127, 1, "奔"], [64128, 1, "婢"], [64129, 1, "嬨"], [64130, 1, "廒"], [64131, 1, "廙"], [64132, 1, "彩"], [64133, 1, "徭"], [64134, 1, "惘"], [64135, 1, "慎"], [64136, 1, "愈"], [64137, 1, "憎"], [64138, 1, "慠"], [64139, 1, "懲"], [64140, 1, "戴"], [64141, 1, "揄"], [64142, 1, "搜"], [64143, 1, "摒"], [64144, 1, "敖"], [64145, 1, "晴"], [64146, 1, "朗"], [64147, 1, "望"], [64148, 1, "杖"], [64149, 1, "歹"], [64150, 1, "殺"], [64151, 1, "流"], [64152, 1, "滛"], [64153, 1, "滋"], [64154, 1, "漢"], [64155, 1, "瀞"], [64156, 1, "煮"], [64157, 1, "瞧"], [64158, 1, "爵"], [64159, 1, "犯"], [64160, 1, "猪"], [64161, 1, "瑱"], [64162, 1, "甆"], [64163, 1, "画"], [64164, 1, "瘝"], [64165, 1, "瘟"], [64166, 1, "益"], [64167, 1, "盛"], [64168, 1, "直"], [64169, 1, "睊"], [64170, 1, "着"], [64171, 1, "磌"], [64172, 1, "窱"], [64173, 1, "節"], [64174, 1, "类"], [64175, 1, "絛"], [64176, 1, "練"], [64177, 1, "缾"], [64178, 1, "者"], [64179, 1, "荒"], [64180, 1, "華"], [64181, 1, "蝹"], [64182, 1, "襁"], [64183, 1, "覆"], [64184, 1, "視"], [64185, 1, "調"], [64186, 1, "諸"], [64187, 1, "請"], [64188, 1, "謁"], [64189, 1, "諾"], [64190, 1, "諭"], [64191, 1, "謹"], [64192, 1, "變"], [64193, 1, "贈"], [64194, 1, "輸"], [64195, 1, "遲"], [64196, 1, "醙"], [64197, 1, "鉶"], [64198, 1, "陼"], [64199, 1, "難"], [64200, 1, "靖"], [64201, 1, "韛"], [64202, 1, "響"], [64203, 1, "頋"], [64204, 1, "頻"], [64205, 1, "鬒"], [64206, 1, "龜"], [64207, 1, "𢡊"], [64208, 1, "𢡄"], [64209, 1, "𣏕"], [64210, 1, "㮝"], [64211, 1, "䀘"], [64212, 1, "䀹"], [64213, 1, "𥉉"], [64214, 1, "𥳐"], [64215, 1, "𧻓"], [64216, 1, "齃"], [64217, 1, "龎"], [[64218, 64255], 3], [64256, 1, "ff"], [64257, 1, "fi"], [64258, 1, "fl"], [64259, 1, "ffi"], [64260, 1, "ffl"], [[64261, 64262], 1, "st"], [[64263, 64274], 3], [64275, 1, "մն"], [64276, 1, "մե"], [64277, 1, "մի"], [64278, 1, "վն"], [64279, 1, "մխ"], [[64280, 64284], 3], [64285, 1, "יִ"], [64286, 2], [64287, 1, "ײַ"], [64288, 1, "ע"], [64289, 1, "א"], [64290, 1, "ד"], [64291, 1, "ה"], [64292, 1, "כ"], [64293, 1, "ל"], [64294, 1, "ם"], [64295, 1, "ר"], [64296, 1, "ת"], [64297, 5, "+"], [64298, 1, "שׁ"], [64299, 1, "שׂ"], [64300, 1, "שּׁ"], [64301, 1, "שּׂ"], [64302, 1, "אַ"], [64303, 1, "אָ"], [64304, 1, "אּ"], [64305, 1, "בּ"], [64306, 1, "גּ"], [64307, 1, "דּ"], [64308, 1, "הּ"], [64309, 1, "וּ"], [64310, 1, "זּ"], [64311, 3], [64312, 1, "טּ"], [64313, 1, "יּ"], [64314, 1, "ךּ"], [64315, 1, "כּ"], [64316, 1, "לּ"], [64317, 3], [64318, 1, "מּ"], [64319, 3], [64320, 1, "נּ"], [64321, 1, "סּ"], [64322, 3], [64323, 1, "ףּ"], [64324, 1, "פּ"], [64325, 3], [64326, 1, "צּ"], [64327, 1, "קּ"], [64328, 1, "רּ"], [64329, 1, "שּ"], [64330, 1, "תּ"], [64331, 1, "וֹ"], [64332, 1, "בֿ"], [64333, 1, "כֿ"], [64334, 1, "פֿ"], [64335, 1, "אל"], [[64336, 64337], 1, "ٱ"], [[64338, 64341], 1, "ٻ"], [[64342, 64345], 1, "پ"], [[64346, 64349], 1, "ڀ"], [[64350, 64353], 1, "ٺ"], [[64354, 64357], 1, "ٿ"], [[64358, 64361], 1, "ٹ"], [[64362, 64365], 1, "ڤ"], [[64366, 64369], 1, "ڦ"], [[64370, 64373], 1, "ڄ"], [[64374, 64377], 1, "ڃ"], [[64378, 64381], 1, "چ"], [[64382, 64385], 1, "ڇ"], [[64386, 64387], 1, "ڍ"], [[64388, 64389], 1, "ڌ"], [[64390, 64391], 1, "ڎ"], [[64392, 64393], 1, "ڈ"], [[64394, 64395], 1, "ژ"], [[64396, 64397], 1, "ڑ"], [[64398, 64401], 1, "ک"], [[64402, 64405], 1, "گ"], [[64406, 64409], 1, "ڳ"], [[64410, 64413], 1, "ڱ"], [[64414, 64415], 1, "ں"], [[64416, 64419], 1, "ڻ"], [[64420, 64421], 1, "ۀ"], [[64422, 64425], 1, "ہ"], [[64426, 64429], 1, "ھ"], [[64430, 64431], 1, "ے"], [[64432, 64433], 1, "ۓ"], [[64434, 64449], 2], [64450, 2], [[64451, 64466], 3], [[64467, 64470], 1, "ڭ"], [[64471, 64472], 1, "ۇ"], [[64473, 64474], 1, "ۆ"], [[64475, 64476], 1, "ۈ"], [64477, 1, "ۇٴ"], [[64478, 64479], 1, "ۋ"], [[64480, 64481], 1, "ۅ"], [[64482, 64483], 1, "ۉ"], [[64484, 64487], 1, "ې"], [[64488, 64489], 1, "ى"], [[64490, 64491], 1, "ئا"], [[64492, 64493], 1, "ئە"], [[64494, 64495], 1, "ئو"], [[64496, 64497], 1, "ئۇ"], [[64498, 64499], 1, "ئۆ"], [[64500, 64501], 1, "ئۈ"], [[64502, 64504], 1, "ئې"], [[64505, 64507], 1, "ئى"], [[64508, 64511], 1, "ی"], [64512, 1, "ئج"], [64513, 1, "ئح"], [64514, 1, "ئم"], [64515, 1, "ئى"], [64516, 1, "ئي"], [64517, 1, "بج"], [64518, 1, "بح"], [64519, 1, "بخ"], [64520, 1, "بم"], [64521, 1, "بى"], [64522, 1, "بي"], [64523, 1, "تج"], [64524, 1, "تح"], [64525, 1, "تخ"], [64526, 1, "تم"], [64527, 1, "تى"], [64528, 1, "تي"], [64529, 1, "ثج"], [64530, 1, "ثم"], [64531, 1, "ثى"], [64532, 1, "ثي"], [64533, 1, "جح"], [64534, 1, "جم"], [64535, 1, "حج"], [64536, 1, "حم"], [64537, 1, "خج"], [64538, 1, "خح"], [64539, 1, "خم"], [64540, 1, "سج"], [64541, 1, "سح"], [64542, 1, "سخ"], [64543, 1, "سم"], [64544, 1, "صح"], [64545, 1, "صم"], [64546, 1, "ضج"], [64547, 1, "ضح"], [64548, 1, "ضخ"], [64549, 1, "ضم"], [64550, 1, "طح"], [64551, 1, "طم"], [64552, 1, "ظم"], [64553, 1, "عج"], [64554, 1, "عم"], [64555, 1, "غج"], [64556, 1, "غم"], [64557, 1, "فج"], [64558, 1, "فح"], [64559, 1, "فخ"], [64560, 1, "فم"], [64561, 1, "فى"], [64562, 1, "في"], [64563, 1, "قح"], [64564, 1, "قم"], [64565, 1, "قى"], [64566, 1, "قي"], [64567, 1, "كا"], [64568, 1, "كج"], [64569, 1, "كح"], [64570, 1, "كخ"], [64571, 1, "كل"], [64572, 1, "كم"], [64573, 1, "كى"], [64574, 1, "كي"], [64575, 1, "لج"], [64576, 1, "لح"], [64577, 1, "لخ"], [64578, 1, "لم"], [64579, 1, "لى"], [64580, 1, "لي"], [64581, 1, "مج"], [64582, 1, "مح"], [64583, 1, "مخ"], [64584, 1, "مم"], [64585, 1, "مى"], [64586, 1, "مي"], [64587, 1, "نج"], [64588, 1, "نح"], [64589, 1, "نخ"], [64590, 1, "نم"], [64591, 1, "نى"], [64592, 1, "ني"], [64593, 1, "هج"], [64594, 1, "هم"], [64595, 1, "هى"], [64596, 1, "هي"], [64597, 1, "يج"], [64598, 1, "يح"], [64599, 1, "يخ"], [64600, 1, "يم"], [64601, 1, "يى"], [64602, 1, "يي"], [64603, 1, "ذٰ"], [64604, 1, "رٰ"], [64605, 1, "ىٰ"], [64606, 5, " ٌّ"], [64607, 5, " ٍّ"], [64608, 5, " َّ"], [64609, 5, " ُّ"], [64610, 5, " ِّ"], [64611, 5, " ّٰ"], [64612, 1, "ئر"], [64613, 1, "ئز"], [64614, 1, "ئم"], [64615, 1, "ئن"], [64616, 1, "ئى"], [64617, 1, "ئي"], [64618, 1, "بر"], [64619, 1, "بز"], [64620, 1, "بم"], [64621, 1, "بن"], [64622, 1, "بى"], [64623, 1, "بي"], [64624, 1, "تر"], [64625, 1, "تز"], [64626, 1, "تم"], [64627, 1, "تن"], [64628, 1, "تى"], [64629, 1, "تي"], [64630, 1, "ثر"], [64631, 1, "ثز"], [64632, 1, "ثم"], [64633, 1, "ثن"], [64634, 1, "ثى"], [64635, 1, "ثي"], [64636, 1, "فى"], [64637, 1, "في"], [64638, 1, "قى"], [64639, 1, "قي"], [64640, 1, "كا"], [64641, 1, "كل"], [64642, 1, "كم"], [64643, 1, "كى"], [64644, 1, "كي"], [64645, 1, "لم"], [64646, 1, "لى"], [64647, 1, "لي"], [64648, 1, "ما"], [64649, 1, "مم"], [64650, 1, "نر"], [64651, 1, "نز"], [64652, 1, "نم"], [64653, 1, "نن"], [64654, 1, "نى"], [64655, 1, "ني"], [64656, 1, "ىٰ"], [64657, 1, "ير"], [64658, 1, "يز"], [64659, 1, "يم"], [64660, 1, "ين"], [64661, 1, "يى"], [64662, 1, "يي"], [64663, 1, "ئج"], [64664, 1, "ئح"], [64665, 1, "ئخ"], [64666, 1, "ئم"], [64667, 1, "ئه"], [64668, 1, "بج"], [64669, 1, "بح"], [64670, 1, "بخ"], [64671, 1, "بم"], [64672, 1, "به"], [64673, 1, "تج"], [64674, 1, "تح"], [64675, 1, "تخ"], [64676, 1, "تم"], [64677, 1, "ته"], [64678, 1, "ثم"], [64679, 1, "جح"], [64680, 1, "جم"], [64681, 1, "حج"], [64682, 1, "حم"], [64683, 1, "خج"], [64684, 1, "خم"], [64685, 1, "سج"], [64686, 1, "سح"], [64687, 1, "سخ"], [64688, 1, "سم"], [64689, 1, "صح"], [64690, 1, "صخ"], [64691, 1, "صم"], [64692, 1, "ضج"], [64693, 1, "ضح"], [64694, 1, "ضخ"], [64695, 1, "ضم"], [64696, 1, "طح"], [64697, 1, "ظم"], [64698, 1, "عج"], [64699, 1, "عم"], [64700, 1, "غج"], [64701, 1, "غم"], [64702, 1, "فج"], [64703, 1, "فح"], [64704, 1, "فخ"], [64705, 1, "فم"], [64706, 1, "قح"], [64707, 1, "قم"], [64708, 1, "كج"], [64709, 1, "كح"], [64710, 1, "كخ"], [64711, 1, "كل"], [64712, 1, "كم"], [64713, 1, "لج"], [64714, 1, "لح"], [64715, 1, "لخ"], [64716, 1, "لم"], [64717, 1, "له"], [64718, 1, "مج"], [64719, 1, "مح"], [64720, 1, "مخ"], [64721, 1, "مم"], [64722, 1, "نج"], [64723, 1, "نح"], [64724, 1, "نخ"], [64725, 1, "نم"], [64726, 1, "نه"], [64727, 1, "هج"], [64728, 1, "هم"], [64729, 1, "هٰ"], [64730, 1, "يج"], [64731, 1, "يح"], [64732, 1, "يخ"], [64733, 1, "يم"], [64734, 1, "يه"], [64735, 1, "ئم"], [64736, 1, "ئه"], [64737, 1, "بم"], [64738, 1, "به"], [64739, 1, "تم"], [64740, 1, "ته"], [64741, 1, "ثم"], [64742, 1, "ثه"], [64743, 1, "سم"], [64744, 1, "سه"], [64745, 1, "شم"], [64746, 1, "شه"], [64747, 1, "كل"], [64748, 1, "كم"], [64749, 1, "لم"], [64750, 1, "نم"], [64751, 1, "نه"], [64752, 1, "يم"], [64753, 1, "يه"], [64754, 1, "ـَّ"], [64755, 1, "ـُّ"], [64756, 1, "ـِّ"], [64757, 1, "طى"], [64758, 1, "طي"], [64759, 1, "عى"], [64760, 1, "عي"], [64761, 1, "غى"], [64762, 1, "غي"], [64763, 1, "سى"], [64764, 1, "سي"], [64765, 1, "شى"], [64766, 1, "شي"], [64767, 1, "حى"], [64768, 1, "حي"], [64769, 1, "جى"], [64770, 1, "جي"], [64771, 1, "خى"], [64772, 1, "خي"], [64773, 1, "صى"], [64774, 1, "صي"], [64775, 1, "ضى"], [64776, 1, "ضي"], [64777, 1, "شج"], [64778, 1, "شح"], [64779, 1, "شخ"], [64780, 1, "شم"], [64781, 1, "شر"], [64782, 1, "سر"], [64783, 1, "صر"], [64784, 1, "ضر"], [64785, 1, "طى"], [64786, 1, "طي"], [64787, 1, "عى"], [64788, 1, "عي"], [64789, 1, "غى"], [64790, 1, "غي"], [64791, 1, "سى"], [64792, 1, "سي"], [64793, 1, "شى"], [64794, 1, "شي"], [64795, 1, "حى"], [64796, 1, "حي"], [64797, 1, "جى"], [64798, 1, "جي"], [64799, 1, "خى"], [64800, 1, "خي"], [64801, 1, "صى"], [64802, 1, "صي"], [64803, 1, "ضى"], [64804, 1, "ضي"], [64805, 1, "شج"], [64806, 1, "شح"], [64807, 1, "شخ"], [64808, 1, "شم"], [64809, 1, "شر"], [64810, 1, "سر"], [64811, 1, "صر"], [64812, 1, "ضر"], [64813, 1, "شج"], [64814, 1, "شح"], [64815, 1, "شخ"], [64816, 1, "شم"], [64817, 1, "سه"], [64818, 1, "شه"], [64819, 1, "طم"], [64820, 1, "سج"], [64821, 1, "سح"], [64822, 1, "سخ"], [64823, 1, "شج"], [64824, 1, "شح"], [64825, 1, "شخ"], [64826, 1, "طم"], [64827, 1, "ظم"], [[64828, 64829], 1, "اً"], [[64830, 64831], 2], [[64832, 64847], 2], [64848, 1, "تجم"], [[64849, 64850], 1, "تحج"], [64851, 1, "تحم"], [64852, 1, "تخم"], [64853, 1, "تمج"], [64854, 1, "تمح"], [64855, 1, "تمخ"], [[64856, 64857], 1, "جمح"], [64858, 1, "حمي"], [64859, 1, "حمى"], [64860, 1, "سحج"], [64861, 1, "سجح"], [64862, 1, "سجى"], [[64863, 64864], 1, "سمح"], [64865, 1, "سمج"], [[64866, 64867], 1, "سمم"], [[64868, 64869], 1, "صحح"], [64870, 1, "صمم"], [[64871, 64872], 1, "شحم"], [64873, 1, "شجي"], [[64874, 64875], 1, "شمخ"], [[64876, 64877], 1, "شمم"], [64878, 1, "ضحى"], [[64879, 64880], 1, "ضخم"], [[64881, 64882], 1, "طمح"], [64883, 1, "طمم"], [64884, 1, "طمي"], [64885, 1, "عجم"], [[64886, 64887], 1, "عمم"], [64888, 1, "عمى"], [64889, 1, "غمم"], [64890, 1, "غمي"], [64891, 1, "غمى"], [[64892, 64893], 1, "فخم"], [64894, 1, "قمح"], [64895, 1, "قمم"], [64896, 1, "لحم"], [64897, 1, "لحي"], [64898, 1, "لحى"], [[64899, 64900], 1, "لجج"], [[64901, 64902], 1, "لخم"], [[64903, 64904], 1, "لمح"], [64905, 1, "محج"], [64906, 1, "محم"], [64907, 1, "محي"], [64908, 1, "مجح"], [64909, 1, "مجم"], [64910, 1, "مخج"], [64911, 1, "مخم"], [[64912, 64913], 3], [64914, 1, "مجخ"], [64915, 1, "همج"], [64916, 1, "همم"], [64917, 1, "نحم"], [64918, 1, "نحى"], [[64919, 64920], 1, "نجم"], [64921, 1, "نجى"], [64922, 1, "نمي"], [64923, 1, "نمى"], [[64924, 64925], 1, "يمم"], [64926, 1, "بخي"], [64927, 1, "تجي"], [64928, 1, "تجى"], [64929, 1, "تخي"], [64930, 1, "تخى"], [64931, 1, "تمي"], [64932, 1, "تمى"], [64933, 1, "جمي"], [64934, 1, "جحى"], [64935, 1, "جمى"], [64936, 1, "سخى"], [64937, 1, "صحي"], [64938, 1, "شحي"], [64939, 1, "ضحي"], [64940, 1, "لجي"], [64941, 1, "لمي"], [64942, 1, "يحي"], [64943, 1, "يجي"], [64944, 1, "يمي"], [64945, 1, "ممي"], [64946, 1, "قمي"], [64947, 1, "نحي"], [64948, 1, "قمح"], [64949, 1, "لحم"], [64950, 1, "عمي"], [64951, 1, "كمي"], [64952, 1, "نجح"], [64953, 1, "مخي"], [64954, 1, "لجم"], [64955, 1, "كمم"], [64956, 1, "لجم"], [64957, 1, "نجح"], [64958, 1, "جحي"], [64959, 1, "حجي"], [64960, 1, "مجي"], [64961, 1, "فمي"], [64962, 1, "بحي"], [64963, 1, "كمم"], [64964, 1, "عجم"], [64965, 1, "صمم"], [64966, 1, "سخي"], [64967, 1, "نجي"], [[64968, 64974], 3], [64975, 2], [[64976, 65007], 3], [65008, 1, "صلے"], [65009, 1, "قلے"], [65010, 1, "الله"], [65011, 1, "اكبر"], [65012, 1, "محمد"], [65013, 1, "صلعم"], [65014, 1, "رسول"], [65015, 1, "عليه"], [65016, 1, "وسلم"], [65017, 1, "صلى"], [65018, 5, "صلى الله عليه وسلم"], [65019, 5, "جل جلاله"], [65020, 1, "ریال"], [65021, 2], [[65022, 65023], 2], [[65024, 65039], 7], [65040, 5, ","], [65041, 1, "、"], [65042, 3], [65043, 5, ":"], [65044, 5, ";"], [65045, 5, "!"], [65046, 5, "?"], [65047, 1, "〖"], [65048, 1, "〗"], [65049, 3], [[65050, 65055], 3], [[65056, 65059], 2], [[65060, 65062], 2], [[65063, 65069], 2], [[65070, 65071], 2], [65072, 3], [65073, 1, "—"], [65074, 1, "–"], [[65075, 65076], 5, "_"], [65077, 5, "("], [65078, 5, ")"], [65079, 5, "{"], [65080, 5, "}"], [65081, 1, "〔"], [65082, 1, "〕"], [65083, 1, "【"], [65084, 1, "】"], [65085, 1, "《"], [65086, 1, "》"], [65087, 1, "〈"], [65088, 1, "〉"], [65089, 1, "「"], [65090, 1, "」"], [65091, 1, "『"], [65092, 1, "』"], [[65093, 65094], 2], [65095, 5, "["], [65096, 5, "]"], [[65097, 65100], 5, " ̅"], [[65101, 65103], 5, "_"], [65104, 5, ","], [65105, 1, "、"], [65106, 3], [65107, 3], [65108, 5, ";"], [65109, 5, ":"], [65110, 5, "?"], [65111, 5, "!"], [65112, 1, "—"], [65113, 5, "("], [65114, 5, ")"], [65115, 5, "{"], [65116, 5, "}"], [65117, 1, "〔"], [65118, 1, "〕"], [65119, 5, "#"], [65120, 5, "&"], [65121, 5, "*"], [65122, 5, "+"], [65123, 1, "-"], [65124, 5, "<"], [65125, 5, ">"], [65126, 5, "="], [65127, 3], [65128, 5, "\\"], [65129, 5, "$"], [65130, 5, "%"], [65131, 5, "@"], [[65132, 65135], 3], [65136, 5, " ً"], [65137, 1, "ـً"], [65138, 5, " ٌ"], [65139, 2], [65140, 5, " ٍ"], [65141, 3], [65142, 5, " َ"], [65143, 1, "ـَ"], [65144, 5, " ُ"], [65145, 1, "ـُ"], [65146, 5, " ِ"], [65147, 1, "ـِ"], [65148, 5, " ّ"], [65149, 1, "ـّ"], [65150, 5, " ْ"], [65151, 1, "ـْ"], [65152, 1, "ء"], [[65153, 65154], 1, "آ"], [[65155, 65156], 1, "أ"], [[65157, 65158], 1, "ؤ"], [[65159, 65160], 1, "إ"], [[65161, 65164], 1, "ئ"], [[65165, 65166], 1, "ا"], [[65167, 65170], 1, "ب"], [[65171, 65172], 1, "ة"], [[65173, 65176], 1, "ت"], [[65177, 65180], 1, "ث"], [[65181, 65184], 1, "ج"], [[65185, 65188], 1, "ح"], [[65189, 65192], 1, "خ"], [[65193, 65194], 1, "د"], [[65195, 65196], 1, "ذ"], [[65197, 65198], 1, "ر"], [[65199, 65200], 1, "ز"], [[65201, 65204], 1, "س"], [[65205, 65208], 1, "ش"], [[65209, 65212], 1, "ص"], [[65213, 65216], 1, "ض"], [[65217, 65220], 1, "ط"], [[65221, 65224], 1, "ظ"], [[65225, 65228], 1, "ع"], [[65229, 65232], 1, "غ"], [[65233, 65236], 1, "ف"], [[65237, 65240], 1, "ق"], [[65241, 65244], 1, "ك"], [[65245, 65248], 1, "ل"], [[65249, 65252], 1, "م"], [[65253, 65256], 1, "ن"], [[65257, 65260], 1, "ه"], [[65261, 65262], 1, "و"], [[65263, 65264], 1, "ى"], [[65265, 65268], 1, "ي"], [[65269, 65270], 1, "لآ"], [[65271, 65272], 1, "لأ"], [[65273, 65274], 1, "لإ"], [[65275, 65276], 1, "لاa"], [65314, 1, "b"], [65315, 1, "c"], [65316, 1, "d"], [65317, 1, "e"], [65318, 1, "f"], [65319, 1, "g"], [65320, 1, "h"], [65321, 1, "i"], [65322, 1, "j"], [65323, 1, "k"], [65324, 1, "l"], [65325, 1, "m"], [65326, 1, "n"], [65327, 1, "o"], [65328, 1, "p"], [65329, 1, "q"], [65330, 1, "r"], [65331, 1, "s"], [65332, 1, "t"], [65333, 1, "u"], [65334, 1, "v"], [65335, 1, "w"], [65336, 1, "x"], [65337, 1, "y"], [65338, 1, "z"], [65339, 5, "["], [65340, 5, "\\"], [65341, 5, "]"], [65342, 5, "^"], [65343, 5, "_"], [65344, 5, "`"], [65345, 1, "a"], [65346, 1, "b"], [65347, 1, "c"], [65348, 1, "d"], [65349, 1, "e"], [65350, 1, "f"], [65351, 1, "g"], [65352, 1, "h"], [65353, 1, "i"], [65354, 1, "j"], [65355, 1, "k"], [65356, 1, "l"], [65357, 1, "m"], [65358, 1, "n"], [65359, 1, "o"], [65360, 1, "p"], [65361, 1, "q"], [65362, 1, "r"], [65363, 1, "s"], [65364, 1, "t"], [65365, 1, "u"], [65366, 1, "v"], [65367, 1, "w"], [65368, 1, "x"], [65369, 1, "y"], [65370, 1, "z"], [65371, 5, "{"], [65372, 5, "|"], [65373, 5, "}"], [65374, 5, "~"], [65375, 1, "⦅"], [65376, 1, "⦆"], [65377, 1, "."], [65378, 1, "「"], [65379, 1, "」"], [65380, 1, "、"], [65381, 1, "・"], [65382, 1, "ヲ"], [65383, 1, "ァ"], [65384, 1, "ィ"], [65385, 1, "ゥ"], [65386, 1, "ェ"], [65387, 1, "ォ"], [65388, 1, "ャ"], [65389, 1, "ュ"], [65390, 1, "ョ"], [65391, 1, "ッ"], [65392, 1, "ー"], [65393, 1, "ア"], [65394, 1, "イ"], [65395, 1, "ウ"], [65396, 1, "エ"], [65397, 1, "オ"], [65398, 1, "カ"], [65399, 1, "キ"], [65400, 1, "ク"], [65401, 1, "ケ"], [65402, 1, "コ"], [65403, 1, "サ"], [65404, 1, "シ"], [65405, 1, "ス"], [65406, 1, "セ"], [65407, 1, "ソ"], [65408, 1, "タ"], [65409, 1, "チ"], [65410, 1, "ツ"], [65411, 1, "テ"], [65412, 1, "ト"], [65413, 1, "ナ"], [65414, 1, "ニ"], [65415, 1, "ヌ"], [65416, 1, "ネ"], [65417, 1, "ノ"], [65418, 1, "ハ"], [65419, 1, "ヒ"], [65420, 1, "フ"], [65421, 1, "ヘ"], [65422, 1, "ホ"], [65423, 1, "マ"], [65424, 1, "ミ"], [65425, 1, "ム"], [65426, 1, "メ"], [65427, 1, "モ"], [65428, 1, "ヤ"], [65429, 1, "ユ"], [65430, 1, "ヨ"], [65431, 1, "ラ"], [65432, 1, "リ"], [65433, 1, "ル"], [65434, 1, "レ"], [65435, 1, "ロ"], [65436, 1, "ワ"], [65437, 1, "ン"], [65438, 1, "゙"], [65439, 1, "゚"], [65440, 3], [65441, 1, "ᄀ"], [65442, 1, "ᄁ"], [65443, 1, "ᆪ"], [65444, 1, "ᄂ"], [65445, 1, "ᆬ"], [65446, 1, "ᆭ"], [65447, 1, "ᄃ"], [65448, 1, "ᄄ"], [65449, 1, "ᄅ"], [65450, 1, "ᆰ"], [65451, 1, "ᆱ"], [65452, 1, "ᆲ"], [65453, 1, "ᆳ"], [65454, 1, "ᆴ"], [65455, 1, "ᆵ"], [65456, 1, "ᄚ"], [65457, 1, "ᄆ"], [65458, 1, "ᄇ"], [65459, 1, "ᄈ"], [65460, 1, "ᄡ"], [65461, 1, "ᄉ"], [65462, 1, "ᄊ"], [65463, 1, "ᄋ"], [65464, 1, "ᄌ"], [65465, 1, "ᄍ"], [65466, 1, "ᄎ"], [65467, 1, "ᄏ"], [65468, 1, "ᄐ"], [65469, 1, "ᄑ"], [65470, 1, "ᄒ"], [[65471, 65473], 3], [65474, 1, "ᅡ"], [65475, 1, "ᅢ"], [65476, 1, "ᅣ"], [65477, 1, "ᅤ"], [65478, 1, "ᅥ"], [65479, 1, "ᅦ"], [[65480, 65481], 3], [65482, 1, "ᅧ"], [65483, 1, "ᅨ"], [65484, 1, "ᅩ"], [65485, 1, "ᅪ"], [65486, 1, "ᅫ"], [65487, 1, "ᅬ"], [[65488, 65489], 3], [65490, 1, "ᅭ"], [65491, 1, "ᅮ"], [65492, 1, "ᅯ"], [65493, 1, "ᅰ"], [65494, 1, "ᅱ"], [65495, 1, "ᅲ"], [[65496, 65497], 3], [65498, 1, "ᅳ"], [65499, 1, "ᅴ"], [65500, 1, "ᅵ"], [[65501, 65503], 3], [65504, 1, "¢"], [65505, 1, "£"], [65506, 1, "¬"], [65507, 5, " ̄"], [65508, 1, "¦"], [65509, 1, "¥"], [65510, 1, "₩"], [65511, 3], [65512, 1, "│"], [65513, 1, "←"], [65514, 1, "↑"], [65515, 1, "→"], [65516, 1, "↓"], [65517, 1, "■"], [65518, 1, "○"], [[65519, 65528], 3], [[65529, 65531], 3], [65532, 3], [65533, 3], [[65534, 65535], 3], [[65536, 65547], 2], [65548, 3], [[65549, 65574], 2], [65575, 3], [[65576, 65594], 2], [65595, 3], [[65596, 65597], 2], [65598, 3], [[65599, 65613], 2], [[65614, 65615], 3], [[65616, 65629], 2], [[65630, 65663], 3], [[65664, 65786], 2], [[65787, 65791], 3], [[65792, 65794], 2], [[65795, 65798], 3], [[65799, 65843], 2], [[65844, 65846], 3], [[65847, 65855], 2], [[65856, 65930], 2], [[65931, 65932], 2], [[65933, 65934], 2], [65935, 3], [[65936, 65947], 2], [65948, 2], [[65949, 65951], 3], [65952, 2], [[65953, 65999], 3], [[66000, 66044], 2], [66045, 2], [[66046, 66175], 3], [[66176, 66204], 2], [[66205, 66207], 3], [[66208, 66256], 2], [[66257, 66271], 3], [66272, 2], [[66273, 66299], 2], [[66300, 66303], 3], [[66304, 66334], 2], [66335, 2], [[66336, 66339], 2], [[66340, 66348], 3], [[66349, 66351], 2], [[66352, 66368], 2], [66369, 2], [[66370, 66377], 2], [66378, 2], [[66379, 66383], 3], [[66384, 66426], 2], [[66427, 66431], 3], [[66432, 66461], 2], [66462, 3], [66463, 2], [[66464, 66499], 2], [[66500, 66503], 3], [[66504, 66511], 2], [[66512, 66517], 2], [[66518, 66559], 3], [66560, 1, "𐐨"], [66561, 1, "𐐩"], [66562, 1, "𐐪"], [66563, 1, "𐐫"], [66564, 1, "𐐬"], [66565, 1, "𐐭"], [66566, 1, "𐐮"], [66567, 1, "𐐯"], [66568, 1, "𐐰"], [66569, 1, "𐐱"], [66570, 1, "𐐲"], [66571, 1, "𐐳"], [66572, 1, "𐐴"], [66573, 1, "𐐵"], [66574, 1, "𐐶"], [66575, 1, "𐐷"], [66576, 1, "𐐸"], [66577, 1, "𐐹"], [66578, 1, "𐐺"], [66579, 1, "𐐻"], [66580, 1, "𐐼"], [66581, 1, "𐐽"], [66582, 1, "𐐾"], [66583, 1, "𐐿"], [66584, 1, "𐑀"], [66585, 1, "𐑁"], [66586, 1, "𐑂"], [66587, 1, "𐑃"], [66588, 1, "𐑄"], [66589, 1, "𐑅"], [66590, 1, "𐑆"], [66591, 1, "𐑇"], [66592, 1, "𐑈"], [66593, 1, "𐑉"], [66594, 1, "𐑊"], [66595, 1, "𐑋"], [66596, 1, "𐑌"], [66597, 1, "𐑍"], [66598, 1, "𐑎"], [66599, 1, "𐑏"], [[66600, 66637], 2], [[66638, 66717], 2], [[66718, 66719], 3], [[66720, 66729], 2], [[66730, 66735], 3], [66736, 1, "𐓘"], [66737, 1, "𐓙"], [66738, 1, "𐓚"], [66739, 1, "𐓛"], [66740, 1, "𐓜"], [66741, 1, "𐓝"], [66742, 1, "𐓞"], [66743, 1, "𐓟"], [66744, 1, "𐓠"], [66745, 1, "𐓡"], [66746, 1, "𐓢"], [66747, 1, "𐓣"], [66748, 1, "𐓤"], [66749, 1, "𐓥"], [66750, 1, "𐓦"], [66751, 1, "𐓧"], [66752, 1, "𐓨"], [66753, 1, "𐓩"], [66754, 1, "𐓪"], [66755, 1, "𐓫"], [66756, 1, "𐓬"], [66757, 1, "𐓭"], [66758, 1, "𐓮"], [66759, 1, "𐓯"], [66760, 1, "𐓰"], [66761, 1, "𐓱"], [66762, 1, "𐓲"], [66763, 1, "𐓳"], [66764, 1, "𐓴"], [66765, 1, "𐓵"], [66766, 1, "𐓶"], [66767, 1, "𐓷"], [66768, 1, "𐓸"], [66769, 1, "𐓹"], [66770, 1, "𐓺"], [66771, 1, "𐓻"], [[66772, 66775], 3], [[66776, 66811], 2], [[66812, 66815], 3], [[66816, 66855], 2], [[66856, 66863], 3], [[66864, 66915], 2], [[66916, 66926], 3], [66927, 2], [66928, 1, "𐖗"], [66929, 1, "𐖘"], [66930, 1, "𐖙"], [66931, 1, "𐖚"], [66932, 1, "𐖛"], [66933, 1, "𐖜"], [66934, 1, "𐖝"], [66935, 1, "𐖞"], [66936, 1, "𐖟"], [66937, 1, "𐖠"], [66938, 1, "𐖡"], [66939, 3], [66940, 1, "𐖣"], [66941, 1, "𐖤"], [66942, 1, "𐖥"], [66943, 1, "𐖦"], [66944, 1, "𐖧"], [66945, 1, "𐖨"], [66946, 1, "𐖩"], [66947, 1, "𐖪"], [66948, 1, "𐖫"], [66949, 1, "𐖬"], [66950, 1, "𐖭"], [66951, 1, "𐖮"], [66952, 1, "𐖯"], [66953, 1, "𐖰"], [66954, 1, "𐖱"], [66955, 3], [66956, 1, "𐖳"], [66957, 1, "𐖴"], [66958, 1, "𐖵"], [66959, 1, "𐖶"], [66960, 1, "𐖷"], [66961, 1, "𐖸"], [66962, 1, "𐖹"], [66963, 3], [66964, 1, "𐖻"], [66965, 1, "𐖼"], [66966, 3], [[66967, 66977], 2], [66978, 3], [[66979, 66993], 2], [66994, 3], [[66995, 67001], 2], [67002, 3], [[67003, 67004], 2], [[67005, 67071], 3], [[67072, 67382], 2], [[67383, 67391], 3], [[67392, 67413], 2], [[67414, 67423], 3], [[67424, 67431], 2], [[67432, 67455], 3], [67456, 2], [67457, 1, "ː"], [67458, 1, "ˑ"], [67459, 1, "æ"], [67460, 1, "ʙ"], [67461, 1, "ɓ"], [67462, 3], [67463, 1, "ʣ"], [67464, 1, "ꭦ"], [67465, 1, "ʥ"], [67466, 1, "ʤ"], [67467, 1, "ɖ"], [67468, 1, "ɗ"], [67469, 1, "ᶑ"], [67470, 1, "ɘ"], [67471, 1, "ɞ"], [67472, 1, "ʩ"], [67473, 1, "ɤ"], [67474, 1, "ɢ"], [67475, 1, "ɠ"], [67476, 1, "ʛ"], [67477, 1, "ħ"], [67478, 1, "ʜ"], [67479, 1, "ɧ"], [67480, 1, "ʄ"], [67481, 1, "ʪ"], [67482, 1, "ʫ"], [67483, 1, "ɬ"], [67484, 1, "𝼄"], [67485, 1, "ꞎ"], [67486, 1, "ɮ"], [67487, 1, "𝼅"], [67488, 1, "ʎ"], [67489, 1, "𝼆"], [67490, 1, "ø"], [67491, 1, "ɶ"], [67492, 1, "ɷ"], [67493, 1, "q"], [67494, 1, "ɺ"], [67495, 1, "𝼈"], [67496, 1, "ɽ"], [67497, 1, "ɾ"], [67498, 1, "ʀ"], [67499, 1, "ʨ"], [67500, 1, "ʦ"], [67501, 1, "ꭧ"], [67502, 1, "ʧ"], [67503, 1, "ʈ"], [67504, 1, "ⱱ"], [67505, 3], [67506, 1, "ʏ"], [67507, 1, "ʡ"], [67508, 1, "ʢ"], [67509, 1, "ʘ"], [67510, 1, "ǀ"], [67511, 1, "ǁ"], [67512, 1, "ǂ"], [67513, 1, "𝼊"], [67514, 1, "𝼞"], [[67515, 67583], 3], [[67584, 67589], 2], [[67590, 67591], 3], [67592, 2], [67593, 3], [[67594, 67637], 2], [67638, 3], [[67639, 67640], 2], [[67641, 67643], 3], [67644, 2], [[67645, 67646], 3], [67647, 2], [[67648, 67669], 2], [67670, 3], [[67671, 67679], 2], [[67680, 67702], 2], [[67703, 67711], 2], [[67712, 67742], 2], [[67743, 67750], 3], [[67751, 67759], 2], [[67760, 67807], 3], [[67808, 67826], 2], [67827, 3], [[67828, 67829], 2], [[67830, 67834], 3], [[67835, 67839], 2], [[67840, 67861], 2], [[67862, 67865], 2], [[67866, 67867], 2], [[67868, 67870], 3], [67871, 2], [[67872, 67897], 2], [[67898, 67902], 3], [67903, 2], [[67904, 67967], 3], [[67968, 68023], 2], [[68024, 68027], 3], [[68028, 68029], 2], [[68030, 68031], 2], [[68032, 68047], 2], [[68048, 68049], 3], [[68050, 68095], 2], [[68096, 68099], 2], [68100, 3], [[68101, 68102], 2], [[68103, 68107], 3], [[68108, 68115], 2], [68116, 3], [[68117, 68119], 2], [68120, 3], [[68121, 68147], 2], [[68148, 68149], 2], [[68150, 68151], 3], [[68152, 68154], 2], [[68155, 68158], 3], [68159, 2], [[68160, 68167], 2], [68168, 2], [[68169, 68175], 3], [[68176, 68184], 2], [[68185, 68191], 3], [[68192, 68220], 2], [[68221, 68223], 2], [[68224, 68252], 2], [[68253, 68255], 2], [[68256, 68287], 3], [[68288, 68295], 2], [68296, 2], [[68297, 68326], 2], [[68327, 68330], 3], [[68331, 68342], 2], [[68343, 68351], 3], [[68352, 68405], 2], [[68406, 68408], 3], [[68409, 68415], 2], [[68416, 68437], 2], [[68438, 68439], 3], [[68440, 68447], 2], [[68448, 68466], 2], [[68467, 68471], 3], [[68472, 68479], 2], [[68480, 68497], 2], [[68498, 68504], 3], [[68505, 68508], 2], [[68509, 68520], 3], [[68521, 68527], 2], [[68528, 68607], 3], [[68608, 68680], 2], [[68681, 68735], 3], [68736, 1, "𐳀"], [68737, 1, "𐳁"], [68738, 1, "𐳂"], [68739, 1, "𐳃"], [68740, 1, "𐳄"], [68741, 1, "𐳅"], [68742, 1, "𐳆"], [68743, 1, "𐳇"], [68744, 1, "𐳈"], [68745, 1, "𐳉"], [68746, 1, "𐳊"], [68747, 1, "𐳋"], [68748, 1, "𐳌"], [68749, 1, "𐳍"], [68750, 1, "𐳎"], [68751, 1, "𐳏"], [68752, 1, "𐳐"], [68753, 1, "𐳑"], [68754, 1, "𐳒"], [68755, 1, "𐳓"], [68756, 1, "𐳔"], [68757, 1, "𐳕"], [68758, 1, "𐳖"], [68759, 1, "𐳗"], [68760, 1, "𐳘"], [68761, 1, "𐳙"], [68762, 1, "𐳚"], [68763, 1, "𐳛"], [68764, 1, "𐳜"], [68765, 1, "𐳝"], [68766, 1, "𐳞"], [68767, 1, "𐳟"], [68768, 1, "𐳠"], [68769, 1, "𐳡"], [68770, 1, "𐳢"], [68771, 1, "𐳣"], [68772, 1, "𐳤"], [68773, 1, "𐳥"], [68774, 1, "𐳦"], [68775, 1, "𐳧"], [68776, 1, "𐳨"], [68777, 1, "𐳩"], [68778, 1, "𐳪"], [68779, 1, "𐳫"], [68780, 1, "𐳬"], [68781, 1, "𐳭"], [68782, 1, "𐳮"], [68783, 1, "𐳯"], [68784, 1, "𐳰"], [68785, 1, "𐳱"], [68786, 1, "𐳲"], [[68787, 68799], 3], [[68800, 68850], 2], [[68851, 68857], 3], [[68858, 68863], 2], [[68864, 68903], 2], [[68904, 68911], 3], [[68912, 68921], 2], [[68922, 69215], 3], [[69216, 69246], 2], [69247, 3], [[69248, 69289], 2], [69290, 3], [[69291, 69292], 2], [69293, 2], [[69294, 69295], 3], [[69296, 69297], 2], [[69298, 69372], 3], [[69373, 69375], 2], [[69376, 69404], 2], [[69405, 69414], 2], [69415, 2], [[69416, 69423], 3], [[69424, 69456], 2], [[69457, 69465], 2], [[69466, 69487], 3], [[69488, 69509], 2], [[69510, 69513], 2], [[69514, 69551], 3], [[69552, 69572], 2], [[69573, 69579], 2], [[69580, 69599], 3], [[69600, 69622], 2], [[69623, 69631], 3], [[69632, 69702], 2], [[69703, 69709], 2], [[69710, 69713], 3], [[69714, 69733], 2], [[69734, 69743], 2], [[69744, 69749], 2], [[69750, 69758], 3], [69759, 2], [[69760, 69818], 2], [[69819, 69820], 2], [69821, 3], [[69822, 69825], 2], [69826, 2], [[69827, 69836], 3], [69837, 3], [[69838, 69839], 3], [[69840, 69864], 2], [[69865, 69871], 3], [[69872, 69881], 2], [[69882, 69887], 3], [[69888, 69940], 2], [69941, 3], [[69942, 69951], 2], [[69952, 69955], 2], [[69956, 69958], 2], [69959, 2], [[69960, 69967], 3], [[69968, 70003], 2], [[70004, 70005], 2], [70006, 2], [[70007, 70015], 3], [[70016, 70084], 2], [[70085, 70088], 2], [[70089, 70092], 2], [70093, 2], [[70094, 70095], 2], [[70096, 70105], 2], [70106, 2], [70107, 2], [70108, 2], [[70109, 70111], 2], [70112, 3], [[70113, 70132], 2], [[70133, 70143], 3], [[70144, 70161], 2], [70162, 3], [[70163, 70199], 2], [[70200, 70205], 2], [70206, 2], [[70207, 70209], 2], [[70210, 70271], 3], [[70272, 70278], 2], [70279, 3], [70280, 2], [70281, 3], [[70282, 70285], 2], [70286, 3], [[70287, 70301], 2], [70302, 3], [[70303, 70312], 2], [70313, 2], [[70314, 70319], 3], [[70320, 70378], 2], [[70379, 70383], 3], [[70384, 70393], 2], [[70394, 70399], 3], [70400, 2], [[70401, 70403], 2], [70404, 3], [[70405, 70412], 2], [[70413, 70414], 3], [[70415, 70416], 2], [[70417, 70418], 3], [[70419, 70440], 2], [70441, 3], [[70442, 70448], 2], [70449, 3], [[70450, 70451], 2], [70452, 3], [[70453, 70457], 2], [70458, 3], [70459, 2], [[70460, 70468], 2], [[70469, 70470], 3], [[70471, 70472], 2], [[70473, 70474], 3], [[70475, 70477], 2], [[70478, 70479], 3], [70480, 2], [[70481, 70486], 3], [70487, 2], [[70488, 70492], 3], [[70493, 70499], 2], [[70500, 70501], 3], [[70502, 70508], 2], [[70509, 70511], 3], [[70512, 70516], 2], [[70517, 70655], 3], [[70656, 70730], 2], [[70731, 70735], 2], [[70736, 70745], 2], [70746, 2], [70747, 2], [70748, 3], [70749, 2], [70750, 2], [70751, 2], [[70752, 70753], 2], [[70754, 70783], 3], [[70784, 70853], 2], [70854, 2], [70855, 2], [[70856, 70863], 3], [[70864, 70873], 2], [[70874, 71039], 3], [[71040, 71093], 2], [[71094, 71095], 3], [[71096, 71104], 2], [[71105, 71113], 2], [[71114, 71127], 2], [[71128, 71133], 2], [[71134, 71167], 3], [[71168, 71232], 2], [[71233, 71235], 2], [71236, 2], [[71237, 71247], 3], [[71248, 71257], 2], [[71258, 71263], 3], [[71264, 71276], 2], [[71277, 71295], 3], [[71296, 71351], 2], [71352, 2], [71353, 2], [[71354, 71359], 3], [[71360, 71369], 2], [[71370, 71423], 3], [[71424, 71449], 2], [71450, 2], [[71451, 71452], 3], [[71453, 71467], 2], [[71468, 71471], 3], [[71472, 71481], 2], [[71482, 71487], 2], [[71488, 71494], 2], [[71495, 71679], 3], [[71680, 71738], 2], [71739, 2], [[71740, 71839], 3], [71840, 1, "𑣀"], [71841, 1, "𑣁"], [71842, 1, "𑣂"], [71843, 1, "𑣃"], [71844, 1, "𑣄"], [71845, 1, "𑣅"], [71846, 1, "𑣆"], [71847, 1, "𑣇"], [71848, 1, "𑣈"], [71849, 1, "𑣉"], [71850, 1, "𑣊"], [71851, 1, "𑣋"], [71852, 1, "𑣌"], [71853, 1, "𑣍"], [71854, 1, "𑣎"], [71855, 1, "𑣏"], [71856, 1, "𑣐"], [71857, 1, "𑣑"], [71858, 1, "𑣒"], [71859, 1, "𑣓"], [71860, 1, "𑣔"], [71861, 1, "𑣕"], [71862, 1, "𑣖"], [71863, 1, "𑣗"], [71864, 1, "𑣘"], [71865, 1, "𑣙"], [71866, 1, "𑣚"], [71867, 1, "𑣛"], [71868, 1, "𑣜"], [71869, 1, "𑣝"], [71870, 1, "𑣞"], [71871, 1, "𑣟"], [[71872, 71913], 2], [[71914, 71922], 2], [[71923, 71934], 3], [71935, 2], [[71936, 71942], 2], [[71943, 71944], 3], [71945, 2], [[71946, 71947], 3], [[71948, 71955], 2], [71956, 3], [[71957, 71958], 2], [71959, 3], [[71960, 71989], 2], [71990, 3], [[71991, 71992], 2], [[71993, 71994], 3], [[71995, 72003], 2], [[72004, 72006], 2], [[72007, 72015], 3], [[72016, 72025], 2], [[72026, 72095], 3], [[72096, 72103], 2], [[72104, 72105], 3], [[72106, 72151], 2], [[72152, 72153], 3], [[72154, 72161], 2], [72162, 2], [[72163, 72164], 2], [[72165, 72191], 3], [[72192, 72254], 2], [[72255, 72262], 2], [72263, 2], [[72264, 72271], 3], [[72272, 72323], 2], [[72324, 72325], 2], [[72326, 72345], 2], [[72346, 72348], 2], [72349, 2], [[72350, 72354], 2], [[72355, 72367], 3], [[72368, 72383], 2], [[72384, 72440], 2], [[72441, 72447], 3], [[72448, 72457], 2], [[72458, 72703], 3], [[72704, 72712], 2], [72713, 3], [[72714, 72758], 2], [72759, 3], [[72760, 72768], 2], [[72769, 72773], 2], [[72774, 72783], 3], [[72784, 72793], 2], [[72794, 72812], 2], [[72813, 72815], 3], [[72816, 72817], 2], [[72818, 72847], 2], [[72848, 72849], 3], [[72850, 72871], 2], [72872, 3], [[72873, 72886], 2], [[72887, 72959], 3], [[72960, 72966], 2], [72967, 3], [[72968, 72969], 2], [72970, 3], [[72971, 73014], 2], [[73015, 73017], 3], [73018, 2], [73019, 3], [[73020, 73021], 2], [73022, 3], [[73023, 73031], 2], [[73032, 73039], 3], [[73040, 73049], 2], [[73050, 73055], 3], [[73056, 73061], 2], [73062, 3], [[73063, 73064], 2], [73065, 3], [[73066, 73102], 2], [73103, 3], [[73104, 73105], 2], [73106, 3], [[73107, 73112], 2], [[73113, 73119], 3], [[73120, 73129], 2], [[73130, 73439], 3], [[73440, 73462], 2], [[73463, 73464], 2], [[73465, 73471], 3], [[73472, 73488], 2], [73489, 3], [[73490, 73530], 2], [[73531, 73533], 3], [[73534, 73538], 2], [[73539, 73551], 2], [[73552, 73561], 2], [[73562, 73647], 3], [73648, 2], [[73649, 73663], 3], [[73664, 73713], 2], [[73714, 73726], 3], [73727, 2], [[73728, 74606], 2], [[74607, 74648], 2], [74649, 2], [[74650, 74751], 3], [[74752, 74850], 2], [[74851, 74862], 2], [74863, 3], [[74864, 74867], 2], [74868, 2], [[74869, 74879], 3], [[74880, 75075], 2], [[75076, 77711], 3], [[77712, 77808], 2], [[77809, 77810], 2], [[77811, 77823], 3], [[77824, 78894], 2], [78895, 2], [[78896, 78904], 3], [[78905, 78911], 3], [[78912, 78933], 2], [[78934, 82943], 3], [[82944, 83526], 2], [[83527, 92159], 3], [[92160, 92728], 2], [[92729, 92735], 3], [[92736, 92766], 2], [92767, 3], [[92768, 92777], 2], [[92778, 92781], 3], [[92782, 92783], 2], [[92784, 92862], 2], [92863, 3], [[92864, 92873], 2], [[92874, 92879], 3], [[92880, 92909], 2], [[92910, 92911], 3], [[92912, 92916], 2], [92917, 2], [[92918, 92927], 3], [[92928, 92982], 2], [[92983, 92991], 2], [[92992, 92995], 2], [[92996, 92997], 2], [[92998, 93007], 3], [[93008, 93017], 2], [93018, 3], [[93019, 93025], 2], [93026, 3], [[93027, 93047], 2], [[93048, 93052], 3], [[93053, 93071], 2], [[93072, 93759], 3], [93760, 1, "𖹠"], [93761, 1, "𖹡"], [93762, 1, "𖹢"], [93763, 1, "𖹣"], [93764, 1, "𖹤"], [93765, 1, "𖹥"], [93766, 1, "𖹦"], [93767, 1, "𖹧"], [93768, 1, "𖹨"], [93769, 1, "𖹩"], [93770, 1, "𖹪"], [93771, 1, "𖹫"], [93772, 1, "𖹬"], [93773, 1, "𖹭"], [93774, 1, "𖹮"], [93775, 1, "𖹯"], [93776, 1, "𖹰"], [93777, 1, "𖹱"], [93778, 1, "𖹲"], [93779, 1, "𖹳"], [93780, 1, "𖹴"], [93781, 1, "𖹵"], [93782, 1, "𖹶"], [93783, 1, "𖹷"], [93784, 1, "𖹸"], [93785, 1, "𖹹"], [93786, 1, "𖹺"], [93787, 1, "𖹻"], [93788, 1, "𖹼"], [93789, 1, "𖹽"], [93790, 1, "𖹾"], [93791, 1, "𖹿"], [[93792, 93823], 2], [[93824, 93850], 2], [[93851, 93951], 3], [[93952, 94020], 2], [[94021, 94026], 2], [[94027, 94030], 3], [94031, 2], [[94032, 94078], 2], [[94079, 94087], 2], [[94088, 94094], 3], [[94095, 94111], 2], [[94112, 94175], 3], [94176, 2], [94177, 2], [94178, 2], [94179, 2], [94180, 2], [[94181, 94191], 3], [[94192, 94193], 2], [[94194, 94207], 3], [[94208, 100332], 2], [[100333, 100337], 2], [[100338, 100343], 2], [[100344, 100351], 3], [[100352, 101106], 2], [[101107, 101589], 2], [[101590, 101631], 3], [[101632, 101640], 2], [[101641, 110575], 3], [[110576, 110579], 2], [110580, 3], [[110581, 110587], 2], [110588, 3], [[110589, 110590], 2], [110591, 3], [[110592, 110593], 2], [[110594, 110878], 2], [[110879, 110882], 2], [[110883, 110897], 3], [110898, 2], [[110899, 110927], 3], [[110928, 110930], 2], [[110931, 110932], 3], [110933, 2], [[110934, 110947], 3], [[110948, 110951], 2], [[110952, 110959], 3], [[110960, 111355], 2], [[111356, 113663], 3], [[113664, 113770], 2], [[113771, 113775], 3], [[113776, 113788], 2], [[113789, 113791], 3], [[113792, 113800], 2], [[113801, 113807], 3], [[113808, 113817], 2], [[113818, 113819], 3], [113820, 2], [[113821, 113822], 2], [113823, 2], [[113824, 113827], 7], [[113828, 118527], 3], [[118528, 118573], 2], [[118574, 118575], 3], [[118576, 118598], 2], [[118599, 118607], 3], [[118608, 118723], 2], [[118724, 118783], 3], [[118784, 119029], 2], [[119030, 119039], 3], [[119040, 119078], 2], [[119079, 119080], 3], [119081, 2], [[119082, 119133], 2], [119134, 1, "𝅗𝅥"], [119135, 1, "𝅘𝅥"], [119136, 1, "𝅘𝅥𝅮"], [119137, 1, "𝅘𝅥𝅯"], [119138, 1, "𝅘𝅥𝅰"], [119139, 1, "𝅘𝅥𝅱"], [119140, 1, "𝅘𝅥𝅲"], [[119141, 119154], 2], [[119155, 119162], 3], [[119163, 119226], 2], [119227, 1, "𝆹𝅥"], [119228, 1, "𝆺𝅥"], [119229, 1, "𝆹𝅥𝅮"], [119230, 1, "𝆺𝅥𝅮"], [119231, 1, "𝆹𝅥𝅯"], [119232, 1, "𝆺𝅥𝅯"], [[119233, 119261], 2], [[119262, 119272], 2], [[119273, 119274], 2], [[119275, 119295], 3], [[119296, 119365], 2], [[119366, 119487], 3], [[119488, 119507], 2], [[119508, 119519], 3], [[119520, 119539], 2], [[119540, 119551], 3], [[119552, 119638], 2], [[119639, 119647], 3], [[119648, 119665], 2], [[119666, 119672], 2], [[119673, 119807], 3], [119808, 1, "a"], [119809, 1, "b"], [119810, 1, "c"], [119811, 1, "d"], [119812, 1, "e"], [119813, 1, "f"], [119814, 1, "g"], [119815, 1, "h"], [119816, 1, "i"], [119817, 1, "j"], [119818, 1, "k"], [119819, 1, "l"], [119820, 1, "m"], [119821, 1, "n"], [119822, 1, "o"], [119823, 1, "p"], [119824, 1, "q"], [119825, 1, "r"], [119826, 1, "s"], [119827, 1, "t"], [119828, 1, "u"], [119829, 1, "v"], [119830, 1, "w"], [119831, 1, "x"], [119832, 1, "y"], [119833, 1, "z"], [119834, 1, "a"], [119835, 1, "b"], [119836, 1, "c"], [119837, 1, "d"], [119838, 1, "e"], [119839, 1, "f"], [119840, 1, "g"], [119841, 1, "h"], [119842, 1, "i"], [119843, 1, "j"], [119844, 1, "k"], [119845, 1, "l"], [119846, 1, "m"], [119847, 1, "n"], [119848, 1, "o"], [119849, 1, "p"], [119850, 1, "q"], [119851, 1, "r"], [119852, 1, "s"], [119853, 1, "t"], [119854, 1, "u"], [119855, 1, "v"], [119856, 1, "w"], [119857, 1, "x"], [119858, 1, "y"], [119859, 1, "z"], [119860, 1, "a"], [119861, 1, "b"], [119862, 1, "c"], [119863, 1, "d"], [119864, 1, "e"], [119865, 1, "f"], [119866, 1, "g"], [119867, 1, "h"], [119868, 1, "i"], [119869, 1, "j"], [119870, 1, "k"], [119871, 1, "l"], [119872, 1, "m"], [119873, 1, "n"], [119874, 1, "o"], [119875, 1, "p"], [119876, 1, "q"], [119877, 1, "r"], [119878, 1, "s"], [119879, 1, "t"], [119880, 1, "u"], [119881, 1, "v"], [119882, 1, "w"], [119883, 1, "x"], [119884, 1, "y"], [119885, 1, "z"], [119886, 1, "a"], [119887, 1, "b"], [119888, 1, "c"], [119889, 1, "d"], [119890, 1, "e"], [119891, 1, "f"], [119892, 1, "g"], [119893, 3], [119894, 1, "i"], [119895, 1, "j"], [119896, 1, "k"], [119897, 1, "l"], [119898, 1, "m"], [119899, 1, "n"], [119900, 1, "o"], [119901, 1, "p"], [119902, 1, "q"], [119903, 1, "r"], [119904, 1, "s"], [119905, 1, "t"], [119906, 1, "u"], [119907, 1, "v"], [119908, 1, "w"], [119909, 1, "x"], [119910, 1, "y"], [119911, 1, "z"], [119912, 1, "a"], [119913, 1, "b"], [119914, 1, "c"], [119915, 1, "d"], [119916, 1, "e"], [119917, 1, "f"], [119918, 1, "g"], [119919, 1, "h"], [119920, 1, "i"], [119921, 1, "j"], [119922, 1, "k"], [119923, 1, "l"], [119924, 1, "m"], [119925, 1, "n"], [119926, 1, "o"], [119927, 1, "p"], [119928, 1, "q"], [119929, 1, "r"], [119930, 1, "s"], [119931, 1, "t"], [119932, 1, "u"], [119933, 1, "v"], [119934, 1, "w"], [119935, 1, "x"], [119936, 1, "y"], [119937, 1, "z"], [119938, 1, "a"], [119939, 1, "b"], [119940, 1, "c"], [119941, 1, "d"], [119942, 1, "e"], [119943, 1, "f"], [119944, 1, "g"], [119945, 1, "h"], [119946, 1, "i"], [119947, 1, "j"], [119948, 1, "k"], [119949, 1, "l"], [119950, 1, "m"], [119951, 1, "n"], [119952, 1, "o"], [119953, 1, "p"], [119954, 1, "q"], [119955, 1, "r"], [119956, 1, "s"], [119957, 1, "t"], [119958, 1, "u"], [119959, 1, "v"], [119960, 1, "w"], [119961, 1, "x"], [119962, 1, "y"], [119963, 1, "z"], [119964, 1, "a"], [119965, 3], [119966, 1, "c"], [119967, 1, "d"], [[119968, 119969], 3], [119970, 1, "g"], [[119971, 119972], 3], [119973, 1, "j"], [119974, 1, "k"], [[119975, 119976], 3], [119977, 1, "n"], [119978, 1, "o"], [119979, 1, "p"], [119980, 1, "q"], [119981, 3], [119982, 1, "s"], [119983, 1, "t"], [119984, 1, "u"], [119985, 1, "v"], [119986, 1, "w"], [119987, 1, "x"], [119988, 1, "y"], [119989, 1, "z"], [119990, 1, "a"], [119991, 1, "b"], [119992, 1, "c"], [119993, 1, "d"], [119994, 3], [119995, 1, "f"], [119996, 3], [119997, 1, "h"], [119998, 1, "i"], [119999, 1, "j"], [120000, 1, "k"], [120001, 1, "l"], [120002, 1, "m"], [120003, 1, "n"], [120004, 3], [120005, 1, "p"], [120006, 1, "q"], [120007, 1, "r"], [120008, 1, "s"], [120009, 1, "t"], [120010, 1, "u"], [120011, 1, "v"], [120012, 1, "w"], [120013, 1, "x"], [120014, 1, "y"], [120015, 1, "z"], [120016, 1, "a"], [120017, 1, "b"], [120018, 1, "c"], [120019, 1, "d"], [120020, 1, "e"], [120021, 1, "f"], [120022, 1, "g"], [120023, 1, "h"], [120024, 1, "i"], [120025, 1, "j"], [120026, 1, "k"], [120027, 1, "l"], [120028, 1, "m"], [120029, 1, "n"], [120030, 1, "o"], [120031, 1, "p"], [120032, 1, "q"], [120033, 1, "r"], [120034, 1, "s"], [120035, 1, "t"], [120036, 1, "u"], [120037, 1, "v"], [120038, 1, "w"], [120039, 1, "x"], [120040, 1, "y"], [120041, 1, "z"], [120042, 1, "a"], [120043, 1, "b"], [120044, 1, "c"], [120045, 1, "d"], [120046, 1, "e"], [120047, 1, "f"], [120048, 1, "g"], [120049, 1, "h"], [120050, 1, "i"], [120051, 1, "j"], [120052, 1, "k"], [120053, 1, "l"], [120054, 1, "m"], [120055, 1, "n"], [120056, 1, "o"], [120057, 1, "p"], [120058, 1, "q"], [120059, 1, "r"], [120060, 1, "s"], [120061, 1, "t"], [120062, 1, "u"], [120063, 1, "v"], [120064, 1, "w"], [120065, 1, "x"], [120066, 1, "y"], [120067, 1, "z"], [120068, 1, "a"], [120069, 1, "b"], [120070, 3], [120071, 1, "d"], [120072, 1, "e"], [120073, 1, "f"], [120074, 1, "g"], [[120075, 120076], 3], [120077, 1, "j"], [120078, 1, "k"], [120079, 1, "l"], [120080, 1, "m"], [120081, 1, "n"], [120082, 1, "o"], [120083, 1, "p"], [120084, 1, "q"], [120085, 3], [120086, 1, "s"], [120087, 1, "t"], [120088, 1, "u"], [120089, 1, "v"], [120090, 1, "w"], [120091, 1, "x"], [120092, 1, "y"], [120093, 3], [120094, 1, "a"], [120095, 1, "b"], [120096, 1, "c"], [120097, 1, "d"], [120098, 1, "e"], [120099, 1, "f"], [120100, 1, "g"], [120101, 1, "h"], [120102, 1, "i"], [120103, 1, "j"], [120104, 1, "k"], [120105, 1, "l"], [120106, 1, "m"], [120107, 1, "n"], [120108, 1, "o"], [120109, 1, "p"], [120110, 1, "q"], [120111, 1, "r"], [120112, 1, "s"], [120113, 1, "t"], [120114, 1, "u"], [120115, 1, "v"], [120116, 1, "w"], [120117, 1, "x"], [120118, 1, "y"], [120119, 1, "z"], [120120, 1, "a"], [120121, 1, "b"], [120122, 3], [120123, 1, "d"], [120124, 1, "e"], [120125, 1, "f"], [120126, 1, "g"], [120127, 3], [120128, 1, "i"], [120129, 1, "j"], [120130, 1, "k"], [120131, 1, "l"], [120132, 1, "m"], [120133, 3], [120134, 1, "o"], [[120135, 120137], 3], [120138, 1, "s"], [120139, 1, "t"], [120140, 1, "u"], [120141, 1, "v"], [120142, 1, "w"], [120143, 1, "x"], [120144, 1, "y"], [120145, 3], [120146, 1, "a"], [120147, 1, "b"], [120148, 1, "c"], [120149, 1, "d"], [120150, 1, "e"], [120151, 1, "f"], [120152, 1, "g"], [120153, 1, "h"], [120154, 1, "i"], [120155, 1, "j"], [120156, 1, "k"], [120157, 1, "l"], [120158, 1, "m"], [120159, 1, "n"], [120160, 1, "o"], [120161, 1, "p"], [120162, 1, "q"], [120163, 1, "r"], [120164, 1, "s"], [120165, 1, "t"], [120166, 1, "u"], [120167, 1, "v"], [120168, 1, "w"], [120169, 1, "x"], [120170, 1, "y"], [120171, 1, "z"], [120172, 1, "a"], [120173, 1, "b"], [120174, 1, "c"], [120175, 1, "d"], [120176, 1, "e"], [120177, 1, "f"], [120178, 1, "g"], [120179, 1, "h"], [120180, 1, "i"], [120181, 1, "j"], [120182, 1, "k"], [120183, 1, "l"], [120184, 1, "m"], [120185, 1, "n"], [120186, 1, "o"], [120187, 1, "p"], [120188, 1, "q"], [120189, 1, "r"], [120190, 1, "s"], [120191, 1, "t"], [120192, 1, "u"], [120193, 1, "v"], [120194, 1, "w"], [120195, 1, "x"], [120196, 1, "y"], [120197, 1, "z"], [120198, 1, "a"], [120199, 1, "b"], [120200, 1, "c"], [120201, 1, "d"], [120202, 1, "e"], [120203, 1, "f"], [120204, 1, "g"], [120205, 1, "h"], [120206, 1, "i"], [120207, 1, "j"], [120208, 1, "k"], [120209, 1, "l"], [120210, 1, "m"], [120211, 1, "n"], [120212, 1, "o"], [120213, 1, "p"], [120214, 1, "q"], [120215, 1, "r"], [120216, 1, "s"], [120217, 1, "t"], [120218, 1, "u"], [120219, 1, "v"], [120220, 1, "w"], [120221, 1, "x"], [120222, 1, "y"], [120223, 1, "z"], [120224, 1, "a"], [120225, 1, "b"], [120226, 1, "c"], [120227, 1, "d"], [120228, 1, "e"], [120229, 1, "f"], [120230, 1, "g"], [120231, 1, "h"], [120232, 1, "i"], [120233, 1, "j"], [120234, 1, "k"], [120235, 1, "l"], [120236, 1, "m"], [120237, 1, "n"], [120238, 1, "o"], [120239, 1, "p"], [120240, 1, "q"], [120241, 1, "r"], [120242, 1, "s"], [120243, 1, "t"], [120244, 1, "u"], [120245, 1, "v"], [120246, 1, "w"], [120247, 1, "x"], [120248, 1, "y"], [120249, 1, "z"], [120250, 1, "a"], [120251, 1, "b"], [120252, 1, "c"], [120253, 1, "d"], [120254, 1, "e"], [120255, 1, "f"], [120256, 1, "g"], [120257, 1, "h"], [120258, 1, "i"], [120259, 1, "j"], [120260, 1, "k"], [120261, 1, "l"], [120262, 1, "m"], [120263, 1, "n"], [120264, 1, "o"], [120265, 1, "p"], [120266, 1, "q"], [120267, 1, "r"], [120268, 1, "s"], [120269, 1, "t"], [120270, 1, "u"], [120271, 1, "v"], [120272, 1, "w"], [120273, 1, "x"], [120274, 1, "y"], [120275, 1, "z"], [120276, 1, "a"], [120277, 1, "b"], [120278, 1, "c"], [120279, 1, "d"], [120280, 1, "e"], [120281, 1, "f"], [120282, 1, "g"], [120283, 1, "h"], [120284, 1, "i"], [120285, 1, "j"], [120286, 1, "k"], [120287, 1, "l"], [120288, 1, "m"], [120289, 1, "n"], [120290, 1, "o"], [120291, 1, "p"], [120292, 1, "q"], [120293, 1, "r"], [120294, 1, "s"], [120295, 1, "t"], [120296, 1, "u"], [120297, 1, "v"], [120298, 1, "w"], [120299, 1, "x"], [120300, 1, "y"], [120301, 1, "z"], [120302, 1, "a"], [120303, 1, "b"], [120304, 1, "c"], [120305, 1, "d"], [120306, 1, "e"], [120307, 1, "f"], [120308, 1, "g"], [120309, 1, "h"], [120310, 1, "i"], [120311, 1, "j"], [120312, 1, "k"], [120313, 1, "l"], [120314, 1, "m"], [120315, 1, "n"], [120316, 1, "o"], [120317, 1, "p"], [120318, 1, "q"], [120319, 1, "r"], [120320, 1, "s"], [120321, 1, "t"], [120322, 1, "u"], [120323, 1, "v"], [120324, 1, "w"], [120325, 1, "x"], [120326, 1, "y"], [120327, 1, "z"], [120328, 1, "a"], [120329, 1, "b"], [120330, 1, "c"], [120331, 1, "d"], [120332, 1, "e"], [120333, 1, "f"], [120334, 1, "g"], [120335, 1, "h"], [120336, 1, "i"], [120337, 1, "j"], [120338, 1, "k"], [120339, 1, "l"], [120340, 1, "m"], [120341, 1, "n"], [120342, 1, "o"], [120343, 1, "p"], [120344, 1, "q"], [120345, 1, "r"], [120346, 1, "s"], [120347, 1, "t"], [120348, 1, "u"], [120349, 1, "v"], [120350, 1, "w"], [120351, 1, "x"], [120352, 1, "y"], [120353, 1, "z"], [120354, 1, "a"], [120355, 1, "b"], [120356, 1, "c"], [120357, 1, "d"], [120358, 1, "e"], [120359, 1, "f"], [120360, 1, "g"], [120361, 1, "h"], [120362, 1, "i"], [120363, 1, "j"], [120364, 1, "k"], [120365, 1, "l"], [120366, 1, "m"], [120367, 1, "n"], [120368, 1, "o"], [120369, 1, "p"], [120370, 1, "q"], [120371, 1, "r"], [120372, 1, "s"], [120373, 1, "t"], [120374, 1, "u"], [120375, 1, "v"], [120376, 1, "w"], [120377, 1, "x"], [120378, 1, "y"], [120379, 1, "z"], [120380, 1, "a"], [120381, 1, "b"], [120382, 1, "c"], [120383, 1, "d"], [120384, 1, "e"], [120385, 1, "f"], [120386, 1, "g"], [120387, 1, "h"], [120388, 1, "i"], [120389, 1, "j"], [120390, 1, "k"], [120391, 1, "l"], [120392, 1, "m"], [120393, 1, "n"], [120394, 1, "o"], [120395, 1, "p"], [120396, 1, "q"], [120397, 1, "r"], [120398, 1, "s"], [120399, 1, "t"], [120400, 1, "u"], [120401, 1, "v"], [120402, 1, "w"], [120403, 1, "x"], [120404, 1, "y"], [120405, 1, "z"], [120406, 1, "a"], [120407, 1, "b"], [120408, 1, "c"], [120409, 1, "d"], [120410, 1, "e"], [120411, 1, "f"], [120412, 1, "g"], [120413, 1, "h"], [120414, 1, "i"], [120415, 1, "j"], [120416, 1, "k"], [120417, 1, "l"], [120418, 1, "m"], [120419, 1, "n"], [120420, 1, "o"], [120421, 1, "p"], [120422, 1, "q"], [120423, 1, "r"], [120424, 1, "s"], [120425, 1, "t"], [120426, 1, "u"], [120427, 1, "v"], [120428, 1, "w"], [120429, 1, "x"], [120430, 1, "y"], [120431, 1, "z"], [120432, 1, "a"], [120433, 1, "b"], [120434, 1, "c"], [120435, 1, "d"], [120436, 1, "e"], [120437, 1, "f"], [120438, 1, "g"], [120439, 1, "h"], [120440, 1, "i"], [120441, 1, "j"], [120442, 1, "k"], [120443, 1, "l"], [120444, 1, "m"], [120445, 1, "n"], [120446, 1, "o"], [120447, 1, "p"], [120448, 1, "q"], [120449, 1, "r"], [120450, 1, "s"], [120451, 1, "t"], [120452, 1, "u"], [120453, 1, "v"], [120454, 1, "w"], [120455, 1, "x"], [120456, 1, "y"], [120457, 1, "z"], [120458, 1, "a"], [120459, 1, "b"], [120460, 1, "c"], [120461, 1, "d"], [120462, 1, "e"], [120463, 1, "f"], [120464, 1, "g"], [120465, 1, "h"], [120466, 1, "i"], [120467, 1, "j"], [120468, 1, "k"], [120469, 1, "l"], [120470, 1, "m"], [120471, 1, "n"], [120472, 1, "o"], [120473, 1, "p"], [120474, 1, "q"], [120475, 1, "r"], [120476, 1, "s"], [120477, 1, "t"], [120478, 1, "u"], [120479, 1, "v"], [120480, 1, "w"], [120481, 1, "x"], [120482, 1, "y"], [120483, 1, "z"], [120484, 1, "ı"], [120485, 1, "ȷ"], [[120486, 120487], 3], [120488, 1, "α"], [120489, 1, "β"], [120490, 1, "γ"], [120491, 1, "δ"], [120492, 1, "ε"], [120493, 1, "ζ"], [120494, 1, "η"], [120495, 1, "θ"], [120496, 1, "ι"], [120497, 1, "κ"], [120498, 1, "λ"], [120499, 1, "μ"], [120500, 1, "ν"], [120501, 1, "ξ"], [120502, 1, "ο"], [120503, 1, "π"], [120504, 1, "ρ"], [120505, 1, "θ"], [120506, 1, "σ"], [120507, 1, "τ"], [120508, 1, "υ"], [120509, 1, "φ"], [120510, 1, "χ"], [120511, 1, "ψ"], [120512, 1, "ω"], [120513, 1, "∇"], [120514, 1, "α"], [120515, 1, "β"], [120516, 1, "γ"], [120517, 1, "δ"], [120518, 1, "ε"], [120519, 1, "ζ"], [120520, 1, "η"], [120521, 1, "θ"], [120522, 1, "ι"], [120523, 1, "κ"], [120524, 1, "λ"], [120525, 1, "μ"], [120526, 1, "ν"], [120527, 1, "ξ"], [120528, 1, "ο"], [120529, 1, "π"], [120530, 1, "ρ"], [[120531, 120532], 1, "σ"], [120533, 1, "τ"], [120534, 1, "υ"], [120535, 1, "φ"], [120536, 1, "χ"], [120537, 1, "ψ"], [120538, 1, "ω"], [120539, 1, "∂"], [120540, 1, "ε"], [120541, 1, "θ"], [120542, 1, "κ"], [120543, 1, "φ"], [120544, 1, "ρ"], [120545, 1, "π"], [120546, 1, "α"], [120547, 1, "β"], [120548, 1, "γ"], [120549, 1, "δ"], [120550, 1, "ε"], [120551, 1, "ζ"], [120552, 1, "η"], [120553, 1, "θ"], [120554, 1, "ι"], [120555, 1, "κ"], [120556, 1, "λ"], [120557, 1, "μ"], [120558, 1, "ν"], [120559, 1, "ξ"], [120560, 1, "ο"], [120561, 1, "π"], [120562, 1, "ρ"], [120563, 1, "θ"], [120564, 1, "σ"], [120565, 1, "τ"], [120566, 1, "υ"], [120567, 1, "φ"], [120568, 1, "χ"], [120569, 1, "ψ"], [120570, 1, "ω"], [120571, 1, "∇"], [120572, 1, "α"], [120573, 1, "β"], [120574, 1, "γ"], [120575, 1, "δ"], [120576, 1, "ε"], [120577, 1, "ζ"], [120578, 1, "η"], [120579, 1, "θ"], [120580, 1, "ι"], [120581, 1, "κ"], [120582, 1, "λ"], [120583, 1, "μ"], [120584, 1, "ν"], [120585, 1, "ξ"], [120586, 1, "ο"], [120587, 1, "π"], [120588, 1, "ρ"], [[120589, 120590], 1, "σ"], [120591, 1, "τ"], [120592, 1, "υ"], [120593, 1, "φ"], [120594, 1, "χ"], [120595, 1, "ψ"], [120596, 1, "ω"], [120597, 1, "∂"], [120598, 1, "ε"], [120599, 1, "θ"], [120600, 1, "κ"], [120601, 1, "φ"], [120602, 1, "ρ"], [120603, 1, "π"], [120604, 1, "α"], [120605, 1, "β"], [120606, 1, "γ"], [120607, 1, "δ"], [120608, 1, "ε"], [120609, 1, "ζ"], [120610, 1, "η"], [120611, 1, "θ"], [120612, 1, "ι"], [120613, 1, "κ"], [120614, 1, "λ"], [120615, 1, "μ"], [120616, 1, "ν"], [120617, 1, "ξ"], [120618, 1, "ο"], [120619, 1, "π"], [120620, 1, "ρ"], [120621, 1, "θ"], [120622, 1, "σ"], [120623, 1, "τ"], [120624, 1, "υ"], [120625, 1, "φ"], [120626, 1, "χ"], [120627, 1, "ψ"], [120628, 1, "ω"], [120629, 1, "∇"], [120630, 1, "α"], [120631, 1, "β"], [120632, 1, "γ"], [120633, 1, "δ"], [120634, 1, "ε"], [120635, 1, "ζ"], [120636, 1, "η"], [120637, 1, "θ"], [120638, 1, "ι"], [120639, 1, "κ"], [120640, 1, "λ"], [120641, 1, "μ"], [120642, 1, "ν"], [120643, 1, "ξ"], [120644, 1, "ο"], [120645, 1, "π"], [120646, 1, "ρ"], [[120647, 120648], 1, "σ"], [120649, 1, "τ"], [120650, 1, "υ"], [120651, 1, "φ"], [120652, 1, "χ"], [120653, 1, "ψ"], [120654, 1, "ω"], [120655, 1, "∂"], [120656, 1, "ε"], [120657, 1, "θ"], [120658, 1, "κ"], [120659, 1, "φ"], [120660, 1, "ρ"], [120661, 1, "π"], [120662, 1, "α"], [120663, 1, "β"], [120664, 1, "γ"], [120665, 1, "δ"], [120666, 1, "ε"], [120667, 1, "ζ"], [120668, 1, "η"], [120669, 1, "θ"], [120670, 1, "ι"], [120671, 1, "κ"], [120672, 1, "λ"], [120673, 1, "μ"], [120674, 1, "ν"], [120675, 1, "ξ"], [120676, 1, "ο"], [120677, 1, "π"], [120678, 1, "ρ"], [120679, 1, "θ"], [120680, 1, "σ"], [120681, 1, "τ"], [120682, 1, "υ"], [120683, 1, "φ"], [120684, 1, "χ"], [120685, 1, "ψ"], [120686, 1, "ω"], [120687, 1, "∇"], [120688, 1, "α"], [120689, 1, "β"], [120690, 1, "γ"], [120691, 1, "δ"], [120692, 1, "ε"], [120693, 1, "ζ"], [120694, 1, "η"], [120695, 1, "θ"], [120696, 1, "ι"], [120697, 1, "κ"], [120698, 1, "λ"], [120699, 1, "μ"], [120700, 1, "ν"], [120701, 1, "ξ"], [120702, 1, "ο"], [120703, 1, "π"], [120704, 1, "ρ"], [[120705, 120706], 1, "σ"], [120707, 1, "τ"], [120708, 1, "υ"], [120709, 1, "φ"], [120710, 1, "χ"], [120711, 1, "ψ"], [120712, 1, "ω"], [120713, 1, "∂"], [120714, 1, "ε"], [120715, 1, "θ"], [120716, 1, "κ"], [120717, 1, "φ"], [120718, 1, "ρ"], [120719, 1, "π"], [120720, 1, "α"], [120721, 1, "β"], [120722, 1, "γ"], [120723, 1, "δ"], [120724, 1, "ε"], [120725, 1, "ζ"], [120726, 1, "η"], [120727, 1, "θ"], [120728, 1, "ι"], [120729, 1, "κ"], [120730, 1, "λ"], [120731, 1, "μ"], [120732, 1, "ν"], [120733, 1, "ξ"], [120734, 1, "ο"], [120735, 1, "π"], [120736, 1, "ρ"], [120737, 1, "θ"], [120738, 1, "σ"], [120739, 1, "τ"], [120740, 1, "υ"], [120741, 1, "φ"], [120742, 1, "χ"], [120743, 1, "ψ"], [120744, 1, "ω"], [120745, 1, "∇"], [120746, 1, "α"], [120747, 1, "β"], [120748, 1, "γ"], [120749, 1, "δ"], [120750, 1, "ε"], [120751, 1, "ζ"], [120752, 1, "η"], [120753, 1, "θ"], [120754, 1, "ι"], [120755, 1, "κ"], [120756, 1, "λ"], [120757, 1, "μ"], [120758, 1, "ν"], [120759, 1, "ξ"], [120760, 1, "ο"], [120761, 1, "π"], [120762, 1, "ρ"], [[120763, 120764], 1, "σ"], [120765, 1, "τ"], [120766, 1, "υ"], [120767, 1, "φ"], [120768, 1, "χ"], [120769, 1, "ψ"], [120770, 1, "ω"], [120771, 1, "∂"], [120772, 1, "ε"], [120773, 1, "θ"], [120774, 1, "κ"], [120775, 1, "φ"], [120776, 1, "ρ"], [120777, 1, "π"], [[120778, 120779], 1, "ϝ"], [[120780, 120781], 3], [120782, 1, "0"], [120783, 1, "1"], [120784, 1, "2"], [120785, 1, "3"], [120786, 1, "4"], [120787, 1, "5"], [120788, 1, "6"], [120789, 1, "7"], [120790, 1, "8"], [120791, 1, "9"], [120792, 1, "0"], [120793, 1, "1"], [120794, 1, "2"], [120795, 1, "3"], [120796, 1, "4"], [120797, 1, "5"], [120798, 1, "6"], [120799, 1, "7"], [120800, 1, "8"], [120801, 1, "9"], [120802, 1, "0"], [120803, 1, "1"], [120804, 1, "2"], [120805, 1, "3"], [120806, 1, "4"], [120807, 1, "5"], [120808, 1, "6"], [120809, 1, "7"], [120810, 1, "8"], [120811, 1, "9"], [120812, 1, "0"], [120813, 1, "1"], [120814, 1, "2"], [120815, 1, "3"], [120816, 1, "4"], [120817, 1, "5"], [120818, 1, "6"], [120819, 1, "7"], [120820, 1, "8"], [120821, 1, "9"], [120822, 1, "0"], [120823, 1, "1"], [120824, 1, "2"], [120825, 1, "3"], [120826, 1, "4"], [120827, 1, "5"], [120828, 1, "6"], [120829, 1, "7"], [120830, 1, "8"], [120831, 1, "9"], [[120832, 121343], 2], [[121344, 121398], 2], [[121399, 121402], 2], [[121403, 121452], 2], [[121453, 121460], 2], [121461, 2], [[121462, 121475], 2], [121476, 2], [[121477, 121483], 2], [[121484, 121498], 3], [[121499, 121503], 2], [121504, 3], [[121505, 121519], 2], [[121520, 122623], 3], [[122624, 122654], 2], [[122655, 122660], 3], [[122661, 122666], 2], [[122667, 122879], 3], [[122880, 122886], 2], [122887, 3], [[122888, 122904], 2], [[122905, 122906], 3], [[122907, 122913], 2], [122914, 3], [[122915, 122916], 2], [122917, 3], [[122918, 122922], 2], [[122923, 122927], 3], [122928, 1, "а"], [122929, 1, "б"], [122930, 1, "в"], [122931, 1, "г"], [122932, 1, "д"], [122933, 1, "е"], [122934, 1, "ж"], [122935, 1, "з"], [122936, 1, "и"], [122937, 1, "к"], [122938, 1, "л"], [122939, 1, "м"], [122940, 1, "о"], [122941, 1, "п"], [122942, 1, "р"], [122943, 1, "с"], [122944, 1, "т"], [122945, 1, "у"], [122946, 1, "ф"], [122947, 1, "х"], [122948, 1, "ц"], [122949, 1, "ч"], [122950, 1, "ш"], [122951, 1, "ы"], [122952, 1, "э"], [122953, 1, "ю"], [122954, 1, "ꚉ"], [122955, 1, "ә"], [122956, 1, "і"], [122957, 1, "ј"], [122958, 1, "ө"], [122959, 1, "ү"], [122960, 1, "ӏ"], [122961, 1, "а"], [122962, 1, "б"], [122963, 1, "в"], [122964, 1, "г"], [122965, 1, "д"], [122966, 1, "е"], [122967, 1, "ж"], [122968, 1, "з"], [122969, 1, "и"], [122970, 1, "к"], [122971, 1, "л"], [122972, 1, "о"], [122973, 1, "п"], [122974, 1, "с"], [122975, 1, "у"], [122976, 1, "ф"], [122977, 1, "х"], [122978, 1, "ц"], [122979, 1, "ч"], [122980, 1, "ш"], [122981, 1, "ъ"], [122982, 1, "ы"], [122983, 1, "ґ"], [122984, 1, "і"], [122985, 1, "ѕ"], [122986, 1, "џ"], [122987, 1, "ҫ"], [122988, 1, "ꙑ"], [122989, 1, "ұ"], [[122990, 123022], 3], [123023, 2], [[123024, 123135], 3], [[123136, 123180], 2], [[123181, 123183], 3], [[123184, 123197], 2], [[123198, 123199], 3], [[123200, 123209], 2], [[123210, 123213], 3], [123214, 2], [123215, 2], [[123216, 123535], 3], [[123536, 123566], 2], [[123567, 123583], 3], [[123584, 123641], 2], [[123642, 123646], 3], [123647, 2], [[123648, 124111], 3], [[124112, 124153], 2], [[124154, 124895], 3], [[124896, 124902], 2], [124903, 3], [[124904, 124907], 2], [124908, 3], [[124909, 124910], 2], [124911, 3], [[124912, 124926], 2], [124927, 3], [[124928, 125124], 2], [[125125, 125126], 3], [[125127, 125135], 2], [[125136, 125142], 2], [[125143, 125183], 3], [125184, 1, "𞤢"], [125185, 1, "𞤣"], [125186, 1, "𞤤"], [125187, 1, "𞤥"], [125188, 1, "𞤦"], [125189, 1, "𞤧"], [125190, 1, "𞤨"], [125191, 1, "𞤩"], [125192, 1, "𞤪"], [125193, 1, "𞤫"], [125194, 1, "𞤬"], [125195, 1, "𞤭"], [125196, 1, "𞤮"], [125197, 1, "𞤯"], [125198, 1, "𞤰"], [125199, 1, "𞤱"], [125200, 1, "𞤲"], [125201, 1, "𞤳"], [125202, 1, "𞤴"], [125203, 1, "𞤵"], [125204, 1, "𞤶"], [125205, 1, "𞤷"], [125206, 1, "𞤸"], [125207, 1, "𞤹"], [125208, 1, "𞤺"], [125209, 1, "𞤻"], [125210, 1, "𞤼"], [125211, 1, "𞤽"], [125212, 1, "𞤾"], [125213, 1, "𞤿"], [125214, 1, "𞥀"], [125215, 1, "𞥁"], [125216, 1, "𞥂"], [125217, 1, "𞥃"], [[125218, 125258], 2], [125259, 2], [[125260, 125263], 3], [[125264, 125273], 2], [[125274, 125277], 3], [[125278, 125279], 2], [[125280, 126064], 3], [[126065, 126132], 2], [[126133, 126208], 3], [[126209, 126269], 2], [[126270, 126463], 3], [126464, 1, "ا"], [126465, 1, "ب"], [126466, 1, "ج"], [126467, 1, "د"], [126468, 3], [126469, 1, "و"], [126470, 1, "ز"], [126471, 1, "ح"], [126472, 1, "ط"], [126473, 1, "ي"], [126474, 1, "ك"], [126475, 1, "ل"], [126476, 1, "م"], [126477, 1, "ن"], [126478, 1, "س"], [126479, 1, "ع"], [126480, 1, "ف"], [126481, 1, "ص"], [126482, 1, "ق"], [126483, 1, "ر"], [126484, 1, "ش"], [126485, 1, "ت"], [126486, 1, "ث"], [126487, 1, "خ"], [126488, 1, "ذ"], [126489, 1, "ض"], [126490, 1, "ظ"], [126491, 1, "غ"], [126492, 1, "ٮ"], [126493, 1, "ں"], [126494, 1, "ڡ"], [126495, 1, "ٯ"], [126496, 3], [126497, 1, "ب"], [126498, 1, "ج"], [126499, 3], [126500, 1, "ه"], [[126501, 126502], 3], [126503, 1, "ح"], [126504, 3], [126505, 1, "ي"], [126506, 1, "ك"], [126507, 1, "ل"], [126508, 1, "م"], [126509, 1, "ن"], [126510, 1, "س"], [126511, 1, "ع"], [126512, 1, "ف"], [126513, 1, "ص"], [126514, 1, "ق"], [126515, 3], [126516, 1, "ش"], [126517, 1, "ت"], [126518, 1, "ث"], [126519, 1, "خ"], [126520, 3], [126521, 1, "ض"], [126522, 3], [126523, 1, "غ"], [[126524, 126529], 3], [126530, 1, "ج"], [[126531, 126534], 3], [126535, 1, "ح"], [126536, 3], [126537, 1, "ي"], [126538, 3], [126539, 1, "ل"], [126540, 3], [126541, 1, "ن"], [126542, 1, "س"], [126543, 1, "ع"], [126544, 3], [126545, 1, "ص"], [126546, 1, "ق"], [126547, 3], [126548, 1, "ش"], [[126549, 126550], 3], [126551, 1, "خ"], [126552, 3], [126553, 1, "ض"], [126554, 3], [126555, 1, "غ"], [126556, 3], [126557, 1, "ں"], [126558, 3], [126559, 1, "ٯ"], [126560, 3], [126561, 1, "ب"], [126562, 1, "ج"], [126563, 3], [126564, 1, "ه"], [[126565, 126566], 3], [126567, 1, "ح"], [126568, 1, "ط"], [126569, 1, "ي"], [126570, 1, "ك"], [126571, 3], [126572, 1, "م"], [126573, 1, "ن"], [126574, 1, "س"], [126575, 1, "ع"], [126576, 1, "ف"], [126577, 1, "ص"], [126578, 1, "ق"], [126579, 3], [126580, 1, "ش"], [126581, 1, "ت"], [126582, 1, "ث"], [126583, 1, "خ"], [126584, 3], [126585, 1, "ض"], [126586, 1, "ظ"], [126587, 1, "غ"], [126588, 1, "ٮ"], [126589, 3], [126590, 1, "ڡ"], [126591, 3], [126592, 1, "ا"], [126593, 1, "ب"], [126594, 1, "ج"], [126595, 1, "د"], [126596, 1, "ه"], [126597, 1, "و"], [126598, 1, "ز"], [126599, 1, "ح"], [126600, 1, "ط"], [126601, 1, "ي"], [126602, 3], [126603, 1, "ل"], [126604, 1, "م"], [126605, 1, "ن"], [126606, 1, "س"], [126607, 1, "ع"], [126608, 1, "ف"], [126609, 1, "ص"], [126610, 1, "ق"], [126611, 1, "ر"], [126612, 1, "ش"], [126613, 1, "ت"], [126614, 1, "ث"], [126615, 1, "خ"], [126616, 1, "ذ"], [126617, 1, "ض"], [126618, 1, "ظ"], [126619, 1, "غ"], [[126620, 126624], 3], [126625, 1, "ب"], [126626, 1, "ج"], [126627, 1, "د"], [126628, 3], [126629, 1, "و"], [126630, 1, "ز"], [126631, 1, "ح"], [126632, 1, "ط"], [126633, 1, "ي"], [126634, 3], [126635, 1, "ل"], [126636, 1, "م"], [126637, 1, "ن"], [126638, 1, "س"], [126639, 1, "ع"], [126640, 1, "ف"], [126641, 1, "ص"], [126642, 1, "ق"], [126643, 1, "ر"], [126644, 1, "ش"], [126645, 1, "ت"], [126646, 1, "ث"], [126647, 1, "خ"], [126648, 1, "ذ"], [126649, 1, "ض"], [126650, 1, "ظ"], [126651, 1, "غ"], [[126652, 126703], 3], [[126704, 126705], 2], [[126706, 126975], 3], [[126976, 127019], 2], [[127020, 127023], 3], [[127024, 127123], 2], [[127124, 127135], 3], [[127136, 127150], 2], [[127151, 127152], 3], [[127153, 127166], 2], [127167, 2], [127168, 3], [[127169, 127183], 2], [127184, 3], [[127185, 127199], 2], [[127200, 127221], 2], [[127222, 127231], 3], [127232, 3], [127233, 5, "0,"], [127234, 5, "1,"], [127235, 5, "2,"], [127236, 5, "3,"], [127237, 5, "4,"], [127238, 5, "5,"], [127239, 5, "6,"], [127240, 5, "7,"], [127241, 5, "8,"], [127242, 5, "9,"], [[127243, 127244], 2], [[127245, 127247], 2], [127248, 5, "(a)"], [127249, 5, "(b)"], [127250, 5, "(c)"], [127251, 5, "(d)"], [127252, 5, "(e)"], [127253, 5, "(f)"], [127254, 5, "(g)"], [127255, 5, "(h)"], [127256, 5, "(i)"], [127257, 5, "(j)"], [127258, 5, "(k)"], [127259, 5, "(l)"], [127260, 5, "(m)"], [127261, 5, "(n)"], [127262, 5, "(o)"], [127263, 5, "(p)"], [127264, 5, "(q)"], [127265, 5, "(r)"], [127266, 5, "(s)"], [127267, 5, "(t)"], [127268, 5, "(u)"], [127269, 5, "(v)"], [127270, 5, "(w)"], [127271, 5, "(x)"], [127272, 5, "(y)"], [127273, 5, "(z)"], [127274, 1, "〔s〕"], [127275, 1, "c"], [127276, 1, "r"], [127277, 1, "cd"], [127278, 1, "wz"], [127279, 2], [127280, 1, "a"], [127281, 1, "b"], [127282, 1, "c"], [127283, 1, "d"], [127284, 1, "e"], [127285, 1, "f"], [127286, 1, "g"], [127287, 1, "h"], [127288, 1, "i"], [127289, 1, "j"], [127290, 1, "k"], [127291, 1, "l"], [127292, 1, "m"], [127293, 1, "n"], [127294, 1, "o"], [127295, 1, "p"], [127296, 1, "q"], [127297, 1, "r"], [127298, 1, "s"], [127299, 1, "t"], [127300, 1, "u"], [127301, 1, "v"], [127302, 1, "w"], [127303, 1, "x"], [127304, 1, "y"], [127305, 1, "z"], [127306, 1, "hv"], [127307, 1, "mv"], [127308, 1, "sd"], [127309, 1, "ss"], [127310, 1, "ppv"], [127311, 1, "wc"], [[127312, 127318], 2], [127319, 2], [[127320, 127326], 2], [127327, 2], [[127328, 127337], 2], [127338, 1, "mc"], [127339, 1, "md"], [127340, 1, "mr"], [[127341, 127343], 2], [[127344, 127352], 2], [127353, 2], [127354, 2], [[127355, 127356], 2], [[127357, 127358], 2], [127359, 2], [[127360, 127369], 2], [[127370, 127373], 2], [[127374, 127375], 2], [127376, 1, "dj"], [[127377, 127386], 2], [[127387, 127404], 2], [127405, 2], [[127406, 127461], 3], [[127462, 127487], 2], [127488, 1, "ほか"], [127489, 1, "ココ"], [127490, 1, "サ"], [[127491, 127503], 3], [127504, 1, "手"], [127505, 1, "字"], [127506, 1, "双"], [127507, 1, "デ"], [127508, 1, "二"], [127509, 1, "多"], [127510, 1, "解"], [127511, 1, "天"], [127512, 1, "交"], [127513, 1, "映"], [127514, 1, "無"], [127515, 1, "料"], [127516, 1, "前"], [127517, 1, "後"], [127518, 1, "再"], [127519, 1, "新"], [127520, 1, "初"], [127521, 1, "終"], [127522, 1, "生"], [127523, 1, "販"], [127524, 1, "声"], [127525, 1, "吹"], [127526, 1, "演"], [127527, 1, "投"], [127528, 1, "捕"], [127529, 1, "一"], [127530, 1, "三"], [127531, 1, "遊"], [127532, 1, "左"], [127533, 1, "中"], [127534, 1, "右"], [127535, 1, "指"], [127536, 1, "走"], [127537, 1, "打"], [127538, 1, "禁"], [127539, 1, "空"], [127540, 1, "合"], [127541, 1, "満"], [127542, 1, "有"], [127543, 1, "月"], [127544, 1, "申"], [127545, 1, "割"], [127546, 1, "営"], [127547, 1, "配"], [[127548, 127551], 3], [127552, 1, "〔本〕"], [127553, 1, "〔三〕"], [127554, 1, "〔二〕"], [127555, 1, "〔安〕"], [127556, 1, "〔点〕"], [127557, 1, "〔打〕"], [127558, 1, "〔盗〕"], [127559, 1, "〔勝〕"], [127560, 1, "〔敗〕"], [[127561, 127567], 3], [127568, 1, "得"], [127569, 1, "可"], [[127570, 127583], 3], [[127584, 127589], 2], [[127590, 127743], 3], [[127744, 127776], 2], [[127777, 127788], 2], [[127789, 127791], 2], [[127792, 127797], 2], [127798, 2], [[127799, 127868], 2], [127869, 2], [[127870, 127871], 2], [[127872, 127891], 2], [[127892, 127903], 2], [[127904, 127940], 2], [127941, 2], [[127942, 127946], 2], [[127947, 127950], 2], [[127951, 127955], 2], [[127956, 127967], 2], [[127968, 127984], 2], [[127985, 127991], 2], [[127992, 127999], 2], [[128000, 128062], 2], [128063, 2], [128064, 2], [128065, 2], [[128066, 128247], 2], [128248, 2], [[128249, 128252], 2], [[128253, 128254], 2], [128255, 2], [[128256, 128317], 2], [[128318, 128319], 2], [[128320, 128323], 2], [[128324, 128330], 2], [[128331, 128335], 2], [[128336, 128359], 2], [[128360, 128377], 2], [128378, 2], [[128379, 128419], 2], [128420, 2], [[128421, 128506], 2], [[128507, 128511], 2], [128512, 2], [[128513, 128528], 2], [128529, 2], [[128530, 128532], 2], [128533, 2], [128534, 2], [128535, 2], [128536, 2], [128537, 2], [128538, 2], [128539, 2], [[128540, 128542], 2], [128543, 2], [[128544, 128549], 2], [[128550, 128551], 2], [[128552, 128555], 2], [128556, 2], [128557, 2], [[128558, 128559], 2], [[128560, 128563], 2], [128564, 2], [[128565, 128576], 2], [[128577, 128578], 2], [[128579, 128580], 2], [[128581, 128591], 2], [[128592, 128639], 2], [[128640, 128709], 2], [[128710, 128719], 2], [128720, 2], [[128721, 128722], 2], [[128723, 128724], 2], [128725, 2], [[128726, 128727], 2], [[128728, 128731], 3], [128732, 2], [[128733, 128735], 2], [[128736, 128748], 2], [[128749, 128751], 3], [[128752, 128755], 2], [[128756, 128758], 2], [[128759, 128760], 2], [128761, 2], [128762, 2], [[128763, 128764], 2], [[128765, 128767], 3], [[128768, 128883], 2], [[128884, 128886], 2], [[128887, 128890], 3], [[128891, 128895], 2], [[128896, 128980], 2], [[128981, 128984], 2], [128985, 2], [[128986, 128991], 3], [[128992, 129003], 2], [[129004, 129007], 3], [129008, 2], [[129009, 129023], 3], [[129024, 129035], 2], [[129036, 129039], 3], [[129040, 129095], 2], [[129096, 129103], 3], [[129104, 129113], 2], [[129114, 129119], 3], [[129120, 129159], 2], [[129160, 129167], 3], [[129168, 129197], 2], [[129198, 129199], 3], [[129200, 129201], 2], [[129202, 129279], 3], [[129280, 129291], 2], [129292, 2], [[129293, 129295], 2], [[129296, 129304], 2], [[129305, 129310], 2], [129311, 2], [[129312, 129319], 2], [[129320, 129327], 2], [129328, 2], [[129329, 129330], 2], [[129331, 129342], 2], [129343, 2], [[129344, 129355], 2], [129356, 2], [[129357, 129359], 2], [[129360, 129374], 2], [[129375, 129387], 2], [[129388, 129392], 2], [129393, 2], [129394, 2], [[129395, 129398], 2], [[129399, 129400], 2], [129401, 2], [129402, 2], [129403, 2], [[129404, 129407], 2], [[129408, 129412], 2], [[129413, 129425], 2], [[129426, 129431], 2], [[129432, 129442], 2], [[129443, 129444], 2], [[129445, 129450], 2], [[129451, 129453], 2], [[129454, 129455], 2], [[129456, 129465], 2], [[129466, 129471], 2], [129472, 2], [[129473, 129474], 2], [[129475, 129482], 2], [129483, 2], [129484, 2], [[129485, 129487], 2], [[129488, 129510], 2], [[129511, 129535], 2], [[129536, 129619], 2], [[129620, 129631], 3], [[129632, 129645], 2], [[129646, 129647], 3], [[129648, 129651], 2], [129652, 2], [[129653, 129655], 2], [[129656, 129658], 2], [[129659, 129660], 2], [[129661, 129663], 3], [[129664, 129666], 2], [[129667, 129670], 2], [[129671, 129672], 2], [[129673, 129679], 3], [[129680, 129685], 2], [[129686, 129704], 2], [[129705, 129708], 2], [[129709, 129711], 2], [[129712, 129718], 2], [[129719, 129722], 2], [[129723, 129725], 2], [129726, 3], [129727, 2], [[129728, 129730], 2], [[129731, 129733], 2], [[129734, 129741], 3], [[129742, 129743], 2], [[129744, 129750], 2], [[129751, 129753], 2], [[129754, 129755], 2], [[129756, 129759], 3], [[129760, 129767], 2], [129768, 2], [[129769, 129775], 3], [[129776, 129782], 2], [[129783, 129784], 2], [[129785, 129791], 3], [[129792, 129938], 2], [129939, 3], [[129940, 129994], 2], [[129995, 130031], 3], [130032, 1, "0"], [130033, 1, "1"], [130034, 1, "2"], [130035, 1, "3"], [130036, 1, "4"], [130037, 1, "5"], [130038, 1, "6"], [130039, 1, "7"], [130040, 1, "8"], [130041, 1, "9"], [[130042, 131069], 3], [[131070, 131071], 3], [[131072, 173782], 2], [[173783, 173789], 2], [[173790, 173791], 2], [[173792, 173823], 3], [[173824, 177972], 2], [[177973, 177976], 2], [177977, 2], [[177978, 177983], 3], [[177984, 178205], 2], [[178206, 178207], 3], [[178208, 183969], 2], [[183970, 183983], 3], [[183984, 191456], 2], [[191457, 191471], 3], [[191472, 192093], 2], [[192094, 194559], 3], [194560, 1, "丽"], [194561, 1, "丸"], [194562, 1, "乁"], [194563, 1, "𠄢"], [194564, 1, "你"], [194565, 1, "侮"], [194566, 1, "侻"], [194567, 1, "倂"], [194568, 1, "偺"], [194569, 1, "備"], [194570, 1, "僧"], [194571, 1, "像"], [194572, 1, "㒞"], [194573, 1, "𠘺"], [194574, 1, "免"], [194575, 1, "兔"], [194576, 1, "兤"], [194577, 1, "具"], [194578, 1, "𠔜"], [194579, 1, "㒹"], [194580, 1, "內"], [194581, 1, "再"], [194582, 1, "𠕋"], [194583, 1, "冗"], [194584, 1, "冤"], [194585, 1, "仌"], [194586, 1, "冬"], [194587, 1, "况"], [194588, 1, "𩇟"], [194589, 1, "凵"], [194590, 1, "刃"], [194591, 1, "㓟"], [194592, 1, "刻"], [194593, 1, "剆"], [194594, 1, "割"], [194595, 1, "剷"], [194596, 1, "㔕"], [194597, 1, "勇"], [194598, 1, "勉"], [194599, 1, "勤"], [194600, 1, "勺"], [194601, 1, "包"], [194602, 1, "匆"], [194603, 1, "北"], [194604, 1, "卉"], [194605, 1, "卑"], [194606, 1, "博"], [194607, 1, "即"], [194608, 1, "卽"], [[194609, 194611], 1, "卿"], [194612, 1, "𠨬"], [194613, 1, "灰"], [194614, 1, "及"], [194615, 1, "叟"], [194616, 1, "𠭣"], [194617, 1, "叫"], [194618, 1, "叱"], [194619, 1, "吆"], [194620, 1, "咞"], [194621, 1, "吸"], [194622, 1, "呈"], [194623, 1, "周"], [194624, 1, "咢"], [194625, 1, "哶"], [194626, 1, "唐"], [194627, 1, "啓"], [194628, 1, "啣"], [[194629, 194630], 1, "善"], [194631, 1, "喙"], [194632, 1, "喫"], [194633, 1, "喳"], [194634, 1, "嗂"], [194635, 1, "圖"], [194636, 1, "嘆"], [194637, 1, "圗"], [194638, 1, "噑"], [194639, 1, "噴"], [194640, 1, "切"], [194641, 1, "壮"], [194642, 1, "城"], [194643, 1, "埴"], [194644, 1, "堍"], [194645, 1, "型"], [194646, 1, "堲"], [194647, 1, "報"], [194648, 1, "墬"], [194649, 1, "𡓤"], [194650, 1, "売"], [194651, 1, "壷"], [194652, 1, "夆"], [194653, 1, "多"], [194654, 1, "夢"], [194655, 1, "奢"], [194656, 1, "𡚨"], [194657, 1, "𡛪"], [194658, 1, "姬"], [194659, 1, "娛"], [194660, 1, "娧"], [194661, 1, "姘"], [194662, 1, "婦"], [194663, 1, "㛮"], [194664, 3], [194665, 1, "嬈"], [[194666, 194667], 1, "嬾"], [194668, 1, "𡧈"], [194669, 1, "寃"], [194670, 1, "寘"], [194671, 1, "寧"], [194672, 1, "寳"], [194673, 1, "𡬘"], [194674, 1, "寿"], [194675, 1, "将"], [194676, 3], [194677, 1, "尢"], [194678, 1, "㞁"], [194679, 1, "屠"], [194680, 1, "屮"], [194681, 1, "峀"], [194682, 1, "岍"], [194683, 1, "𡷤"], [194684, 1, "嵃"], [194685, 1, "𡷦"], [194686, 1, "嵮"], [194687, 1, "嵫"], [194688, 1, "嵼"], [194689, 1, "巡"], [194690, 1, "巢"], [194691, 1, "㠯"], [194692, 1, "巽"], [194693, 1, "帨"], [194694, 1, "帽"], [194695, 1, "幩"], [194696, 1, "㡢"], [194697, 1, "𢆃"], [194698, 1, "㡼"], [194699, 1, "庰"], [194700, 1, "庳"], [194701, 1, "庶"], [194702, 1, "廊"], [194703, 1, "𪎒"], [194704, 1, "廾"], [[194705, 194706], 1, "𢌱"], [194707, 1, "舁"], [[194708, 194709], 1, "弢"], [194710, 1, "㣇"], [194711, 1, "𣊸"], [194712, 1, "𦇚"], [194713, 1, "形"], [194714, 1, "彫"], [194715, 1, "㣣"], [194716, 1, "徚"], [194717, 1, "忍"], [194718, 1, "志"], [194719, 1, "忹"], [194720, 1, "悁"], [194721, 1, "㤺"], [194722, 1, "㤜"], [194723, 1, "悔"], [194724, 1, "𢛔"], [194725, 1, "惇"], [194726, 1, "慈"], [194727, 1, "慌"], [194728, 1, "慎"], [194729, 1, "慌"], [194730, 1, "慺"], [194731, 1, "憎"], [194732, 1, "憲"], [194733, 1, "憤"], [194734, 1, "憯"], [194735, 1, "懞"], [194736, 1, "懲"], [194737, 1, "懶"], [194738, 1, "成"], [194739, 1, "戛"], [194740, 1, "扝"], [194741, 1, "抱"], [194742, 1, "拔"], [194743, 1, "捐"], [194744, 1, "𢬌"], [194745, 1, "挽"], [194746, 1, "拼"], [194747, 1, "捨"], [194748, 1, "掃"], [194749, 1, "揤"], [194750, 1, "𢯱"], [194751, 1, "搢"], [194752, 1, "揅"], [194753, 1, "掩"], [194754, 1, "㨮"], [194755, 1, "摩"], [194756, 1, "摾"], [194757, 1, "撝"], [194758, 1, "摷"], [194759, 1, "㩬"], [194760, 1, "敏"], [194761, 1, "敬"], [194762, 1, "𣀊"], [194763, 1, "旣"], [194764, 1, "書"], [194765, 1, "晉"], [194766, 1, "㬙"], [194767, 1, "暑"], [194768, 1, "㬈"], [194769, 1, "㫤"], [194770, 1, "冒"], [194771, 1, "冕"], [194772, 1, "最"], [194773, 1, "暜"], [194774, 1, "肭"], [194775, 1, "䏙"], [194776, 1, "朗"], [194777, 1, "望"], [194778, 1, "朡"], [194779, 1, "杞"], [194780, 1, "杓"], [194781, 1, "𣏃"], [194782, 1, "㭉"], [194783, 1, "柺"], [194784, 1, "枅"], [194785, 1, "桒"], [194786, 1, "梅"], [194787, 1, "𣑭"], [194788, 1, "梎"], [194789, 1, "栟"], [194790, 1, "椔"], [194791, 1, "㮝"], [194792, 1, "楂"], [194793, 1, "榣"], [194794, 1, "槪"], [194795, 1, "檨"], [194796, 1, "𣚣"], [194797, 1, "櫛"], [194798, 1, "㰘"], [194799, 1, "次"], [194800, 1, "𣢧"], [194801, 1, "歔"], [194802, 1, "㱎"], [194803, 1, "歲"], [194804, 1, "殟"], [194805, 1, "殺"], [194806, 1, "殻"], [194807, 1, "𣪍"], [194808, 1, "𡴋"], [194809, 1, "𣫺"], [194810, 1, "汎"], [194811, 1, "𣲼"], [194812, 1, "沿"], [194813, 1, "泍"], [194814, 1, "汧"], [194815, 1, "洖"], [194816, 1, "派"], [194817, 1, "海"], [194818, 1, "流"], [194819, 1, "浩"], [194820, 1, "浸"], [194821, 1, "涅"], [194822, 1, "𣴞"], [194823, 1, "洴"], [194824, 1, "港"], [194825, 1, "湮"], [194826, 1, "㴳"], [194827, 1, "滋"], [194828, 1, "滇"], [194829, 1, "𣻑"], [194830, 1, "淹"], [194831, 1, "潮"], [194832, 1, "𣽞"], [194833, 1, "𣾎"], [194834, 1, "濆"], [194835, 1, "瀹"], [194836, 1, "瀞"], [194837, 1, "瀛"], [194838, 1, "㶖"], [194839, 1, "灊"], [194840, 1, "災"], [194841, 1, "灷"], [194842, 1, "炭"], [194843, 1, "𠔥"], [194844, 1, "煅"], [194845, 1, "𤉣"], [194846, 1, "熜"], [194847, 3], [194848, 1, "爨"], [194849, 1, "爵"], [194850, 1, "牐"], [194851, 1, "𤘈"], [194852, 1, "犀"], [194853, 1, "犕"], [194854, 1, "𤜵"], [194855, 1, "𤠔"], [194856, 1, "獺"], [194857, 1, "王"], [194858, 1, "㺬"], [194859, 1, "玥"], [[194860, 194861], 1, "㺸"], [194862, 1, "瑇"], [194863, 1, "瑜"], [194864, 1, "瑱"], [194865, 1, "璅"], [194866, 1, "瓊"], [194867, 1, "㼛"], [194868, 1, "甤"], [194869, 1, "𤰶"], [194870, 1, "甾"], [194871, 1, "𤲒"], [194872, 1, "異"], [194873, 1, "𢆟"], [194874, 1, "瘐"], [194875, 1, "𤾡"], [194876, 1, "𤾸"], [194877, 1, "𥁄"], [194878, 1, "㿼"], [194879, 1, "䀈"], [194880, 1, "直"], [194881, 1, "𥃳"], [194882, 1, "𥃲"], [194883, 1, "𥄙"], [194884, 1, "𥄳"], [194885, 1, "眞"], [[194886, 194887], 1, "真"], [194888, 1, "睊"], [194889, 1, "䀹"], [194890, 1, "瞋"], [194891, 1, "䁆"], [194892, 1, "䂖"], [194893, 1, "𥐝"], [194894, 1, "硎"], [194895, 1, "碌"], [194896, 1, "磌"], [194897, 1, "䃣"], [194898, 1, "𥘦"], [194899, 1, "祖"], [194900, 1, "𥚚"], [194901, 1, "𥛅"], [194902, 1, "福"], [194903, 1, "秫"], [194904, 1, "䄯"], [194905, 1, "穀"], [194906, 1, "穊"], [194907, 1, "穏"], [194908, 1, "𥥼"], [[194909, 194910], 1, "𥪧"], [194911, 3], [194912, 1, "䈂"], [194913, 1, "𥮫"], [194914, 1, "篆"], [194915, 1, "築"], [194916, 1, "䈧"], [194917, 1, "𥲀"], [194918, 1, "糒"], [194919, 1, "䊠"], [194920, 1, "糨"], [194921, 1, "糣"], [194922, 1, "紀"], [194923, 1, "𥾆"], [194924, 1, "絣"], [194925, 1, "䌁"], [194926, 1, "緇"], [194927, 1, "縂"], [194928, 1, "繅"], [194929, 1, "䌴"], [194930, 1, "𦈨"], [194931, 1, "𦉇"], [194932, 1, "䍙"], [194933, 1, "𦋙"], [194934, 1, "罺"], [194935, 1, "𦌾"], [194936, 1, "羕"], [194937, 1, "翺"], [194938, 1, "者"], [194939, 1, "𦓚"], [194940, 1, "𦔣"], [194941, 1, "聠"], [194942, 1, "𦖨"], [194943, 1, "聰"], [194944, 1, "𣍟"], [194945, 1, "䏕"], [194946, 1, "育"], [194947, 1, "脃"], [194948, 1, "䐋"], [194949, 1, "脾"], [194950, 1, "媵"], [194951, 1, "𦞧"], [194952, 1, "𦞵"], [194953, 1, "𣎓"], [194954, 1, "𣎜"], [194955, 1, "舁"], [194956, 1, "舄"], [194957, 1, "辞"], [194958, 1, "䑫"], [194959, 1, "芑"], [194960, 1, "芋"], [194961, 1, "芝"], [194962, 1, "劳"], [194963, 1, "花"], [194964, 1, "芳"], [194965, 1, "芽"], [194966, 1, "苦"], [194967, 1, "𦬼"], [194968, 1, "若"], [194969, 1, "茝"], [194970, 1, "荣"], [194971, 1, "莭"], [194972, 1, "茣"], [194973, 1, "莽"], [194974, 1, "菧"], [194975, 1, "著"], [194976, 1, "荓"], [194977, 1, "菊"], [194978, 1, "菌"], [194979, 1, "菜"], [194980, 1, "𦰶"], [194981, 1, "𦵫"], [194982, 1, "𦳕"], [194983, 1, "䔫"], [194984, 1, "蓱"], [194985, 1, "蓳"], [194986, 1, "蔖"], [194987, 1, "𧏊"], [194988, 1, "蕤"], [194989, 1, "𦼬"], [194990, 1, "䕝"], [194991, 1, "䕡"], [194992, 1, "𦾱"], [194993, 1, "𧃒"], [194994, 1, "䕫"], [194995, 1, "虐"], [194996, 1, "虜"], [194997, 1, "虧"], [194998, 1, "虩"], [194999, 1, "蚩"], [195000, 1, "蚈"], [195001, 1, "蜎"], [195002, 1, "蛢"], [195003, 1, "蝹"], [195004, 1, "蜨"], [195005, 1, "蝫"], [195006, 1, "螆"], [195007, 3], [195008, 1, "蟡"], [195009, 1, "蠁"], [195010, 1, "䗹"], [195011, 1, "衠"], [195012, 1, "衣"], [195013, 1, "𧙧"], [195014, 1, "裗"], [195015, 1, "裞"], [195016, 1, "䘵"], [195017, 1, "裺"], [195018, 1, "㒻"], [195019, 1, "𧢮"], [195020, 1, "𧥦"], [195021, 1, "䚾"], [195022, 1, "䛇"], [195023, 1, "誠"], [195024, 1, "諭"], [195025, 1, "變"], [195026, 1, "豕"], [195027, 1, "𧲨"], [195028, 1, "貫"], [195029, 1, "賁"], [195030, 1, "贛"], [195031, 1, "起"], [195032, 1, "𧼯"], [195033, 1, "𠠄"], [195034, 1, "跋"], [195035, 1, "趼"], [195036, 1, "跰"], [195037, 1, "𠣞"], [195038, 1, "軔"], [195039, 1, "輸"], [195040, 1, "𨗒"], [195041, 1, "𨗭"], [195042, 1, "邔"], [195043, 1, "郱"], [195044, 1, "鄑"], [195045, 1, "𨜮"], [195046, 1, "鄛"], [195047, 1, "鈸"], [195048, 1, "鋗"], [195049, 1, "鋘"], [195050, 1, "鉼"], [195051, 1, "鏹"], [195052, 1, "鐕"], [195053, 1, "𨯺"], [195054, 1, "開"], [195055, 1, "䦕"], [195056, 1, "閷"], [195057, 1, "𨵷"], [195058, 1, "䧦"], [195059, 1, "雃"], [195060, 1, "嶲"], [195061, 1, "霣"], [195062, 1, "𩅅"], [195063, 1, "𩈚"], [195064, 1, "䩮"], [195065, 1, "䩶"], [195066, 1, "韠"], [195067, 1, "𩐊"], [195068, 1, "䪲"], [195069, 1, "𩒖"], [[195070, 195071], 1, "頋"], [195072, 1, "頩"], [195073, 1, "𩖶"], [195074, 1, "飢"], [195075, 1, "䬳"], [195076, 1, "餩"], [195077, 1, "馧"], [195078, 1, "駂"], [195079, 1, "駾"], [195080, 1, "䯎"], [195081, 1, "𩬰"], [195082, 1, "鬒"], [195083, 1, "鱀"], [195084, 1, "鳽"], [195085, 1, "䳎"], [195086, 1, "䳭"], [195087, 1, "鵧"], [195088, 1, "𪃎"], [195089, 1, "䳸"], [195090, 1, "𪄅"], [195091, 1, "𪈎"], [195092, 1, "𪊑"], [195093, 1, "麻"], [195094, 1, "䵖"], [195095, 1, "黹"], [195096, 1, "黾"], [195097, 1, "鼅"], [195098, 1, "鼏"], [195099, 1, "鼖"], [195100, 1, "鼻"], [195101, 1, "𪘀"], [[195102, 196605], 3], [[196606, 196607], 3], [[196608, 201546], 2], [[201547, 201551], 3], [[201552, 205743], 2], [[205744, 262141], 3], [[262142, 262143], 3], [[262144, 327677], 3], [[327678, 327679], 3], [[327680, 393213], 3], [[393214, 393215], 3], [[393216, 458749], 3], [[458750, 458751], 3], [[458752, 524285], 3], [[524286, 524287], 3], [[524288, 589821], 3], [[589822, 589823], 3], [[589824, 655357], 3], [[655358, 655359], 3], [[655360, 720893], 3], [[720894, 720895], 3], [[720896, 786429], 3], [[786430, 786431], 3], [[786432, 851965], 3], [[851966, 851967], 3], [[851968, 917501], 3], [[917502, 917503], 3], [917504, 3], [917505, 3], [[917506, 917535], 3], [[917536, 917631], 3], [[917632, 917759], 3], [[917760, 917999], 7], [[918000, 983037], 3], [[983038, 983039], 3], [[983040, 1048573], 3], [[1048574, 1048575], 3], [[1048576, 1114109], 3], [[1114110, 1114111], 3]];
});

// node_modules/tr46/lib/statusMapping.js
var require_statusMapping = __commonJS((exports, module) => {
  exports.STATUS_MAPPING = {
    mapped: 1,
    valid: 2,
    disallowed: 3,
    disallowed_STD3_valid: 4,
    disallowed_STD3_mapped: 5,
    deviation: 6,
    ignored: 7
  };
});

// node_modules/tr46/index.js
var require_tr46 = __commonJS((exports, module) => {
  var containsNonASCII = function(str) {
    return /[^\x00-\x7F]/u.test(str);
  };
  var findStatus = function(val, { useSTD3ASCIIRules }) {
    let start2 = 0;
    let end2 = mappingTable.length - 1;
    while (start2 <= end2) {
      const mid = Math.floor((start2 + end2) / 2);
      const target = mappingTable[mid];
      const min2 = Array.isArray(target[0]) ? target[0][0] : target[0];
      const max3 = Array.isArray(target[0]) ? target[0][1] : target[0];
      if (min2 <= val && max3 >= val) {
        if (useSTD3ASCIIRules && (target[1] === STATUS_MAPPING.disallowed_STD3_valid || target[1] === STATUS_MAPPING.disallowed_STD3_mapped)) {
          return [STATUS_MAPPING.disallowed, ...target.slice(2)];
        } else if (target[1] === STATUS_MAPPING.disallowed_STD3_valid) {
          return [STATUS_MAPPING.valid, ...target.slice(2)];
        } else if (target[1] === STATUS_MAPPING.disallowed_STD3_mapped) {
          return [STATUS_MAPPING.mapped, ...target.slice(2)];
        }
        return target.slice(1);
      } else if (min2 > val) {
        end2 = mid - 1;
      } else {
        start2 = mid + 1;
      }
    }
    return null;
  };
  var mapChars = function(domainName, { useSTD3ASCIIRules, transitionalProcessing }) {
    let processed = "";
    for (const ch of domainName) {
      const [status, mapping] = findStatus(ch.codePointAt(0), { useSTD3ASCIIRules });
      switch (status) {
        case STATUS_MAPPING.disallowed:
          processed += ch;
          break;
        case STATUS_MAPPING.ignored:
          break;
        case STATUS_MAPPING.mapped:
          if (transitionalProcessing && ch === "\u1E9E") {
            processed += "ss";
          } else {
            processed += mapping;
          }
          break;
        case STATUS_MAPPING.deviation:
          if (transitionalProcessing) {
            processed += mapping;
          } else {
            processed += ch;
          }
          break;
        case STATUS_MAPPING.valid:
          processed += ch;
          break;
      }
    }
    return processed;
  };
  var validateLabel = function(label, {
    checkHyphens,
    checkBidi,
    checkJoiners,
    transitionalProcessing,
    useSTD3ASCIIRules,
    isBidi
  }) {
    if (label.length === 0) {
      return true;
    }
    if (label.normalize("NFC") !== label) {
      return false;
    }
    const codePoints = Array.from(label);
    if (checkHyphens) {
      if (codePoints[2] === "-" && codePoints[3] === "-" || (label.startsWith("-") || label.endsWith("-"))) {
        return false;
      }
    }
    if (label.includes(".")) {
      return false;
    }
    if (regexes.combiningMarks.test(codePoints[0])) {
      return false;
    }
    for (const ch of codePoints) {
      const [status] = findStatus(ch.codePointAt(0), { useSTD3ASCIIRules });
      if (transitionalProcessing) {
        if (status !== STATUS_MAPPING.valid) {
          return false;
        }
      } else if (status !== STATUS_MAPPING.valid && status !== STATUS_MAPPING.deviation) {
        return false;
      }
    }
    if (checkJoiners) {
      let last2 = 0;
      for (const [i, ch] of codePoints.entries()) {
        if (ch === "\u200C" || ch === "\u200D") {
          if (i > 0) {
            if (regexes.combiningClassVirama.test(codePoints[i - 1])) {
              continue;
            }
            if (ch === "\u200C") {
              const next = codePoints.indexOf("\u200C", i + 1);
              const test = next < 0 ? codePoints.slice(last2) : codePoints.slice(last2, next);
              if (regexes.validZWNJ.test(test.join(""))) {
                last2 = i + 1;
                continue;
              }
            }
          }
          return false;
        }
      }
    }
    if (checkBidi && isBidi) {
      let rtl;
      if (regexes.bidiS1LTR.test(codePoints[0])) {
        rtl = false;
      } else if (regexes.bidiS1RTL.test(codePoints[0])) {
        rtl = true;
      } else {
        return false;
      }
      if (rtl) {
        if (!regexes.bidiS2.test(label) || !regexes.bidiS3.test(label) || regexes.bidiS4EN.test(label) && regexes.bidiS4AN.test(label)) {
          return false;
        }
      } else if (!regexes.bidiS5.test(label) || !regexes.bidiS6.test(label)) {
        return false;
      }
    }
    return true;
  };
  var isBidiDomain = function(labels) {
    const domain = labels.map((label) => {
      if (label.startsWith("xn--")) {
        try {
          return punycode.decode(label.substring(4));
        } catch (err) {
          return "";
        }
      }
      return label;
    }).join(".");
    return regexes.bidiDomain.test(domain);
  };
  var processing = function(domainName, options2) {
    let string = mapChars(domainName, options2);
    string = string.normalize("NFC");
    const labels = string.split(".");
    const isBidi = isBidiDomain(labels);
    let error3 = false;
    for (const [i, origLabel] of labels.entries()) {
      let label = origLabel;
      let transitionalProcessingForThisLabel = options2.transitionalProcessing;
      if (label.startsWith("xn--")) {
        if (containsNonASCII(label)) {
          error3 = true;
          continue;
        }
        try {
          label = punycode.decode(label.substring(4));
        } catch {
          if (!options2.ignoreInvalidPunycode) {
            error3 = true;
            continue;
          }
        }
        labels[i] = label;
        transitionalProcessingForThisLabel = false;
      }
      if (error3) {
        continue;
      }
      const validation = validateLabel(label, {
        ...options2,
        transitionalProcessing: transitionalProcessingForThisLabel,
        isBidi
      });
      if (!validation) {
        error3 = true;
      }
    }
    return {
      string: labels.join("."),
      error: error3
    };
  };
  var toASCII = function(domainName, {
    checkHyphens = false,
    checkBidi = false,
    checkJoiners = false,
    useSTD3ASCIIRules = false,
    verifyDNSLength = false,
    transitionalProcessing = false,
    ignoreInvalidPunycode = false
  } = {}) {
    const result = processing(domainName, {
      checkHyphens,
      checkBidi,
      checkJoiners,
      useSTD3ASCIIRules,
      transitionalProcessing,
      ignoreInvalidPunycode
    });
    let labels = result.string.split(".");
    labels = labels.map((l) => {
      if (containsNonASCII(l)) {
        try {
          return `xn--${punycode.encode(l)}`;
        } catch (e) {
          result.error = true;
        }
      }
      return l;
    });
    if (verifyDNSLength) {
      const total = labels.join(".").length;
      if (total > 253 || total === 0) {
        result.error = true;
      }
      for (let i = 0;i < labels.length; ++i) {
        if (labels[i].length > 63 || labels[i].length === 0) {
          result.error = true;
          break;
        }
      }
    }
    if (result.error) {
      return null;
    }
    return labels.join(".");
  };
  var toUnicode = function(domainName, {
    checkHyphens = false,
    checkBidi = false,
    checkJoiners = false,
    useSTD3ASCIIRules = false,
    transitionalProcessing = false,
    ignoreInvalidPunycode = false
  } = {}) {
    const result = processing(domainName, {
      checkHyphens,
      checkBidi,
      checkJoiners,
      useSTD3ASCIIRules,
      transitionalProcessing,
      ignoreInvalidPunycode
    });
    return {
      domain: result.string,
      error: result.error
    };
  };
  var punycode = require_punycode2();
  var regexes = require_regexes();
  var mappingTable = require_mappingTable();
  var { STATUS_MAPPING } = require_statusMapping();
  module.exports = {
    toASCII,
    toUnicode
  };
});

// node_modules/whatwg-url/lib/infra.js
var require_infra = __commonJS((exports, module) => {
  var isASCIIDigit = function(c) {
    return c >= 48 && c <= 57;
  };
  var isASCIIAlpha = function(c) {
    return c >= 65 && c <= 90 || c >= 97 && c <= 122;
  };
  var isASCIIAlphanumeric = function(c) {
    return isASCIIAlpha(c) || isASCIIDigit(c);
  };
  var isASCIIHex = function(c) {
    return isASCIIDigit(c) || c >= 65 && c <= 70 || c >= 97 && c <= 102;
  };
  module.exports = {
    isASCIIDigit,
    isASCIIAlpha,
    isASCIIAlphanumeric,
    isASCIIHex
  };
});

// node_modules/whatwg-url/lib/encoding.js
var require_encoding = __commonJS((exports, module) => {
  var utf8Encode = function(string) {
    return utf8Encoder.encode(string);
  };
  var utf8DecodeWithoutBOM = function(bytes) {
    return utf8Decoder.decode(bytes);
  };
  var utf8Encoder = new TextEncoder;
  var utf8Decoder = new TextDecoder("utf-8", { ignoreBOM: true });
  module.exports = {
    utf8Encode,
    utf8DecodeWithoutBOM
  };
});

// node_modules/whatwg-url/lib/percent-encoding.js
var require_percent_encoding = __commonJS((exports, module) => {
  var p = function(char) {
    return char.codePointAt(0);
  };
  var percentEncode = function(c) {
    let hex = c.toString(16).toUpperCase();
    if (hex.length === 1) {
      hex = `0${hex}`;
    }
    return `%${hex}`;
  };
  var percentDecodeBytes = function(input) {
    const output = new Uint8Array(input.byteLength);
    let outputIndex = 0;
    for (let i = 0;i < input.byteLength; ++i) {
      const byte = input[i];
      if (byte !== 37) {
        output[outputIndex++] = byte;
      } else if (byte === 37 && (!isASCIIHex(input[i + 1]) || !isASCIIHex(input[i + 2]))) {
        output[outputIndex++] = byte;
      } else {
        const bytePoint = parseInt(String.fromCodePoint(input[i + 1], input[i + 2]), 16);
        output[outputIndex++] = bytePoint;
        i += 2;
      }
    }
    return output.slice(0, outputIndex);
  };
  var percentDecodeString = function(input) {
    const bytes = utf8Encode(input);
    return percentDecodeBytes(bytes);
  };
  var isC0ControlPercentEncode = function(c) {
    return c <= 31 || c > 126;
  };
  var isFragmentPercentEncode = function(c) {
    return isC0ControlPercentEncode(c) || extraFragmentPercentEncodeSet.has(c);
  };
  var isQueryPercentEncode = function(c) {
    return isC0ControlPercentEncode(c) || extraQueryPercentEncodeSet.has(c);
  };
  var isSpecialQueryPercentEncode = function(c) {
    return isQueryPercentEncode(c) || c === p("'");
  };
  var isPathPercentEncode = function(c) {
    return isQueryPercentEncode(c) || extraPathPercentEncodeSet.has(c);
  };
  var isUserinfoPercentEncode = function(c) {
    return isPathPercentEncode(c) || extraUserinfoPercentEncodeSet.has(c);
  };
  var isComponentPercentEncode = function(c) {
    return isUserinfoPercentEncode(c) || extraComponentPercentEncodeSet.has(c);
  };
  var isURLEncodedPercentEncode = function(c) {
    return isComponentPercentEncode(c) || extraURLEncodedPercentEncodeSet.has(c);
  };
  var utf8PercentEncodeCodePointInternal = function(codePoint, percentEncodePredicate) {
    const bytes = utf8Encode(codePoint);
    let output = "";
    for (const byte of bytes) {
      if (!percentEncodePredicate(byte)) {
        output += String.fromCharCode(byte);
      } else {
        output += percentEncode(byte);
      }
    }
    return output;
  };
  var utf8PercentEncodeCodePoint = function(codePoint, percentEncodePredicate) {
    return utf8PercentEncodeCodePointInternal(String.fromCodePoint(codePoint), percentEncodePredicate);
  };
  var utf8PercentEncodeString = function(input, percentEncodePredicate, spaceAsPlus = false) {
    let output = "";
    for (const codePoint of input) {
      if (spaceAsPlus && codePoint === " ") {
        output += "+";
      } else {
        output += utf8PercentEncodeCodePointInternal(codePoint, percentEncodePredicate);
      }
    }
    return output;
  };
  var { isASCIIHex } = require_infra();
  var { utf8Encode } = require_encoding();
  var extraFragmentPercentEncodeSet = new Set([p(" "), p("\""), p("<"), p(">"), p("`")]);
  var extraQueryPercentEncodeSet = new Set([p(" "), p("\""), p("#"), p("<"), p(">")]);
  var extraPathPercentEncodeSet = new Set([p("?"), p("`"), p("{"), p("}")]);
  var extraUserinfoPercentEncodeSet = new Set([p("/"), p(":"), p(";"), p("="), p("@"), p("["), p("\\"), p("]"), p("^"), p("|")]);
  var extraComponentPercentEncodeSet = new Set([p("$"), p("%"), p("&"), p("+"), p(",")]);
  var extraURLEncodedPercentEncodeSet = new Set([p("!"), p("'"), p("("), p(")"), p("~")]);
  module.exports = {
    isC0ControlPercentEncode,
    isFragmentPercentEncode,
    isQueryPercentEncode,
    isSpecialQueryPercentEncode,
    isPathPercentEncode,
    isUserinfoPercentEncode,
    isURLEncodedPercentEncode,
    percentDecodeString,
    percentDecodeBytes,
    utf8PercentEncodeString,
    utf8PercentEncodeCodePoint
  };
});

// node_modules/whatwg-url/lib/url-state-machine.js
var require_url_state_machine = __commonJS((exports, module) => {
  var p = function(char) {
    return char.codePointAt(0);
  };
  var countSymbols = function(str) {
    return [...str].length;
  };
  var at = function(input, idx) {
    const c = input[idx];
    return isNaN(c) ? undefined : String.fromCodePoint(c);
  };
  var isSingleDot = function(buffer) {
    return buffer === "." || buffer.toLowerCase() === "%2e";
  };
  var isDoubleDot = function(buffer) {
    buffer = buffer.toLowerCase();
    return buffer === ".." || buffer === "%2e." || buffer === ".%2e" || buffer === "%2e%2e";
  };
  var isWindowsDriveLetterCodePoints = function(cp1, cp2) {
    return infra.isASCIIAlpha(cp1) && (cp2 === p(":") || cp2 === p("|"));
  };
  var isWindowsDriveLetterString = function(string) {
    return string.length === 2 && infra.isASCIIAlpha(string.codePointAt(0)) && (string[1] === ":" || string[1] === "|");
  };
  var isNormalizedWindowsDriveLetterString = function(string) {
    return string.length === 2 && infra.isASCIIAlpha(string.codePointAt(0)) && string[1] === ":";
  };
  var containsForbiddenHostCodePoint = function(string) {
    return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|\/|:|<|>|\?|@|\[|\\|\]|\^|\|/u) !== -1;
  };
  var containsForbiddenDomainCodePoint = function(string) {
    return containsForbiddenHostCodePoint(string) || string.search(/[\u0000-\u001F]|%|\u007F/u) !== -1;
  };
  var isSpecialScheme = function(scheme) {
    return specialSchemes[scheme] !== undefined;
  };
  var isSpecial = function(url) {
    return isSpecialScheme(url.scheme);
  };
  var isNotSpecial = function(url) {
    return !isSpecialScheme(url.scheme);
  };
  var defaultPort = function(scheme) {
    return specialSchemes[scheme];
  };
  var parseIPv4Number = function(input) {
    if (input === "") {
      return failure;
    }
    let R = 10;
    if (input.length >= 2 && input.charAt(0) === "0" && input.charAt(1).toLowerCase() === "x") {
      input = input.substring(2);
      R = 16;
    } else if (input.length >= 2 && input.charAt(0) === "0") {
      input = input.substring(1);
      R = 8;
    }
    if (input === "") {
      return 0;
    }
    let regex = /[^0-7]/u;
    if (R === 10) {
      regex = /[^0-9]/u;
    }
    if (R === 16) {
      regex = /[^0-9A-Fa-f]/u;
    }
    if (regex.test(input)) {
      return failure;
    }
    return parseInt(input, R);
  };
  var parseIPv4 = function(input) {
    const parts = input.split(".");
    if (parts[parts.length - 1] === "") {
      if (parts.length > 1) {
        parts.pop();
      }
    }
    if (parts.length > 4) {
      return failure;
    }
    const numbers = [];
    for (const part of parts) {
      const n = parseIPv4Number(part);
      if (n === failure) {
        return failure;
      }
      numbers.push(n);
    }
    for (let i = 0;i < numbers.length - 1; ++i) {
      if (numbers[i] > 255) {
        return failure;
      }
    }
    if (numbers[numbers.length - 1] >= 256 ** (5 - numbers.length)) {
      return failure;
    }
    let ipv4 = numbers.pop();
    let counter = 0;
    for (const n of numbers) {
      ipv4 += n * 256 ** (3 - counter);
      ++counter;
    }
    return ipv4;
  };
  var serializeIPv4 = function(address) {
    let output = "";
    let n = address;
    for (let i = 1;i <= 4; ++i) {
      output = String(n % 256) + output;
      if (i !== 4) {
        output = `.${output}`;
      }
      n = Math.floor(n / 256);
    }
    return output;
  };
  var parseIPv6 = function(input) {
    const address = [0, 0, 0, 0, 0, 0, 0, 0];
    let pieceIndex = 0;
    let compress = null;
    let pointer = 0;
    input = Array.from(input, (c) => c.codePointAt(0));
    if (input[pointer] === p(":")) {
      if (input[pointer + 1] !== p(":")) {
        return failure;
      }
      pointer += 2;
      ++pieceIndex;
      compress = pieceIndex;
    }
    while (pointer < input.length) {
      if (pieceIndex === 8) {
        return failure;
      }
      if (input[pointer] === p(":")) {
        if (compress !== null) {
          return failure;
        }
        ++pointer;
        ++pieceIndex;
        compress = pieceIndex;
        continue;
      }
      let value = 0;
      let length = 0;
      while (length < 4 && infra.isASCIIHex(input[pointer])) {
        value = value * 16 + parseInt(at(input, pointer), 16);
        ++pointer;
        ++length;
      }
      if (input[pointer] === p(".")) {
        if (length === 0) {
          return failure;
        }
        pointer -= length;
        if (pieceIndex > 6) {
          return failure;
        }
        let numbersSeen = 0;
        while (input[pointer] !== undefined) {
          let ipv4Piece = null;
          if (numbersSeen > 0) {
            if (input[pointer] === p(".") && numbersSeen < 4) {
              ++pointer;
            } else {
              return failure;
            }
          }
          if (!infra.isASCIIDigit(input[pointer])) {
            return failure;
          }
          while (infra.isASCIIDigit(input[pointer])) {
            const number = parseInt(at(input, pointer));
            if (ipv4Piece === null) {
              ipv4Piece = number;
            } else if (ipv4Piece === 0) {
              return failure;
            } else {
              ipv4Piece = ipv4Piece * 10 + number;
            }
            if (ipv4Piece > 255) {
              return failure;
            }
            ++pointer;
          }
          address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
          ++numbersSeen;
          if (numbersSeen === 2 || numbersSeen === 4) {
            ++pieceIndex;
          }
        }
        if (numbersSeen !== 4) {
          return failure;
        }
        break;
      } else if (input[pointer] === p(":")) {
        ++pointer;
        if (input[pointer] === undefined) {
          return failure;
        }
      } else if (input[pointer] !== undefined) {
        return failure;
      }
      address[pieceIndex] = value;
      ++pieceIndex;
    }
    if (compress !== null) {
      let swaps = pieceIndex - compress;
      pieceIndex = 7;
      while (pieceIndex !== 0 && swaps > 0) {
        const temp = address[compress + swaps - 1];
        address[compress + swaps - 1] = address[pieceIndex];
        address[pieceIndex] = temp;
        --pieceIndex;
        --swaps;
      }
    } else if (compress === null && pieceIndex !== 8) {
      return failure;
    }
    return address;
  };
  var serializeIPv6 = function(address) {
    let output = "";
    const compress = findLongestZeroSequence(address);
    let ignore0 = false;
    for (let pieceIndex = 0;pieceIndex <= 7; ++pieceIndex) {
      if (ignore0 && address[pieceIndex] === 0) {
        continue;
      } else if (ignore0) {
        ignore0 = false;
      }
      if (compress === pieceIndex) {
        const separator = pieceIndex === 0 ? "::" : ":";
        output += separator;
        ignore0 = true;
        continue;
      }
      output += address[pieceIndex].toString(16);
      if (pieceIndex !== 7) {
        output += ":";
      }
    }
    return output;
  };
  var parseHost = function(input, isNotSpecialArg = false) {
    if (input[0] === "[") {
      if (input[input.length - 1] !== "]") {
        return failure;
      }
      return parseIPv6(input.substring(1, input.length - 1));
    }
    if (isNotSpecialArg) {
      return parseOpaqueHost(input);
    }
    const domain = utf8DecodeWithoutBOM(percentDecodeString(input));
    const asciiDomain = domainToASCII(domain);
    if (asciiDomain === failure) {
      return failure;
    }
    if (containsForbiddenDomainCodePoint(asciiDomain)) {
      return failure;
    }
    if (endsInANumber(asciiDomain)) {
      return parseIPv4(asciiDomain);
    }
    return asciiDomain;
  };
  var endsInANumber = function(input) {
    const parts = input.split(".");
    if (parts[parts.length - 1] === "") {
      if (parts.length === 1) {
        return false;
      }
      parts.pop();
    }
    const last2 = parts[parts.length - 1];
    if (parseIPv4Number(last2) !== failure) {
      return true;
    }
    if (/^[0-9]+$/u.test(last2)) {
      return true;
    }
    return false;
  };
  var parseOpaqueHost = function(input) {
    if (containsForbiddenHostCodePoint(input)) {
      return failure;
    }
    return utf8PercentEncodeString(input, isC0ControlPercentEncode);
  };
  var findLongestZeroSequence = function(arr) {
    let maxIdx = null;
    let maxLen = 1;
    let currStart = null;
    let currLen = 0;
    for (let i = 0;i < arr.length; ++i) {
      if (arr[i] !== 0) {
        if (currLen > maxLen) {
          maxIdx = currStart;
          maxLen = currLen;
        }
        currStart = null;
        currLen = 0;
      } else {
        if (currStart === null) {
          currStart = i;
        }
        ++currLen;
      }
    }
    if (currLen > maxLen) {
      return currStart;
    }
    return maxIdx;
  };
  var serializeHost = function(host) {
    if (typeof host === "number") {
      return serializeIPv4(host);
    }
    if (host instanceof Array) {
      return `[${serializeIPv6(host)}]`;
    }
    return host;
  };
  var domainToASCII = function(domain, beStrict = false) {
    const result = tr46.toASCII(domain, {
      checkBidi: true,
      checkHyphens: false,
      checkJoiners: true,
      useSTD3ASCIIRules: beStrict,
      verifyDNSLength: beStrict
    });
    if (result === null || result === "") {
      return failure;
    }
    return result;
  };
  var trimControlChars = function(url) {
    return url.replace(/^[\u0000-\u001F\u0020]+|[\u0000-\u001F\u0020]+$/ug, "");
  };
  var trimTabAndNewline = function(url) {
    return url.replace(/\u0009|\u000A|\u000D/ug, "");
  };
  var shortenPath = function(url) {
    const { path } = url;
    if (path.length === 0) {
      return;
    }
    if (url.scheme === "file" && path.length === 1 && isNormalizedWindowsDriveLetter(path[0])) {
      return;
    }
    path.pop();
  };
  var includesCredentials = function(url) {
    return url.username !== "" || url.password !== "";
  };
  var cannotHaveAUsernamePasswordPort = function(url) {
    return url.host === null || url.host === "" || url.scheme === "file";
  };
  var hasAnOpaquePath = function(url) {
    return typeof url.path === "string";
  };
  var isNormalizedWindowsDriveLetter = function(string) {
    return /^[A-Za-z]:$/u.test(string);
  };
  var URLStateMachine = function(input, base, encodingOverride, url, stateOverride) {
    this.pointer = 0;
    this.input = input;
    this.base = base || null;
    this.encodingOverride = encodingOverride || "utf-8";
    this.stateOverride = stateOverride;
    this.url = url;
    this.failure = false;
    this.parseError = false;
    if (!this.url) {
      this.url = {
        scheme: "",
        username: "",
        password: "",
        host: null,
        port: null,
        path: [],
        query: null,
        fragment: null
      };
      const res2 = trimControlChars(this.input);
      if (res2 !== this.input) {
        this.parseError = true;
      }
      this.input = res2;
    }
    const res = trimTabAndNewline(this.input);
    if (res !== this.input) {
      this.parseError = true;
    }
    this.input = res;
    this.state = stateOverride || "scheme start";
    this.buffer = "";
    this.atFlag = false;
    this.arrFlag = false;
    this.passwordTokenSeenFlag = false;
    this.input = Array.from(this.input, (c) => c.codePointAt(0));
    for (;this.pointer <= this.input.length; ++this.pointer) {
      const c = this.input[this.pointer];
      const cStr = isNaN(c) ? undefined : String.fromCodePoint(c);
      const ret = this[`parse ${this.state}`](c, cStr);
      if (!ret) {
        break;
      } else if (ret === failure) {
        this.failure = true;
        break;
      }
    }
  };
  var startsWithWindowsDriveLetter = function(input, pointer) {
    const length = input.length - pointer;
    return length >= 2 && isWindowsDriveLetterCodePoints(input[pointer], input[pointer + 1]) && (length === 2 || fileOtherwiseCodePoints.has(input[pointer + 2]));
  };
  var serializeURL = function(url, excludeFragment) {
    let output = `${url.scheme}:`;
    if (url.host !== null) {
      output += "//";
      if (url.username !== "" || url.password !== "") {
        output += url.username;
        if (url.password !== "") {
          output += `:${url.password}`;
        }
        output += "@";
      }
      output += serializeHost(url.host);
      if (url.port !== null) {
        output += `:${url.port}`;
      }
    }
    if (url.host === null && !hasAnOpaquePath(url) && url.path.length > 1 && url.path[0] === "") {
      output += "/.";
    }
    output += serializePath(url);
    if (url.query !== null) {
      output += `?${url.query}`;
    }
    if (!excludeFragment && url.fragment !== null) {
      output += `#${url.fragment}`;
    }
    return output;
  };
  var serializeOrigin = function(tuple) {
    let result = `${tuple.scheme}://`;
    result += serializeHost(tuple.host);
    if (tuple.port !== null) {
      result += `:${tuple.port}`;
    }
    return result;
  };
  var serializePath = function(url) {
    if (hasAnOpaquePath(url)) {
      return url.path;
    }
    let output = "";
    for (const segment of url.path) {
      output += `/${segment}`;
    }
    return output;
  };
  var tr46 = require_tr46();
  var infra = require_infra();
  var { utf8DecodeWithoutBOM } = require_encoding();
  var {
    percentDecodeString,
    utf8PercentEncodeCodePoint,
    utf8PercentEncodeString,
    isC0ControlPercentEncode,
    isFragmentPercentEncode,
    isQueryPercentEncode,
    isSpecialQueryPercentEncode,
    isPathPercentEncode,
    isUserinfoPercentEncode
  } = require_percent_encoding();
  var specialSchemes = {
    ftp: 21,
    file: null,
    http: 80,
    https: 443,
    ws: 80,
    wss: 443
  };
  var failure = Symbol("failure");
  URLStateMachine.prototype["parse scheme start"] = function parseSchemeStart(c, cStr) {
    if (infra.isASCIIAlpha(c)) {
      this.buffer += cStr.toLowerCase();
      this.state = "scheme";
    } else if (!this.stateOverride) {
      this.state = "no scheme";
      --this.pointer;
    } else {
      this.parseError = true;
      return failure;
    }
    return true;
  };
  URLStateMachine.prototype["parse scheme"] = function parseScheme(c, cStr) {
    if (infra.isASCIIAlphanumeric(c) || c === p("+") || c === p("-") || c === p(".")) {
      this.buffer += cStr.toLowerCase();
    } else if (c === p(":")) {
      if (this.stateOverride) {
        if (isSpecial(this.url) && !isSpecialScheme(this.buffer)) {
          return false;
        }
        if (!isSpecial(this.url) && isSpecialScheme(this.buffer)) {
          return false;
        }
        if ((includesCredentials(this.url) || this.url.port !== null) && this.buffer === "file") {
          return false;
        }
        if (this.url.scheme === "file" && this.url.host === "") {
          return false;
        }
      }
      this.url.scheme = this.buffer;
      if (this.stateOverride) {
        if (this.url.port === defaultPort(this.url.scheme)) {
          this.url.port = null;
        }
        return false;
      }
      this.buffer = "";
      if (this.url.scheme === "file") {
        if (this.input[this.pointer + 1] !== p("/") || this.input[this.pointer + 2] !== p("/")) {
          this.parseError = true;
        }
        this.state = "file";
      } else if (isSpecial(this.url) && this.base !== null && this.base.scheme === this.url.scheme) {
        this.state = "special relative or authority";
      } else if (isSpecial(this.url)) {
        this.state = "special authority slashes";
      } else if (this.input[this.pointer + 1] === p("/")) {
        this.state = "path or authority";
        ++this.pointer;
      } else {
        this.url.path = "";
        this.state = "opaque path";
      }
    } else if (!this.stateOverride) {
      this.buffer = "";
      this.state = "no scheme";
      this.pointer = -1;
    } else {
      this.parseError = true;
      return failure;
    }
    return true;
  };
  URLStateMachine.prototype["parse no scheme"] = function parseNoScheme(c) {
    if (this.base === null || hasAnOpaquePath(this.base) && c !== p("#")) {
      return failure;
    } else if (hasAnOpaquePath(this.base) && c === p("#")) {
      this.url.scheme = this.base.scheme;
      this.url.path = this.base.path;
      this.url.query = this.base.query;
      this.url.fragment = "";
      this.state = "fragment";
    } else if (this.base.scheme === "file") {
      this.state = "file";
      --this.pointer;
    } else {
      this.state = "relative";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse special relative or authority"] = function parseSpecialRelativeOrAuthority(c) {
    if (c === p("/") && this.input[this.pointer + 1] === p("/")) {
      this.state = "special authority ignore slashes";
      ++this.pointer;
    } else {
      this.parseError = true;
      this.state = "relative";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse path or authority"] = function parsePathOrAuthority(c) {
    if (c === p("/")) {
      this.state = "authority";
    } else {
      this.state = "path";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse relative"] = function parseRelative(c) {
    this.url.scheme = this.base.scheme;
    if (c === p("/")) {
      this.state = "relative slash";
    } else if (isSpecial(this.url) && c === p("\\")) {
      this.parseError = true;
      this.state = "relative slash";
    } else {
      this.url.username = this.base.username;
      this.url.password = this.base.password;
      this.url.host = this.base.host;
      this.url.port = this.base.port;
      this.url.path = this.base.path.slice();
      this.url.query = this.base.query;
      if (c === p("?")) {
        this.url.query = "";
        this.state = "query";
      } else if (c === p("#")) {
        this.url.fragment = "";
        this.state = "fragment";
      } else if (!isNaN(c)) {
        this.url.query = null;
        this.url.path.pop();
        this.state = "path";
        --this.pointer;
      }
    }
    return true;
  };
  URLStateMachine.prototype["parse relative slash"] = function parseRelativeSlash(c) {
    if (isSpecial(this.url) && (c === p("/") || c === p("\\"))) {
      if (c === p("\\")) {
        this.parseError = true;
      }
      this.state = "special authority ignore slashes";
    } else if (c === p("/")) {
      this.state = "authority";
    } else {
      this.url.username = this.base.username;
      this.url.password = this.base.password;
      this.url.host = this.base.host;
      this.url.port = this.base.port;
      this.state = "path";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse special authority slashes"] = function parseSpecialAuthoritySlashes(c) {
    if (c === p("/") && this.input[this.pointer + 1] === p("/")) {
      this.state = "special authority ignore slashes";
      ++this.pointer;
    } else {
      this.parseError = true;
      this.state = "special authority ignore slashes";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse special authority ignore slashes"] = function parseSpecialAuthorityIgnoreSlashes(c) {
    if (c !== p("/") && c !== p("\\")) {
      this.state = "authority";
      --this.pointer;
    } else {
      this.parseError = true;
    }
    return true;
  };
  URLStateMachine.prototype["parse authority"] = function parseAuthority(c, cStr) {
    if (c === p("@")) {
      this.parseError = true;
      if (this.atFlag) {
        this.buffer = `%40${this.buffer}`;
      }
      this.atFlag = true;
      const len = countSymbols(this.buffer);
      for (let pointer = 0;pointer < len; ++pointer) {
        const codePoint = this.buffer.codePointAt(pointer);
        if (codePoint === p(":") && !this.passwordTokenSeenFlag) {
          this.passwordTokenSeenFlag = true;
          continue;
        }
        const encodedCodePoints = utf8PercentEncodeCodePoint(codePoint, isUserinfoPercentEncode);
        if (this.passwordTokenSeenFlag) {
          this.url.password += encodedCodePoints;
        } else {
          this.url.username += encodedCodePoints;
        }
      }
      this.buffer = "";
    } else if (isNaN(c) || c === p("/") || c === p("?") || c === p("#") || isSpecial(this.url) && c === p("\\")) {
      if (this.atFlag && this.buffer === "") {
        this.parseError = true;
        return failure;
      }
      this.pointer -= countSymbols(this.buffer) + 1;
      this.buffer = "";
      this.state = "host";
    } else {
      this.buffer += cStr;
    }
    return true;
  };
  URLStateMachine.prototype["parse hostname"] = URLStateMachine.prototype["parse host"] = function parseHostName(c, cStr) {
    if (this.stateOverride && this.url.scheme === "file") {
      --this.pointer;
      this.state = "file host";
    } else if (c === p(":") && !this.arrFlag) {
      if (this.buffer === "") {
        this.parseError = true;
        return failure;
      }
      if (this.stateOverride === "hostname") {
        return false;
      }
      const host = parseHost(this.buffer, isNotSpecial(this.url));
      if (host === failure) {
        return failure;
      }
      this.url.host = host;
      this.buffer = "";
      this.state = "port";
    } else if (isNaN(c) || c === p("/") || c === p("?") || c === p("#") || isSpecial(this.url) && c === p("\\")) {
      --this.pointer;
      if (isSpecial(this.url) && this.buffer === "") {
        this.parseError = true;
        return failure;
      } else if (this.stateOverride && this.buffer === "" && (includesCredentials(this.url) || this.url.port !== null)) {
        this.parseError = true;
        return false;
      }
      const host = parseHost(this.buffer, isNotSpecial(this.url));
      if (host === failure) {
        return failure;
      }
      this.url.host = host;
      this.buffer = "";
      this.state = "path start";
      if (this.stateOverride) {
        return false;
      }
    } else {
      if (c === p("[")) {
        this.arrFlag = true;
      } else if (c === p("]")) {
        this.arrFlag = false;
      }
      this.buffer += cStr;
    }
    return true;
  };
  URLStateMachine.prototype["parse port"] = function parsePort(c, cStr) {
    if (infra.isASCIIDigit(c)) {
      this.buffer += cStr;
    } else if (isNaN(c) || c === p("/") || c === p("?") || c === p("#") || isSpecial(this.url) && c === p("\\") || this.stateOverride) {
      if (this.buffer !== "") {
        const port = parseInt(this.buffer);
        if (port > 2 ** 16 - 1) {
          this.parseError = true;
          return failure;
        }
        this.url.port = port === defaultPort(this.url.scheme) ? null : port;
        this.buffer = "";
      }
      if (this.stateOverride) {
        return false;
      }
      this.state = "path start";
      --this.pointer;
    } else {
      this.parseError = true;
      return failure;
    }
    return true;
  };
  var fileOtherwiseCodePoints = new Set([p("/"), p("\\"), p("?"), p("#")]);
  URLStateMachine.prototype["parse file"] = function parseFile(c) {
    this.url.scheme = "file";
    this.url.host = "";
    if (c === p("/") || c === p("\\")) {
      if (c === p("\\")) {
        this.parseError = true;
      }
      this.state = "file slash";
    } else if (this.base !== null && this.base.scheme === "file") {
      this.url.host = this.base.host;
      this.url.path = this.base.path.slice();
      this.url.query = this.base.query;
      if (c === p("?")) {
        this.url.query = "";
        this.state = "query";
      } else if (c === p("#")) {
        this.url.fragment = "";
        this.state = "fragment";
      } else if (!isNaN(c)) {
        this.url.query = null;
        if (!startsWithWindowsDriveLetter(this.input, this.pointer)) {
          shortenPath(this.url);
        } else {
          this.parseError = true;
          this.url.path = [];
        }
        this.state = "path";
        --this.pointer;
      }
    } else {
      this.state = "path";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse file slash"] = function parseFileSlash(c) {
    if (c === p("/") || c === p("\\")) {
      if (c === p("\\")) {
        this.parseError = true;
      }
      this.state = "file host";
    } else {
      if (this.base !== null && this.base.scheme === "file") {
        if (!startsWithWindowsDriveLetter(this.input, this.pointer) && isNormalizedWindowsDriveLetterString(this.base.path[0])) {
          this.url.path.push(this.base.path[0]);
        }
        this.url.host = this.base.host;
      }
      this.state = "path";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse file host"] = function parseFileHost(c, cStr) {
    if (isNaN(c) || c === p("/") || c === p("\\") || c === p("?") || c === p("#")) {
      --this.pointer;
      if (!this.stateOverride && isWindowsDriveLetterString(this.buffer)) {
        this.parseError = true;
        this.state = "path";
      } else if (this.buffer === "") {
        this.url.host = "";
        if (this.stateOverride) {
          return false;
        }
        this.state = "path start";
      } else {
        let host = parseHost(this.buffer, isNotSpecial(this.url));
        if (host === failure) {
          return failure;
        }
        if (host === "localhost") {
          host = "";
        }
        this.url.host = host;
        if (this.stateOverride) {
          return false;
        }
        this.buffer = "";
        this.state = "path start";
      }
    } else {
      this.buffer += cStr;
    }
    return true;
  };
  URLStateMachine.prototype["parse path start"] = function parsePathStart(c) {
    if (isSpecial(this.url)) {
      if (c === p("\\")) {
        this.parseError = true;
      }
      this.state = "path";
      if (c !== p("/") && c !== p("\\")) {
        --this.pointer;
      }
    } else if (!this.stateOverride && c === p("?")) {
      this.url.query = "";
      this.state = "query";
    } else if (!this.stateOverride && c === p("#")) {
      this.url.fragment = "";
      this.state = "fragment";
    } else if (c !== undefined) {
      this.state = "path";
      if (c !== p("/")) {
        --this.pointer;
      }
    } else if (this.stateOverride && this.url.host === null) {
      this.url.path.push("");
    }
    return true;
  };
  URLStateMachine.prototype["parse path"] = function parsePath(c) {
    if (isNaN(c) || c === p("/") || isSpecial(this.url) && c === p("\\") || !this.stateOverride && (c === p("?") || c === p("#"))) {
      if (isSpecial(this.url) && c === p("\\")) {
        this.parseError = true;
      }
      if (isDoubleDot(this.buffer)) {
        shortenPath(this.url);
        if (c !== p("/") && !(isSpecial(this.url) && c === p("\\"))) {
          this.url.path.push("");
        }
      } else if (isSingleDot(this.buffer) && c !== p("/") && !(isSpecial(this.url) && c === p("\\"))) {
        this.url.path.push("");
      } else if (!isSingleDot(this.buffer)) {
        if (this.url.scheme === "file" && this.url.path.length === 0 && isWindowsDriveLetterString(this.buffer)) {
          this.buffer = `${this.buffer[0]}:`;
        }
        this.url.path.push(this.buffer);
      }
      this.buffer = "";
      if (c === p("?")) {
        this.url.query = "";
        this.state = "query";
      }
      if (c === p("#")) {
        this.url.fragment = "";
        this.state = "fragment";
      }
    } else {
      if (c === p("%") && (!infra.isASCIIHex(this.input[this.pointer + 1]) || !infra.isASCIIHex(this.input[this.pointer + 2]))) {
        this.parseError = true;
      }
      this.buffer += utf8PercentEncodeCodePoint(c, isPathPercentEncode);
    }
    return true;
  };
  URLStateMachine.prototype["parse opaque path"] = function parseOpaquePath(c) {
    if (c === p("?")) {
      this.url.query = "";
      this.state = "query";
    } else if (c === p("#")) {
      this.url.fragment = "";
      this.state = "fragment";
    } else {
      if (!isNaN(c) && c !== p("%")) {
        this.parseError = true;
      }
      if (c === p("%") && (!infra.isASCIIHex(this.input[this.pointer + 1]) || !infra.isASCIIHex(this.input[this.pointer + 2]))) {
        this.parseError = true;
      }
      if (!isNaN(c)) {
        this.url.path += utf8PercentEncodeCodePoint(c, isC0ControlPercentEncode);
      }
    }
    return true;
  };
  URLStateMachine.prototype["parse query"] = function parseQuery(c, cStr) {
    if (!isSpecial(this.url) || this.url.scheme === "ws" || this.url.scheme === "wss") {
      this.encodingOverride = "utf-8";
    }
    if (!this.stateOverride && c === p("#") || isNaN(c)) {
      const queryPercentEncodePredicate = isSpecial(this.url) ? isSpecialQueryPercentEncode : isQueryPercentEncode;
      this.url.query += utf8PercentEncodeString(this.buffer, queryPercentEncodePredicate);
      this.buffer = "";
      if (c === p("#")) {
        this.url.fragment = "";
        this.state = "fragment";
      }
    } else if (!isNaN(c)) {
      if (c === p("%") && (!infra.isASCIIHex(this.input[this.pointer + 1]) || !infra.isASCIIHex(this.input[this.pointer + 2]))) {
        this.parseError = true;
      }
      this.buffer += cStr;
    }
    return true;
  };
  URLStateMachine.prototype["parse fragment"] = function parseFragment(c) {
    if (!isNaN(c)) {
      if (c === p("%") && (!infra.isASCIIHex(this.input[this.pointer + 1]) || !infra.isASCIIHex(this.input[this.pointer + 2]))) {
        this.parseError = true;
      }
      this.url.fragment += utf8PercentEncodeCodePoint(c, isFragmentPercentEncode);
    }
    return true;
  };
  exports.serializeURL = serializeURL;
  exports.serializePath = serializePath;
  exports.serializeURLOrigin = function(url) {
    switch (url.scheme) {
      case "blob": {
        const pathURL = exports.parseURL(serializePath(url));
        if (pathURL === null) {
          return "null";
        }
        if (pathURL.scheme !== "http" && pathURL.scheme !== "https") {
          return "null";
        }
        return exports.serializeURLOrigin(pathURL);
      }
      case "ftp":
      case "http":
      case "https":
      case "ws":
      case "wss":
        return serializeOrigin({
          scheme: url.scheme,
          host: url.host,
          port: url.port
        });
      case "file":
        return "null";
      default:
        return "null";
    }
  };
  exports.basicURLParse = function(input, options2) {
    if (options2 === undefined) {
      options2 = {};
    }
    const usm = new URLStateMachine(input, options2.baseURL, options2.encodingOverride, options2.url, options2.stateOverride);
    if (usm.failure) {
      return null;
    }
    return usm.url;
  };
  exports.setTheUsername = function(url, username) {
    url.username = utf8PercentEncodeString(username, isUserinfoPercentEncode);
  };
  exports.setThePassword = function(url, password) {
    url.password = utf8PercentEncodeString(password, isUserinfoPercentEncode);
  };
  exports.serializeHost = serializeHost;
  exports.cannotHaveAUsernamePasswordPort = cannotHaveAUsernamePasswordPort;
  exports.hasAnOpaquePath = hasAnOpaquePath;
  exports.serializeInteger = function(integer) {
    return String(integer);
  };
  exports.parseURL = function(input, options2) {
    if (options2 === undefined) {
      options2 = {};
    }
    return exports.basicURLParse(input, { baseURL: options2.baseURL, encodingOverride: options2.encodingOverride });
  };
});

// node_modules/whatwg-url/lib/urlencoded.js
var require_urlencoded = __commonJS((exports, module) => {
  var p = function(char) {
    return char.codePointAt(0);
  };
  var parseUrlencoded = function(input) {
    const sequences = strictlySplitByteSequence(input, p("&"));
    const output = [];
    for (const bytes of sequences) {
      if (bytes.length === 0) {
        continue;
      }
      let name, value;
      const indexOfEqual = bytes.indexOf(p("="));
      if (indexOfEqual >= 0) {
        name = bytes.slice(0, indexOfEqual);
        value = bytes.slice(indexOfEqual + 1);
      } else {
        name = bytes;
        value = new Uint8Array(0);
      }
      name = replaceByteInByteSequence(name, 43, 32);
      value = replaceByteInByteSequence(value, 43, 32);
      const nameString = utf8DecodeWithoutBOM(percentDecodeBytes(name));
      const valueString = utf8DecodeWithoutBOM(percentDecodeBytes(value));
      output.push([nameString, valueString]);
    }
    return output;
  };
  var parseUrlencodedString = function(input) {
    return parseUrlencoded(utf8Encode(input));
  };
  var serializeUrlencoded = function(tuples, encodingOverride = undefined) {
    let encoding = "utf-8";
    if (encodingOverride !== undefined) {
      encoding = encodingOverride;
    }
    let output = "";
    for (const [i, tuple] of tuples.entries()) {
      const name = utf8PercentEncodeString(tuple[0], isURLEncodedPercentEncode, true);
      let value = tuple[1];
      if (tuple.length > 2 && tuple[2] !== undefined) {
        if (tuple[2] === "hidden" && name === "_charset_") {
          value = encoding;
        } else if (tuple[2] === "file") {
          value = value.name;
        }
      }
      value = utf8PercentEncodeString(value, isURLEncodedPercentEncode, true);
      if (i !== 0) {
        output += "&";
      }
      output += `${name}=${value}`;
    }
    return output;
  };
  var strictlySplitByteSequence = function(buf, cp) {
    const list2 = [];
    let last2 = 0;
    let i = buf.indexOf(cp);
    while (i >= 0) {
      list2.push(buf.slice(last2, i));
      last2 = i + 1;
      i = buf.indexOf(cp, last2);
    }
    if (last2 !== buf.length) {
      list2.push(buf.slice(last2));
    }
    return list2;
  };
  var replaceByteInByteSequence = function(buf, from, to) {
    let i = buf.indexOf(from);
    while (i >= 0) {
      buf[i] = to;
      i = buf.indexOf(from, i + 1);
    }
    return buf;
  };
  var { utf8Encode, utf8DecodeWithoutBOM } = require_encoding();
  var { percentDecodeBytes, utf8PercentEncodeString, isURLEncodedPercentEncode } = require_percent_encoding();
  module.exports = {
    parseUrlencodedString,
    serializeUrlencoded
  };
});

// node_modules/whatwg-url/lib/Function.js
var require_Function = __commonJS((exports) => {
  var conversions = require_lib2();
  var utils = require_utils2();
  exports.convert = (globalObject, value, { context = "The provided value" } = {}) => {
    if (typeof value !== "function") {
      throw new globalObject.TypeError(context + " is not a function");
    }
    function invokeTheCallbackFunction(...args) {
      const thisArg = utils.tryWrapperForImpl(this);
      let callResult;
      for (let i = 0;i < args.length; i++) {
        args[i] = utils.tryWrapperForImpl(args[i]);
      }
      callResult = Reflect.apply(value, thisArg, args);
      callResult = conversions["any"](callResult, { context, globals: globalObject });
      return callResult;
    }
    invokeTheCallbackFunction.construct = (...args) => {
      for (let i = 0;i < args.length; i++) {
        args[i] = utils.tryWrapperForImpl(args[i]);
      }
      let callResult = Reflect.construct(value, args);
      callResult = conversions["any"](callResult, { context, globals: globalObject });
      return callResult;
    };
    invokeTheCallbackFunction[utils.wrapperSymbol] = value;
    invokeTheCallbackFunction.objectReference = value;
    return invokeTheCallbackFunction;
  };
});

// node_modules/whatwg-url/lib/URLSearchParams-impl.js
var require_URLSearchParams_impl = __commonJS((exports) => {
  var urlencoded = require_urlencoded();
  exports.implementation = class URLSearchParamsImpl {
    constructor(globalObject, constructorArgs, { doNotStripQMark = false }) {
      let init = constructorArgs[0];
      this._list = [];
      this._url = null;
      if (!doNotStripQMark && typeof init === "string" && init[0] === "?") {
        init = init.slice(1);
      }
      if (Array.isArray(init)) {
        for (const pair of init) {
          if (pair.length !== 2) {
            throw new TypeError("Failed to construct 'URLSearchParams': parameter 1 sequence's element does not contain exactly two elements.");
          }
          this._list.push([pair[0], pair[1]]);
        }
      } else if (typeof init === "object" && Object.getPrototypeOf(init) === null) {
        for (const name of Object.keys(init)) {
          const value = init[name];
          this._list.push([name, value]);
        }
      } else {
        this._list = urlencoded.parseUrlencodedString(init);
      }
    }
    _updateSteps() {
      if (this._url !== null) {
        let serializedQuery = urlencoded.serializeUrlencoded(this._list);
        if (serializedQuery === "") {
          serializedQuery = null;
        }
        this._url._url.query = serializedQuery;
        if (serializedQuery === null) {
          this._url._potentiallyStripTrailingSpacesFromAnOpaquePath();
        }
      }
    }
    get size() {
      return this._list.length;
    }
    append(name, value) {
      this._list.push([name, value]);
      this._updateSteps();
    }
    delete(name, value) {
      let i = 0;
      while (i < this._list.length) {
        if (this._list[i][0] === name && (value === undefined || this._list[i][1] === value)) {
          this._list.splice(i, 1);
        } else {
          i++;
        }
      }
      this._updateSteps();
    }
    get(name) {
      for (const tuple of this._list) {
        if (tuple[0] === name) {
          return tuple[1];
        }
      }
      return null;
    }
    getAll(name) {
      const output = [];
      for (const tuple of this._list) {
        if (tuple[0] === name) {
          output.push(tuple[1]);
        }
      }
      return output;
    }
    has(name, value) {
      for (const tuple of this._list) {
        if (tuple[0] === name && (value === undefined || tuple[1] === value)) {
          return true;
        }
      }
      return false;
    }
    set(name, value) {
      let found = false;
      let i = 0;
      while (i < this._list.length) {
        if (this._list[i][0] === name) {
          if (found) {
            this._list.splice(i, 1);
          } else {
            found = true;
            this._list[i][1] = value;
            i++;
          }
        } else {
          i++;
        }
      }
      if (!found) {
        this._list.push([name, value]);
      }
      this._updateSteps();
    }
    sort() {
      this._list.sort((a, b) => {
        if (a[0] < b[0]) {
          return -1;
        }
        if (a[0] > b[0]) {
          return 1;
        }
        return 0;
      });
      this._updateSteps();
    }
    [Symbol.iterator]() {
      return this._list[Symbol.iterator]();
    }
    toString() {
      return urlencoded.serializeUrlencoded(this._list);
    }
  };
});

// node_modules/whatwg-url/lib/URLSearchParams.js
var require_URLSearchParams = __commonJS((exports) => {
  var makeWrapper = function(globalObject, newTarget) {
    let proto;
    if (newTarget !== undefined) {
      proto = newTarget.prototype;
    }
    if (!utils.isObject(proto)) {
      proto = globalObject[ctorRegistrySymbol]["URLSearchParams"].prototype;
    }
    return Object.create(proto);
  };
  var conversions = require_lib2();
  var utils = require_utils2();
  var Function3 = require_Function();
  var newObjectInRealm = utils.newObjectInRealm;
  var implSymbol = utils.implSymbol;
  var ctorRegistrySymbol = utils.ctorRegistrySymbol;
  var interfaceName = "URLSearchParams";
  exports.is = (value) => {
    return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;
  };
  exports.isImpl = (value) => {
    return utils.isObject(value) && value instanceof Impl.implementation;
  };
  exports.convert = (globalObject, value, { context = "The provided value" } = {}) => {
    if (exports.is(value)) {
      return utils.implForWrapper(value);
    }
    throw new globalObject.TypeError(`${context} is not of type 'URLSearchParams'.`);
  };
  exports.createDefaultIterator = (globalObject, target, kind) => {
    const ctorRegistry = globalObject[ctorRegistrySymbol];
    const iteratorPrototype = ctorRegistry["URLSearchParams Iterator"];
    const iterator = Object.create(iteratorPrototype);
    Object.defineProperty(iterator, utils.iterInternalSymbol, {
      value: { target, kind, index: 0 },
      configurable: true
    });
    return iterator;
  };
  exports.create = (globalObject, constructorArgs, privateData) => {
    const wrapper = makeWrapper(globalObject);
    return exports.setup(wrapper, globalObject, constructorArgs, privateData);
  };
  exports.createImpl = (globalObject, constructorArgs, privateData) => {
    const wrapper = exports.create(globalObject, constructorArgs, privateData);
    return utils.implForWrapper(wrapper);
  };
  exports._internalSetup = (wrapper, globalObject) => {
  };
  exports.setup = (wrapper, globalObject, constructorArgs = [], privateData = {}) => {
    privateData.wrapper = wrapper;
    exports._internalSetup(wrapper, globalObject);
    Object.defineProperty(wrapper, implSymbol, {
      value: new Impl.implementation(globalObject, constructorArgs, privateData),
      configurable: true
    });
    wrapper[implSymbol][utils.wrapperSymbol] = wrapper;
    if (Impl.init) {
      Impl.init(wrapper[implSymbol]);
    }
    return wrapper;
  };
  exports.new = (globalObject, newTarget) => {
    const wrapper = makeWrapper(globalObject, newTarget);
    exports._internalSetup(wrapper, globalObject);
    Object.defineProperty(wrapper, implSymbol, {
      value: Object.create(Impl.implementation.prototype),
      configurable: true
    });
    wrapper[implSymbol][utils.wrapperSymbol] = wrapper;
    if (Impl.init) {
      Impl.init(wrapper[implSymbol]);
    }
    return wrapper[implSymbol];
  };
  var exposed = new Set(["Window", "Worker"]);
  exports.install = (globalObject, globalNames) => {
    if (!globalNames.some((globalName) => exposed.has(globalName))) {
      return;
    }
    const ctorRegistry = utils.initCtorRegistry(globalObject);

    class URLSearchParams {
      constructor() {
        const args = [];
        {
          let curArg = arguments[0];
          if (curArg !== undefined) {
            if (utils.isObject(curArg)) {
              if (curArg[Symbol.iterator] !== undefined) {
                if (!utils.isObject(curArg)) {
                  throw new globalObject.TypeError("Failed to construct 'URLSearchParams': parameter 1 sequence is not an iterable object.");
                } else {
                  const V = [];
                  const tmp = curArg;
                  for (let nextItem of tmp) {
                    if (!utils.isObject(nextItem)) {
                      throw new globalObject.TypeError("Failed to construct 'URLSearchParams': parameter 1 sequence's element is not an iterable object.");
                    } else {
                      const V2 = [];
                      const tmp2 = nextItem;
                      for (let nextItem2 of tmp2) {
                        nextItem2 = conversions["USVString"](nextItem2, {
                          context: "Failed to construct 'URLSearchParams': parameter 1 sequence's element's element",
                          globals: globalObject
                        });
                        V2.push(nextItem2);
                      }
                      nextItem = V2;
                    }
                    V.push(nextItem);
                  }
                  curArg = V;
                }
              } else {
                if (!utils.isObject(curArg)) {
                  throw new globalObject.TypeError("Failed to construct 'URLSearchParams': parameter 1 record is not an object.");
                } else {
                  const result = Object.create(null);
                  for (const key of Reflect.ownKeys(curArg)) {
                    const desc = Object.getOwnPropertyDescriptor(curArg, key);
                    if (desc && desc.enumerable) {
                      let typedKey = key;
                      typedKey = conversions["USVString"](typedKey, {
                        context: "Failed to construct 'URLSearchParams': parameter 1 record's key",
                        globals: globalObject
                      });
                      let typedValue = curArg[key];
                      typedValue = conversions["USVString"](typedValue, {
                        context: "Failed to construct 'URLSearchParams': parameter 1 record's value",
                        globals: globalObject
                      });
                      result[typedKey] = typedValue;
                    }
                  }
                  curArg = result;
                }
              }
            } else {
              curArg = conversions["USVString"](curArg, {
                context: "Failed to construct 'URLSearchParams': parameter 1",
                globals: globalObject
              });
            }
          } else {
            curArg = "";
          }
          args.push(curArg);
        }
        return exports.setup(Object.create(new.target.prototype), globalObject, args);
      }
      append(name, value) {
        const esValue = this !== null && this !== undefined ? this : globalObject;
        if (!exports.is(esValue)) {
          throw new globalObject.TypeError("'append' called on an object that is not a valid instance of URLSearchParams.");
        }
        if (arguments.length < 2) {
          throw new globalObject.TypeError(`Failed to execute 'append' on 'URLSearchParams': 2 arguments required, but only ${arguments.length} present.`);
        }
        const args = [];
        {
          let curArg = arguments[0];
          curArg = conversions["USVString"](curArg, {
            context: "Failed to execute 'append' on 'URLSearchParams': parameter 1",
            globals: globalObject
          });
          args.push(curArg);
        }
        {
          let curArg = arguments[1];
          curArg = conversions["USVString"](curArg, {
            context: "Failed to execute 'append' on 'URLSearchParams': parameter 2",
            globals: globalObject
          });
          args.push(curArg);
        }
        return utils.tryWrapperForImpl(esValue[implSymbol].append(...args));
      }
      delete(name) {
        const esValue = this !== null && this !== undefined ? this : globalObject;
        if (!exports.is(esValue)) {
          throw new globalObject.TypeError("'delete' called on an object that is not a valid instance of URLSearchParams.");
        }
        if (arguments.length < 1) {
          throw new globalObject.TypeError(`Failed to execute 'delete' on 'URLSearchParams': 1 argument required, but only ${arguments.length} present.`);
        }
        const args = [];
        {
          let curArg = arguments[0];
          curArg = conversions["USVString"](curArg, {
            context: "Failed to execute 'delete' on 'URLSearchParams': parameter 1",
            globals: globalObject
          });
          args.push(curArg);
        }
        {
          let curArg = arguments[1];
          if (curArg !== undefined) {
            curArg = conversions["USVString"](curArg, {
              context: "Failed to execute 'delete' on 'URLSearchParams': parameter 2",
              globals: globalObject
            });
          }
          args.push(curArg);
        }
        return utils.tryWrapperForImpl(esValue[implSymbol].delete(...args));
      }
      get(name) {
        const esValue = this !== null && this !== undefined ? this : globalObject;
        if (!exports.is(esValue)) {
          throw new globalObject.TypeError("'get' called on an object that is not a valid instance of URLSearchParams.");
        }
        if (arguments.length < 1) {
          throw new globalObject.TypeError(`Failed to execute 'get' on 'URLSearchParams': 1 argument required, but only ${arguments.length} present.`);
        }
        const args = [];
        {
          let curArg = arguments[0];
          curArg = conversions["USVString"](curArg, {
            context: "Failed to execute 'get' on 'URLSearchParams': parameter 1",
            globals: globalObject
          });
          args.push(curArg);
        }
        return esValue[implSymbol].get(...args);
      }
      getAll(name) {
        const esValue = this !== null && this !== undefined ? this : globalObject;
        if (!exports.is(esValue)) {
          throw new globalObject.TypeError("'getAll' called on an object that is not a valid instance of URLSearchParams.");
        }
        if (arguments.length < 1) {
          throw new globalObject.TypeError(`Failed to execute 'getAll' on 'URLSearchParams': 1 argument required, but only ${arguments.length} present.`);
        }
        const args = [];
        {
          let curArg = arguments[0];
          curArg = conversions["USVString"](curArg, {
            context: "Failed to execute 'getAll' on 'URLSearchParams': parameter 1",
            globals: globalObject
          });
          args.push(curArg);
        }
        return utils.tryWrapperForImpl(esValue[implSymbol].getAll(...args));
      }
      has(name) {
        const esValue = this !== null && this !== undefined ? this : globalObject;
        if (!exports.is(esValue)) {
          throw new globalObject.TypeError("'has' called on an object that is not a valid instance of URLSearchParams.");
        }
        if (arguments.length < 1) {
          throw new globalObject.TypeError(`Failed to execute 'has' on 'URLSearchParams': 1 argument required, but only ${arguments.length} present.`);
        }
        const args = [];
        {
          let curArg = arguments[0];
          curArg = conversions["USVString"](curArg, {
            context: "Failed to execute 'has' on 'URLSearchParams': parameter 1",
            globals: globalObject
          });
          args.push(curArg);
        }
        {
          let curArg = arguments[1];
          if (curArg !== undefined) {
            curArg = conversions["USVString"](curArg, {
              context: "Failed to execute 'has' on 'URLSearchParams': parameter 2",
              globals: globalObject
            });
          }
          args.push(curArg);
        }
        return esValue[implSymbol].has(...args);
      }
      set(name, value) {
        const esValue = this !== null && this !== undefined ? this : globalObject;
        if (!exports.is(esValue)) {
          throw new globalObject.TypeError("'set' called on an object that is not a valid instance of URLSearchParams.");
        }
        if (arguments.length < 2) {
          throw new globalObject.TypeError(`Failed to execute 'set' on 'URLSearchParams': 2 arguments required, but only ${arguments.length} present.`);
        }
        const args = [];
        {
          let curArg = arguments[0];
          curArg = conversions["USVString"](curArg, {
            context: "Failed to execute 'set' on 'URLSearchParams': parameter 1",
            globals: globalObject
          });
          args.push(curArg);
        }
        {
          let curArg = arguments[1];
          curArg = conversions["USVString"](curArg, {
            context: "Failed to execute 'set' on 'URLSearchParams': parameter 2",
            globals: globalObject
          });
          args.push(curArg);
        }
        return utils.tryWrapperForImpl(esValue[implSymbol].set(...args));
      }
      sort() {
        const esValue = this !== null && this !== undefined ? this : globalObject;
        if (!exports.is(esValue)) {
          throw new globalObject.TypeError("'sort' called on an object that is not a valid instance of URLSearchParams.");
        }
        return utils.tryWrapperForImpl(esValue[implSymbol].sort());
      }
      toString() {
        const esValue = this !== null && this !== undefined ? this : globalObject;
        if (!exports.is(esValue)) {
          throw new globalObject.TypeError("'toString' called on an object that is not a valid instance of URLSearchParams.");
        }
        return esValue[implSymbol].toString();
      }
      keys() {
        if (!exports.is(this)) {
          throw new globalObject.TypeError("'keys' called on an object that is not a valid instance of URLSearchParams.");
        }
        return exports.createDefaultIterator(globalObject, this, "key");
      }
      values() {
        if (!exports.is(this)) {
          throw new globalObject.TypeError("'values' called on an object that is not a valid instance of URLSearchParams.");
        }
        return exports.createDefaultIterator(globalObject, this, "value");
      }
      entries() {
        if (!exports.is(this)) {
          throw new globalObject.TypeError("'entries' called on an object that is not a valid instance of URLSearchParams.");
        }
        return exports.createDefaultIterator(globalObject, this, "key+value");
      }
      forEach(callback) {
        if (!exports.is(this)) {
          throw new globalObject.TypeError("'forEach' called on an object that is not a valid instance of URLSearchParams.");
        }
        if (arguments.length < 1) {
          throw new globalObject.TypeError("Failed to execute 'forEach' on 'iterable': 1 argument required, but only 0 present.");
        }
        callback = Function3.convert(globalObject, callback, {
          context: "Failed to execute 'forEach' on 'iterable': The callback provided as parameter 1"
        });
        const thisArg = arguments[1];
        let pairs = Array.from(this[implSymbol]);
        let i = 0;
        while (i < pairs.length) {
          const [key, value] = pairs[i].map(utils.tryWrapperForImpl);
          callback.call(thisArg, value, key, this);
          pairs = Array.from(this[implSymbol]);
          i++;
        }
      }
      get size() {
        const esValue = this !== null && this !== undefined ? this : globalObject;
        if (!exports.is(esValue)) {
          throw new globalObject.TypeError("'get size' called on an object that is not a valid instance of URLSearchParams.");
        }
        return esValue[implSymbol]["size"];
      }
    }
    Object.defineProperties(URLSearchParams.prototype, {
      append: { enumerable: true },
      delete: { enumerable: true },
      get: { enumerable: true },
      getAll: { enumerable: true },
      has: { enumerable: true },
      set: { enumerable: true },
      sort: { enumerable: true },
      toString: { enumerable: true },
      keys: { enumerable: true },
      values: { enumerable: true },
      entries: { enumerable: true },
      forEach: { enumerable: true },
      size: { enumerable: true },
      [Symbol.toStringTag]: { value: "URLSearchParams", configurable: true },
      [Symbol.iterator]: { value: URLSearchParams.prototype.entries, configurable: true, writable: true }
    });
    ctorRegistry[interfaceName] = URLSearchParams;
    ctorRegistry["URLSearchParams Iterator"] = Object.create(ctorRegistry["%IteratorPrototype%"], {
      [Symbol.toStringTag]: {
        configurable: true,
        value: "URLSearchParams Iterator"
      }
    });
    utils.define(ctorRegistry["URLSearchParams Iterator"], {
      next() {
        const internal = this && this[utils.iterInternalSymbol];
        if (!internal) {
          throw new globalObject.TypeError("next() called on a value that is not a URLSearchParams iterator object");
        }
        const { target, kind, index } = internal;
        const values = Array.from(target[implSymbol]);
        const len = values.length;
        if (index >= len) {
          return newObjectInRealm(globalObject, { value: undefined, done: true });
        }
        const pair = values[index];
        internal.index = index + 1;
        return newObjectInRealm(globalObject, utils.iteratorResult(pair.map(utils.tryWrapperForImpl), kind));
      }
    });
    Object.defineProperty(globalObject, interfaceName, {
      configurable: true,
      writable: true,
      value: URLSearchParams
    });
  };
  var Impl = require_URLSearchParams_impl();
});

// node_modules/whatwg-url/lib/URL-impl.js
var require_URL_impl = __commonJS((exports) => {
  var usm = require_url_state_machine();
  var urlencoded = require_urlencoded();
  var URLSearchParams = require_URLSearchParams();
  exports.implementation = class URLImpl {
    constructor(globalObject, constructorArgs) {
      const url = constructorArgs[0];
      const base = constructorArgs[1];
      let parsedBase = null;
      if (base !== undefined) {
        parsedBase = usm.basicURLParse(base);
        if (parsedBase === null) {
          throw new TypeError(`Invalid base URL: ${base}`);
        }
      }
      const parsedURL = usm.basicURLParse(url, { baseURL: parsedBase });
      if (parsedURL === null) {
        throw new TypeError(`Invalid URL: ${url}`);
      }
      const query = parsedURL.query !== null ? parsedURL.query : "";
      this._url = parsedURL;
      this._query = URLSearchParams.createImpl(globalObject, [query], { doNotStripQMark: true });
      this._query._url = this;
    }
    static canParse(url, base) {
      let parsedBase = null;
      if (base !== undefined) {
        parsedBase = usm.basicURLParse(base);
        if (parsedBase === null) {
          return false;
        }
      }
      const parsedURL = usm.basicURLParse(url, { baseURL: parsedBase });
      if (parsedURL === null) {
        return false;
      }
      return true;
    }
    get href() {
      return usm.serializeURL(this._url);
    }
    set href(v) {
      const parsedURL = usm.basicURLParse(v);
      if (parsedURL === null) {
        throw new TypeError(`Invalid URL: ${v}`);
      }
      this._url = parsedURL;
      this._query._list.splice(0);
      const { query } = parsedURL;
      if (query !== null) {
        this._query._list = urlencoded.parseUrlencodedString(query);
      }
    }
    get origin() {
      return usm.serializeURLOrigin(this._url);
    }
    get protocol() {
      return `${this._url.scheme}:`;
    }
    set protocol(v) {
      usm.basicURLParse(`${v}:`, { url: this._url, stateOverride: "scheme start" });
    }
    get username() {
      return this._url.username;
    }
    set username(v) {
      if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
        return;
      }
      usm.setTheUsername(this._url, v);
    }
    get password() {
      return this._url.password;
    }
    set password(v) {
      if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
        return;
      }
      usm.setThePassword(this._url, v);
    }
    get host() {
      const url = this._url;
      if (url.host === null) {
        return "";
      }
      if (url.port === null) {
        return usm.serializeHost(url.host);
      }
      return `${usm.serializeHost(url.host)}:${usm.serializeInteger(url.port)}`;
    }
    set host(v) {
      if (usm.hasAnOpaquePath(this._url)) {
        return;
      }
      usm.basicURLParse(v, { url: this._url, stateOverride: "host" });
    }
    get hostname() {
      if (this._url.host === null) {
        return "";
      }
      return usm.serializeHost(this._url.host);
    }
    set hostname(v) {
      if (usm.hasAnOpaquePath(this._url)) {
        return;
      }
      usm.basicURLParse(v, { url: this._url, stateOverride: "hostname" });
    }
    get port() {
      if (this._url.port === null) {
        return "";
      }
      return usm.serializeInteger(this._url.port);
    }
    set port(v) {
      if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
        return;
      }
      if (v === "") {
        this._url.port = null;
      } else {
        usm.basicURLParse(v, { url: this._url, stateOverride: "port" });
      }
    }
    get pathname() {
      return usm.serializePath(this._url);
    }
    set pathname(v) {
      if (usm.hasAnOpaquePath(this._url)) {
        return;
      }
      this._url.path = [];
      usm.basicURLParse(v, { url: this._url, stateOverride: "path start" });
    }
    get search() {
      if (this._url.query === null || this._url.query === "") {
        return "";
      }
      return `?${this._url.query}`;
    }
    set search(v) {
      const url = this._url;
      if (v === "") {
        url.query = null;
        this._query._list = [];
        this._potentiallyStripTrailingSpacesFromAnOpaquePath();
        return;
      }
      const input = v[0] === "?" ? v.substring(1) : v;
      url.query = "";
      usm.basicURLParse(input, { url, stateOverride: "query" });
      this._query._list = urlencoded.parseUrlencodedString(input);
    }
    get searchParams() {
      return this._query;
    }
    get hash() {
      if (this._url.fragment === null || this._url.fragment === "") {
        return "";
      }
      return `#${this._url.fragment}`;
    }
    set hash(v) {
      if (v === "") {
        this._url.fragment = null;
        this._potentiallyStripTrailingSpacesFromAnOpaquePath();
        return;
      }
      const input = v[0] === "#" ? v.substring(1) : v;
      this._url.fragment = "";
      usm.basicURLParse(input, { url: this._url, stateOverride: "fragment" });
    }
    toJSON() {
      return this.href;
    }
    _potentiallyStripTrailingSpacesFromAnOpaquePath() {
      if (!usm.hasAnOpaquePath(this._url)) {
        return;
      }
      if (this._url.fragment !== null) {
        return;
      }
      if (this._url.query !== null) {
        return;
      }
      this._url.path = this._url.path.replace(/\u0020+$/u, "");
    }
  };
});

// node_modules/whatwg-url/lib/URL.js
var require_URL = __commonJS((exports) => {
  var makeWrapper = function(globalObject, newTarget) {
    let proto;
    if (newTarget !== undefined) {
      proto = newTarget.prototype;
    }
    if (!utils.isObject(proto)) {
      proto = globalObject[ctorRegistrySymbol]["URL"].prototype;
    }
    return Object.create(proto);
  };
  var conversions = require_lib2();
  var utils = require_utils2();
  var implSymbol = utils.implSymbol;
  var ctorRegistrySymbol = utils.ctorRegistrySymbol;
  var interfaceName = "URL";
  exports.is = (value) => {
    return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;
  };
  exports.isImpl = (value) => {
    return utils.isObject(value) && value instanceof Impl.implementation;
  };
  exports.convert = (globalObject, value, { context = "The provided value" } = {}) => {
    if (exports.is(value)) {
      return utils.implForWrapper(value);
    }
    throw new globalObject.TypeError(`${context} is not of type 'URL'.`);
  };
  exports.create = (globalObject, constructorArgs, privateData) => {
    const wrapper = makeWrapper(globalObject);
    return exports.setup(wrapper, globalObject, constructorArgs, privateData);
  };
  exports.createImpl = (globalObject, constructorArgs, privateData) => {
    const wrapper = exports.create(globalObject, constructorArgs, privateData);
    return utils.implForWrapper(wrapper);
  };
  exports._internalSetup = (wrapper, globalObject) => {
  };
  exports.setup = (wrapper, globalObject, constructorArgs = [], privateData = {}) => {
    privateData.wrapper = wrapper;
    exports._internalSetup(wrapper, globalObject);
    Object.defineProperty(wrapper, implSymbol, {
      value: new Impl.implementation(globalObject, constructorArgs, privateData),
      configurable: true
    });
    wrapper[implSymbol][utils.wrapperSymbol] = wrapper;
    if (Impl.init) {
      Impl.init(wrapper[implSymbol]);
    }
    return wrapper;
  };
  exports.new = (globalObject, newTarget) => {
    const wrapper = makeWrapper(globalObject, newTarget);
    exports._internalSetup(wrapper, globalObject);
    Object.defineProperty(wrapper, implSymbol, {
      value: Object.create(Impl.implementation.prototype),
      configurable: true
    });
    wrapper[implSymbol][utils.wrapperSymbol] = wrapper;
    if (Impl.init) {
      Impl.init(wrapper[implSymbol]);
    }
    return wrapper[implSymbol];
  };
  var exposed = new Set(["Window", "Worker"]);
  exports.install = (globalObject, globalNames) => {
    if (!globalNames.some((globalName) => exposed.has(globalName))) {
      return;
    }
    const ctorRegistry = utils.initCtorRegistry(globalObject);

    class URL2 {
      constructor(url) {
        if (arguments.length < 1) {
          throw new globalObject.TypeError(`Failed to construct 'URL': 1 argument required, but only ${arguments.length} present.`);
        }
        const args = [];
        {
          let curArg = arguments[0];
          curArg = conversions["USVString"](curArg, {
            context: "Failed to construct 'URL': parameter 1",
            globals: globalObject
          });
          args.push(curArg);
        }
        {
          let curArg = arguments[1];
          if (curArg !== undefined) {
            curArg = conversions["USVString"](curArg, {
              context: "Failed to construct 'URL': parameter 2",
              globals: globalObject
            });
          }
          args.push(curArg);
        }
        return exports.setup(Object.create(new.target.prototype), globalObject, args);
      }
      toJSON() {
        const esValue = this !== null && this !== undefined ? this : globalObject;
        if (!exports.is(esValue)) {
          throw new globalObject.TypeError("'toJSON' called on an object that is not a valid instance of URL.");
        }
        return esValue[implSymbol].toJSON();
      }
      get href() {
        const esValue = this !== null && this !== undefined ? this : globalObject;
        if (!exports.is(esValue)) {
          throw new globalObject.TypeError("'get href' called on an object that is not a valid instance of URL.");
        }
        return esValue[implSymbol]["href"];
      }
      set href(V) {
        const esValue = this !== null && this !== undefined ? this : globalObject;
        if (!exports.is(esValue)) {
          throw new globalObject.TypeError("'set href' called on an object that is not a valid instance of URL.");
        }
        V = conversions["USVString"](V, {
          context: "Failed to set the 'href' property on 'URL': The provided value",
          globals: globalObject
        });
        esValue[implSymbol]["href"] = V;
      }
      toString() {
        const esValue = this;
        if (!exports.is(esValue)) {
          throw new globalObject.TypeError("'toString' called on an object that is not a valid instance of URL.");
        }
        return esValue[implSymbol]["href"];
      }
      get origin() {
        const esValue = this !== null && this !== undefined ? this : globalObject;
        if (!exports.is(esValue)) {
          throw new globalObject.TypeError("'get origin' called on an object that is not a valid instance of URL.");
        }
        return esValue[implSymbol]["origin"];
      }
      get protocol() {
        const esValue = this !== null && this !== undefined ? this : globalObject;
        if (!exports.is(esValue)) {
          throw new globalObject.TypeError("'get protocol' called on an object that is not a valid instance of URL.");
        }
        return esValue[implSymbol]["protocol"];
      }
      set protocol(V) {
        const esValue = this !== null && this !== undefined ? this : globalObject;
        if (!exports.is(esValue)) {
          throw new globalObject.TypeError("'set protocol' called on an object that is not a valid instance of URL.");
        }
        V = conversions["USVString"](V, {
          context: "Failed to set the 'protocol' property on 'URL': The provided value",
          globals: globalObject
        });
        esValue[implSymbol]["protocol"] = V;
      }
      get username() {
        const esValue = this !== null && this !== undefined ? this : globalObject;
        if (!exports.is(esValue)) {
          throw new globalObject.TypeError("'get username' called on an object that is not a valid instance of URL.");
        }
        return esValue[implSymbol]["username"];
      }
      set username(V) {
        const esValue = this !== null && this !== undefined ? this : globalObject;
        if (!exports.is(esValue)) {
          throw new globalObject.TypeError("'set username' called on an object that is not a valid instance of URL.");
        }
        V = conversions["USVString"](V, {
          context: "Failed to set the 'username' property on 'URL': The provided value",
          globals: globalObject
        });
        esValue[implSymbol]["username"] = V;
      }
      get password() {
        const esValue = this !== null && this !== undefined ? this : globalObject;
        if (!exports.is(esValue)) {
          throw new globalObject.TypeError("'get password' called on an object that is not a valid instance of URL.");
        }
        return esValue[implSymbol]["password"];
      }
      set password(V) {
        const esValue = this !== null && this !== undefined ? this : globalObject;
        if (!exports.is(esValue)) {
          throw new globalObject.TypeError("'set password' called on an object that is not a valid instance of URL.");
        }
        V = conversions["USVString"](V, {
          context: "Failed to set the 'password' property on 'URL': The provided value",
          globals: globalObject
        });
        esValue[implSymbol]["password"] = V;
      }
      get host() {
        const esValue = this !== null && this !== undefined ? this : globalObject;
        if (!exports.is(esValue)) {
          throw new globalObject.TypeError("'get host' called on an object that is not a valid instance of URL.");
        }
        return esValue[implSymbol]["host"];
      }
      set host(V) {
        const esValue = this !== null && this !== undefined ? this : globalObject;
        if (!exports.is(esValue)) {
          throw new globalObject.TypeError("'set host' called on an object that is not a valid instance of URL.");
        }
        V = conversions["USVString"](V, {
          context: "Failed to set the 'host' property on 'URL': The provided value",
          globals: globalObject
        });
        esValue[implSymbol]["host"] = V;
      }
      get hostname() {
        const esValue = this !== null && this !== undefined ? this : globalObject;
        if (!exports.is(esValue)) {
          throw new globalObject.TypeError("'get hostname' called on an object that is not a valid instance of URL.");
        }
        return esValue[implSymbol]["hostname"];
      }
      set hostname(V) {
        const esValue = this !== null && this !== undefined ? this : globalObject;
        if (!exports.is(esValue)) {
          throw new globalObject.TypeError("'set hostname' called on an object that is not a valid instance of URL.");
        }
        V = conversions["USVString"](V, {
          context: "Failed to set the 'hostname' property on 'URL': The provided value",
          globals: globalObject
        });
        esValue[implSymbol]["hostname"] = V;
      }
      get port() {
        const esValue = this !== null && this !== undefined ? this : globalObject;
        if (!exports.is(esValue)) {
          throw new globalObject.TypeError("'get port' called on an object that is not a valid instance of URL.");
        }
        return esValue[implSymbol]["port"];
      }
      set port(V) {
        const esValue = this !== null && this !== undefined ? this : globalObject;
        if (!exports.is(esValue)) {
          throw new globalObject.TypeError("'set port' called on an object that is not a valid instance of URL.");
        }
        V = conversions["USVString"](V, {
          context: "Failed to set the 'port' property on 'URL': The provided value",
          globals: globalObject
        });
        esValue[implSymbol]["port"] = V;
      }
      get pathname() {
        const esValue = this !== null && this !== undefined ? this : globalObject;
        if (!exports.is(esValue)) {
          throw new globalObject.TypeError("'get pathname' called on an object that is not a valid instance of URL.");
        }
        return esValue[implSymbol]["pathname"];
      }
      set pathname(V) {
        const esValue = this !== null && this !== undefined ? this : globalObject;
        if (!exports.is(esValue)) {
          throw new globalObject.TypeError("'set pathname' called on an object that is not a valid instance of URL.");
        }
        V = conversions["USVString"](V, {
          context: "Failed to set the 'pathname' property on 'URL': The provided value",
          globals: globalObject
        });
        esValue[implSymbol]["pathname"] = V;
      }
      get search() {
        const esValue = this !== null && this !== undefined ? this : globalObject;
        if (!exports.is(esValue)) {
          throw new globalObject.TypeError("'get search' called on an object that is not a valid instance of URL.");
        }
        return esValue[implSymbol]["search"];
      }
      set search(V) {
        const esValue = this !== null && this !== undefined ? this : globalObject;
        if (!exports.is(esValue)) {
          throw new globalObject.TypeError("'set search' called on an object that is not a valid instance of URL.");
        }
        V = conversions["USVString"](V, {
          context: "Failed to set the 'search' property on 'URL': The provided value",
          globals: globalObject
        });
        esValue[implSymbol]["search"] = V;
      }
      get searchParams() {
        const esValue = this !== null && this !== undefined ? this : globalObject;
        if (!exports.is(esValue)) {
          throw new globalObject.TypeError("'get searchParams' called on an object that is not a valid instance of URL.");
        }
        return utils.getSameObject(this, "searchParams", () => {
          return utils.tryWrapperForImpl(esValue[implSymbol]["searchParams"]);
        });
      }
      get hash() {
        const esValue = this !== null && this !== undefined ? this : globalObject;
        if (!exports.is(esValue)) {
          throw new globalObject.TypeError("'get hash' called on an object that is not a valid instance of URL.");
        }
        return esValue[implSymbol]["hash"];
      }
      set hash(V) {
        const esValue = this !== null && this !== undefined ? this : globalObject;
        if (!exports.is(esValue)) {
          throw new globalObject.TypeError("'set hash' called on an object that is not a valid instance of URL.");
        }
        V = conversions["USVString"](V, {
          context: "Failed to set the 'hash' property on 'URL': The provided value",
          globals: globalObject
        });
        esValue[implSymbol]["hash"] = V;
      }
      static canParse(url) {
        if (arguments.length < 1) {
          throw new globalObject.TypeError(`Failed to execute 'canParse' on 'URL': 1 argument required, but only ${arguments.length} present.`);
        }
        const args = [];
        {
          let curArg = arguments[0];
          curArg = conversions["USVString"](curArg, {
            context: "Failed to execute 'canParse' on 'URL': parameter 1",
            globals: globalObject
          });
          args.push(curArg);
        }
        {
          let curArg = arguments[1];
          if (curArg !== undefined) {
            curArg = conversions["USVString"](curArg, {
              context: "Failed to execute 'canParse' on 'URL': parameter 2",
              globals: globalObject
            });
          }
          args.push(curArg);
        }
        return Impl.implementation.canParse(...args);
      }
    }
    Object.defineProperties(URL2.prototype, {
      toJSON: { enumerable: true },
      href: { enumerable: true },
      toString: { enumerable: true },
      origin: { enumerable: true },
      protocol: { enumerable: true },
      username: { enumerable: true },
      password: { enumerable: true },
      host: { enumerable: true },
      hostname: { enumerable: true },
      port: { enumerable: true },
      pathname: { enumerable: true },
      search: { enumerable: true },
      searchParams: { enumerable: true },
      hash: { enumerable: true },
      [Symbol.toStringTag]: { value: "URL", configurable: true }
    });
    Object.defineProperties(URL2, { canParse: { enumerable: true } });
    ctorRegistry[interfaceName] = URL2;
    Object.defineProperty(globalObject, interfaceName, {
      configurable: true,
      writable: true,
      value: URL2
    });
    if (globalNames.includes("Window")) {
      Object.defineProperty(globalObject, "webkitURL", {
        configurable: true,
        writable: true,
        value: URL2
      });
    }
  };
  var Impl = require_URL_impl();
});

// node_modules/whatwg-url/webidl2js-wrapper.js
var require_webidl2js_wrapper = __commonJS((exports) => {
  var URL2 = require_URL();
  var URLSearchParams = require_URLSearchParams();
  exports.URL = URL2;
  exports.URLSearchParams = URLSearchParams;
});

// node_modules/whatwg-mimetype/lib/utils.js
var require_utils3 = __commonJS((exports) => {
  exports.removeLeadingAndTrailingHTTPWhitespace = (string) => {
    return string.replace(/^[ \t\n\r]+/u, "").replace(/[ \t\n\r]+$/u, "");
  };
  exports.removeTrailingHTTPWhitespace = (string) => {
    return string.replace(/[ \t\n\r]+$/u, "");
  };
  exports.isHTTPWhitespaceChar = (char) => {
    return char === " " || char === "\t" || char === "\n" || char === "\r";
  };
  exports.solelyContainsHTTPTokenCodePoints = (string) => {
    return /^[-!#$%&'*+.^_`|~A-Za-z0-9]*$/u.test(string);
  };
  exports.soleyContainsHTTPQuotedStringTokenCodePoints = (string) => {
    return /^[\t\u0020-\u007E\u0080-\u00FF]*$/u.test(string);
  };
  exports.asciiLowercase = (string) => {
    return string.replace(/[A-Z]/ug, (l) => l.toLowerCase());
  };
  exports.collectAnHTTPQuotedString = (input, position) => {
    let value2 = "";
    position++;
    while (true) {
      while (position < input.length && input[position] !== "\"" && input[position] !== "\\") {
        value2 += input[position];
        ++position;
      }
      if (position >= input.length) {
        break;
      }
      const quoteOrBackslash = input[position];
      ++position;
      if (quoteOrBackslash === "\\") {
        if (position >= input.length) {
          value2 += "\\";
          break;
        }
        value2 += input[position];
        ++position;
      } else {
        break;
      }
    }
    return [value2, position];
  };
});

// node_modules/whatwg-mimetype/lib/mime-type-parameters.js
var require_mime_type_parameters = __commonJS((exports, module) => {
  var {
    asciiLowercase,
    solelyContainsHTTPTokenCodePoints,
    soleyContainsHTTPQuotedStringTokenCodePoints
  } = require_utils3();
  module.exports = class MIMETypeParameters {
    constructor(map) {
      this._map = map;
    }
    get size() {
      return this._map.size;
    }
    get(name2) {
      name2 = asciiLowercase(String(name2));
      return this._map.get(name2);
    }
    has(name2) {
      name2 = asciiLowercase(String(name2));
      return this._map.has(name2);
    }
    set(name2, value2) {
      name2 = asciiLowercase(String(name2));
      value2 = String(value2);
      if (!solelyContainsHTTPTokenCodePoints(name2)) {
        throw new Error(`Invalid MIME type parameter name "${name2}": only HTTP token code points are valid.`);
      }
      if (!soleyContainsHTTPQuotedStringTokenCodePoints(value2)) {
        throw new Error(`Invalid MIME type parameter value "${value2}": only HTTP quoted-string token code points are ` + `valid.`);
      }
      return this._map.set(name2, value2);
    }
    clear() {
      this._map.clear();
    }
    delete(name2) {
      name2 = asciiLowercase(String(name2));
      return this._map.delete(name2);
    }
    forEach(callbackFn, thisArg) {
      this._map.forEach(callbackFn, thisArg);
    }
    keys() {
      return this._map.keys();
    }
    values() {
      return this._map.values();
    }
    entries() {
      return this._map.entries();
    }
    [Symbol.iterator]() {
      return this._map[Symbol.iterator]();
    }
  };
});

// node_modules/whatwg-mimetype/lib/parser.js
var require_parser = __commonJS((exports, module) => {
  var {
    removeLeadingAndTrailingHTTPWhitespace,
    removeTrailingHTTPWhitespace,
    isHTTPWhitespaceChar,
    solelyContainsHTTPTokenCodePoints,
    soleyContainsHTTPQuotedStringTokenCodePoints,
    asciiLowercase,
    collectAnHTTPQuotedString
  } = require_utils3();
  module.exports = (input) => {
    input = removeLeadingAndTrailingHTTPWhitespace(input);
    let position = 0;
    let type = "";
    while (position < input.length && input[position] !== "/") {
      type += input[position];
      ++position;
    }
    if (type.length === 0 || !solelyContainsHTTPTokenCodePoints(type)) {
      return null;
    }
    if (position >= input.length) {
      return null;
    }
    ++position;
    let subtype = "";
    while (position < input.length && input[position] !== ";") {
      subtype += input[position];
      ++position;
    }
    subtype = removeTrailingHTTPWhitespace(subtype);
    if (subtype.length === 0 || !solelyContainsHTTPTokenCodePoints(subtype)) {
      return null;
    }
    const mimeType = {
      type: asciiLowercase(type),
      subtype: asciiLowercase(subtype),
      parameters: new Map
    };
    while (position < input.length) {
      ++position;
      while (isHTTPWhitespaceChar(input[position])) {
        ++position;
      }
      let parameterName = "";
      while (position < input.length && input[position] !== ";" && input[position] !== "=") {
        parameterName += input[position];
        ++position;
      }
      parameterName = asciiLowercase(parameterName);
      if (position < input.length) {
        if (input[position] === ";") {
          continue;
        }
        ++position;
      }
      let parameterValue = null;
      if (input[position] === "\"") {
        [parameterValue, position] = collectAnHTTPQuotedString(input, position);
        while (position < input.length && input[position] !== ";") {
          ++position;
        }
      } else {
        parameterValue = "";
        while (position < input.length && input[position] !== ";") {
          parameterValue += input[position];
          ++position;
        }
        parameterValue = removeTrailingHTTPWhitespace(parameterValue);
        if (parameterValue === "") {
          continue;
        }
      }
      if (parameterName.length > 0 && solelyContainsHTTPTokenCodePoints(parameterName) && soleyContainsHTTPQuotedStringTokenCodePoints(parameterValue) && !mimeType.parameters.has(parameterName)) {
        mimeType.parameters.set(parameterName, parameterValue);
      }
    }
    return mimeType;
  };
});

// node_modules/whatwg-mimetype/lib/serializer.js
var require_serializer = __commonJS((exports, module) => {
  var { solelyContainsHTTPTokenCodePoints } = require_utils3();
  module.exports = (mimeType) => {
    let serialization = `${mimeType.type}/${mimeType.subtype}`;
    if (mimeType.parameters.size === 0) {
      return serialization;
    }
    for (let [name2, value2] of mimeType.parameters) {
      serialization += ";";
      serialization += name2;
      serialization += "=";
      if (!solelyContainsHTTPTokenCodePoints(value2) || value2.length === 0) {
        value2 = value2.replace(/(["\\])/ug, "\\$1");
        value2 = `"${value2}"`;
      }
      serialization += value2;
    }
    return serialization;
  };
});

// node_modules/whatwg-mimetype/lib/mime-type.js
var require_mime_type = __commonJS((exports, module) => {
  var MIMETypeParameters = require_mime_type_parameters();
  var parse = require_parser();
  var serialize = require_serializer();
  var {
    asciiLowercase,
    solelyContainsHTTPTokenCodePoints
  } = require_utils3();
  module.exports = class MIMEType {
    constructor(string) {
      string = String(string);
      const result = parse(string);
      if (result === null) {
        throw new Error(`Could not parse MIME type string "${string}"`);
      }
      this._type = result.type;
      this._subtype = result.subtype;
      this._parameters = new MIMETypeParameters(result.parameters);
    }
    static parse(string) {
      try {
        return new this(string);
      } catch (e) {
        return null;
      }
    }
    get essence() {
      return `${this.type}/${this.subtype}`;
    }
    get type() {
      return this._type;
    }
    set type(value2) {
      value2 = asciiLowercase(String(value2));
      if (value2.length === 0) {
        throw new Error("Invalid type: must be a non-empty string");
      }
      if (!solelyContainsHTTPTokenCodePoints(value2)) {
        throw new Error(`Invalid type ${value2}: must contain only HTTP token code points`);
      }
      this._type = value2;
    }
    get subtype() {
      return this._subtype;
    }
    set subtype(value2) {
      value2 = asciiLowercase(String(value2));
      if (value2.length === 0) {
        throw new Error("Invalid subtype: must be a non-empty string");
      }
      if (!solelyContainsHTTPTokenCodePoints(value2)) {
        throw new Error(`Invalid subtype ${value2}: must contain only HTTP token code points`);
      }
      this._subtype = value2;
    }
    get parameters() {
      return this._parameters;
    }
    toString() {
      return serialize(this);
    }
    isJavaScript({ prohibitParameters = false } = {}) {
      switch (this._type) {
        case "text": {
          switch (this._subtype) {
            case "ecmascript":
            case "javascript":
            case "javascript1.0":
            case "javascript1.1":
            case "javascript1.2":
            case "javascript1.3":
            case "javascript1.4":
            case "javascript1.5":
            case "jscript":
            case "livescript":
            case "x-ecmascript":
            case "x-javascript": {
              return !prohibitParameters || this._parameters.size === 0;
            }
            default: {
              return false;
            }
          }
        }
        case "application": {
          switch (this._subtype) {
            case "ecmascript":
            case "javascript":
            case "x-ecmascript":
            case "x-javascript": {
              return !prohibitParameters || this._parameters.size === 0;
            }
            default: {
              return false;
            }
          }
        }
        default: {
          return false;
        }
      }
    }
    isXML() {
      return this._subtype === "xml" && (this._type === "text" || this._type === "application") || this._subtype.endsWith("+xml");
    }
    isHTML() {
      return this._subtype === "html" && this._type === "text";
    }
  };
});

// src/main.ts
import {Plugin as Plugin3} from "obsidian";
import {getAPI} from "obsidian-dataview";

// src/config-ui/SettingsTab.ts
import {PluginSettingTab} from "obsidian";

// src/utils/Constants.ts
var CLASSIFICATION = [
  "category",
  "category and subcategory",
  "categories",
  "grouped categories"
];
var TAG_HANDLING = [
  "Always move to Frontmatter",
  "Always move to Page",
  "Do not Change"
];
var LOG_LEVELS = [
  "debug",
  "info",
  "warn",
  "error"
];
var DEFAULT_SETTINGS = {
  kinds: {},
  types: {},
  kind_folder: "kind",
  handle_tags: "Do not Change",
  other_type: false,
  default_classification: "category and subcategory",
  page_blocks: [],
  url_patterns: [],
  url_props: [],
  log_level: "warn"
};
var DEFAULT_KIND = {
  name: "",
  classification_type: "category and subcategory",
  filename_date_prefix: false,
  folder_include_cwd: false,
  folder_choices_sub_dirs: false,
  folder_favorite: "",
  show_sub_dirs: false,
  relationships: [],
  tag: "",
  metric_props: [],
  class_inside_kind: false,
  aliases_casing: false,
  aliases_plural: false
};
var FOLDER_DEFAULT = [
  "Favorite folder is default",
  "Current folder is default"
];
var UOM_TYPES = [
  "mass",
  "volume",
  "density",
  "speed",
  "currency",
  "distance",
  "duration_min",
  "duration_sec",
  "duration_ms"
];

// src/config-ui/KindModal.ts
import {Modal} from "obsidian";

// src/helpers/UiBuilder.ts
import {Setting} from "obsidian";

// src/helpers/FolderSuggest.ts
import {TFolder} from "obsidian";

// src/helpers/Suggest.ts
import {Scope} from "obsidian";

// node_modules/@popperjs/core/lib/enums.js
var top = "top";
var bottom = "bottom";
var right = "right";
var left = "left";
var auto = "auto";
var basePlacements = [top, bottom, right, left];
var start = "start";
var end = "end";
var clippingParents = "clippingParents";
var viewport = "viewport";
var popper = "popper";
var reference = "reference";
var variationPlacements = basePlacements.reduce(function(acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []);
var beforeRead = "beforeRead";
var read = "read";
var afterRead = "afterRead";
var beforeMain = "beforeMain";
var main = "main";
var afterMain = "afterMain";
var beforeWrite = "beforeWrite";
var write = "write";
var afterWrite = "afterWrite";
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];
// node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
function getNodeName(element) {
  return element ? (element.nodeName || "").toLowerCase() : null;
}

// node_modules/@popperjs/core/lib/dom-utils/getWindow.js
function getWindow(node) {
  if (node == null) {
    return window;
  }
  if (node.toString() !== "[object Window]") {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }
  return node;
}

// node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
var isElement = function(node) {
  var OwnElement = getWindow(node).Element;
  return node instanceof OwnElement || node instanceof Element;
};
var isHTMLElement = function(node) {
  var OwnElement = getWindow(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
};
var isShadowRoot = function(node) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  var OwnElement = getWindow(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
};

// node_modules/@popperjs/core/lib/modifiers/applyStyles.js
var applyStyles = function(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function(name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element = state.elements[name];
    if (!isHTMLElement(element) || !getNodeName(element)) {
      return;
    }
    Object.assign(element.style, style);
    Object.keys(attributes).forEach(function(name2) {
      var value = attributes[name2];
      if (value === false) {
        element.removeAttribute(name2);
      } else {
        element.setAttribute(name2, value === true ? "" : value);
      }
    });
  });
};
var effect = function(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;
  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }
  return function() {
    Object.keys(state.elements).forEach(function(name) {
      var element = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
      var style = styleProperties.reduce(function(style2, property) {
        style2[property] = "";
        return style2;
      }, {});
      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }
      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function(attribute) {
        element.removeAttribute(attribute);
      });
    });
  };
};
var applyStyles_default = {
  name: "applyStyles",
  enabled: true,
  phase: "write",
  fn: applyStyles,
  effect,
  requires: ["computeStyles"]
};

// node_modules/@popperjs/core/lib/utils/getBasePlacement.js
function getBasePlacement(placement) {
  return placement.split("-")[0];
}

// node_modules/@popperjs/core/lib/utils/math.js
var max = Math.max;
var min = Math.min;
var round = Math.round;

// node_modules/@popperjs/core/lib/utils/userAgent.js
function getUAString() {
  var uaData = navigator.userAgentData;
  if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
    return uaData.brands.map(function(item) {
      return item.brand + "/" + item.version;
    }).join(" ");
  }
  return navigator.userAgent;
}

// node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js
function isLayoutViewport() {
  return !/^((?!chrome|android).)*safari/i.test(getUAString());
}

// node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
function getBoundingClientRect(element, includeScale, isFixedStrategy) {
  if (includeScale === undefined) {
    includeScale = false;
  }
  if (isFixedStrategy === undefined) {
    isFixedStrategy = false;
  }
  var clientRect = element.getBoundingClientRect();
  var scaleX = 1;
  var scaleY = 1;
  if (includeScale && isHTMLElement(element)) {
    scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
    scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
  }
  var _ref = isElement(element) ? getWindow(element) : window, visualViewport = _ref.visualViewport;
  var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
  var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
  var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
  var width = clientRect.width / scaleX;
  var height = clientRect.height / scaleY;
  return {
    width,
    height,
    top: y,
    right: x + width,
    bottom: y + height,
    left: x,
    x,
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
function getLayoutRect(element) {
  var clientRect = getBoundingClientRect(element);
  var width = element.offsetWidth;
  var height = element.offsetHeight;
  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }
  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }
  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width,
    height
  };
}

// node_modules/@popperjs/core/lib/dom-utils/contains.js
function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode();
  if (parent.contains(child)) {
    return true;
  } else if (rootNode && isShadowRoot(rootNode)) {
    var next = child;
    do {
      if (next && parent.isSameNode(next)) {
        return true;
      }
      next = next.parentNode || next.host;
    } while (next);
  }
  return false;
}

// node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
function getComputedStyle(element) {
  return getWindow(element).getComputedStyle(element);
}

// node_modules/@popperjs/core/lib/dom-utils/isTableElement.js
function isTableElement(element) {
  return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
function getDocumentElement(element) {
  return ((isElement(element) ? element.ownerDocument : element.document) || window.document).documentElement;
}

// node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
function getParentNode(element) {
  if (getNodeName(element) === "html") {
    return element;
  }
  return element.assignedSlot || element.parentNode || (isShadowRoot(element) ? element.host : null) || getDocumentElement(element);
}

// node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js
var getTrueOffsetParent = function(element) {
  if (!isHTMLElement(element) || getComputedStyle(element).position === "fixed") {
    return null;
  }
  return element.offsetParent;
};
var getContainingBlock = function(element) {
  var isFirefox = /firefox/i.test(getUAString());
  var isIE = /Trident/i.test(getUAString());
  if (isIE && isHTMLElement(element)) {
    var elementCss = getComputedStyle(element);
    if (elementCss.position === "fixed") {
      return null;
    }
  }
  var currentNode = getParentNode(element);
  if (isShadowRoot(currentNode)) {
    currentNode = currentNode.host;
  }
  while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
    var css = getComputedStyle(currentNode);
    if (css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || ["transform", "perspective"].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === "filter" || isFirefox && css.filter && css.filter !== "none") {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }
  return null;
};
function getOffsetParent(element) {
  var window2 = getWindow(element);
  var offsetParent = getTrueOffsetParent(element);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle(offsetParent).position === "static")) {
    return window2;
  }
  return offsetParent || getContainingBlock(element) || window2;
}

// node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
}

// node_modules/@popperjs/core/lib/utils/within.js
function within(min2, value, max2) {
  return max(min2, min(value, max2));
}
function withinMaxClamp(min2, value, max2) {
  var v = within(min2, value, max2);
  return v > max2 ? max2 : v;
}

// node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}

// node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject(), paddingObject);
}

// node_modules/@popperjs/core/lib/utils/expandToHashMap.js
function expandToHashMap(value, keys) {
  return keys.reduce(function(hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}

// node_modules/@popperjs/core/lib/modifiers/arrow.js
var arrow = function(_ref) {
  var _state$modifiersData$;
  var { state, name, options } = _ref;
  var arrowElement = state.elements.arrow;
  var popperOffsets = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? "height" : "width";
  if (!arrowElement || !popperOffsets) {
    return;
  }
  var paddingObject = toPaddingObject(options.padding, state);
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === "y" ? top : left;
  var maxProp = axis === "y" ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
  var startDiff = popperOffsets[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2;
  var min2 = paddingObject[minProp];
  var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset = within(min2, center, max2);
  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
};
var effect2 = function(_ref2) {
  var { state, options } = _ref2;
  var _options$element = options.element, arrowElement = _options$element === undefined ? "[data-popper-arrow]" : _options$element;
  if (arrowElement == null) {
    return;
  }
  if (typeof arrowElement === "string") {
    arrowElement = state.elements.popper.querySelector(arrowElement);
    if (!arrowElement) {
      return;
    }
  }
  if (!contains(state.elements.popper, arrowElement)) {
    return;
  }
  state.elements.arrow = arrowElement;
};
var toPaddingObject = function toPaddingObject2(padding, state) {
  padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
};
var arrow_default = {
  name: "arrow",
  enabled: true,
  phase: "main",
  fn: arrow,
  effect: effect2,
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};

// node_modules/@popperjs/core/lib/utils/getVariation.js
function getVariation(placement) {
  return placement.split("-")[1];
}

// node_modules/@popperjs/core/lib/modifiers/computeStyles.js
var roundOffsetsByDPR = function(_ref, win) {
  var { x, y } = _ref;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: round(x * dpr) / dpr || 0,
    y: round(y * dpr) / dpr || 0
  };
};
function mapToStyles(_ref2) {
  var _Object$assign2;
  var { popper: popper2, popperRect, placement, variation, offsets, position, gpuAcceleration, adaptive, roundOffsets, isFixed } = _ref2;
  var _offsets$x = offsets.x, x = _offsets$x === undefined ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === undefined ? 0 : _offsets$y;
  var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
    x,
    y
  }) : {
    x,
    y
  };
  x = _ref3.x;
  y = _ref3.y;
  var hasX = offsets.hasOwnProperty("x");
  var hasY = offsets.hasOwnProperty("y");
  var sideX = left;
  var sideY = top;
  var win = window;
  if (adaptive) {
    var offsetParent = getOffsetParent(popper2);
    var heightProp = "clientHeight";
    var widthProp = "clientWidth";
    if (offsetParent === getWindow(popper2)) {
      offsetParent = getDocumentElement(popper2);
      if (getComputedStyle(offsetParent).position !== "static" && position === "absolute") {
        heightProp = "scrollHeight";
        widthProp = "scrollWidth";
      }
    }
    offsetParent = offsetParent;
    if (placement === top || (placement === left || placement === right) && variation === end) {
      sideY = bottom;
      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : offsetParent[heightProp];
      y -= offsetY - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }
    if (placement === left || (placement === top || placement === bottom) && variation === end) {
      sideX = right;
      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : offsetParent[widthProp];
      x -= offsetX - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }
  var commonStyles = Object.assign({
    position
  }, adaptive && unsetSides);
  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
    x,
    y
  }, getWindow(popper2)) : {
    x,
    y
  };
  x = _ref4.x;
  y = _ref4.y;
  if (gpuAcceleration) {
    var _Object$assign;
    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }
  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
}
var computeStyles = function(_ref5) {
  var { state, options } = _ref5;
  var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === undefined ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === undefined ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === undefined ? true : _options$roundOffsets;
  var commonStyles = {
    placement: getBasePlacement(state.placement),
    variation: getVariation(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration,
    isFixed: state.options.strategy === "fixed"
  };
  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive,
      roundOffsets
    })));
  }
  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: "absolute",
      adaptive: false,
      roundOffsets
    })));
  }
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-placement": state.placement
  });
};
var unsetSides = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
var computeStyles_default = {
  name: "computeStyles",
  enabled: true,
  phase: "beforeWrite",
  fn: computeStyles,
  data: {}
};

// node_modules/@popperjs/core/lib/modifiers/eventListeners.js
var effect3 = function(_ref) {
  var { state, instance, options } = _ref;
  var _options$scroll = options.scroll, scroll = _options$scroll === undefined ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === undefined ? true : _options$resize;
  var window2 = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
  if (scroll) {
    scrollParents.forEach(function(scrollParent) {
      scrollParent.addEventListener("scroll", instance.update, passive);
    });
  }
  if (resize) {
    window2.addEventListener("resize", instance.update, passive);
  }
  return function() {
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.removeEventListener("scroll", instance.update, passive);
      });
    }
    if (resize) {
      window2.removeEventListener("resize", instance.update, passive);
    }
  };
};
var passive = {
  passive: true
};
var eventListeners_default = {
  name: "eventListeners",
  enabled: true,
  phase: "write",
  fn: function fn() {
  },
  effect: effect3,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
var hash = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function(matched) {
    return hash[matched];
  });
}

// node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
var hash2 = {
  start: "end",
  end: "start"
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function(matched) {
    return hash2[matched];
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
function getWindowScroll(node) {
  var win = getWindow(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft,
    scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
}

// node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js
function getViewportRect(element, strategy) {
  var win = getWindow(element);
  var html = getDocumentElement(element);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    var layoutViewport = isLayoutViewport();
    if (layoutViewport || !layoutViewport && strategy === "fixed") {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x + getWindowScrollBarX(element),
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js
function getDocumentRect(element) {
  var _element$ownerDocumen;
  var html = getDocumentElement(element);
  var winScroll = getWindowScroll(element);
  var body = (_element$ownerDocumen = element.ownerDocument) == null ? undefined : _element$ownerDocumen.body;
  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
  var y = -winScroll.scrollTop;
  if (getComputedStyle(body || html).direction === "rtl") {
    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
function isScrollParent(element) {
  var _getComputedStyle = getComputedStyle(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

// node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js
function getScrollParent(node) {
  if (["html", "body", "#document"].indexOf(getNodeName(node)) >= 0) {
    return node.ownerDocument.body;
  }
  if (isHTMLElement(node) && isScrollParent(node)) {
    return node;
  }
  return getScrollParent(getParentNode(node));
}

// node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js
function listScrollParents(element, list) {
  var _element$ownerDocumen;
  if (list === undefined) {
    list = [];
  }
  var scrollParent = getScrollParent(element);
  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? undefined : _element$ownerDocumen.body);
  var win = getWindow(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : updatedList.concat(listScrollParents(getParentNode(target)));
}

// node_modules/@popperjs/core/lib/utils/rectToClientRect.js
function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js
var getInnerBoundingClientRect = function(element, strategy) {
  var rect = getBoundingClientRect(element, false, strategy === "fixed");
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
};
var getClientRectFromMixedType = function(element, clippingParent, strategy) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
};
var getClippingParents = function(element) {
  var clippingParents2 = listScrollParents(getParentNode(element));
  var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle(element).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
  if (!isElement(clipperElement)) {
    return [];
  }
  return clippingParents2.filter(function(clippingParent) {
    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
  });
};
function getClippingRect(element, boundary, rootBoundary, strategy) {
  var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
  var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents2[0];
  var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent, strategy));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}

// node_modules/@popperjs/core/lib/utils/computeOffsets.js
function computeOffsets(_ref) {
  var { reference: reference2, element, placement } = _ref;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference2.x + reference2.width / 2 - element.width / 2;
  var commonY = reference2.y + reference2.height / 2 - element.height / 2;
  var offsets;
  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference2.y - element.height
      };
      break;
    case bottom:
      offsets = {
        x: commonX,
        y: reference2.y + reference2.height
      };
      break;
    case right:
      offsets = {
        x: reference2.x + reference2.width,
        y: commonY
      };
      break;
    case left:
      offsets = {
        x: reference2.x - element.width,
        y: commonY
      };
      break;
    default:
      offsets = {
        x: reference2.x,
        y: reference2.y
      };
  }
  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
  if (mainAxis != null) {
    var len = mainAxis === "y" ? "height" : "width";
    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
        break;
      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
        break;
      default:
    }
  }
  return offsets;
}

// node_modules/@popperjs/core/lib/utils/detectOverflow.js
function detectOverflow(state, options) {
  if (options === undefined) {
    options = {};
  }
  var _options = options, _options$placement = _options.placement, placement = _options$placement === undefined ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === undefined ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === undefined ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === undefined ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === undefined ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === undefined ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === undefined ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var popperRect = state.rects.popper;
  var element = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
  var referenceClientRect = getBoundingClientRect(state.elements.reference);
  var popperOffsets = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: "absolute",
    placement
  });
  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset;
  if (elementContext === popper && offsetData) {
    var offset = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function(key) {
      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
      overflowOffsets[key] += offset[axis] * multiply;
    });
  }
  return overflowOffsets;
}

// node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js
function computeAutoPlacement(state, options) {
  if (options === undefined) {
    options = {};
  }
  var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === undefined ? placements : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements2 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
    return getVariation(placement2) === variation;
  }) : basePlacements;
  var allowedPlacements = placements2.filter(function(placement2) {
    return allowedAutoPlacements.indexOf(placement2) >= 0;
  });
  if (allowedPlacements.length === 0) {
    allowedPlacements = placements2;
  }
  var overflows = allowedPlacements.reduce(function(acc, placement2) {
    acc[placement2] = detectOverflow(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding
    })[getBasePlacement(placement2)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function(a, b) {
    return overflows[a] - overflows[b];
  });
}

// node_modules/@popperjs/core/lib/modifiers/flip.js
var getExpandedFallbackPlacements = function(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }
  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
};
var flip = function(_ref) {
  var { state, options, name } = _ref;
  if (state.modifiersData[name]._skip) {
    return;
  }
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === undefined ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === undefined ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === undefined ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
    return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding,
      flipVariations,
      allowedAutoPlacements
    }) : placement2);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = new Map;
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements2[0];
  for (var i = 0;i < placements2.length; i++) {
    var placement = placements2[i];
    var _basePlacement = getBasePlacement(placement);
    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? "width" : "height";
    var overflow = detectOverflow(state, {
      placement,
      boundary,
      rootBoundary,
      altBoundary,
      padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }
    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks = [];
    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }
    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }
    if (checks.every(function(check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }
    checksMap.set(placement, checks);
  }
  if (makeFallbackChecks) {
    var numberOfChecks = flipVariations ? 3 : 1;
    var _loop = function _loop(_i2) {
      var fittingPlacement = placements2.find(function(placement2) {
        var checks2 = checksMap.get(placement2);
        if (checks2) {
          return checks2.slice(0, _i2).every(function(check) {
            return check;
          });
        }
      });
      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };
    for (var _i = numberOfChecks;_i > 0; _i--) {
      var _ret = _loop(_i);
      if (_ret === "break")
        break;
    }
  }
  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
};
var flip_default = {
  name: "flip",
  enabled: true,
  phase: "main",
  fn: flip,
  requiresIfExists: ["offset"],
  data: {
    _skip: false
  }
};

// node_modules/@popperjs/core/lib/modifiers/hide.js
var getSideOffsets = function(overflow, rect, preventedOffsets) {
  if (preventedOffsets === undefined) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }
  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
};
var isAnySideFullyClipped = function(overflow) {
  return [top, right, bottom, left].some(function(side) {
    return overflow[side] >= 0;
  });
};
var hide = function(_ref) {
  var { state, name } = _ref;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: "reference"
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets,
    popperEscapeOffsets,
    isReferenceHidden,
    hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-reference-hidden": isReferenceHidden,
    "data-popper-escaped": hasPopperEscaped
  });
};
var hide_default = {
  name: "hide",
  enabled: true,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
  fn: hide
};

// node_modules/@popperjs/core/lib/modifiers/offset.js
function distanceAndSkiddingToXY(placement, rects, offset) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
  var _ref = typeof offset === "function" ? offset(Object.assign({}, rects, {
    placement
  })) : offset, skidding = _ref[0], distance = _ref[1];
  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}
var offset = function(_ref2) {
  var { state, options, name } = _ref2;
  var _options$offset = options.offset, offset2 = _options$offset === undefined ? [0, 0] : _options$offset;
  var data = placements.reduce(function(acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }
  state.modifiersData[name] = data;
};
var offset_default = {
  name: "offset",
  enabled: true,
  phase: "main",
  requires: ["popperOffsets"],
  fn: offset
};

// node_modules/@popperjs/core/lib/modifiers/popperOffsets.js
var popperOffsets = function(_ref) {
  var { state, name } = _ref;
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: "absolute",
    placement: state.placement
  });
};
var popperOffsets_default = {
  name: "popperOffsets",
  enabled: true,
  phase: "read",
  fn: popperOffsets,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getAltAxis.js
function getAltAxis(axis) {
  return axis === "x" ? "y" : "x";
}

// node_modules/@popperjs/core/lib/modifiers/preventOverflow.js
var preventOverflow = function(_ref) {
  var { state, options, name } = _ref;
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === undefined ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === undefined ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === undefined ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === undefined ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary,
    rootBoundary,
    padding,
    altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
    mainAxis: tetherOffsetValue,
    altAxis: tetherOffsetValue
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, tetherOffsetValue);
  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
  var data = {
    x: 0,
    y: 0
  };
  if (!popperOffsets2) {
    return;
  }
  if (checkMainAxis) {
    var _offsetModifierState$;
    var mainSide = mainAxis === "y" ? top : left;
    var altSide = mainAxis === "y" ? bottom : right;
    var len = mainAxis === "y" ? "height" : "width";
    var offset2 = popperOffsets2[mainAxis];
    var min2 = offset2 + overflow[mainSide];
    var max2 = offset2 - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide];
    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? undefined : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
    var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = offset2 + maxOffset - offsetModifierValue;
    var preventedOffset = within(tether ? min(min2, tetherMin) : min2, offset2, tether ? max(max2, tetherMax) : max2);
    popperOffsets2[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset2;
  }
  if (checkAltAxis) {
    var _offsetModifierState$2;
    var _mainSide = mainAxis === "x" ? top : left;
    var _altSide = mainAxis === "x" ? bottom : right;
    var _offset = popperOffsets2[altAxis];
    var _len = altAxis === "y" ? "height" : "width";
    var _min = _offset + overflow[_mainSide];
    var _max = _offset - overflow[_altSide];
    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? undefined : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
    popperOffsets2[altAxis] = _preventedOffset;
    data[altAxis] = _preventedOffset - _offset;
  }
  state.modifiersData[name] = data;
};
var preventOverflow_default = {
  name: "preventOverflow",
  enabled: true,
  phase: "main",
  fn: preventOverflow,
  requiresIfExists: ["offset"]
};
// node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js
function getNodeScroll(node) {
  if (node === getWindow(node) || !isHTMLElement(node)) {
    return getWindowScroll(node);
  } else {
    return getHTMLElementScroll(node);
  }
}

// node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js
var isElementScaled = function(element) {
  var rect = element.getBoundingClientRect();
  var scaleX = round(rect.width) / element.offsetWidth || 1;
  var scaleY = round(rect.height) / element.offsetHeight || 1;
  return scaleX !== 1 || scaleY !== 1;
};
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === undefined) {
    isFixed = false;
  }
  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent, true);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

// node_modules/@popperjs/core/lib/utils/orderModifiers.js
var order = function(modifiers) {
  var map = new Map;
  var visited = new Set;
  var result = [];
  modifiers.forEach(function(modifier) {
    map.set(modifier.name, modifier);
  });
  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function(dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);
        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }
  modifiers.forEach(function(modifier) {
    if (!visited.has(modifier.name)) {
      sort(modifier);
    }
  });
  return result;
};
function orderModifiers(modifiers) {
  var orderedModifiers = order(modifiers);
  return modifierPhases.reduce(function(acc, phase) {
    return acc.concat(orderedModifiers.filter(function(modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}

// node_modules/@popperjs/core/lib/utils/debounce.js
function debounce(fn2) {
  var pending;
  return function() {
    if (!pending) {
      pending = new Promise(function(resolve) {
        Promise.resolve().then(function() {
          pending = undefined;
          resolve(fn2());
        });
      });
    }
    return pending;
  };
}

// node_modules/@popperjs/core/lib/utils/mergeByName.js
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function(merged2, current) {
    var existing = merged2[current.name];
    merged2[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged2;
  }, {});
  return Object.keys(merged).map(function(key) {
    return merged[key];
  });
}

// node_modules/@popperjs/core/lib/createPopper.js
var areValidElements = function() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0;_key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return !args.some(function(element) {
    return !(element && typeof element.getBoundingClientRect === "function");
  });
};
function popperGenerator(generatorOptions) {
  if (generatorOptions === undefined) {
    generatorOptions = {};
  }
  var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers = _generatorOptions$def === undefined ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === undefined ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper(reference2, popper2, options) {
    if (options === undefined) {
      options = defaultOptions;
    }
    var state = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference2,
        popper: popper2
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state,
      setOptions: function setOptions(setOptionsAction) {
        var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options2);
        state.scrollParents = {
          reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
          popper: listScrollParents(popper2)
        };
        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers)));
        state.orderedModifiers = orderedModifiers.filter(function(m) {
          return m.enabled;
        });
        runModifierEffects();
        return instance.update();
      },
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }
        var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
        if (!areValidElements(reference3, popper3)) {
          return;
        }
        state.rects = {
          reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
          popper: getLayoutRect(popper3)
        };
        state.reset = false;
        state.placement = state.options.placement;
        state.orderedModifiers.forEach(function(modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        for (var index = 0;index < state.orderedModifiers.length; index++) {
          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }
          var _state$orderedModifie = state.orderedModifiers[index], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === undefined ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
          if (typeof fn2 === "function") {
            state = fn2({
              state,
              options: _options,
              name,
              instance
            }) || state;
          }
        }
      },
      update: debounce(function() {
        return new Promise(function(resolve) {
          instance.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };
    if (!areValidElements(reference2, popper2)) {
      return instance;
    }
    instance.setOptions(options).then(function(state2) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state2);
      }
    });
    function runModifierEffects() {
      state.orderedModifiers.forEach(function(_ref) {
        var { name, options: _ref$options } = _ref, options2 = _ref$options === undefined ? {} : _ref$options, effect4 = _ref.effect;
        if (typeof effect4 === "function") {
          var cleanupFn = effect4({
            state,
            name,
            instance,
            options: options2
          });
          var noopFn = function noopFn() {
          };
          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }
    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function(fn2) {
        return fn2();
      });
      effectCleanupFns = [];
    }
    return instance;
  };
}
var DEFAULT_OPTIONS = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};

// node_modules/@popperjs/core/lib/popper.js
var defaultModifiers = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];
var createPopper2 = popperGenerator({
  defaultModifiers
});
// src/helpers/Suggest.ts
var wrapAround = (value, size) => {
  return (value % size + size) % size;
};

class Suggest {
  owner;
  values;
  suggestions;
  selectedItem;
  containerEl;
  constructor(owner, containerEl, scope) {
    this.owner = owner;
    this.containerEl = containerEl;
    containerEl.on("click", ".suggestion-item", this.onSuggestionClick.bind(this));
    containerEl.on("mousemove", ".suggestion-item", this.onSuggestionMouseover.bind(this));
    scope.register([], "ArrowUp", (event) => {
      if (!event.isComposing) {
        this.setSelectedItem(this.selectedItem - 1, true);
        return false;
      }
    });
    scope.register([], "ArrowDown", (event) => {
      if (!event.isComposing) {
        this.setSelectedItem(this.selectedItem + 1, true);
        return false;
      }
    });
    scope.register([], "Enter", (event) => {
      if (!event.isComposing) {
        this.useSelectedItem(event);
        return false;
      }
    });
  }
  onSuggestionClick(event, el) {
    event.preventDefault();
    const item = this.suggestions.indexOf(el);
    this.setSelectedItem(item, false);
    this.useSelectedItem(event);
  }
  onSuggestionMouseover(_event, el) {
    const item = this.suggestions.indexOf(el);
    this.setSelectedItem(item, false);
  }
  setSuggestions(values) {
    this.containerEl.empty();
    const suggestionEls = [];
    values.forEach((value) => {
      const suggestionEl = this.containerEl.createDiv("suggestion-item");
      this.owner.renderSuggestion(value, suggestionEl);
      suggestionEls.push(suggestionEl);
    });
    this.values = values;
    this.suggestions = suggestionEls;
    this.setSelectedItem(0, false);
  }
  useSelectedItem(event) {
    const currentValue = this.values[this.selectedItem];
    if (currentValue) {
      this.owner.selectSuggestion(currentValue, event);
    }
  }
  setSelectedItem(selectedIndex, scrollIntoView) {
    const normalizedIndex = wrapAround(selectedIndex, this.suggestions.length);
    const prevSelectedSuggestion = this.suggestions[this.selectedItem];
    const selectedSuggestion = this.suggestions[normalizedIndex];
    prevSelectedSuggestion?.removeClass("is-selected");
    selectedSuggestion?.addClass("is-selected");
    this.selectedItem = normalizedIndex;
    if (scrollIntoView) {
      selectedSuggestion.scrollIntoView(false);
    }
  }
}

class TextInputSuggest {
  inputEl;
  popper;
  scope;
  suggestEl;
  suggest;
  constructor(inputEl) {
    this.inputEl = inputEl;
    this.scope = new Scope;
    this.suggestEl = createDiv("suggestion-container");
    const suggestion = this.suggestEl.createDiv("suggestion");
    this.suggest = new Suggest(this, suggestion, this.scope);
    this.scope.register([], "Escape", this.close.bind(this));
    this.inputEl.addEventListener("input", this.onInputChanged.bind(this));
    this.inputEl.addEventListener("focus", this.onInputChanged.bind(this));
    this.inputEl.addEventListener("blur", this.close.bind(this));
    this.suggestEl.on("mousedown", ".suggestion-container", (event) => {
      event.preventDefault();
    });
  }
  onInputChanged() {
    const inputStr = this.inputEl.value;
    const suggestions = this.getSuggestions(inputStr);
    if (!suggestions) {
      this.close();
      return;
    }
    if (suggestions.length > 0) {
      this.suggest.setSuggestions(suggestions);
      this.open(app.dom.appContainerEl, this.inputEl);
    } else {
      this.close();
    }
  }
  open(container, inputEl) {
    app.keymap.pushScope(this.scope);
    container.appendChild(this.suggestEl);
    this.popper = createPopper2(inputEl, this.suggestEl, {
      placement: "bottom-start",
      modifiers: [
        {
          name: "sameWidth",
          enabled: true,
          fn: ({ state, instance }) => {
            const targetWidth = `${state.rects.reference.width}px`;
            if (state.styles.popper.width === targetWidth) {
              return;
            }
            state.styles.popper.width = targetWidth;
            instance.update();
          },
          phase: "beforeWrite",
          requires: ["computeStyles"]
        }
      ]
    });
  }
  close() {
    app.keymap.popScope(this.scope);
    this.suggest.setSuggestions([]);
    if (this.popper)
      this.popper.destroy();
    this.suggestEl.detach();
  }
}

// src/helpers/FolderSuggest.ts
class FolderSuggest extends TextInputSuggest {
  getSuggestions(inputStr) {
    const abstractFiles = app.vault.getAllLoadedFiles();
    const folders = [];
    const lowerCaseInputStr = inputStr.toLowerCase();
    abstractFiles.forEach((folder) => {
      if (folder instanceof TFolder && folder.path.toLowerCase().contains(lowerCaseInputStr)) {
        folders.push(folder);
      }
    });
    return folders;
  }
  renderSuggestion(file, el) {
    el.setText(file.path);
  }
  selectSuggestion(file) {
    this.inputEl.value = file.path;
    this.inputEl.trigger("input");
    this.close();
  }
}

// src/utils/logging.ts
var msg = (list) => list.find((i) => typeof i === "string");
var trunc = (s) => typeof s === "string" ? s.length > 12 ? `${s.slice(0, 12).trim()}...` : `${s}` : "";
var debug = (level) => (...args) => {
  if (level !== "debug") {
    return;
  }
  console.groupCollapsed(`obsidian-kind-model (dbg: ${trunc(msg(args))})`);
  args.forEach((a) => {
    if (typeof a === "function") {
      console.log(a());
    } else if (typeof a === "object" && a !== null) {
      Object.keys(a).map((k) => console.info({ [k]: a[k] }));
    } else {
      console.log(a);
    }
  });
  console.groupEnd();
};
var info = (level) => (...args) => {
  if (["debug"].includes(level)) {
    return;
  }
  console.groupCollapsed(`obsidian-kind-model (info: ${trunc(msg(args))})`);
  args.forEach((a) => {
    if (typeof a === "function") {
      console.info(a);
    } else if (typeof a === "object" && a !== null) {
      Object.keys(a).map((k) => console.info({ [k]: a[k] }));
    } else {
      console.info(a);
    }
  });
  console.groupEnd();
};
var warn = (level) => (...args) => {
  if (["error"].includes(level)) {
    return;
  }
  console.group("obsidian-kind-model");
  args.forEach((a) => {
    console.warn(a);
  });
  console.groupEnd();
};
var error = (level) => (...args) => {
  console.groupEnd();
  new Notification(`obsidian-kind-model (Error): ${msg(args) || ""}`, { body: "see developer console for more details" });

  class KindModelError extends Error {
    kind;
    constructor(msg2) {
      super(msg2);
    }
  }
  throw new KindModelError(msg(args) || "Kind Model error");
};
var logger = (level, context) => {
  const api = {
    level,
    debug: debug(level),
    info: info(level),
    warn: warn(level),
    error: error(level)
  };
  if (context) {
    for (const k of Object.keys(api)) {
      if (k !== "level" && Object.keys(context).includes(k)) {
        context[k] = api[k];
      }
    }
  }
  return api;
};

// src/helpers/UiBuilder.ts
var isNotNull = (prop, base) => {
  return prop === null ? false : (prop in base) ? true : false;
};
var resolve = (val) => typeof val === "function" ? val() : val;
var contextApi = (el, base, global_opt, log_level) => ({
  sectionHeading: (heading, sub_text) => {
    const color = "rgba(15, 117, 224, .75) ";
    const headingText = createEl("h2", {
      cls: "section-header",
      text: heading,
      attr: { style: `font-size: larger; padding-bottom: 0; margin-bottom: 0; margin-top: 0.75rem` }
    });
    const sub_text_el = sub_text ? createEl("div", {
      cls: "section-sub-text",
      text: sub_text,
      attr: { style: `font-size: smaller; border-left: 2px solid ${color}; padding-left: 8px;` }
    }) : undefined;
    const sectionInput = createEl("div", {
      cls: "input-section",
      text: "",
      attr: { style: `border-left: 2px solid ${color}; padding-left: 8px; ` }
    });
    const section_heading = createEl("div").appendChild(headingText);
    if (sub_text_el) {
      section_heading.appendChild(sub_text_el);
    }
    section_heading.appendChild(sectionInput);
    const bottom_pad = "padding-bottom: 0.25rem";
    const h = el.createEl("h2", { text: heading, attr: { style: `font-size: larger; padding-top: 0.75rem"; ${sub_text ? "" : bottom_pad}` } });
    let p;
    if (sub_text) {
      p = el.createEl("p", { cls: "settings-desc", text: sub_text, attr: { style: `${bottom_pad}; font-size: smaller` } });
    }
    el.appendChild(sectionInput);
    const fn2 = inputRow(sectionInput, base, global_opt, log_level);
    fn2["section"] = heading;
    return fn2;
  },
  iterateOver: (prop, cb) => {
    const settings = [];
    const container = base[prop];
    return settings;
  }
});
var componentApi = (el, base, global_opt, log_level) => (name, desc, prop) => (s) => {
  const { debug: debug2, info: info2, warn: warn2, error: error2 } = logger(log_level);
  return {
    addDropdown(choices) {
      s.addDropdown((dd) => {
        const isKeyValueDict = !Array.isArray(choices);
        for (const opt of isKeyValueDict ? Object.keys(choices) : choices) {
          const value = isKeyValueDict ? String(choices[opt]) : opt;
          dd.addOption(value, opt);
          if (isNotNull(prop, base) && value === base[prop]) {
            dd.setValue(value);
          }
        }
        dd.onChange((v) => {
          if (isNotNull(prop, base)) {
            const prior_value = base[prop];
            base[prop] = isKeyValueDict ? choices[v] : v;
            debug2(`Updating ${name} dropdown`, `new value is:\n${JSON.stringify(v, null, 2)}`, `prior value was:\n${JSON.stringify(prior_value, null, 2)}`);
            if (global_opt?.saveState && prop !== null) {
              if (typeof global_opt?.saveState !== "function") {
                error2(`saveState property was passed into UiBuilder but it's type is "${typeof global_opt?.saveState}" instead of being a function!`);
              } else {
                info2(`auto save`, `the dropdown "${String(prop)}" triggered saving state`, `the current state is: \n${JSON.stringify(base, null, 2)}`);
                global_opt.saveState();
              }
            } else {
              debug2(`no auto save: state changed on "${name}" property but state is not automatically save after state changes`);
            }
            s.setName(resolve(name));
            s.setDesc(resolve(desc));
          } else {
            debug2(`the dropdown "${name}" changed state but no property was set to record this.`, "this may be ok but is typically an error", `the new state is now: ${v}`);
          }
        });
      });
      return componentApi(el, base, global_opt, log_level)(name, desc, prop)(s);
    },
    addToggleSwitch(opt = {}) {
      s.addToggle((t) => {
        if (isNotNull(prop, base)) {
          t.setValue(base[prop]);
        }
        t.onChange((v) => {
          if (isNotNull(prop, base)) {
            s.setName(resolve(name));
            s.setDesc(resolve(desc));
            base[prop] = v;
            if (global_opt?.saveState && prop !== null) {
              if (typeof global_opt?.saveState !== "function") {
                error2(`saveState property was passed into UiBuilder but it's type is "${typeof global_opt?.saveState}" instead of being a function!`);
              }
              info2("auto save", `the toggle switch for "${prop}" detected a change`, `the new value for "${prop}" is: ${v}`);
              global_opt.saveState();
            } else {
              debug2(`no auto save: state changed on "${name}" on property`);
            }
          }
          if (opt.refreshDomOnChange) {
            warn2("do not know how to refresh DOM yet");
          }
        });
      });
      return componentApi(el, base, global_opt, log_level)(name, desc, prop)(s);
    },
    addTextInput(opt = {}) {
      s.addText((t) => {
        if (isNotNull(prop, base)) {
          t.setValue(base[prop]);
        }
        t.onChange((v) => {
          if (isNotNull(prop, base)) {
            base[prop] = v;
          } else {
            debug2(`state changed on the property "${name}" but because "prop" was null it will not be recorded.`);
          }
          s.setName(resolve(name));
          s.setDesc(resolve(desc));
          if (opt.refreshDomOnChange) {
            warn2("do not know how to refresh DOM yet");
          }
          if (global_opt?.saveState && prop !== null) {
            if (typeof global_opt?.saveState !== "function") {
              error2(`saveState property was passed into UiBuilder but it's type is "${typeof global_opt?.saveState}" instead of being a function!`);
            }
            debug2(`toggle switch for "${String(prop)}" saving state`);
            global_opt.saveState();
          } else {
            debug2(`no auto save: state changed on "${name}" on property`);
          }
        });
      });
      return componentApi(el, base, global_opt, log_level)(name, desc, prop)(s);
    },
    addFolderSearch(opt = {}) {
      s.addSearch((t) => {
        new FolderSuggest(t.inputEl);
        t.setPlaceholder(opt.placeholder || "Example: folder1/folder2");
        if (isNotNull(prop, base)) {
          t.setValue(base[prop]);
        }
        t.onChange((v) => {
          s.setName(resolve(name));
          s.setDesc(resolve(desc));
          if (isNotNull(prop, base)) {
            base[prop] = v;
            if (global_opt?.saveState) {
              if (typeof global_opt?.saveState !== "function") {
                error2(`saveState property was passed into UiBuilder but it's type is "${typeof global_opt?.saveState}" instead of being a function!`);
              } else {
                info2(`auto save`, `folder prop ${name} [${prop}] changed state to:`, v);
                global_opt.saveState();
              }
            } else {
              debug2(`no auto save: state changed on "${name}" on property`);
            }
          }
          if (opt.refreshDomOnChange) {
            warn2("do not know how to refresh DOM yet");
          }
        });
      });
      return componentApi(el, base, global_opt, log_level)(name, desc, prop)(s);
    },
    addButton: (o) => {
      s.addButton((b) => {
        b.setTooltip(o?.tooltip || resolve(desc)).setButtonText(o?.buttonText || "+").setCta().onClick(o?.onClick ? o.onClick : () => warn2(`${name} button for "${String(o?.buttonText)}" does not have a click handler`));
        if (o?.backgroundColor) {
          b.setClass(`bg-${o.backgroundColor}`);
        }
        if (o?.icon) {
          b.setIcon(o.icon);
        }
      });
      return componentApi(el, base, global_opt, log_level)(name, desc, prop)(s);
    },
    done: () => s
  };
};
var inputRow = (el, base, global_opt, log_level) => (name, desc, prop) => {
  const s = new Setting(el).setName(resolve(name)).setDesc(resolve(desc));
  return componentApi(el, base, global_opt, log_level)(name, desc, prop)(s);
};
var UiBuilder = (el, base, log_level, global_opt = {}) => {
  const { h1, style } = global_opt;
  const context = contextApi(el, base, global_opt, log_level);
  const settings = inputRow(el, base, global_opt, log_level);
  el.empty();
  for (const prop of Object.keys(context)) {
    settings[prop] = context[prop];
  }
  if (h1) {
    const attrs = style ? { attrs: { style } } : {};
    el.createEl("h1", { text: h1, ...attrs, cls: "page-header" });
  }
  return settings;
};

// src/config-ui/KindModal.ts
class KindModal extends Modal {
  kind;
  log_level;
  contentEl;
  constructor(app2, kind, log_level) {
    super(app2);
    this.kind = kind;
    this.log_level = log_level;
  }
  onOpen() {
    const ui = UiBuilder(this.contentEl, this.kind, this.log_level, { h1: "New Kind model" });
    const core2 = ui.sectionHeading("Core Config");
    core2("Name", "the unique name for this Kind", "name").addTextInput();
    core2("Tag", "the tag which will be used to identify this Kind; no need to include \'#\' symbol though you're free to.", "tag").addTextInput();
    core2("Classification", () => classification(this.kind.classification_type).desc, "classification_type").addDropdown(CLASSIFICATION);
    const filesAndFolders = ui.sectionHeading("Filename and Folders", "When you use the \"add kinded page\" command, this will determine which folders are offered as possible locations");
    filesAndFolders("Favorite Folder", "the folder you most associate with this kind", "folder_favorite").addTextInput();
    filesAndFolders("Include Subdirectories", "whether the sub-directories under your favorite folder should be offered as options", "show_sub_dirs").addToggleSwitch();
    filesAndFolders("Current Directory", "whether to allow current directory to be a valid location", "folder_include_cwd").addToggleSwitch({
      refreshDomOnChange: true
    });
    if (this.kind.folder_include_cwd) {
      filesAndFolders("Default Directory", "whether the current directory or the favorite dir should be the default", "classification_type").addDropdown(FOLDER_DEFAULT);
    }
    filesAndFolders("Filename Date Prefix", "whether or not the file name should be prefixed with a date", "filename_date_prefix").addToggleSwitch();
    const properties = ui.sectionHeading("Properties", "In this section you can add Relationships and Metrics");
    properties("Add Relationship", "The classification strategy sets up an abstracted set of relationships but sometimes you want a direct relationship to another kind. You can add them here.", "relationships").addButton({
      icon: "key",
      buttonText: "+",
      onClick: () => {
        this.kind.relationships.push({ prop: "", fk_kind: "", cardinality: "0:1" });
      }
    });
    properties("Add Metric", "Metrics are numeric properties which are associated with a unit of measure. When added to a kind these properties will be added as properties to the page; you can fill them in manually or you can use the \"Add Metrics\" command to be brought through it via script.", "metric_props").addButton({
      icon: "binary",
      buttonText: "+",
      onClick: () => {
        this.kind.metric_props.push({ name: "", uom_type: "mass" });
      }
    });
    const metrics = this.kind.metric_props;
    for (const key in this.kind.metric_props) {
      ui(metrics[key].name, () => metrics[key].name.trim() === "" ? "new property" : "existing property", "metric_props", key).addDropdown(UOM_TYPES);
    }
    const auto2 = ui.sectionHeading("Auto Aliases", "When you're working on a kind page -- or any classification of a kind page -- you configure whether the `aliases` assigned to that page are automatically added to in smart ways.");
    auto2("Plural/Singular", "Ensure that both the singular and plural versions of a Kind page are available", "aliases_plural").addToggleSwitch();
    auto2("Casing", "Ensure that the page's name is available in lowercase as well as capitalized", "aliases_casing").addToggleSwitch();
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
}

// src/config-ui/SettingsTab.ts
var ClassificationLookup = {
  category: [
    ["category"],
    {},
    "A 0:1 relationship to a category only"
  ],
  "category and subcategory": [
    ["category", "sub_category"],
    {},
    "A 0:1 hierarchical classification: a category and a sub-category of the parent category."
  ],
  categories: [
    ["categories"],
    {},
    "A 0:M relationship to any number of categories."
  ],
  "grouped categories": [
    ["categories"],
    { categories: "group" },
    "A 0:M relationship to any number of categories where the categories themselves have a 'group' property which organizes them."
  ]
};
var classification = (c) => ({
  name: c,
  kind_props: ClassificationLookup[c][0],
  other_props: ClassificationLookup[c][1],
  desc: ClassificationLookup[c][2]
});

class SettingsTab2 extends PluginSettingTab {
  app;
  plugin;
  saveSettings;
  debug;
  info;
  warn;
  error;
  constructor(app2, plugin) {
    super(app2, plugin);
    this.app = app2;
    this.plugin = plugin;
  }
  display() {
    const { info: info2, debug: debug2 } = logger(this.plugin.settings.log_level);
    debug2(`The settings menu has been brought up and we start in this state: `, this.plugin.settings);
    const ui = UiBuilder(this.containerEl, this.plugin.settings, this.plugin.settings.log_level, { h1: "Kind Models", saveState: this.plugin.saveSettings.bind(this.plugin) });
    ui("Handle Tags", "how to manage tags between page and frontmatter", "handle_tags").addDropdown(TAG_HANDLING);
    ui("Folder Location", "All 'kind', and 'type' definitions will be located here", "kind_folder").addFolderSearch();
    const kinds = ui.sectionHeading("Kinds", "The basic building block this plugin provides is a Kind. Each Kind represents some sort of entity. These entities can be \"classified \", grouped into broader \"types\", have relationships to other pages formalized, and have metrics added so that summary views of this kind can provide useful comparison metrics.");
    kinds("Default Classification", "Each kind gets to state it's classification model but here you can state the default choice", "default_classification").addDropdown(CLASSIFICATION);
    kinds("List of Kind Models", "Existing kinds are listed below; use button to add another", "kinds").addButton({
      icon: "package-plus",
      onClick: () => {
        new KindModal(this.app, DEFAULT_KIND, this.plugin.settings.log_level).open();
      }
    });
    const types = ui.sectionHeading("Types", "Types provide a grouping function for Kinds. You can specify as many as you like and then later map 1:M Kinds to these types. Each type will receive it's own page and the kinds related to it will have a \"type\" property which points to this page.");
    types("Create \"Other\" Type", "All kind models without a \"type\" will be assigned to type of Other", "other_type").addToggleSwitch();
    types("List of Types", "Add a new \"type\" by pressing button or manually by creating a file in `${}.", "types").addButton({
      icon: "plus-circle",
      onClick: () => {
        console.log("add new type");
      }
    });
    const urls = ui.sectionHeading("URLs", "This section deals with understanding URLs in the body of content as well as what properties in frontmatter should be considered for URL links.");
    urls("URL Properties", "Add a property that may reside in frontmatter and indicate a URL or list of URLs", "url_props").addButton({
      icon: "list-plus",
      onClick: () => console.log("add URL props")
    });
    urls("URL Patterns", "Setup regular expressions to map links in the page to a property or to modify the icon for that link in summary views.", "url_patterns").addButton({
      icon: "git-branch-plus",
      onClick: () => console.log("add URL patterns", this.plugin.settings)
    });
    const blocks = ui.sectionHeading("Page Blocks", "With page blocks you can map page template blocks to various kind types and by doing so that page will be updated with these sections whenever the \"update page\" command is run.");
    blocks("Page Blocks", "Add to the page blocks made available to kinds.", "page_blocks").addButton({
      icon: "file-plus"
    });
    const ops = ui.sectionHeading("Operations");
    ops("Bulk Operations", "Use buttons to take desired action: sync, snapshot, restore, reset.", null).addButton({
      icon: "refresh-ccw",
      buttonText: "Sync",
      backgroundColor: "indigo",
      tooltip: "Synchronize the kind definitions in your vault's \"kind folder\" with the settings here."
    }).addButton({
      icon: "download",
      buttonText: "Snapshot",
      backgroundColor: "blue",
      tooltip: "Save current configuration as a Snapshot (which can be restored later)"
    }).addButton({
      icon: "clipboard-copy",
      buttonText: "Clipboard",
      backgroundColor: "blue",
      tooltip: "Copy your current configuration to the clipboard"
    }).addButton({
      icon: "upload",
      buttonText: "Restore",
      backgroundColor: "blue",
      tooltip: "Restore configuration from a snapshot or clipboard"
    }).addButton({
      icon: "reset",
      buttonText: "Reset",
      onClick: () => info2("reset clicked"),
      backgroundColor: "red",
      tooltip: "Restore configuration to Plugin Default"
    });
    ops("Log Level", "if you're experiencing problems you think could be related to this plugin you can change the log level to get more info sent to the developer console.", "log_level").addDropdown(LOG_LEVELS);
  }
}

// node_modules/inferred-types/dist/constants/createConstant.js
function createConstant(kind) {
  return {
    _type: "Constant",
    kind
  };
}

// node_modules/inferred-types/dist/constants/NumericChar.js
var NUMERIC_CHAR = [
  "0",
  "1",
  "2",
  "3",
  "4",
  "5",
  "6",
  "7",
  "8",
  "9"
];

// node_modules/inferred-types/dist/constants/Never.js
var Never = createConstant("never");

// node_modules/inferred-types/dist/constants/RepoConstants.js
var REPO_SOURCE_LOOKUP = {
  github: [`github.com`, "github.io"],
  bitbucket: ["bitbucket.com"],
  gitlab: ["gitlab.com"],
  codecommit: ["https://aws.amazon.com/codecommit/"],
  local: []
};

// node_modules/inferred-types/dist/constants/NetworkConstants.js
var NETWORK_PROTOCOL_LOOKUP = {
  http: ["http", "https"],
  ftp: ["ftp", "sftp"],
  file: ["", "file"],
  ws: ["ws", "wss"],
  ssh: ["", "ssh"],
  scp: ["", "scp"]
};

// node_modules/inferred-types/dist/runtime/api/handleDoneFn.js
var handleDoneFn = (val, call_bare_fn = false) => {
  return isObject(val) || isFunction(val) ? isDoneFn(val) ? val.done() : isFunction(val) ? call_bare_fn ? val() : val : val : isFunction(val) ? call_bare_fn ? val() : val : val;
};

// node_modules/inferred-types/dist/runtime/dictionary/keysOf.js
function keysOf(container) {
  const keys = Array.isArray(container) ? Object.keys(container).map((i) => Number(i)) : isObject(container) ? isRef(container) ? ["value"] : Object.keys(container) : [];
  return keys;
}

// node_modules/inferred-types/dist/runtime/dictionary/valuesOf.js
var valuesOf = (obj) => {
  const values = [];
  for (const k of Object.keys(obj)) {
    values.push(obj[k]);
  }
  return values;
};

// node_modules/inferred-types/dist/runtime/literals/stripTrailing.js
function stripTrailing(content, strip) {
  const re = new RegExp(`(.*)${strip}\$`);
  return String(content)?.endsWith(String(strip)) ? switchType(content)(String(content).replace(re, "$1")) : switchType(content)(String(content));
}
var switchType = (content) => (val) => {
  return typeof content === "number" ? Number(val) : val;
};

// node_modules/inferred-types/dist/runtime/literals/ensureTrailing.js
function ensureTrailing(content, ensure) {
  return content.endsWith(ensure) ? content : `${content}${ensure}`;
}

// node_modules/inferred-types/dist/runtime/literals/ensureLeading.js
function ensureLeading(content, ensure) {
  return String(content).startsWith(ensure) ? content : `${ensure}${content}`;
}

// node_modules/inferred-types/dist/runtime/literals/stripAfter.js
function stripAfter(content, find) {
  return content.split(find).shift();
}

// node_modules/inferred-types/dist/runtime/literals/stripBefore.js
function stripBefore(content, find) {
  return content.split(find).slice(1).join(find);
}

// node_modules/inferred-types/dist/runtime/type-guards/isUndefined.js
function isUndefined(value) {
  return typeof value === "undefined" ? true : false;
}

// node_modules/inferred-types/dist/runtime/type-conversion/asChars.js
var asChars = (str) => {
  return str.split("");
};

// node_modules/inferred-types/dist/runtime/literals/stripUntil.js
var stripUntil = (content, ...until) => {
  const stopIdx = asChars(content).findIndex((c) => until.includes(c));
  return content.slice(stopIdx);
};

// node_modules/inferred-types/dist/runtime/literals/retainWhile.js
var retainWhile = (content, ...retain) => {
  const stopIdx = asChars(content).findIndex((c) => !retain.includes(c));
  return content.slice(0, stopIdx);
};

// node_modules/inferred-types/dist/runtime/initializers/createFnWithProps.js
var createFnWithProps = (fn2, props, narrowing = false) => {
  const fnWithProps = fn2;
  for (const prop of keysOf(props)) {
    fnWithProps[prop] = props[prop];
  }
  return isTrue(narrowing) ? fnWithProps : fnWithProps;
};

// node_modules/inferred-types/dist/runtime/lists/last.js
var last = (list) => {
  return [...list].pop();
};

// node_modules/inferred-types/dist/runtime/meta/youtube-meta.js
var youtubeEmbed = (url) => {
  if (hasUrlQueryParameter(url, "v")) {
    const id = getUrlQueryParams(url, "v");
    return `https://www.youtube.com/embed/${id}`;
  } else if (isYouTubeShareUrl(url)) {
    const id = url.split("/").pop();
    if (id) {
      return `https://www.youtube.com/embed/${id}`;
    } else {
      throw new Error(`Unexpected problem parsing share URL -- "${url}" -- into a YouTube embed URL`);
    }
  } else {
    throw new Error(`Unexpected URL structure; unable to convert "${url}" to a YouTube embed URL`);
  }
};

// node_modules/inferred-types/dist/runtime/meta/urlMeta.js
var PROTOCOLS = Object.values(NETWORK_PROTOCOL_LOOKUP).flat().filter((i) => i !== "");
var getUrlQueryParams = (url, specific = undefined) => {
  const qp = stripBefore(url, "?");
  if (specific) {
    return qp.includes(`${specific}=`) ? decodeURIComponent(stripAfter(stripBefore(qp, `${specific}=`), "&").replace(/\+/g, "%20")) : undefined;
  }
  return qp === "" ? qp : `?${qp}`;
};

// node_modules/inferred-types/dist/runtime/type-guards/isArray.js
function isArray(value) {
  return Array.isArray(value) === true;
}

// node_modules/inferred-types/dist/runtime/type-guards/isNull.js
function isNull(value) {
  return value === null ? true : false;
}

// node_modules/inferred-types/dist/runtime/type-guards/isString.js
function isString(value) {
  return typeof value === "string";
}

// node_modules/inferred-types/dist/runtime/type-guards/isObject.js
function isObject(value) {
  return typeof value === "object" && value !== null && Array.isArray(value) === false;
}

// node_modules/inferred-types/dist/runtime/type-guards/isTrue.js
function isTrue(value) {
  return value === true;
}

// node_modules/inferred-types/dist/runtime/type-guards/isContainer.js
function isContainer(value) {
  return Array.isArray(value) || isObject(value) ? true : false;
}

// node_modules/inferred-types/dist/runtime/type-guards/isRef.js
function isRef(value) {
  return isObject(value) && "value" in value && Array.from(Object.keys(value)).includes("_value");
}

// node_modules/inferred-types/dist/runtime/type-guards/isFunction.js
function isFunction(value) {
  return typeof value === "function" ? true : false;
}

// node_modules/inferred-types/dist/runtime/type-guards/isNumber.js
function isNumber(value) {
  return typeof value === "number";
}

// node_modules/inferred-types/dist/runtime/type-guards/isSymbol.js
function isSymbol(value) {
  return typeof value === "symbol";
}

// node_modules/inferred-types/dist/runtime/type-guards/isScalar.js
function isScalar(value) {
  return isString(value) || isNumber(value) || isSymbol(value) || isNull(value);
}

// node_modules/inferred-types/dist/runtime/type-guards/hasKeys.js
var hasKeys = (...props) => (val) => {
  const keys = Array.isArray(props) ? props : Object.keys(props).filter((i) => typeof i === "string");
  return (isFunction(val) || isObject(val)) && keys.every((k) => (k in val)) ? true : false;
};

// node_modules/inferred-types/dist/runtime/type-guards/isDoneFn.js
var isDoneFn = (val) => {
  return hasKeys("done")(val) && typeof val.done === "function";
};

// node_modules/inferred-types/dist/runtime/type-guards/isUrl.js
var isUrl = (val, ...protocols) => {
  const p = protocols.length === 0 ? ["http", "https"] : protocols;
  return isString(val) && p.some((i) => val.startsWith(`${i}://`));
};

// node_modules/inferred-types/dist/runtime/type-guards/isCssAspectRatio.js
var tokens = [
  "1",
  "inherit",
  "initial",
  "revert",
  "revert-layer",
  "unset",
  "auto"
];
var isRatio = (val) => /[0-9]{1,4}\s*\/\s*[0-9]{1,4}/.test(val);
var isCssAspectRatio = (val) => {
  return isString(val) && val.split(/\s+/).every((i) => tokens.includes(i) || isRatio(i));
};

// node_modules/inferred-types/dist/runtime/type-guards/isInlineSvg.js
var isInlineSvg = (v) => {
  return isString(v) && v.trim().startsWith(`<svg`) && v.trim().endsWith(`</svg>`);
};

// node_modules/inferred-types/dist/runtime/type-guards/network-tg.js
var hasUrlQueryParameter = (val, prop) => {
  return isString(getUrlQueryParams(val, prop));
};

// node_modules/inferred-types/dist/runtime/type-guards/youtube.js
var isYouTubeShareUrl = (val) => {
  return isString(val) && val.startsWith(`https://youtu.be`);
};
var isYouTubeVideoUrl = (val) => {
  return isString(val) && (val.startsWith("https://www.youtube.com") || val.startsWith("https://youtube.com") || val.startsWith("https://youtu.be"));
};
var isYouTubeCreatorUrl = (url) => {
  return isString(url) && (url.startsWith(`https://www.youtube.com/@`) || url.startsWith(`https://youtube.com/@`) || url.startsWith(`https://www.youtube.com/channel/`));
};

// node_modules/inferred-types/dist/runtime/type-guards/repos.js
var isRepoUrl = (val) => {
  const baseUrls = valuesOf(REPO_SOURCE_LOOKUP).flat();
  return isString(val) && baseUrls.every((u) => val === u || val.startsWith(`${u}/`));
};
var isGithubRepoUrl = (val) => {
  const baseUrls = [""];
  return isString(val) && baseUrls.every((u) => val === u || val.startsWith(`${u}/`));
};

// src/utils/type_guards/isMarkdownView.ts
var isMarkdownView = (val) => {
  return typeof val === "object" && "getViewData" in val && typeof val.getViewData === "function" ? true : false;
};

// src/utils/type_guards/isTFile.ts
var isTFile = (v) => {
  return typeof v === "object" && "path" in v;
};

// src/utils/type_guards/isFileLink.ts
var isFileLink = (val) => {
  return isLink(val) && "type" in val && val.type === "file";
};
var isLink = (val) => {
  return isObject(val) && "path" in val && isString(val.path) && "embed" in val && typeof val.embed === "boolean";
};

// src/utils/type_guards/isDataviewFile.ts
var isDataviewFile = (val) => {
  return typeof val === "object" && val !== null && "aliases" in val && val?.aliases?.where ? true : false;
};

// src/utils/type_guards/isDataviewPage.ts
var isDataviewPage = (val) => {
  return typeof val === "object" && val !== null && "file" in val && isDataviewFile(val.file) ? true : false;
};

// node_modules/@markdoc/markdoc/dist/index.mjs
var isAst = function(value) {
  return !!value?.$$mdtype;
};
var isFunction3 = function(value) {
  return !!(value?.$$mdtype === "Function");
};
var isVariable = function(value) {
  return !!(value?.$$mdtype === "Variable");
};
function* getAstValues(value) {
  if (value == null || typeof value !== "object")
    return;
  if (Array.isArray(value))
    for (const v of value)
      yield* getAstValues(v);
  if (isAst(value))
    yield value;
  if (Object.getPrototypeOf(value) !== Object.prototype)
    return;
  for (const v of Object.values(value))
    yield* getAstValues(v);
}
var resolve2 = function(value, config = {}) {
  if (value == null || typeof value !== "object")
    return value;
  if (Array.isArray(value))
    return value.map((item2) => resolve2(item2, config));
  if (isAst(value) && value?.resolve instanceof Function)
    return value.resolve(config);
  if (Object.getPrototypeOf(value) !== Object.prototype)
    return value;
  const output = {};
  for (const [k, v] of Object.entries(value))
    output[k] = resolve2(v, config);
  return output;
};
var isIdentifier = function(s2) {
  return typeof s2 === "string" && IDENTIFIER_REGEX.test(s2);
};
var isPromise = function(a) {
  return a && typeof a === "object" && typeof a.then === "function";
};
var findTagEnd = function(content, start2 = 0) {
  let state = 0;
  for (let pos = start2;pos < content.length; pos++) {
    const char = content[pos];
    switch (state) {
      case 1:
        switch (char) {
          case '"':
            state = 0;
            break;
          case "\\":
            state = 2;
            break;
        }
        break;
      case 2:
        state = 1;
        break;
      case 0:
        if (char === '"')
          state = 1;
        else if (content.startsWith(CLOSE, pos))
          return pos;
    }
  }
  return null;
};
var parseTag = function(content, line, contentStart) {
  try {
    return (0, import_tag.parse)(content, { Variable, Function: Function2 });
  } catch (error2) {
    if (!(error2 instanceof import_tag.SyntaxError))
      throw error2;
    const {
      message,
      location: { start: start2, end: end2 }
    } = error2;
    const location = {
      start: { line, character: start2.offset + contentStart },
      end: { line: line + 1, character: end2.offset + contentStart }
    };
    return { type: "error", meta: { error: { message, location } } };
  }
};
var parseTags = function(content, firstLine = 0) {
  let line = firstLine + 1;
  const output = [];
  let start2 = 0;
  for (let pos = 0;pos < content.length; pos++) {
    if (content[pos] === "\n") {
      line++;
      continue;
    }
    if (!content.startsWith(OPEN, pos))
      continue;
    const end2 = findTagEnd(content, pos);
    if (end2 == null) {
      pos = pos + OPEN.length;
      continue;
    }
    const text2 = content.slice(pos, end2 + CLOSE.length);
    const inner = content.slice(pos + OPEN.length, end2);
    const lineStart = content.lastIndexOf("\n", pos);
    const lineEnd = content.indexOf("\n", end2);
    const lineContent = content.slice(lineStart, lineEnd);
    const tag = parseTag(inner.trim(), line, pos - lineStart);
    const precedingTextEnd = lineContent.trim() === text2 ? lineStart : pos;
    const precedingText = content.slice(start2, precedingTextEnd);
    output.push({
      type: "text",
      start: start2,
      end: pos - 1,
      content: precedingText
    });
    output.push({
      map: [line, line + 1],
      position: {
        start: pos - lineStart,
        end: pos - lineStart + text2.length
      },
      start: pos,
      end: pos + text2.length - 1,
      info: text2,
      ...tag
    });
    start2 = end2 + CLOSE.length;
    pos = start2 - 1;
  }
  output.push({
    type: "text",
    start: start2,
    end: content.length - 1,
    content: content.slice(start2)
  });
  return output;
};
var reviver = function(_, value) {
  if (!value)
    return value;
  const klass = AstTypes[value.$$mdtype];
  return klass ? Object.assign(new klass, value) : value;
};
var fromJSON = function(text2) {
  return JSON.parse(text2, reviver);
};
function* formatChildren(a, options) {
  for (const child of a.children) {
    yield* formatValue(child, options);
  }
}
function* formatInline(g) {
  yield [...g].join("").trim();
}
function* formatTableRow(items) {
  yield `| ${items.join(" | ")} |`;
}
var formatScalar = function(v) {
  if (v === undefined) {
    return;
  }
  if (ast_default.isAst(v)) {
    return format(v);
  }
  if (v === null) {
    return "null";
  }
  if (Array.isArray(v)) {
    return "[" + v.map(formatScalar).join(SEP) + "]";
  }
  if (typeof v === "object") {
    return "{" + Object.entries(v).map(([key, value]) => `${isIdentifier(key) ? key : `"${key}"`}: ${formatScalar(value)}`).join(SEP) + "}";
  }
  return JSON.stringify(v);
};
var formatAnnotationValue = function(a) {
  const formattedValue = formatScalar(a.value);
  if (formattedValue === undefined)
    return;
  if (a.name === "primary")
    return formattedValue;
  if (a.name === "id" && typeof a.value === "string" && isIdentifier(a.value))
    return "#" + a.value;
  if (a.type === "class" && isIdentifier(a.name))
    return "." + a.name;
  return `${a.name}=${formattedValue}`;
};
function* formatAttributes(n) {
  for (const [key, value] of Object.entries(n.attributes)) {
    if (key === "class" && typeof value === "object" && !ast_default.isAst(value))
      for (const name of Object.keys(value)) {
        yield formatAnnotationValue({ type: "class", name, value });
      }
    else
      yield formatAnnotationValue({ type: "attribute", name: key, value });
  }
}
function* formatAnnotations(n) {
  if (n.annotations.length) {
    yield OPEN + SPACE;
    yield n.annotations.map(formatAnnotationValue).join(SPACE);
    yield SPACE + CLOSE;
  }
}
function* formatVariable(v) {
  yield "$";
  yield v.path.map((p, i) => {
    if (i === 0)
      return p;
    if (isIdentifier(p))
      return "." + p;
    if (typeof p === "number")
      return `[${p}]`;
    return `["${p}"]`;
  }).join("");
}
function* formatFunction(f) {
  yield f.name;
  yield "(";
  yield Object.values(f.parameters).map(formatScalar).join(SEP);
  yield ")";
}
function* trimStart(g) {
  let n;
  do {
    const { value, done } = g.next();
    if (done)
      return;
    n = value.trimStart();
  } while (!n.length);
  yield n;
  yield* g;
}
function* escapeMarkdownCharacters(s2, characters) {
  yield s2.replace(characters, "\\$&").replace(new RegExp("\xA0", "g"), "&nbsp;");
}
function* formatNode(n, o = {}) {
  const no = { ...o, parent: n };
  const indent = SPACE.repeat(no.indent || 0);
  switch (n.type) {
    case "document": {
      if (n.attributes.frontmatter && n.attributes.frontmatter.length) {
        yield "---" + NL + n.attributes.frontmatter + NL + "---" + NL + NL;
      }
      yield* trimStart(formatChildren(n, no));
      break;
    }
    case "heading": {
      yield NL;
      yield indent;
      yield "#".repeat(n.attributes.level || 1);
      yield SPACE;
      yield* trimStart(formatChildren(n, no));
      yield* formatAnnotations(n);
      yield NL;
      break;
    }
    case "paragraph": {
      yield NL;
      yield* formatChildren(n, no);
      yield* formatAnnotations(n);
      yield NL;
      break;
    }
    case "inline": {
      yield indent;
      yield* formatChildren(n, no);
      break;
    }
    case "image": {
      yield "!";
      yield "[";
      yield* formatValue(n.attributes.alt, no);
      yield "]";
      yield "(";
      yield* typeof n.attributes.src === "string" ? escapeMarkdownCharacters(n.attributes.src, /[()]/) : formatValue(n.attributes.src, no);
      if (n.attributes.title) {
        yield SPACE + `"${n.attributes.title}"`;
      }
      yield ")";
      break;
    }
    case "link": {
      yield "[";
      yield* formatChildren(n, no);
      yield "]";
      yield "(";
      yield* typeof n.attributes.href === "string" ? escapeMarkdownCharacters(n.attributes.href, /[()]/g) : formatValue(n.attributes.href, no);
      if (n.attributes.title) {
        yield SPACE + `"${n.attributes.title}"`;
      }
      yield ")";
      break;
    }
    case "text": {
      const { content } = n.attributes;
      if (ast_default.isAst(content)) {
        yield OPEN + SPACE;
        yield* formatValue(content, no);
        yield SPACE + CLOSE;
      } else {
        if (o.parent && WRAPPING_TYPES.includes(o.parent.type)) {
          yield* escapeMarkdownCharacters(content, /[*_~]/g);
        } else {
          yield* escapeMarkdownCharacters(content, /^[*>#]/);
        }
      }
      break;
    }
    case "blockquote": {
      const prefix = ">" + SPACE;
      yield n.children.map((child) => format(child, no).trimStart()).map((d) => NL + indent + prefix + d).join(indent + prefix);
      break;
    }
    case "hr": {
      yield NL;
      yield indent;
      yield "---";
      yield NL;
      break;
    }
    case "fence": {
      yield NL;
      yield indent;
      const innerFence = n.attributes.content.match(/`{3,}/g) || [];
      const innerFenceLength = innerFence.map((s2) => s2.length).reduce(max2, 0);
      const boundary = "`".repeat(innerFenceLength ? innerFenceLength + 1 : 3);
      yield boundary;
      if (n.attributes.language)
        yield n.attributes.language;
      if (n.annotations.length)
        yield SPACE;
      yield* formatAnnotations(n);
      yield NL;
      yield indent;
      yield n.attributes.content.split(NL).join(NL + indent);
      yield boundary;
      yield NL;
      break;
    }
    case "tag": {
      if (!n.inline) {
        yield NL;
        yield indent;
      }
      const open = OPEN + SPACE;
      const attributes = [...formatAttributes(n)].filter((v) => v !== undefined);
      const tag = [open + n.tag, ...attributes];
      const inlineTag = tag.join(SPACE);
      const isLongTagOpening = inlineTag.length + open.length * 2 > (o.maxTagOpeningWidth || MAX_TAG_OPENING_WIDTH);
      yield (!n.inline && isLongTagOpening ? tag.join(NL + SPACE.repeat(open.length) + indent) : inlineTag) + SPACE + (n.children.length ? "" : "/") + CLOSE;
      if (n.children.length) {
        yield* formatChildren(n, no.allowIndentation ? increment(no) : no);
        if (!n.inline) {
          yield indent;
        }
        yield OPEN + SPACE + "/" + n.tag + SPACE + CLOSE;
      }
      if (!n.inline) {
        yield NL;
      }
      break;
    }
    case "list": {
      const isLoose = n.children.some((n2) => n2.children.some((c) => c.type === "paragraph"));
      for (let i = 0;i < n.children.length; i++) {
        const prefix = n.attributes.ordered ? `${i === 0 ? n.attributes.start ?? "1" : "1"}${n.attributes.marker ?? OL}` : n.attributes.marker ?? UL;
        let d = format(n.children[i], increment(no, prefix.length + 1));
        if (!isLoose || i === n.children.length - 1) {
          d = d.trim();
        }
        yield NL + indent + prefix + " " + d;
      }
      yield NL;
      break;
    }
    case "item": {
      for (let i = 0;i < n.children.length; i++) {
        yield* formatValue(n.children[i], no);
        if (i === 0)
          yield* formatAnnotations(n);
      }
      break;
    }
    case "strong": {
      yield n.attributes.marker ?? "**";
      yield* formatInline(formatChildren(n, no));
      yield n.attributes.marker ?? "**";
      break;
    }
    case "em": {
      yield n.attributes.marker ?? "*";
      yield* formatInline(formatChildren(n, no));
      yield n.attributes.marker ?? "*";
      break;
    }
    case "code": {
      yield "`";
      yield* formatInline(formatValue(n.attributes.content, no));
      yield "`";
      break;
    }
    case "s": {
      yield "~~";
      yield* formatInline(formatChildren(n, no));
      yield "~~";
      break;
    }
    case "hardbreak": {
      yield "\\" + NL;
      yield indent;
      break;
    }
    case "softbreak": {
      yield NL;
      yield indent;
      break;
    }
    case "table": {
      const table3 = [...formatChildren(n, increment(no))];
      if (o.parent && o.parent.type === "tag" && o.parent.tag === "table") {
        for (let i = 0;i < table3.length; i++) {
          const row = table3[i];
          if (typeof row === "string") {
            if (row.trim().length) {
              yield NL;
              yield row;
            }
          } else {
            if (i !== 0) {
              yield NL;
              yield indent + "---";
            }
            for (const d of row) {
              yield NL + indent + UL + " " + d;
            }
          }
        }
        yield NL;
      } else {
        const widths = [];
        for (const row of table3) {
          for (let i = 0;i < row.length; i++) {
            widths[i] = widths[i] ? Math.max(widths[i], row[i].length) : row[i].length;
          }
        }
        const [head, ...rows] = table3;
        yield NL;
        yield* formatTableRow(head.map((cell, i) => cell + SPACE.repeat(widths[i] - cell.length)));
        yield NL;
        yield* formatTableRow(head.map((cell, i) => "-".repeat(widths[i])));
        yield NL;
        for (const row of rows) {
          yield* formatTableRow(row.map((cell, i) => cell + SPACE.repeat(widths[i] - cell.length)));
          yield NL;
        }
      }
      break;
    }
    case "thead": {
      const [head] = [...formatChildren(n, no)];
      yield head || [];
      break;
    }
    case "tr": {
      yield [...formatChildren(n, no)];
      break;
    }
    case "td":
    case "th": {
      yield [...formatChildren(n, no), ...formatAnnotations(n)].join("").trim();
      break;
    }
    case "tbody": {
      yield* formatChildren(n, no);
      break;
    }
    case "comment": {
      yield "<!-- " + n.attributes.content + " -->\n";
      break;
    }
    case "error":
    case "node":
      break;
  }
}
function* formatValue(v, o = {}) {
  switch (typeof v) {
    case "undefined":
      break;
    case "boolean":
    case "number":
    case "string": {
      yield v.toString();
      break;
    }
    case "object": {
      if (v === null)
        break;
      if (Array.isArray(v)) {
        for (const n of v)
          yield* formatValue(n, o);
        break;
      }
      switch (v.$$mdtype) {
        case "Function": {
          yield* formatFunction(v);
          break;
        }
        case "Node":
          yield* formatNode(v, o);
          break;
        case "Variable": {
          yield* formatVariable(v);
          break;
        }
        default:
          throw new Error(`Unimplemented: "${v.$$mdtype}"`);
      }
      break;
    }
  }
}
var format = function(v, options) {
  let doc = "";
  for (const s2 of formatValue(v, options))
    doc += s2;
  return doc.trimStart();
};
var truthy = function(value) {
  return value !== false && value !== undefined && value !== null;
};
var renderConditions = function(node2) {
  const conditions = [
    { condition: node2.attributes.primary, children: [] }
  ];
  for (const child of node2.children) {
    if (child.type === "tag" && child.tag === "else")
      conditions.push({
        condition: "primary" in child.attributes ? child.attributes.primary : true,
        children: []
      });
    else
      conditions[conditions.length - 1].children.push(child);
  }
  return conditions;
};
var convertToRow = function(node2, cellType = "td") {
  node2.type = "tr";
  node2.attributes = {};
  for (const cell of node2.children)
    cell.type = cellType;
  return node2;
};
var transform = function(document2) {
  for (const node2 of document2.walk()) {
    if (node2.type !== "tag" || node2.tag !== "table")
      continue;
    const [first, ...rest] = node2.children;
    if (!first || first.type === "table")
      continue;
    const table3 = new ast_default.Node("table", node2.attributes, [
      new ast_default.Node("thead"),
      new ast_default.Node("tbody")
    ]);
    const [thead2, tbody2] = table3.children;
    if (first.type === "list")
      thead2.push(convertToRow(first, "th"));
    for (const row of rest) {
      if (row.type === "list")
        convertToRow(row);
      else if (row.type === "tag" && row.tag === "if") {
        const children = [];
        for (const child of row.children) {
          if (child.type === "hr")
            continue;
          if (child.type === "list")
            convertToRow(child);
          children.push(child);
        }
        row.children = children;
      } else
        continue;
      tbody2.push(row);
    }
    node2.children = [table3];
  }
};
var annotate = function(node2, attributes) {
  for (const attribute of attributes) {
    node2.annotations.push(attribute);
    const { name, value, type } = attribute;
    if (type === "attribute") {
      if (node2.attributes[name] !== undefined)
        node2.errors.push({
          id: "duplicate-attribute",
          level: "warning",
          message: `Attribute '${name}' already set`
        });
      node2.attributes[name] = value;
    } else if (type === "class")
      if (node2.attributes.class)
        node2.attributes.class[name] = value;
      else
        node2.attributes.class = { [name]: value };
  }
};
var handleAttrs = function(token, type) {
  switch (type) {
    case "heading":
      return { level: Number(token.tag.replace("h", "")) };
    case "list": {
      const attrs = token.attrs ? Object.fromEntries(token.attrs) : undefined;
      const ordered = token.type.startsWith("ordered");
      return ordered && attrs?.start ? { ordered: true, start: attrs.start, marker: token.markup } : { ordered, marker: token.markup };
    }
    case "link": {
      const attrs = Object.fromEntries(token.attrs);
      return attrs.title ? { href: attrs.href, title: attrs.title } : { href: attrs.href };
    }
    case "image": {
      const attrs = Object.fromEntries(token.attrs);
      return attrs.title ? { alt: token.content, src: attrs.src, title: attrs.title } : { alt: token.content, src: attrs.src };
    }
    case "em":
    case "strong":
      return { marker: token.markup };
    case "text":
    case "code":
    case "comment":
      return { content: (token.meta || {}).variable || token.content };
    case "fence": {
      const [language] = token.info.split(" ", 1);
      return language === "" || language === OPEN ? { content: token.content } : { content: token.content, language };
    }
    case "td":
    case "th": {
      if (token.attrs) {
        const attrs = Object.fromEntries(token.attrs);
        let align;
        if (attrs.style) {
          if (attrs.style.includes("left")) {
            align = "left";
          } else if (attrs.style.includes("center")) {
            align = "center";
          } else if (attrs.style.includes("right")) {
            align = "right";
          }
        }
        if (align) {
          return { align };
        }
      }
      return {};
    }
    default:
      return {};
  }
};
var handleToken = function(token, nodes, file, handleSlots, addLocation, inlineParent) {
  if (token.type === "frontmatter") {
    nodes[0].attributes.frontmatter = token.content;
    return;
  }
  if (token.hidden || token.type === "text" && token.content === "")
    return;
  const errors = token.errors || [];
  const parent = nodes[nodes.length - 1];
  const { tag, attributes, error: error2 } = token.meta || {};
  if (token.type === "annotation") {
    if (inlineParent)
      return annotate(inlineParent, attributes);
    return parent.errors.push({
      id: "no-inline-annotations",
      level: "error",
      message: `Can't apply inline annotations to '${parent.type}'`
    });
  }
  let typeName = token.type.replace(/_(open|close)$/, "");
  if (mappings[typeName])
    typeName = mappings[typeName];
  if (typeName === "error") {
    const { message, location } = error2;
    errors.push({ id: "parse-error", level: "critical", message, location });
  }
  if (token.nesting < 0) {
    if (parent.type === typeName && parent.tag === tag) {
      if (parent.lines && token.map)
        parent.lines.push(...token.map);
      return nodes.pop();
    }
    errors.push({
      id: "missing-opening",
      level: "critical",
      message: `Node '${typeName}' is missing opening`
    });
  }
  const attrs = handleAttrs(token, typeName);
  const node2 = new Node(typeName, attrs, undefined, tag || undefined);
  const { position = {} } = token;
  node2.errors = errors;
  if (addLocation !== false) {
    node2.lines = token.map || parent.lines || [];
    node2.location = {
      file,
      start: {
        line: node2.lines[0],
        character: position.start
      },
      end: {
        line: node2.lines[1],
        character: position.end
      }
    };
  }
  if (inlineParent)
    node2.inline = true;
  if (attributes && ["tag", "fence", "image"].includes(typeName))
    annotate(node2, attributes);
  if (handleSlots && tag === "slot" && typeof node2.attributes.primary === "string")
    parent.slots[node2.attributes.primary] = node2;
  else
    parent.push(node2);
  if (token.nesting > 0)
    nodes.push(node2);
  if (!Array.isArray(token.children))
    return;
  if (node2.type === "inline")
    inlineParent = parent;
  nodes.push(node2);
  const isLeafNode = typeName === "image";
  if (!isLeafNode) {
    for (const child of token.children)
      handleToken(child, nodes, file, handleSlots, addLocation, inlineParent);
  }
  nodes.pop();
};
var parser = function(tokens2, args) {
  const doc = new Node("document");
  const nodes = [doc];
  if (typeof args === "string")
    args = { file: args };
  for (const token of tokens2)
    handleToken(token, nodes, args?.file, args?.slots, args?.location);
  if (nodes.length > 1)
    for (const node2 of nodes.slice(1))
      node2.errors.push({
        id: "missing-closing",
        level: "critical",
        message: `Node '${node2.tag || node2.type}' is missing closing`
      });
  for (const transform3 of transforms_default)
    transform3(doc);
  return doc;
};
var render = function(node2) {
  if (typeof node2 === "string" || typeof node2 === "number")
    return escapeHtml(String(node2));
  if (Array.isArray(node2))
    return node2.map(render).join("");
  if (node2 === null || typeof node2 !== "object" || !Tag.isTag(node2))
    return "";
  const { name, attributes, children = [] } = node2;
  if (!name)
    return render(children);
  let output = `<${name}`;
  for (const [k, v] of Object.entries(attributes ?? {}))
    output += ` ${k.toLowerCase()}="${escapeHtml(String(v))}"`;
  output += ">";
  if (voidElements.has(name))
    return output;
  if (children.length)
    output += render(children);
  output += `</${name}>`;
  return output;
};
var tagName = function(name, components) {
  return typeof name !== "string" ? name : name[0] !== name[0].toUpperCase() ? name : components instanceof Function ? components(name) : components[name];
};
var dynamic = function(node2, React, { components = {} } = {}) {
  function deepRender2(value) {
    if (value == null || typeof value !== "object")
      return value;
    if (Array.isArray(value))
      return value.map((item2) => deepRender2(item2));
    if (value.$$mdtype === "Tag")
      return render3(value);
    if (typeof value !== "object")
      return value;
    const output = {};
    for (const [k, v] of Object.entries(value))
      output[k] = deepRender2(v);
    return output;
  }
  function render3(node3) {
    if (Array.isArray(node3))
      return React.createElement(React.Fragment, null, ...node3.map(render3));
    if (node3 === null || typeof node3 !== "object" || !Tag.isTag(node3))
      return node3;
    const {
      name,
      attributes: { class: className, ...attrs } = {},
      children = []
    } = node3;
    if (className)
      attrs.className = className;
    return React.createElement(tagName(name, components), Object.keys(attrs).length == 0 ? null : deepRender2(attrs), ...children.map(render3));
  }
  return render3(node2);
};
var tagName2 = function(name, components) {
  return typeof name !== "string" ? "Fragment" : name[0] !== name[0].toUpperCase() ? name : components instanceof Function ? components(name) : components[name];
};
var renderArray = function(children) {
  return children.map(render2).join(", ");
};
var deepRender = function(value) {
  if (value == null || typeof value !== "object")
    return JSON.stringify(value);
  if (Array.isArray(value))
    return `[${value.map((item2) => deepRender(item2)).join(", ")}]`;
  if (value.$$mdtype === "Tag")
    return render2(value);
  if (typeof value !== "object")
    return JSON.stringify(value);
  const object = Object.entries(value).map(([k, v]) => [JSON.stringify(k), deepRender(v)].join(": ")).join(", ");
  return `{${object}}`;
};
var render2 = function(node2) {
  if (Array.isArray(node2))
    return `React.createElement(React.Fragment, null, ${renderArray(node2)})`;
  if (node2 === null || typeof node2 !== "object" || !Tag.isTag(node2))
    return JSON.stringify(node2);
  const {
    name,
    attributes: { class: className, ...attrs } = {},
    children = []
  } = node2;
  if (className)
    attrs.className = className;
  return `React.createElement(
    tagName(${JSON.stringify(name)}, components),
    ${Object.keys(attrs).length == 0 ? "null" : deepRender(attrs)},
    ${renderArray(children)})`;
};
var reactStatic = function(node2) {
  return `
  (({components = {}} = {}) => {
    ${tagName2}
    return ${render2(node2)};
  })
`;
};
var createToken = function(state, content, contentStart) {
  try {
    const { type, meta: meta2, nesting = 0 } = (0, import_tag7.parse)(content, { Variable, Function: Function2 });
    const token = state.push(type, "", nesting);
    token.info = content;
    token.meta = meta2;
    if (!state.delimiters) {
      state.delimiters = [];
    }
    return token;
  } catch (error2) {
    if (!(error2 instanceof import_tag7.SyntaxError))
      throw error2;
    const {
      message,
      location: { start: start2, end: end2 }
    } = error2;
    const location = contentStart ? {
      start: { offset: start2.offset + contentStart },
      end: { offset: end2.offset + contentStart }
    } : null;
    const token = state.push("error", "", 0);
    token.meta = { error: { message, location } };
    return token;
  }
};
var block = function(state, startLine, endLine, silent) {
  const start2 = state.bMarks[startLine] + state.tShift[startLine];
  const finish = state.eMarks[startLine];
  if (!state.src.startsWith(OPEN, start2))
    return false;
  const tagEnd = findTagEnd(state.src, start2);
  const lastPossible = state.src.slice(0, finish).trim().length;
  if (!tagEnd || tagEnd < lastPossible - CLOSE.length)
    return false;
  const contentStart = start2 + OPEN.length;
  const content = state.src.slice(contentStart, tagEnd).trim();
  const lines = state.src.slice(start2, tagEnd + CLOSE.length).split("\n").length;
  if (content[0] === "$")
    return false;
  if (silent)
    return true;
  const token = createToken(state, content, contentStart);
  token.map = [startLine, startLine + lines];
  state.line += lines;
  return true;
};
var inline2 = function(state, silent) {
  if (!state.src.startsWith(OPEN, state.pos))
    return false;
  const tagEnd = findTagEnd(state.src, state.pos);
  if (!tagEnd)
    return false;
  const content = state.src.slice(state.pos + OPEN.length, tagEnd);
  if (!silent)
    createToken(state, content.trim());
  state.pos = tagEnd + CLOSE.length;
  return true;
};
var core2 = function(state) {
  let token;
  for (token of state.tokens) {
    if (token.type !== "fence")
      continue;
    if (token.info.includes(OPEN)) {
      const start2 = token.info.indexOf(OPEN);
      const end2 = findTagEnd(token.info, start2);
      const content = token.info.slice(start2 + OPEN.length, end2);
      try {
        const { meta: meta2 } = (0, import_tag7.parse)(content.trim(), { Variable, Function: Function2 });
        token.meta = meta2;
      } catch (error2) {
        if (!(error2 instanceof import_tag7.SyntaxError))
          throw error2;
        if (!token.errors)
          token.errors = [];
        token.errors.push({
          id: "fence-tag-error",
          level: "error",
          message: `Syntax error in fence tag: ${error2.message}`
        });
      }
    }
    if (token?.meta?.attributes?.find((attr) => attr.name === "process" && !attr.value))
      continue;
    token.children = parseTags(token.content, token.map[0]);
  }
};
var plugin = function(md) {
  md.block.ruler.before("paragraph", "annotations", block, {
    alt: ["paragraph", "blockquote"]
  });
  md.inline.ruler.push("containers", inline2);
  md.core.ruler.push("annotations", core2);
};
var getLine = function(state, n) {
  return state.src.slice(state.bMarks[n], state.eMarks[n]).trim();
};
var findClose = function(state, endLine) {
  for (let line = 1;line < endLine; line++)
    if (getLine(state, line) === fence2)
      return line;
};
var block2 = function(state, startLine, endLine, silent) {
  if (startLine != 0 || getLine(state, 0) != fence2)
    return false;
  const close = findClose(state, endLine);
  if (!close)
    return false;
  if (silent)
    return true;
  const token = state.push("frontmatter", "", 0);
  token.content = state.src.slice(state.eMarks[0], state.bMarks[close]).trim();
  token.map = [0, close];
  token.hidden = true;
  state.line = close + 1;
  return true;
};
var plugin2 = function(md) {
  md.block.ruler.before("hr", "frontmatter", block2);
};
var block3 = function(state, startLine, endLine, silent) {
  const start2 = state.bMarks[startLine] + state.tShift[startLine];
  if (!state.src.startsWith(OPEN2, start2))
    return false;
  const close = state.src.indexOf(CLOSE2, start2);
  if (!close)
    return false;
  if (silent)
    return true;
  const content = state.src.slice(start2 + OPEN2.length, close);
  const lines = content.split("\n").length;
  const token = state.push("comment", "", 0);
  token.content = content.trim();
  token.map = [startLine, startLine + lines];
  state.line += lines;
  return true;
};
var inline3 = function(state, silent) {
  if (!state.src.startsWith(OPEN2, state.pos))
    return false;
  const close = state.src.indexOf(CLOSE2, state.pos);
  if (!close)
    return false;
  if (silent)
    return true;
  const content = state.src.slice(state.pos + OPEN2.length, close);
  const token = state.push("comment", "", 0);
  token.content = content.trim();
  state.pos = close + CLOSE2.length;
  return true;
};
var plugin3 = function(md) {
  md.block.ruler.before("table", "comment", block3, { alt: ["paragraph"] });
  md.inline.ruler.push("comment", inline3);
};
var validateType = function(type, value, config, key) {
  if (!type)
    return true;
  if (ast_default.isFunction(value) && config.validation?.validateFunctions) {
    const schema = config.functions?.[value.name];
    return !schema?.returns ? true : Array.isArray(schema.returns) ? schema.returns.find((t) => t === type) !== undefined : schema.returns === type;
  }
  if (ast_default.isAst(value))
    return true;
  if (Array.isArray(type))
    return type.some((t) => validateType(t, value, config, key));
  if (typeof type === "string")
    type = TypeMappings[type];
  if (typeof type === "function") {
    const instance = new type;
    if (instance.validate) {
      return instance.validate(value, config, key);
    }
  }
  return value != null && value.constructor === type;
};
var typeToString = function(type) {
  if (typeof type === "string")
    return type;
  if (Array.isArray(type))
    return type.map(typeToString).join(" | ");
  return type.name;
};
var validateFunction = function(fn2, config) {
  const schema = config.functions?.[fn2.name];
  const errors = [];
  if (!schema)
    return [
      {
        id: "function-undefined",
        level: "critical",
        message: `Undefined function: '${fn2.name}'`
      }
    ];
  if (schema.validate)
    errors.push(...schema.validate(fn2, config));
  if (schema.parameters) {
    for (const [key, value] of Object.entries(fn2.parameters)) {
      const param = schema.parameters?.[key];
      if (!param) {
        errors.push({
          id: "parameter-undefined",
          level: "error",
          message: `Invalid parameter: '${key}'`
        });
        continue;
      }
      if (ast_default.isAst(value) && !ast_default.isFunction(value))
        continue;
      if (param.type) {
        const valid = validateType(param.type, value, config, key);
        if (valid === false) {
          errors.push({
            id: "parameter-type-invalid",
            level: "error",
            message: `Parameter '${key}' of '${fn2.name}' must be type of '${typeToString(param.type)}'`
          });
        } else if (Array.isArray(valid)) {
          errors.push(...valid);
        }
      }
    }
  }
  for (const [key, { required }] of Object.entries(schema.parameters ?? {}))
    if (required && fn2.parameters[key] === undefined)
      errors.push({
        id: "parameter-missing-required",
        level: "error",
        message: `Missing required parameter: '${key}'`
      });
  return errors;
};
var displayMatches = function(matches, n) {
  if (matches.length <= n)
    return JSON.stringify(matches);
  const items = matches.slice(0, n).map((item2) => JSON.stringify(item2));
  return `[${items.join(",")}, ... ${matches.length - n} more]`;
};
var validator = function(node2, config) {
  const schema = node2.findSchema(config);
  const errors = [...node2.errors || []];
  if (!schema) {
    errors.push({
      id: node2.tag ? "tag-undefined" : "node-undefined",
      level: "critical",
      message: node2.tag ? `Undefined tag: '${node2.tag}'` : `Undefined node: '${node2.type}'`
    });
    return errors;
  }
  if (schema.inline != null && node2.inline !== schema.inline)
    errors.push({
      id: "tag-placement-invalid",
      level: "critical",
      message: `'${node2.tag}' tag should be ${schema.inline ? "inline" : "block"}`
    });
  if (schema.selfClosing && node2.children.length > 0)
    errors.push({
      id: "tag-selfclosing-has-children",
      level: "critical",
      message: `'${node2.tag}' tag should be self-closing`
    });
  const attributes = {
    ...globalAttributes,
    ...schema.attributes
  };
  for (const key of Object.keys(node2.slots)) {
    const slot2 = schema.slots?.[key];
    if (!slot2)
      errors.push({
        id: "slot-undefined",
        level: "error",
        message: `Invalid slot: '${key}'`
      });
  }
  for (let [key, value] of Object.entries(node2.attributes)) {
    const attrib = attributes[key];
    if (!attrib) {
      errors.push({
        id: "attribute-undefined",
        level: "error",
        message: `Invalid attribute: '${key}'`
      });
      continue;
    }
    let { type, matches, errorLevel } = attrib;
    if (ast_default.isAst(value)) {
      if (ast_default.isFunction(value) && config.validation?.validateFunctions)
        errors.push(...validateFunction(value, config));
      else if (ast_default.isVariable(value) && config.variables) {
        let missing = false;
        let variables = config.variables;
        for (const key2 of value.path) {
          if (!Object.prototype.hasOwnProperty.call(variables, key2)) {
            missing = true;
            break;
          }
          variables = variables[key2];
        }
        if (missing) {
          errors.push({
            id: "variable-undefined",
            level: "error",
            message: `Undefined variable: '${value.path.join(".")}'`
          });
        }
      } else
        continue;
    }
    value = value;
    if (type) {
      const valid = validateType(type, value, config, key);
      if (valid === false) {
        errors.push({
          id: "attribute-type-invalid",
          level: errorLevel || "error",
          message: `Attribute '${key}' must be type of '${typeToString(type)}'`
        });
      }
      if (Array.isArray(valid)) {
        errors.push(...valid);
      }
    }
    if (typeof matches === "function")
      matches = matches(config);
    if (Array.isArray(matches) && !matches.includes(value))
      errors.push({
        id: "attribute-value-invalid",
        level: errorLevel || "error",
        message: `Attribute '${key}' must match one of ${displayMatches(matches, 8)}. Got '${value}' instead.`
      });
    if (matches instanceof RegExp && !matches.test(value))
      errors.push({
        id: "attribute-value-invalid",
        level: errorLevel || "error",
        message: `Attribute '${key}' must match ${matches}. Got '${value}' instead.`
      });
    if (typeof attrib.validate === "function") {
      const attribErrors = attrib.validate(value, config, key);
      if (Array.isArray(attribErrors))
        errors.push(...attribErrors);
    }
  }
  for (const [key, { required }] of Object.entries(attributes))
    if (required && node2.attributes[key] === undefined)
      errors.push({
        id: "attribute-missing-required",
        level: "error",
        message: `Missing required attribute: '${key}'`
      });
  if (schema.slots) {
    for (const [key, { required }] of Object.entries(schema.slots))
      if (required && node2.slots[key] === undefined)
        errors.push({
          id: "slot-missing-required",
          level: "error",
          message: `Missing required slot: '${key}'`
        });
  }
  for (const { type } of node2.children) {
    if (schema.children && type !== "error" && !schema.children.includes(type))
      errors.push({
        id: "child-invalid",
        level: "warning",
        message: `Can't nest '${type}' in '${node2.tag || node2.type}'`
      });
  }
  if (schema.validate) {
    const schemaErrors = schema.validate(node2, config);
    if (isPromise(schemaErrors)) {
      return schemaErrors.then((e) => errors.concat(e));
    }
    errors.push(...schemaErrors);
  }
  return errors;
};
function* walkWithParents(node2, parents = []) {
  yield [node2, parents];
  for (const child of [...Object.values(node2.slots), ...node2.children])
    yield* walkWithParents(child, [...parents, node2]);
}
var validateTree = function(content, config) {
  const output = [...walkWithParents(content)].map(([node2, parents]) => {
    const { type, lines, location } = node2;
    const updatedConfig = {
      ...config,
      validation: { ...config.validation, parents }
    };
    const errors = validator(node2, updatedConfig);
    if (isPromise(errors)) {
      return errors.then((e) => e.map((error2) => ({ type, lines, location, error: error2 })));
    }
    return errors.map((error2) => ({ type, lines, location, error: error2 }));
  });
  if (output.some(isPromise)) {
    return Promise.all(output).then((o) => o.flat());
  }
  return output.flat();
};
var mergeConfig = function(config = {}) {
  return {
    ...config,
    tags: {
      ...tags_default,
      ...config.tags
    },
    nodes: {
      ...schema_exports,
      ...config.nodes
    },
    functions: {
      ...functions_default,
      ...config.functions
    }
  };
};
var parse3 = function(content, args) {
  if (typeof content === "string")
    content = tokenizer.tokenize(content);
  return parser(content, args);
};
var resolve22 = function(content, config) {
  if (Array.isArray(content))
    return content.flatMap((child) => child.resolve(config));
  return content.resolve(config);
};
var transform2 = function(nodes, options) {
  const config = mergeConfig(options);
  const content = resolve22(nodes, config);
  if (Array.isArray(content))
    return content.flatMap((child) => child.transform(config));
  return content.transform(config);
};
var validate = function(content, options) {
  const config = mergeConfig(options);
  return validateTree(content, config);
};
var createElement = function(name, attributes = {}, ...children) {
  return { name, attributes, children };
};
var __create2 = Object.create;
var __defProp2 = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames2 = Object.getOwnPropertyNames;
var __getProtoOf2 = Object.getPrototypeOf;
var __hasOwnProp2 = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp2(target, "__esModule", { value: true });
var __commonJS2 = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp2(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module, desc) => {
  if (module && typeof module === "object" || typeof module === "function") {
    for (let key of __getOwnPropNames2(module))
      if (!__hasOwnProp2.call(target, key) && key !== "default")
        __defProp2(target, key, { get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module) => {
  return __reExport(__markAsModule(__defProp2(module != null ? __create2(__getProtoOf2(module)) : {}, "default", module && module.__esModule && "default" in module ? { get: () => module.default, enumerable: true } : { value: module, enumerable: true })), module);
};
var require_tag = __commonJS2({
  "src/grammar/tag.js"(exports, module) {
    function peg$subclass(child, parent) {
      function C() {
        this.constructor = child;
      }
      C.prototype = parent.prototype;
      child.prototype = new C;
    }
    function peg$SyntaxError(message, expected, found, location) {
      this.message = message;
      this.expected = expected;
      this.found = found;
      this.location = location;
      this.name = "SyntaxError";
      if (typeof Error.captureStackTrace === "function") {
        Error.captureStackTrace(this, peg$SyntaxError);
      }
    }
    peg$subclass(peg$SyntaxError, Error);
    peg$SyntaxError.buildMessage = function(expected, found, location) {
      var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return '"' + literalEscape(expectation.text) + '"';
        },
        class: function(expectation) {
          var escapedParts = expectation.parts.map(function(part) {
            return Array.isArray(part) ? classEscape(part[0]) + "-" + classEscape(part[1]) : classEscape(part);
          });
          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },
        any: function() {
          return "any character";
        },
        end: function() {
          return "end of input";
        },
        other: function(expectation) {
          return expectation.description;
        },
        not: function(expectation) {
          return "not " + describeExpectation(expectation.expected);
        }
      };
      function hex(ch) {
        return ch.charCodeAt(0).toString(16).toUpperCase();
      }
      function literalEscape(s2) {
        return s2.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
          return "\\x0" + hex(ch);
        }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
          return "\\x" + hex(ch);
        });
      }
      function classEscape(s2) {
        return s2.replace(/\\/g, "\\\\").replace(/\]/g, "\\]").replace(/\^/g, "\\^").replace(/-/g, "\\-").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
          return "\\x0" + hex(ch);
        }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
          return "\\x" + hex(ch);
        });
      }
      function describeExpectation(expectation) {
        return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
      }
      function describeExpected(expected2) {
        var descriptions = expected2.map(describeExpectation);
        var i, j;
        descriptions.sort();
        if (descriptions.length > 0) {
          for (i = 1, j = 1;i < descriptions.length; i++) {
            if (descriptions[i - 1] !== descriptions[i]) {
              descriptions[j] = descriptions[i];
              j++;
            }
          }
          descriptions.length = j;
        }
        switch (descriptions.length) {
          case 1:
            return descriptions[0];
          case 2:
            return descriptions[0] + " or " + descriptions[1];
          default:
            return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
        }
      }
      function describeFound(found2) {
        return found2 ? '"' + literalEscape(found2) + '"' : "end of input";
      }
      return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
    };
    function peg$parse(input, options) {
      options = options !== undefined ? options : {};
      var peg$FAILED = {};
      var peg$startRuleFunctions = { Top: peg$parseTop };
      var peg$startRuleFunction = peg$parseTop;
      var peg$c0 = "/";
      var peg$c1 = ".";
      var peg$c2 = "#";
      var peg$c3 = "=";
      var peg$c4 = "(";
      var peg$c5 = ")";
      var peg$c6 = ",";
      var peg$c7 = "[";
      var peg$c8 = "]";
      var peg$c9 = "null";
      var peg$c10 = "true";
      var peg$c11 = "false";
      var peg$c12 = "{";
      var peg$c13 = "}";
      var peg$c14 = ":";
      var peg$c15 = "-";
      var peg$c16 = '"';
      var peg$c17 = "\\";
      var peg$c18 = "n";
      var peg$c19 = "r";
      var peg$c20 = "t";
      var peg$r0 = /^[$@]/;
      var peg$r1 = /^[0-9]/;
      var peg$r2 = /^[^\0-\x1F"\\]/;
      var peg$r3 = /^[a-zA-Z0-9_\-]/;
      var peg$r4 = /^[ \n\t]/;
      var peg$e0 = peg$literalExpectation("/", false);
      var peg$e1 = peg$otherExpectation("tag name");
      var peg$e2 = peg$otherExpectation("class");
      var peg$e3 = peg$otherExpectation("id");
      var peg$e4 = peg$literalExpectation("=", false);
      var peg$e5 = peg$literalExpectation("(", false);
      var peg$e6 = peg$literalExpectation(")", false);
      var peg$e7 = peg$literalExpectation(",", false);
      var peg$e8 = peg$otherExpectation("variable");
      var peg$e9 = peg$otherExpectation("null");
      var peg$e10 = peg$otherExpectation("boolean");
      var peg$e11 = peg$literalExpectation("[", false);
      var peg$e12 = peg$literalExpectation("]", false);
      var peg$e13 = peg$literalExpectation("{", false);
      var peg$e14 = peg$literalExpectation("}", false);
      var peg$e15 = peg$literalExpectation(":", false);
      var peg$e16 = peg$otherExpectation("number");
      var peg$e17 = peg$otherExpectation("string");
      var peg$e18 = peg$otherExpectation("identifier");
      var peg$e19 = peg$otherExpectation("whitespace");
      var peg$f0 = function(variable) {
        return { type: "variable", meta: { variable } };
      };
      var peg$f1 = function(attributes) {
        return { type: "annotation", meta: { attributes } };
      };
      var peg$f2 = function(tag, value) {
        return value;
      };
      var peg$f3 = function(tag, primary, attributes, close) {
        if (primary) {
          attributes = attributes || [];
          attributes.unshift({
            type: "attribute",
            name: "primary",
            value: primary
          });
        }
        const [type, nesting] = close ? ["tag", 0] : ["tag_open", 1];
        return { type, nesting, meta: { tag, attributes } };
      };
      var peg$f4 = function(tag) {
        return { type: "tag_close", nesting: -1, meta: { tag } };
      };
      var peg$f5 = function(head, tail) {
        return !head ? [] : [head, ...tail];
      };
      var peg$f6 = function(item2) {
        return item2;
      };
      var peg$f7 = function(ids) {
        return ids;
      };
      var peg$f8 = function(classes) {
        return classes;
      };
      var peg$f9 = function(attribute) {
        return attribute;
      };
      var peg$f10 = function(name) {
        return { type: "class", name, value: true };
      };
      var peg$f11 = function(value) {
        return { type: "attribute", name: "id", value };
      };
      var peg$f12 = function(name, value) {
        return { type: "attribute", name, value };
      };
      var peg$f13 = function(name, head, tail) {
        return head ? [head, ...tail] : [];
      };
      var peg$f14 = function(name, params) {
        let parameters = {};
        for (let [index, { name: name2, value }] of params.entries())
          parameters[name2 || index] = value;
        return new Function3(name, parameters);
      };
      var peg$f15 = function(name) {
        return name;
      };
      var peg$f16 = function(name, value) {
        return { name, value };
      };
      var peg$f17 = function(value) {
        return value;
      };
      var peg$f18 = function(prefix, head, tail) {
        if (prefix === "@")
          return [head, ...tail];
        return new Variable2([head, ...tail]);
      };
      var peg$f19 = function() {
        return null;
      };
      var peg$f20 = function() {
        return true;
      };
      var peg$f21 = function() {
        return false;
      };
      var peg$f22 = function(head, tail) {
        return [head, ...tail];
      };
      var peg$f23 = function(value) {
        return value || [];
      };
      var peg$f24 = function(head, tail) {
        return Object.assign(head, ...tail);
      };
      var peg$f25 = function(value) {
        return value || {};
      };
      var peg$f26 = function(key, value) {
        return key === "$$mdtype" ? {} : { [key]: value };
      };
      var peg$f27 = function() {
        return parseFloat(text2());
      };
      var peg$f28 = function(value) {
        return value.join("");
      };
      var peg$f29 = function() {
        return "\n";
      };
      var peg$f30 = function() {
        return "\r";
      };
      var peg$f31 = function() {
        return "	";
      };
      var peg$f32 = function(sequence) {
        return sequence;
      };
      var peg$currPos = 0;
      var peg$savedPos = 0;
      var peg$posDetailsCache = [{ line: 1, column: 1 }];
      var peg$expected = [];
      var peg$silentFails = 0;
      var peg$result;
      if ("startRule" in options) {
        if (!(options.startRule in peg$startRuleFunctions)) {
          throw new Error(`Can't start parsing from rule "` + options.startRule + '".');
        }
        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
      }
      function text2() {
        return input.substring(peg$savedPos, peg$currPos);
      }
      function offset3() {
        return peg$savedPos;
      }
      function range() {
        return [peg$savedPos, peg$currPos];
      }
      function location() {
        return peg$computeLocation(peg$savedPos, peg$currPos);
      }
      function expected(description, location2) {
        location2 = location2 !== undefined ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);
        throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location2);
      }
      function error2(message, location2) {
        location2 = location2 !== undefined ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);
        throw peg$buildSimpleError(message, location2);
      }
      function peg$literalExpectation(text3, ignoreCase) {
        return { type: "literal", text: text3, ignoreCase };
      }
      function peg$classExpectation(parts, inverted, ignoreCase) {
        return {
          type: "class",
          parts,
          inverted,
          ignoreCase
        };
      }
      function peg$anyExpectation() {
        return { type: "any" };
      }
      function peg$endExpectation() {
        return { type: "end" };
      }
      function peg$otherExpectation(description) {
        return { type: "other", description };
      }
      function peg$computePosDetails(pos) {
        var details = peg$posDetailsCache[pos];
        var p;
        if (details) {
          return details;
        } else {
          p = pos - 1;
          while (!peg$posDetailsCache[p]) {
            p--;
          }
          details = peg$posDetailsCache[p];
          details = {
            line: details.line,
            column: details.column
          };
          while (p < pos) {
            if (input.charCodeAt(p) === 10) {
              details.line++;
              details.column = 1;
            } else {
              details.column++;
            }
            p++;
          }
          peg$posDetailsCache[pos] = details;
          return details;
        }
      }
      var peg$VALIDFILENAME = typeof options.filename === "string" && options.filename.length > 0;
      function peg$computeLocation(startPos, endPos) {
        var loc = {};
        if (peg$VALIDFILENAME)
          loc.filename = options.filename;
        var startPosDetails = peg$computePosDetails(startPos);
        loc.start = {
          offset: startPos,
          line: startPosDetails.line,
          column: startPosDetails.column
        };
        var endPosDetails = peg$computePosDetails(endPos);
        loc.end = {
          offset: endPos,
          line: endPosDetails.line,
          column: endPosDetails.column
        };
        return loc;
      }
      function peg$begin() {
        peg$expected.push({ pos: peg$currPos, variants: [] });
      }
      function peg$expect(expected2) {
        var top2 = peg$expected[peg$expected.length - 1];
        if (peg$currPos < top2.pos) {
          return;
        }
        if (peg$currPos > top2.pos) {
          top2.pos = peg$currPos;
          top2.variants = [];
        }
        top2.variants.push(expected2);
      }
      function peg$end(invert) {
        var expected2 = peg$expected.pop();
        var top2 = peg$expected[peg$expected.length - 1];
        var variants = expected2.variants;
        if (top2.pos !== expected2.pos) {
          return;
        }
        if (invert) {
          variants = variants.map(function(e) {
            return e.type === "not" ? e.expected : { type: "not", expected: e };
          });
        }
        Array.prototype.push.apply(top2.variants, variants);
      }
      function peg$buildSimpleError(message, location2) {
        return new peg$SyntaxError(message, null, null, location2);
      }
      function peg$buildStructuredError(expected2, found, location2) {
        return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected2, found, location2), expected2, found, location2);
      }
      function peg$buildError() {
        var expected2 = peg$expected[0];
        var failPos = expected2.pos;
        return peg$buildStructuredError(expected2.variants, failPos < input.length ? input.charAt(failPos) : null, failPos < input.length ? peg$computeLocation(failPos, failPos + 1) : peg$computeLocation(failPos, failPos));
      }
      function peg$parseTop() {
        var s0;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        s0 = peg$parseTopLevelValue();
        if (s0 === peg$FAILED) {
          s0 = peg$parseAnnotation();
          if (s0 === peg$FAILED) {
            s0 = peg$parseTagOpen();
            if (s0 === peg$FAILED) {
              s0 = peg$parseTagClose();
            }
          }
        }
        return s0;
      }
      function peg$parseTopLevelValue() {
        var s0, s1;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        s0 = peg$currPos;
        s1 = peg$parseVariable();
        if (s1 === peg$FAILED) {
          s1 = peg$parseFunction();
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f0(s1);
        }
        s0 = s1;
        return s0;
      }
      function peg$parseAnnotation() {
        var s0, s1, s2, s3;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        s0 = peg$currPos;
        s1 = peg$parseTagAttributes();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parse_();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parse_();
          }
          peg$savedPos = s0;
          s0 = peg$f1(s1);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseTagOpen() {
        var s0, s1, s2, s3, s4, s5, s6;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        s0 = peg$currPos;
        s1 = peg$parseTagName();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parse_();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parse_();
          }
          s3 = peg$currPos;
          s4 = peg$parseValue();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            peg$savedPos = s3;
            s3 = peg$f2(s1, s4);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          s4 = peg$parseTagAttributes();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          rule$expects(peg$e0);
          if (input.charCodeAt(peg$currPos) === 47) {
            s6 = peg$c0;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
          }
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f3(s1, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseTagClose() {
        var s0, s1, s2;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        s0 = peg$currPos;
        rule$expects(peg$e0);
        if (input.charCodeAt(peg$currPos) === 47) {
          s1 = peg$c0;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseTagName();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f4(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseTagName() {
        var s0;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        rule$expects(peg$e1);
        peg$silentFails++;
        s0 = peg$parseIdentifier();
        peg$silentFails--;
        return s0;
      }
      function peg$parseTagAttributes() {
        var s0, s1, s2, s3;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        s0 = peg$currPos;
        s1 = peg$parseTagAttributesItem();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseTagAttributesTail();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseTagAttributesTail();
          }
          peg$savedPos = s0;
          s0 = peg$f5(s1, s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseTagAttributesTail() {
        var s0, s1, s2;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parse_();
          }
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseTagAttributesItem();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f6(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseTagAttributesItem() {
        var s0, s1;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        s0 = peg$currPos;
        s1 = peg$parseTagShortcutId();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f7(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseTagShortcutClass();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f8(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseTagAttribute();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f9(s1);
            }
            s0 = s1;
          }
        }
        return s0;
      }
      function peg$parseTagShortcutClass() {
        var s0, s1, s2;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        rule$expects(peg$e2);
        peg$silentFails++;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s1 = peg$c1;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseIdentifier();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f10(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        peg$silentFails--;
        return s0;
      }
      function peg$parseTagShortcutId() {
        var s0, s1, s2;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        rule$expects(peg$e3);
        peg$silentFails++;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 35) {
          s1 = peg$c2;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseIdentifier();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f11(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        peg$silentFails--;
        return s0;
      }
      function peg$parseTagAttribute() {
        var s0, s1, s2, s3;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        s0 = peg$currPos;
        s1 = peg$parseIdentifier();
        if (s1 !== peg$FAILED) {
          rule$expects(peg$e4);
          if (input.charCodeAt(peg$currPos) === 61) {
            s2 = peg$c3;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseValue();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f12(s1, s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseFunction() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        s0 = peg$currPos;
        s1 = peg$parseIdentifier();
        if (s1 !== peg$FAILED) {
          rule$expects(peg$e5);
          if (input.charCodeAt(peg$currPos) === 40) {
            s2 = peg$c4;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$parse_();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parse_();
            }
            s4 = peg$currPos;
            s5 = peg$parseFunctionParameter();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            s6 = [];
            s7 = peg$parseFunctionParameterTail();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parseFunctionParameterTail();
            }
            peg$savedPos = s4;
            s4 = peg$f13(s1, s5, s6);
            rule$expects(peg$e6);
            if (input.charCodeAt(peg$currPos) === 41) {
              s5 = peg$c5;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f14(s1, s4);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseFunctionParameter() {
        var s0, s1, s2, s3;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parseIdentifier();
        if (s2 !== peg$FAILED) {
          rule$expects(peg$e4);
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c3;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s1;
            s1 = peg$f15(s2);
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 === peg$FAILED) {
          s1 = null;
        }
        s2 = peg$parseValue();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f16(s1, s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseFunctionParameterTail() {
        var s0, s1, s2, s3, s4;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parse_();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parse_();
        }
        rule$expects(peg$e7);
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c6;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parse_();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parse_();
          }
          s4 = peg$parseFunctionParameter();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f17(s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseTrailingComma() {
        var s0, s1, s2;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parse_();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parse_();
        }
        rule$expects(peg$e7);
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c6;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = null;
        }
        return s0;
      }
      function peg$parseVariable() {
        var s0, s1, s2, s3, s4;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        rule$expects(peg$e8);
        peg$silentFails++;
        s0 = peg$currPos;
        if (peg$r0.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseIdentifier();
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$parseVariableTail();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseVariableTail();
            }
            peg$savedPos = s0;
            s0 = peg$f18(s1, s2, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        peg$silentFails--;
        return s0;
      }
      function peg$parseVariableTail() {
        var s0, s1, s2, s3;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s1 = peg$c1;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseIdentifier();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f15(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 91) {
            s1 = peg$c7;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseValueNumber();
            if (s2 === peg$FAILED) {
              s2 = peg$parseValueString();
            }
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s3 = peg$c8;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f17(s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
        return s0;
      }
      function peg$parseValue() {
        var s0;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        s0 = peg$parseValueNull();
        if (s0 === peg$FAILED) {
          s0 = peg$parseValueBoolean();
          if (s0 === peg$FAILED) {
            s0 = peg$parseValueString();
            if (s0 === peg$FAILED) {
              s0 = peg$parseValueNumber();
              if (s0 === peg$FAILED) {
                s0 = peg$parseValueArray();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseValueHash();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseFunction();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseVariable();
                    }
                  }
                }
              }
            }
          }
        }
        return s0;
      }
      function peg$parseValueNull() {
        var s0, s1;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        rule$expects(peg$e9);
        peg$silentFails++;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c9) {
          s1 = peg$c9;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f19();
        }
        s0 = s1;
        peg$silentFails--;
        return s0;
      }
      function peg$parseValueBoolean() {
        var s0, s1;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        rule$expects(peg$e10);
        peg$silentFails++;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c10) {
          s1 = peg$c10;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f20();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 5) === peg$c11) {
            s1 = peg$c11;
            peg$currPos += 5;
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f21();
          }
          s0 = s1;
        }
        peg$silentFails--;
        return s0;
      }
      function peg$parseValueArray() {
        var s0, s1, s2, s3, s4, s5, s6;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        s0 = peg$currPos;
        rule$expects(peg$e11);
        if (input.charCodeAt(peg$currPos) === 91) {
          s1 = peg$c7;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parse_();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parse_();
          }
          s3 = peg$currPos;
          s4 = peg$parseValue();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parseValueArrayTail();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseValueArrayTail();
            }
            s6 = peg$parseTrailingComma();
            peg$savedPos = s3;
            s3 = peg$f22(s4, s5);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          s4 = [];
          s5 = peg$parse_();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parse_();
          }
          rule$expects(peg$e12);
          if (input.charCodeAt(peg$currPos) === 93) {
            s5 = peg$c8;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f23(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseValueArrayTail() {
        var s0, s1, s2, s3, s4;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parse_();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parse_();
        }
        rule$expects(peg$e7);
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c6;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parse_();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parse_();
          }
          s4 = peg$parseValue();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f17(s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseValueHash() {
        var s0, s1, s2, s3, s4, s5, s6;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        s0 = peg$currPos;
        rule$expects(peg$e13);
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c12;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parse_();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parse_();
          }
          s3 = peg$currPos;
          s4 = peg$parseValueHashItem();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parseValueHashTail();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseValueHashTail();
            }
            s6 = peg$parseTrailingComma();
            peg$savedPos = s3;
            s3 = peg$f24(s4, s5);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          s4 = [];
          s5 = peg$parse_();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parse_();
          }
          rule$expects(peg$e14);
          if (input.charCodeAt(peg$currPos) === 125) {
            s5 = peg$c13;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f25(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseValueHashTail() {
        var s0, s1, s2, s3, s4;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parse_();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parse_();
        }
        rule$expects(peg$e7);
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c6;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parse_();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parse_();
          }
          s4 = peg$parseValueHashItem();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f6(s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseValueHashItem() {
        var s0, s1, s2, s3, s4;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        s0 = peg$currPos;
        s1 = peg$parseIdentifier();
        if (s1 === peg$FAILED) {
          s1 = peg$parseValueString();
        }
        if (s1 !== peg$FAILED) {
          rule$expects(peg$e15);
          if (input.charCodeAt(peg$currPos) === 58) {
            s2 = peg$c14;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$parse_();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parse_();
            }
            s4 = peg$parseValue();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f26(s1, s4);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseValueNumber() {
        var s0, s1, s2, s3, s4, s5, s6;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        rule$expects(peg$e16);
        peg$silentFails++;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 45) {
          s1 = peg$c15;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 === peg$FAILED) {
          s1 = null;
        }
        s2 = [];
        if (peg$r1.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$r1.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 46) {
            s4 = peg$c1;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            if (peg$r1.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
            }
            if (s6 !== peg$FAILED) {
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                if (peg$r1.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                }
              }
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f27();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        peg$silentFails--;
        return s0;
      }
      function peg$parseValueString() {
        var s0, s1, s2, s3;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        rule$expects(peg$e17);
        peg$silentFails++;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 34) {
          s1 = peg$c16;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseValueStringChars();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseValueStringChars();
          }
          if (input.charCodeAt(peg$currPos) === 34) {
            s3 = peg$c16;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f28(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        peg$silentFails--;
        return s0;
      }
      function peg$parseValueStringChars() {
        var s0;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        if (peg$r2.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseValueStringEscapes();
        }
        return s0;
      }
      function peg$parseValueStringEscapes() {
        var s0, s1, s2, s3;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 92) {
          s1 = peg$c17;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s2 = peg$c16;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 92) {
              s2 = peg$c17;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 110) {
                s3 = peg$c18;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s2;
                s3 = peg$f29();
              }
              s2 = s3;
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 114) {
                  s3 = peg$c19;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s2;
                  s3 = peg$f30();
                }
                s2 = s3;
                if (s2 === peg$FAILED) {
                  s2 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 116) {
                    s3 = peg$c20;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                  }
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s2;
                    s3 = peg$f31();
                  }
                  s2 = s3;
                }
              }
            }
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f32(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseIdentifier() {
        var s0, s1, s2;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        rule$expects(peg$e18);
        peg$silentFails++;
        s0 = peg$currPos;
        s1 = [];
        if (peg$r3.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            if (peg$r3.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
            }
          }
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s0 = input.substring(s0, peg$currPos);
        } else {
          s0 = s1;
        }
        peg$silentFails--;
        return s0;
      }
      function peg$parse_() {
        var s0;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        rule$expects(peg$e19);
        peg$silentFails++;
        if (peg$r4.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
        }
        peg$silentFails--;
        return s0;
      }
      const { Variable: Variable2, Function: Function3 } = options;
      peg$begin();
      peg$result = peg$startRuleFunction();
      if (peg$result !== peg$FAILED && peg$currPos === input.length) {
        return peg$result;
      } else {
        if (peg$result !== peg$FAILED && peg$currPos < input.length) {
          peg$expect(peg$endExpectation());
        }
        throw peg$buildError();
      }
    }
    module.exports = {
      SyntaxError: peg$SyntaxError,
      parse: peg$parse
    };
  }
});
var require_entities = __commonJS2({
  "node_modules/entities/lib/maps/entities.json"(exports, module) {
    module.exports = { Aacute: "\xC1", aacute: "\xE1", Abreve: "\u0102", abreve: "\u0103", ac: "\u223E", acd: "\u223F", acE: "\u223E\u0333", Acirc: "\xC2", acirc: "\xE2", acute: "\xB4", Acy: "\u0410", acy: "\u0430", AElig: "\xC6", aelig: "\xE6", af: "\u2061", Afr: "\uD835\uDD04", afr: "\uD835\uDD1E", Agrave: "\xC0", agrave: "\xE0", alefsym: "\u2135", aleph: "\u2135", Alpha: "\u0391", alpha: "\u03B1", Amacr: "\u0100", amacr: "\u0101", amalg: "\u2A3F", amp: "&", AMP: "&", andand: "\u2A55", And: "\u2A53", and: "\u2227", andd: "\u2A5C", andslope: "\u2A58", andv: "\u2A5A", ang: "\u2220", ange: "\u29A4", angle: "\u2220", angmsdaa: "\u29A8", angmsdab: "\u29A9", angmsdac: "\u29AA", angmsdad: "\u29AB", angmsdae: "\u29AC", angmsdaf: "\u29AD", angmsdag: "\u29AE", angmsdah: "\u29AF", angmsd: "\u2221", angrt: "\u221F", angrtvb: "\u22BE", angrtvbd: "\u299D", angsph: "\u2222", angst: "\xC5", angzarr: "\u237C", Aogon: "\u0104", aogon: "\u0105", Aopf: "\uD835\uDD38", aopf: "\uD835\uDD52", apacir: "\u2A6F", ap: "\u2248", apE: "\u2A70", ape: "\u224A", apid: "\u224B", apos: "'", ApplyFunction: "\u2061", approx: "\u2248", approxeq: "\u224A", Aring: "\xC5", aring: "\xE5", Ascr: "\uD835\uDC9C", ascr: "\uD835\uDCB6", Assign: "\u2254", ast: "*", asymp: "\u2248", asympeq: "\u224D", Atilde: "\xC3", atilde: "\xE3", Auml: "\xC4", auml: "\xE4", awconint: "\u2233", awint: "\u2A11", backcong: "\u224C", backepsilon: "\u03F6", backprime: "\u2035", backsim: "\u223D", backsimeq: "\u22CD", Backslash: "\u2216", Barv: "\u2AE7", barvee: "\u22BD", barwed: "\u2305", Barwed: "\u2306", barwedge: "\u2305", bbrk: "\u23B5", bbrktbrk: "\u23B6", bcong: "\u224C", Bcy: "\u0411", bcy: "\u0431", bdquo: "\u201E", becaus: "\u2235", because: "\u2235", Because: "\u2235", bemptyv: "\u29B0", bepsi: "\u03F6", bernou: "\u212C", Bernoullis: "\u212C", Beta: "\u0392", beta: "\u03B2", beth: "\u2136", between: "\u226C", Bfr: "\uD835\uDD05", bfr: "\uD835\uDD1F", bigcap: "\u22C2", bigcirc: "\u25EF", bigcup: "\u22C3", bigodot: "\u2A00", bigoplus: "\u2A01", bigotimes: "\u2A02", bigsqcup: "\u2A06", bigstar: "\u2605", bigtriangledown: "\u25BD", bigtriangleup: "\u25B3", biguplus: "\u2A04", bigvee: "\u22C1", bigwedge: "\u22C0", bkarow: "\u290D", blacklozenge: "\u29EB", blacksquare: "\u25AA", blacktriangle: "\u25B4", blacktriangledown: "\u25BE", blacktriangleleft: "\u25C2", blacktriangleright: "\u25B8", blank: "\u2423", blk12: "\u2592", blk14: "\u2591", blk34: "\u2593", block: "\u2588", bne: "=\u20E5", bnequiv: "\u2261\u20E5", bNot: "\u2AED", bnot: "\u2310", Bopf: "\uD835\uDD39", bopf: "\uD835\uDD53", bot: "\u22A5", bottom: "\u22A5", bowtie: "\u22C8", boxbox: "\u29C9", boxdl: "\u2510", boxdL: "\u2555", boxDl: "\u2556", boxDL: "\u2557", boxdr: "\u250C", boxdR: "\u2552", boxDr: "\u2553", boxDR: "\u2554", boxh: "\u2500", boxH: "\u2550", boxhd: "\u252C", boxHd: "\u2564", boxhD: "\u2565", boxHD: "\u2566", boxhu: "\u2534", boxHu: "\u2567", boxhU: "\u2568", boxHU: "\u2569", boxminus: "\u229F", boxplus: "\u229E", boxtimes: "\u22A0", boxul: "\u2518", boxuL: "\u255B", boxUl: "\u255C", boxUL: "\u255D", boxur: "\u2514", boxuR: "\u2558", boxUr: "\u2559", boxUR: "\u255A", boxv: "\u2502", boxV: "\u2551", boxvh: "\u253C", boxvH: "\u256A", boxVh: "\u256B", boxVH: "\u256C", boxvl: "\u2524", boxvL: "\u2561", boxVl: "\u2562", boxVL: "\u2563", boxvr: "\u251C", boxvR: "\u255E", boxVr: "\u255F", boxVR: "\u2560", bprime: "\u2035", breve: "\u02D8", Breve: "\u02D8", brvbar: "\xA6", bscr: "\uD835\uDCB7", Bscr: "\u212C", bsemi: "\u204F", bsim: "\u223D", bsime: "\u22CD", bsolb: "\u29C5", bsol: "\\", bsolhsub: "\u27C8", bull: "\u2022", bullet: "\u2022", bump: "\u224E", bumpE: "\u2AAE", bumpe: "\u224F", Bumpeq: "\u224E", bumpeq: "\u224F", Cacute: "\u0106", cacute: "\u0107", capand: "\u2A44", capbrcup: "\u2A49", capcap: "\u2A4B", cap: "\u2229", Cap: "\u22D2", capcup: "\u2A47", capdot: "\u2A40", CapitalDifferentialD: "\u2145", caps: "\u2229\uFE00", caret: "\u2041", caron: "\u02C7", Cayleys: "\u212D", ccaps: "\u2A4D", Ccaron: "\u010C", ccaron: "\u010D", Ccedil: "\xC7", ccedil: "\xE7", Ccirc: "\u0108", ccirc: "\u0109", Cconint: "\u2230", ccups: "\u2A4C", ccupssm: "\u2A50", Cdot: "\u010A", cdot: "\u010B", cedil: "\xB8", Cedilla: "\xB8", cemptyv: "\u29B2", cent: "\xA2", centerdot: "\xB7", CenterDot: "\xB7", cfr: "\uD835\uDD20", Cfr: "\u212D", CHcy: "\u0427", chcy: "\u0447", check: "\u2713", checkmark: "\u2713", Chi: "\u03A7", chi: "\u03C7", circ: "\u02C6", circeq: "\u2257", circlearrowleft: "\u21BA", circlearrowright: "\u21BB", circledast: "\u229B", circledcirc: "\u229A", circleddash: "\u229D", CircleDot: "\u2299", circledR: "\xAE", circledS: "\u24C8", CircleMinus: "\u2296", CirclePlus: "\u2295", CircleTimes: "\u2297", cir: "\u25CB", cirE: "\u29C3", cire: "\u2257", cirfnint: "\u2A10", cirmid: "\u2AEF", cirscir: "\u29C2", ClockwiseContourIntegral: "\u2232", CloseCurlyDoubleQuote: "\u201D", CloseCurlyQuote: "\u2019", clubs: "\u2663", clubsuit: "\u2663", colon: ":", Colon: "\u2237", Colone: "\u2A74", colone: "\u2254", coloneq: "\u2254", comma: ",", commat: "@", comp: "\u2201", compfn: "\u2218", complement: "\u2201", complexes: "\u2102", cong: "\u2245", congdot: "\u2A6D", Congruent: "\u2261", conint: "\u222E", Conint: "\u222F", ContourIntegral: "\u222E", copf: "\uD835\uDD54", Copf: "\u2102", coprod: "\u2210", Coproduct: "\u2210", copy: "\xA9", COPY: "\xA9", copysr: "\u2117", CounterClockwiseContourIntegral: "\u2233", crarr: "\u21B5", cross: "\u2717", Cross: "\u2A2F", Cscr: "\uD835\uDC9E", cscr: "\uD835\uDCB8", csub: "\u2ACF", csube: "\u2AD1", csup: "\u2AD0", csupe: "\u2AD2", ctdot: "\u22EF", cudarrl: "\u2938", cudarrr: "\u2935", cuepr: "\u22DE", cuesc: "\u22DF", cularr: "\u21B6", cularrp: "\u293D", cupbrcap: "\u2A48", cupcap: "\u2A46", CupCap: "\u224D", cup: "\u222A", Cup: "\u22D3", cupcup: "\u2A4A", cupdot: "\u228D", cupor: "\u2A45", cups: "\u222A\uFE00", curarr: "\u21B7", curarrm: "\u293C", curlyeqprec: "\u22DE", curlyeqsucc: "\u22DF", curlyvee: "\u22CE", curlywedge: "\u22CF", curren: "\xA4", curvearrowleft: "\u21B6", curvearrowright: "\u21B7", cuvee: "\u22CE", cuwed: "\u22CF", cwconint: "\u2232", cwint: "\u2231", cylcty: "\u232D", dagger: "\u2020", Dagger: "\u2021", daleth: "\u2138", darr: "\u2193", Darr: "\u21A1", dArr: "\u21D3", dash: "\u2010", Dashv: "\u2AE4", dashv: "\u22A3", dbkarow: "\u290F", dblac: "\u02DD", Dcaron: "\u010E", dcaron: "\u010F", Dcy: "\u0414", dcy: "\u0434", ddagger: "\u2021", ddarr: "\u21CA", DD: "\u2145", dd: "\u2146", DDotrahd: "\u2911", ddotseq: "\u2A77", deg: "\xB0", Del: "\u2207", Delta: "\u0394", delta: "\u03B4", demptyv: "\u29B1", dfisht: "\u297F", Dfr: "\uD835\uDD07", dfr: "\uD835\uDD21", dHar: "\u2965", dharl: "\u21C3", dharr: "\u21C2", DiacriticalAcute: "\xB4", DiacriticalDot: "\u02D9", DiacriticalDoubleAcute: "\u02DD", DiacriticalGrave: "`", DiacriticalTilde: "\u02DC", diam: "\u22C4", diamond: "\u22C4", Diamond: "\u22C4", diamondsuit: "\u2666", diams: "\u2666", die: "\xA8", DifferentialD: "\u2146", digamma: "\u03DD", disin: "\u22F2", div: "\xF7", divide: "\xF7", divideontimes: "\u22C7", divonx: "\u22C7", DJcy: "\u0402", djcy: "\u0452", dlcorn: "\u231E", dlcrop: "\u230D", dollar: "$", Dopf: "\uD835\uDD3B", dopf: "\uD835\uDD55", Dot: "\xA8", dot: "\u02D9", DotDot: "\u20DC", doteq: "\u2250", doteqdot: "\u2251", DotEqual: "\u2250", dotminus: "\u2238", dotplus: "\u2214", dotsquare: "\u22A1", doublebarwedge: "\u2306", DoubleContourIntegral: "\u222F", DoubleDot: "\xA8", DoubleDownArrow: "\u21D3", DoubleLeftArrow: "\u21D0", DoubleLeftRightArrow: "\u21D4", DoubleLeftTee: "\u2AE4", DoubleLongLeftArrow: "\u27F8", DoubleLongLeftRightArrow: "\u27FA", DoubleLongRightArrow: "\u27F9", DoubleRightArrow: "\u21D2", DoubleRightTee: "\u22A8", DoubleUpArrow: "\u21D1", DoubleUpDownArrow: "\u21D5", DoubleVerticalBar: "\u2225", DownArrowBar: "\u2913", downarrow: "\u2193", DownArrow: "\u2193", Downarrow: "\u21D3", DownArrowUpArrow: "\u21F5", DownBreve: "\u0311", downdownarrows: "\u21CA", downharpoonleft: "\u21C3", downharpoonright: "\u21C2", DownLeftRightVector: "\u2950", DownLeftTeeVector: "\u295E", DownLeftVectorBar: "\u2956", DownLeftVector: "\u21BD", DownRightTeeVector: "\u295F", DownRightVectorBar: "\u2957", DownRightVector: "\u21C1", DownTeeArrow: "\u21A7", DownTee: "\u22A4", drbkarow: "\u2910", drcorn: "\u231F", drcrop: "\u230C", Dscr: "\uD835\uDC9F", dscr: "\uD835\uDCB9", DScy: "\u0405", dscy: "\u0455", dsol: "\u29F6", Dstrok: "\u0110", dstrok: "\u0111", dtdot: "\u22F1", dtri: "\u25BF", dtrif: "\u25BE", duarr: "\u21F5", duhar: "\u296F", dwangle: "\u29A6", DZcy: "\u040F", dzcy: "\u045F", dzigrarr: "\u27FF", Eacute: "\xC9", eacute: "\xE9", easter: "\u2A6E", Ecaron: "\u011A", ecaron: "\u011B", Ecirc: "\xCA", ecirc: "\xEA", ecir: "\u2256", ecolon: "\u2255", Ecy: "\u042D", ecy: "\u044D", eDDot: "\u2A77", Edot: "\u0116", edot: "\u0117", eDot: "\u2251", ee: "\u2147", efDot: "\u2252", Efr: "\uD835\uDD08", efr: "\uD835\uDD22", eg: "\u2A9A", Egrave: "\xC8", egrave: "\xE8", egs: "\u2A96", egsdot: "\u2A98", el: "\u2A99", Element: "\u2208", elinters: "\u23E7", ell: "\u2113", els: "\u2A95", elsdot: "\u2A97", Emacr: "\u0112", emacr: "\u0113", empty: "\u2205", emptyset: "\u2205", EmptySmallSquare: "\u25FB", emptyv: "\u2205", EmptyVerySmallSquare: "\u25AB", emsp13: "\u2004", emsp14: "\u2005", emsp: "\u2003", ENG: "\u014A", eng: "\u014B", ensp: "\u2002", Eogon: "\u0118", eogon: "\u0119", Eopf: "\uD835\uDD3C", eopf: "\uD835\uDD56", epar: "\u22D5", eparsl: "\u29E3", eplus: "\u2A71", epsi: "\u03B5", Epsilon: "\u0395", epsilon: "\u03B5", epsiv: "\u03F5", eqcirc: "\u2256", eqcolon: "\u2255", eqsim: "\u2242", eqslantgtr: "\u2A96", eqslantless: "\u2A95", Equal: "\u2A75", equals: "=", EqualTilde: "\u2242", equest: "\u225F", Equilibrium: "\u21CC", equiv: "\u2261", equivDD: "\u2A78", eqvparsl: "\u29E5", erarr: "\u2971", erDot: "\u2253", escr: "\u212F", Escr: "\u2130", esdot: "\u2250", Esim: "\u2A73", esim: "\u2242", Eta: "\u0397", eta: "\u03B7", ETH: "\xD0", eth: "\xF0", Euml: "\xCB", euml: "\xEB", euro: "\u20AC", excl: "!", exist: "\u2203", Exists: "\u2203", expectation: "\u2130", exponentiale: "\u2147", ExponentialE: "\u2147", fallingdotseq: "\u2252", Fcy: "\u0424", fcy: "\u0444", female: "\u2640", ffilig: "\uFB03", fflig: "\uFB00", ffllig: "\uFB04", Ffr: "\uD835\uDD09", ffr: "\uD835\uDD23", filig: "\uFB01", FilledSmallSquare: "\u25FC", FilledVerySmallSquare: "\u25AA", fjlig: "fj", flat: "\u266D", fllig: "\uFB02", fltns: "\u25B1", fnof: "\u0192", Fopf: "\uD835\uDD3D", fopf: "\uD835\uDD57", forall: "\u2200", ForAll: "\u2200", fork: "\u22D4", forkv: "\u2AD9", Fouriertrf: "\u2131", fpartint: "\u2A0D", frac12: "\xBD", frac13: "\u2153", frac14: "\xBC", frac15: "\u2155", frac16: "\u2159", frac18: "\u215B", frac23: "\u2154", frac25: "\u2156", frac34: "\xBE", frac35: "\u2157", frac38: "\u215C", frac45: "\u2158", frac56: "\u215A", frac58: "\u215D", frac78: "\u215E", frasl: "\u2044", frown: "\u2322", fscr: "\uD835\uDCBB", Fscr: "\u2131", gacute: "\u01F5", Gamma: "\u0393", gamma: "\u03B3", Gammad: "\u03DC", gammad: "\u03DD", gap: "\u2A86", Gbreve: "\u011E", gbreve: "\u011F", Gcedil: "\u0122", Gcirc: "\u011C", gcirc: "\u011D", Gcy: "\u0413", gcy: "\u0433", Gdot: "\u0120", gdot: "\u0121", ge: "\u2265", gE: "\u2267", gEl: "\u2A8C", gel: "\u22DB", geq: "\u2265", geqq: "\u2267", geqslant: "\u2A7E", gescc: "\u2AA9", ges: "\u2A7E", gesdot: "\u2A80", gesdoto: "\u2A82", gesdotol: "\u2A84", gesl: "\u22DB\uFE00", gesles: "\u2A94", Gfr: "\uD835\uDD0A", gfr: "\uD835\uDD24", gg: "\u226B", Gg: "\u22D9", ggg: "\u22D9", gimel: "\u2137", GJcy: "\u0403", gjcy: "\u0453", gla: "\u2AA5", gl: "\u2277", glE: "\u2A92", glj: "\u2AA4", gnap: "\u2A8A", gnapprox: "\u2A8A", gne: "\u2A88", gnE: "\u2269", gneq: "\u2A88", gneqq: "\u2269", gnsim: "\u22E7", Gopf: "\uD835\uDD3E", gopf: "\uD835\uDD58", grave: "`", GreaterEqual: "\u2265", GreaterEqualLess: "\u22DB", GreaterFullEqual: "\u2267", GreaterGreater: "\u2AA2", GreaterLess: "\u2277", GreaterSlantEqual: "\u2A7E", GreaterTilde: "\u2273", Gscr: "\uD835\uDCA2", gscr: "\u210A", gsim: "\u2273", gsime: "\u2A8E", gsiml: "\u2A90", gtcc: "\u2AA7", gtcir: "\u2A7A", gt: ">", GT: ">", Gt: "\u226B", gtdot: "\u22D7", gtlPar: "\u2995", gtquest: "\u2A7C", gtrapprox: "\u2A86", gtrarr: "\u2978", gtrdot: "\u22D7", gtreqless: "\u22DB", gtreqqless: "\u2A8C", gtrless: "\u2277", gtrsim: "\u2273", gvertneqq: "\u2269\uFE00", gvnE: "\u2269\uFE00", Hacek: "\u02C7", hairsp: "\u200A", half: "\xBD", hamilt: "\u210B", HARDcy: "\u042A", hardcy: "\u044A", harrcir: "\u2948", harr: "\u2194", hArr: "\u21D4", harrw: "\u21AD", Hat: "^", hbar: "\u210F", Hcirc: "\u0124", hcirc: "\u0125", hearts: "\u2665", heartsuit: "\u2665", hellip: "\u2026", hercon: "\u22B9", hfr: "\uD835\uDD25", Hfr: "\u210C", HilbertSpace: "\u210B", hksearow: "\u2925", hkswarow: "\u2926", hoarr: "\u21FF", homtht: "\u223B", hookleftarrow: "\u21A9", hookrightarrow: "\u21AA", hopf: "\uD835\uDD59", Hopf: "\u210D", horbar: "\u2015", HorizontalLine: "\u2500", hscr: "\uD835\uDCBD", Hscr: "\u210B", hslash: "\u210F", Hstrok: "\u0126", hstrok: "\u0127", HumpDownHump: "\u224E", HumpEqual: "\u224F", hybull: "\u2043", hyphen: "\u2010", Iacute: "\xCD", iacute: "\xED", ic: "\u2063", Icirc: "\xCE", icirc: "\xEE", Icy: "\u0418", icy: "\u0438", Idot: "\u0130", IEcy: "\u0415", iecy: "\u0435", iexcl: "\xA1", iff: "\u21D4", ifr: "\uD835\uDD26", Ifr: "\u2111", Igrave: "\xCC", igrave: "\xEC", ii: "\u2148", iiiint: "\u2A0C", iiint: "\u222D", iinfin: "\u29DC", iiota: "\u2129", IJlig: "\u0132", ijlig: "\u0133", Imacr: "\u012A", imacr: "\u012B", image: "\u2111", ImaginaryI: "\u2148", imagline: "\u2110", imagpart: "\u2111", imath: "\u0131", Im: "\u2111", imof: "\u22B7", imped: "\u01B5", Implies: "\u21D2", incare: "\u2105", in: "\u2208", infin: "\u221E", infintie: "\u29DD", inodot: "\u0131", intcal: "\u22BA", int: "\u222B", Int: "\u222C", integers: "\u2124", Integral: "\u222B", intercal: "\u22BA", Intersection: "\u22C2", intlarhk: "\u2A17", intprod: "\u2A3C", InvisibleComma: "\u2063", InvisibleTimes: "\u2062", IOcy: "\u0401", iocy: "\u0451", Iogon: "\u012E", iogon: "\u012F", Iopf: "\uD835\uDD40", iopf: "\uD835\uDD5A", Iota: "\u0399", iota: "\u03B9", iprod: "\u2A3C", iquest: "\xBF", iscr: "\uD835\uDCBE", Iscr: "\u2110", isin: "\u2208", isindot: "\u22F5", isinE: "\u22F9", isins: "\u22F4", isinsv: "\u22F3", isinv: "\u2208", it: "\u2062", Itilde: "\u0128", itilde: "\u0129", Iukcy: "\u0406", iukcy: "\u0456", Iuml: "\xCF", iuml: "\xEF", Jcirc: "\u0134", jcirc: "\u0135", Jcy: "\u0419", jcy: "\u0439", Jfr: "\uD835\uDD0D", jfr: "\uD835\uDD27", jmath: "\u0237", Jopf: "\uD835\uDD41", jopf: "\uD835\uDD5B", Jscr: "\uD835\uDCA5", jscr: "\uD835\uDCBF", Jsercy: "\u0408", jsercy: "\u0458", Jukcy: "\u0404", jukcy: "\u0454", Kappa: "\u039A", kappa: "\u03BA", kappav: "\u03F0", Kcedil: "\u0136", kcedil: "\u0137", Kcy: "\u041A", kcy: "\u043A", Kfr: "\uD835\uDD0E", kfr: "\uD835\uDD28", kgreen: "\u0138", KHcy: "\u0425", khcy: "\u0445", KJcy: "\u040C", kjcy: "\u045C", Kopf: "\uD835\uDD42", kopf: "\uD835\uDD5C", Kscr: "\uD835\uDCA6", kscr: "\uD835\uDCC0", lAarr: "\u21DA", Lacute: "\u0139", lacute: "\u013A", laemptyv: "\u29B4", lagran: "\u2112", Lambda: "\u039B", lambda: "\u03BB", lang: "\u27E8", Lang: "\u27EA", langd: "\u2991", langle: "\u27E8", lap: "\u2A85", Laplacetrf: "\u2112", laquo: "\xAB", larrb: "\u21E4", larrbfs: "\u291F", larr: "\u2190", Larr: "\u219E", lArr: "\u21D0", larrfs: "\u291D", larrhk: "\u21A9", larrlp: "\u21AB", larrpl: "\u2939", larrsim: "\u2973", larrtl: "\u21A2", latail: "\u2919", lAtail: "\u291B", lat: "\u2AAB", late: "\u2AAD", lates: "\u2AAD\uFE00", lbarr: "\u290C", lBarr: "\u290E", lbbrk: "\u2772", lbrace: "{", lbrack: "[", lbrke: "\u298B", lbrksld: "\u298F", lbrkslu: "\u298D", Lcaron: "\u013D", lcaron: "\u013E", Lcedil: "\u013B", lcedil: "\u013C", lceil: "\u2308", lcub: "{", Lcy: "\u041B", lcy: "\u043B", ldca: "\u2936", ldquo: "\u201C", ldquor: "\u201E", ldrdhar: "\u2967", ldrushar: "\u294B", ldsh: "\u21B2", le: "\u2264", lE: "\u2266", LeftAngleBracket: "\u27E8", LeftArrowBar: "\u21E4", leftarrow: "\u2190", LeftArrow: "\u2190", Leftarrow: "\u21D0", LeftArrowRightArrow: "\u21C6", leftarrowtail: "\u21A2", LeftCeiling: "\u2308", LeftDoubleBracket: "\u27E6", LeftDownTeeVector: "\u2961", LeftDownVectorBar: "\u2959", LeftDownVector: "\u21C3", LeftFloor: "\u230A", leftharpoondown: "\u21BD", leftharpoonup: "\u21BC", leftleftarrows: "\u21C7", leftrightarrow: "\u2194", LeftRightArrow: "\u2194", Leftrightarrow: "\u21D4", leftrightarrows: "\u21C6", leftrightharpoons: "\u21CB", leftrightsquigarrow: "\u21AD", LeftRightVector: "\u294E", LeftTeeArrow: "\u21A4", LeftTee: "\u22A3", LeftTeeVector: "\u295A", leftthreetimes: "\u22CB", LeftTriangleBar: "\u29CF", LeftTriangle: "\u22B2", LeftTriangleEqual: "\u22B4", LeftUpDownVector: "\u2951", LeftUpTeeVector: "\u2960", LeftUpVectorBar: "\u2958", LeftUpVector: "\u21BF", LeftVectorBar: "\u2952", LeftVector: "\u21BC", lEg: "\u2A8B", leg: "\u22DA", leq: "\u2264", leqq: "\u2266", leqslant: "\u2A7D", lescc: "\u2AA8", les: "\u2A7D", lesdot: "\u2A7F", lesdoto: "\u2A81", lesdotor: "\u2A83", lesg: "\u22DA\uFE00", lesges: "\u2A93", lessapprox: "\u2A85", lessdot: "\u22D6", lesseqgtr: "\u22DA", lesseqqgtr: "\u2A8B", LessEqualGreater: "\u22DA", LessFullEqual: "\u2266", LessGreater: "\u2276", lessgtr: "\u2276", LessLess: "\u2AA1", lesssim: "\u2272", LessSlantEqual: "\u2A7D", LessTilde: "\u2272", lfisht: "\u297C", lfloor: "\u230A", Lfr: "\uD835\uDD0F", lfr: "\uD835\uDD29", lg: "\u2276", lgE: "\u2A91", lHar: "\u2962", lhard: "\u21BD", lharu: "\u21BC", lharul: "\u296A", lhblk: "\u2584", LJcy: "\u0409", ljcy: "\u0459", llarr: "\u21C7", ll: "\u226A", Ll: "\u22D8", llcorner: "\u231E", Lleftarrow: "\u21DA", llhard: "\u296B", lltri: "\u25FA", Lmidot: "\u013F", lmidot: "\u0140", lmoustache: "\u23B0", lmoust: "\u23B0", lnap: "\u2A89", lnapprox: "\u2A89", lne: "\u2A87", lnE: "\u2268", lneq: "\u2A87", lneqq: "\u2268", lnsim: "\u22E6", loang: "\u27EC", loarr: "\u21FD", lobrk: "\u27E6", longleftarrow: "\u27F5", LongLeftArrow: "\u27F5", Longleftarrow: "\u27F8", longleftrightarrow: "\u27F7", LongLeftRightArrow: "\u27F7", Longleftrightarrow: "\u27FA", longmapsto: "\u27FC", longrightarrow: "\u27F6", LongRightArrow: "\u27F6", Longrightarrow: "\u27F9", looparrowleft: "\u21AB", looparrowright: "\u21AC", lopar: "\u2985", Lopf: "\uD835\uDD43", lopf: "\uD835\uDD5D", loplus: "\u2A2D", lotimes: "\u2A34", lowast: "\u2217", lowbar: "_", LowerLeftArrow: "\u2199", LowerRightArrow: "\u2198", loz: "\u25CA", lozenge: "\u25CA", lozf: "\u29EB", lpar: "(", lparlt: "\u2993", lrarr: "\u21C6", lrcorner: "\u231F", lrhar: "\u21CB", lrhard: "\u296D", lrm: "\u200E", lrtri: "\u22BF", lsaquo: "\u2039", lscr: "\uD835\uDCC1", Lscr: "\u2112", lsh: "\u21B0", Lsh: "\u21B0", lsim: "\u2272", lsime: "\u2A8D", lsimg: "\u2A8F", lsqb: "[", lsquo: "\u2018", lsquor: "\u201A", Lstrok: "\u0141", lstrok: "\u0142", ltcc: "\u2AA6", ltcir: "\u2A79", lt: "<", LT: "<", Lt: "\u226A", ltdot: "\u22D6", lthree: "\u22CB", ltimes: "\u22C9", ltlarr: "\u2976", ltquest: "\u2A7B", ltri: "\u25C3", ltrie: "\u22B4", ltrif: "\u25C2", ltrPar: "\u2996", lurdshar: "\u294A", luruhar: "\u2966", lvertneqq: "\u2268\uFE00", lvnE: "\u2268\uFE00", macr: "\xAF", male: "\u2642", malt: "\u2720", maltese: "\u2720", Map: "\u2905", map: "\u21A6", mapsto: "\u21A6", mapstodown: "\u21A7", mapstoleft: "\u21A4", mapstoup: "\u21A5", marker: "\u25AE", mcomma: "\u2A29", Mcy: "\u041C", mcy: "\u043C", mdash: "\u2014", mDDot: "\u223A", measuredangle: "\u2221", MediumSpace: "\u205F", Mellintrf: "\u2133", Mfr: "\uD835\uDD10", mfr: "\uD835\uDD2A", mho: "\u2127", micro: "\xB5", midast: "*", midcir: "\u2AF0", mid: "\u2223", middot: "\xB7", minusb: "\u229F", minus: "\u2212", minusd: "\u2238", minusdu: "\u2A2A", MinusPlus: "\u2213", mlcp: "\u2ADB", mldr: "\u2026", mnplus: "\u2213", models: "\u22A7", Mopf: "\uD835\uDD44", mopf: "\uD835\uDD5E", mp: "\u2213", mscr: "\uD835\uDCC2", Mscr: "\u2133", mstpos: "\u223E", Mu: "\u039C", mu: "\u03BC", multimap: "\u22B8", mumap: "\u22B8", nabla: "\u2207", Nacute: "\u0143", nacute: "\u0144", nang: "\u2220\u20D2", nap: "\u2249", napE: "\u2A70\u0338", napid: "\u224B\u0338", napos: "\u0149", napprox: "\u2249", natural: "\u266E", naturals: "\u2115", natur: "\u266E", nbsp: "\xA0", nbump: "\u224E\u0338", nbumpe: "\u224F\u0338", ncap: "\u2A43", Ncaron: "\u0147", ncaron: "\u0148", Ncedil: "\u0145", ncedil: "\u0146", ncong: "\u2247", ncongdot: "\u2A6D\u0338", ncup: "\u2A42", Ncy: "\u041D", ncy: "\u043D", ndash: "\u2013", nearhk: "\u2924", nearr: "\u2197", neArr: "\u21D7", nearrow: "\u2197", ne: "\u2260", nedot: "\u2250\u0338", NegativeMediumSpace: "\u200B", NegativeThickSpace: "\u200B", NegativeThinSpace: "\u200B", NegativeVeryThinSpace: "\u200B", nequiv: "\u2262", nesear: "\u2928", nesim: "\u2242\u0338", NestedGreaterGreater: "\u226B", NestedLessLess: "\u226A", NewLine: "\n", nexist: "\u2204", nexists: "\u2204", Nfr: "\uD835\uDD11", nfr: "\uD835\uDD2B", ngE: "\u2267\u0338", nge: "\u2271", ngeq: "\u2271", ngeqq: "\u2267\u0338", ngeqslant: "\u2A7E\u0338", nges: "\u2A7E\u0338", nGg: "\u22D9\u0338", ngsim: "\u2275", nGt: "\u226B\u20D2", ngt: "\u226F", ngtr: "\u226F", nGtv: "\u226B\u0338", nharr: "\u21AE", nhArr: "\u21CE", nhpar: "\u2AF2", ni: "\u220B", nis: "\u22FC", nisd: "\u22FA", niv: "\u220B", NJcy: "\u040A", njcy: "\u045A", nlarr: "\u219A", nlArr: "\u21CD", nldr: "\u2025", nlE: "\u2266\u0338", nle: "\u2270", nleftarrow: "\u219A", nLeftarrow: "\u21CD", nleftrightarrow: "\u21AE", nLeftrightarrow: "\u21CE", nleq: "\u2270", nleqq: "\u2266\u0338", nleqslant: "\u2A7D\u0338", nles: "\u2A7D\u0338", nless: "\u226E", nLl: "\u22D8\u0338", nlsim: "\u2274", nLt: "\u226A\u20D2", nlt: "\u226E", nltri: "\u22EA", nltrie: "\u22EC", nLtv: "\u226A\u0338", nmid: "\u2224", NoBreak: "\u2060", NonBreakingSpace: "\xA0", nopf: "\uD835\uDD5F", Nopf: "\u2115", Not: "\u2AEC", not: "\xAC", NotCongruent: "\u2262", NotCupCap: "\u226D", NotDoubleVerticalBar: "\u2226", NotElement: "\u2209", NotEqual: "\u2260", NotEqualTilde: "\u2242\u0338", NotExists: "\u2204", NotGreater: "\u226F", NotGreaterEqual: "\u2271", NotGreaterFullEqual: "\u2267\u0338", NotGreaterGreater: "\u226B\u0338", NotGreaterLess: "\u2279", NotGreaterSlantEqual: "\u2A7E\u0338", NotGreaterTilde: "\u2275", NotHumpDownHump: "\u224E\u0338", NotHumpEqual: "\u224F\u0338", notin: "\u2209", notindot: "\u22F5\u0338", notinE: "\u22F9\u0338", notinva: "\u2209", notinvb: "\u22F7", notinvc: "\u22F6", NotLeftTriangleBar: "\u29CF\u0338", NotLeftTriangle: "\u22EA", NotLeftTriangleEqual: "\u22EC", NotLess: "\u226E", NotLessEqual: "\u2270", NotLessGreater: "\u2278", NotLessLess: "\u226A\u0338", NotLessSlantEqual: "\u2A7D\u0338", NotLessTilde: "\u2274", NotNestedGreaterGreater: "\u2AA2\u0338", NotNestedLessLess: "\u2AA1\u0338", notni: "\u220C", notniva: "\u220C", notnivb: "\u22FE", notnivc: "\u22FD", NotPrecedes: "\u2280", NotPrecedesEqual: "\u2AAF\u0338", NotPrecedesSlantEqual: "\u22E0", NotReverseElement: "\u220C", NotRightTriangleBar: "\u29D0\u0338", NotRightTriangle: "\u22EB", NotRightTriangleEqual: "\u22ED", NotSquareSubset: "\u228F\u0338", NotSquareSubsetEqual: "\u22E2", NotSquareSuperset: "\u2290\u0338", NotSquareSupersetEqual: "\u22E3", NotSubset: "\u2282\u20D2", NotSubsetEqual: "\u2288", NotSucceeds: "\u2281", NotSucceedsEqual: "\u2AB0\u0338", NotSucceedsSlantEqual: "\u22E1", NotSucceedsTilde: "\u227F\u0338", NotSuperset: "\u2283\u20D2", NotSupersetEqual: "\u2289", NotTilde: "\u2241", NotTildeEqual: "\u2244", NotTildeFullEqual: "\u2247", NotTildeTilde: "\u2249", NotVerticalBar: "\u2224", nparallel: "\u2226", npar: "\u2226", nparsl: "\u2AFD\u20E5", npart: "\u2202\u0338", npolint: "\u2A14", npr: "\u2280", nprcue: "\u22E0", nprec: "\u2280", npreceq: "\u2AAF\u0338", npre: "\u2AAF\u0338", nrarrc: "\u2933\u0338", nrarr: "\u219B", nrArr: "\u21CF", nrarrw: "\u219D\u0338", nrightarrow: "\u219B", nRightarrow: "\u21CF", nrtri: "\u22EB", nrtrie: "\u22ED", nsc: "\u2281", nsccue: "\u22E1", nsce: "\u2AB0\u0338", Nscr: "\uD835\uDCA9", nscr: "\uD835\uDCC3", nshortmid: "\u2224", nshortparallel: "\u2226", nsim: "\u2241", nsime: "\u2244", nsimeq: "\u2244", nsmid: "\u2224", nspar: "\u2226", nsqsube: "\u22E2", nsqsupe: "\u22E3", nsub: "\u2284", nsubE: "\u2AC5\u0338", nsube: "\u2288", nsubset: "\u2282\u20D2", nsubseteq: "\u2288", nsubseteqq: "\u2AC5\u0338", nsucc: "\u2281", nsucceq: "\u2AB0\u0338", nsup: "\u2285", nsupE: "\u2AC6\u0338", nsupe: "\u2289", nsupset: "\u2283\u20D2", nsupseteq: "\u2289", nsupseteqq: "\u2AC6\u0338", ntgl: "\u2279", Ntilde: "\xD1", ntilde: "\xF1", ntlg: "\u2278", ntriangleleft: "\u22EA", ntrianglelefteq: "\u22EC", ntriangleright: "\u22EB", ntrianglerighteq: "\u22ED", Nu: "\u039D", nu: "\u03BD", num: "#", numero: "\u2116", numsp: "\u2007", nvap: "\u224D\u20D2", nvdash: "\u22AC", nvDash: "\u22AD", nVdash: "\u22AE", nVDash: "\u22AF", nvge: "\u2265\u20D2", nvgt: ">\u20D2", nvHarr: "\u2904", nvinfin: "\u29DE", nvlArr: "\u2902", nvle: "\u2264\u20D2", nvlt: "<\u20D2", nvltrie: "\u22B4\u20D2", nvrArr: "\u2903", nvrtrie: "\u22B5\u20D2", nvsim: "\u223C\u20D2", nwarhk: "\u2923", nwarr: "\u2196", nwArr: "\u21D6", nwarrow: "\u2196", nwnear: "\u2927", Oacute: "\xD3", oacute: "\xF3", oast: "\u229B", Ocirc: "\xD4", ocirc: "\xF4", ocir: "\u229A", Ocy: "\u041E", ocy: "\u043E", odash: "\u229D", Odblac: "\u0150", odblac: "\u0151", odiv: "\u2A38", odot: "\u2299", odsold: "\u29BC", OElig: "\u0152", oelig: "\u0153", ofcir: "\u29BF", Ofr: "\uD835\uDD12", ofr: "\uD835\uDD2C", ogon: "\u02DB", Ograve: "\xD2", ograve: "\xF2", ogt: "\u29C1", ohbar: "\u29B5", ohm: "\u03A9", oint: "\u222E", olarr: "\u21BA", olcir: "\u29BE", olcross: "\u29BB", oline: "\u203E", olt: "\u29C0", Omacr: "\u014C", omacr: "\u014D", Omega: "\u03A9", omega: "\u03C9", Omicron: "\u039F", omicron: "\u03BF", omid: "\u29B6", ominus: "\u2296", Oopf: "\uD835\uDD46", oopf: "\uD835\uDD60", opar: "\u29B7", OpenCurlyDoubleQuote: "\u201C", OpenCurlyQuote: "\u2018", operp: "\u29B9", oplus: "\u2295", orarr: "\u21BB", Or: "\u2A54", or: "\u2228", ord: "\u2A5D", order: "\u2134", orderof: "\u2134", ordf: "\xAA", ordm: "\xBA", origof: "\u22B6", oror: "\u2A56", orslope: "\u2A57", orv: "\u2A5B", oS: "\u24C8", Oscr: "\uD835\uDCAA", oscr: "\u2134", Oslash: "\xD8", oslash: "\xF8", osol: "\u2298", Otilde: "\xD5", otilde: "\xF5", otimesas: "\u2A36", Otimes: "\u2A37", otimes: "\u2297", Ouml: "\xD6", ouml: "\xF6", ovbar: "\u233D", OverBar: "\u203E", OverBrace: "\u23DE", OverBracket: "\u23B4", OverParenthesis: "\u23DC", para: "\xB6", parallel: "\u2225", par: "\u2225", parsim: "\u2AF3", parsl: "\u2AFD", part: "\u2202", PartialD: "\u2202", Pcy: "\u041F", pcy: "\u043F", percnt: "%", period: ".", permil: "\u2030", perp: "\u22A5", pertenk: "\u2031", Pfr: "\uD835\uDD13", pfr: "\uD835\uDD2D", Phi: "\u03A6", phi: "\u03C6", phiv: "\u03D5", phmmat: "\u2133", phone: "\u260E", Pi: "\u03A0", pi: "\u03C0", pitchfork: "\u22D4", piv: "\u03D6", planck: "\u210F", planckh: "\u210E", plankv: "\u210F", plusacir: "\u2A23", plusb: "\u229E", pluscir: "\u2A22", plus: "+", plusdo: "\u2214", plusdu: "\u2A25", pluse: "\u2A72", PlusMinus: "\xB1", plusmn: "\xB1", plussim: "\u2A26", plustwo: "\u2A27", pm: "\xB1", Poincareplane: "\u210C", pointint: "\u2A15", popf: "\uD835\uDD61", Popf: "\u2119", pound: "\xA3", prap: "\u2AB7", Pr: "\u2ABB", pr: "\u227A", prcue: "\u227C", precapprox: "\u2AB7", prec: "\u227A", preccurlyeq: "\u227C", Precedes: "\u227A", PrecedesEqual: "\u2AAF", PrecedesSlantEqual: "\u227C", PrecedesTilde: "\u227E", preceq: "\u2AAF", precnapprox: "\u2AB9", precneqq: "\u2AB5", precnsim: "\u22E8", pre: "\u2AAF", prE: "\u2AB3", precsim: "\u227E", prime: "\u2032", Prime: "\u2033", primes: "\u2119", prnap: "\u2AB9", prnE: "\u2AB5", prnsim: "\u22E8", prod: "\u220F", Product: "\u220F", profalar: "\u232E", profline: "\u2312", profsurf: "\u2313", prop: "\u221D", Proportional: "\u221D", Proportion: "\u2237", propto: "\u221D", prsim: "\u227E", prurel: "\u22B0", Pscr: "\uD835\uDCAB", pscr: "\uD835\uDCC5", Psi: "\u03A8", psi: "\u03C8", puncsp: "\u2008", Qfr: "\uD835\uDD14", qfr: "\uD835\uDD2E", qint: "\u2A0C", qopf: "\uD835\uDD62", Qopf: "\u211A", qprime: "\u2057", Qscr: "\uD835\uDCAC", qscr: "\uD835\uDCC6", quaternions: "\u210D", quatint: "\u2A16", quest: "?", questeq: "\u225F", quot: '"', QUOT: '"', rAarr: "\u21DB", race: "\u223D\u0331", Racute: "\u0154", racute: "\u0155", radic: "\u221A", raemptyv: "\u29B3", rang: "\u27E9", Rang: "\u27EB", rangd: "\u2992", range: "\u29A5", rangle: "\u27E9", raquo: "\xBB", rarrap: "\u2975", rarrb: "\u21E5", rarrbfs: "\u2920", rarrc: "\u2933", rarr: "\u2192", Rarr: "\u21A0", rArr: "\u21D2", rarrfs: "\u291E", rarrhk: "\u21AA", rarrlp: "\u21AC", rarrpl: "\u2945", rarrsim: "\u2974", Rarrtl: "\u2916", rarrtl: "\u21A3", rarrw: "\u219D", ratail: "\u291A", rAtail: "\u291C", ratio: "\u2236", rationals: "\u211A", rbarr: "\u290D", rBarr: "\u290F", RBarr: "\u2910", rbbrk: "\u2773", rbrace: "}", rbrack: "]", rbrke: "\u298C", rbrksld: "\u298E", rbrkslu: "\u2990", Rcaron: "\u0158", rcaron: "\u0159", Rcedil: "\u0156", rcedil: "\u0157", rceil: "\u2309", rcub: "}", Rcy: "\u0420", rcy: "\u0440", rdca: "\u2937", rdldhar: "\u2969", rdquo: "\u201D", rdquor: "\u201D", rdsh: "\u21B3", real: "\u211C", realine: "\u211B", realpart: "\u211C", reals: "\u211D", Re: "\u211C", rect: "\u25AD", reg: "\xAE", REG: "\xAE", ReverseElement: "\u220B", ReverseEquilibrium: "\u21CB", ReverseUpEquilibrium: "\u296F", rfisht: "\u297D", rfloor: "\u230B", rfr: "\uD835\uDD2F", Rfr: "\u211C", rHar: "\u2964", rhard: "\u21C1", rharu: "\u21C0", rharul: "\u296C", Rho: "\u03A1", rho: "\u03C1", rhov: "\u03F1", RightAngleBracket: "\u27E9", RightArrowBar: "\u21E5", rightarrow: "\u2192", RightArrow: "\u2192", Rightarrow: "\u21D2", RightArrowLeftArrow: "\u21C4", rightarrowtail: "\u21A3", RightCeiling: "\u2309", RightDoubleBracket: "\u27E7", RightDownTeeVector: "\u295D", RightDownVectorBar: "\u2955", RightDownVector: "\u21C2", RightFloor: "\u230B", rightharpoondown: "\u21C1", rightharpoonup: "\u21C0", rightleftarrows: "\u21C4", rightleftharpoons: "\u21CC", rightrightarrows: "\u21C9", rightsquigarrow: "\u219D", RightTeeArrow: "\u21A6", RightTee: "\u22A2", RightTeeVector: "\u295B", rightthreetimes: "\u22CC", RightTriangleBar: "\u29D0", RightTriangle: "\u22B3", RightTriangleEqual: "\u22B5", RightUpDownVector: "\u294F", RightUpTeeVector: "\u295C", RightUpVectorBar: "\u2954", RightUpVector: "\u21BE", RightVectorBar: "\u2953", RightVector: "\u21C0", ring: "\u02DA", risingdotseq: "\u2253", rlarr: "\u21C4", rlhar: "\u21CC", rlm: "\u200F", rmoustache: "\u23B1", rmoust: "\u23B1", rnmid: "\u2AEE", roang: "\u27ED", roarr: "\u21FE", robrk: "\u27E7", ropar: "\u2986", ropf: "\uD835\uDD63", Ropf: "\u211D", roplus: "\u2A2E", rotimes: "\u2A35", RoundImplies: "\u2970", rpar: ")", rpargt: "\u2994", rppolint: "\u2A12", rrarr: "\u21C9", Rrightarrow: "\u21DB", rsaquo: "\u203A", rscr: "\uD835\uDCC7", Rscr: "\u211B", rsh: "\u21B1", Rsh: "\u21B1", rsqb: "]", rsquo: "\u2019", rsquor: "\u2019", rthree: "\u22CC", rtimes: "\u22CA", rtri: "\u25B9", rtrie: "\u22B5", rtrif: "\u25B8", rtriltri: "\u29CE", RuleDelayed: "\u29F4", ruluhar: "\u2968", rx: "\u211E", Sacute: "\u015A", sacute: "\u015B", sbquo: "\u201A", scap: "\u2AB8", Scaron: "\u0160", scaron: "\u0161", Sc: "\u2ABC", sc: "\u227B", sccue: "\u227D", sce: "\u2AB0", scE: "\u2AB4", Scedil: "\u015E", scedil: "\u015F", Scirc: "\u015C", scirc: "\u015D", scnap: "\u2ABA", scnE: "\u2AB6", scnsim: "\u22E9", scpolint: "\u2A13", scsim: "\u227F", Scy: "\u0421", scy: "\u0441", sdotb: "\u22A1", sdot: "\u22C5", sdote: "\u2A66", searhk: "\u2925", searr: "\u2198", seArr: "\u21D8", searrow: "\u2198", sect: "\xA7", semi: ";", seswar: "\u2929", setminus: "\u2216", setmn: "\u2216", sext: "\u2736", Sfr: "\uD835\uDD16", sfr: "\uD835\uDD30", sfrown: "\u2322", sharp: "\u266F", SHCHcy: "\u0429", shchcy: "\u0449", SHcy: "\u0428", shcy: "\u0448", ShortDownArrow: "\u2193", ShortLeftArrow: "\u2190", shortmid: "\u2223", shortparallel: "\u2225", ShortRightArrow: "\u2192", ShortUpArrow: "\u2191", shy: "\xAD", Sigma: "\u03A3", sigma: "\u03C3", sigmaf: "\u03C2", sigmav: "\u03C2", sim: "\u223C", simdot: "\u2A6A", sime: "\u2243", simeq: "\u2243", simg: "\u2A9E", simgE: "\u2AA0", siml: "\u2A9D", simlE: "\u2A9F", simne: "\u2246", simplus: "\u2A24", simrarr: "\u2972", slarr: "\u2190", SmallCircle: "\u2218", smallsetminus: "\u2216", smashp: "\u2A33", smeparsl: "\u29E4", smid: "\u2223", smile: "\u2323", smt: "\u2AAA", smte: "\u2AAC", smtes: "\u2AAC\uFE00", SOFTcy: "\u042C", softcy: "\u044C", solbar: "\u233F", solb: "\u29C4", sol: "/", Sopf: "\uD835\uDD4A", sopf: "\uD835\uDD64", spades: "\u2660", spadesuit: "\u2660", spar: "\u2225", sqcap: "\u2293", sqcaps: "\u2293\uFE00", sqcup: "\u2294", sqcups: "\u2294\uFE00", Sqrt: "\u221A", sqsub: "\u228F", sqsube: "\u2291", sqsubset: "\u228F", sqsubseteq: "\u2291", sqsup: "\u2290", sqsupe: "\u2292", sqsupset: "\u2290", sqsupseteq: "\u2292", square: "\u25A1", Square: "\u25A1", SquareIntersection: "\u2293", SquareSubset: "\u228F", SquareSubsetEqual: "\u2291", SquareSuperset: "\u2290", SquareSupersetEqual: "\u2292", SquareUnion: "\u2294", squarf: "\u25AA", squ: "\u25A1", squf: "\u25AA", srarr: "\u2192", Sscr: "\uD835\uDCAE", sscr: "\uD835\uDCC8", ssetmn: "\u2216", ssmile: "\u2323", sstarf: "\u22C6", Star: "\u22C6", star: "\u2606", starf: "\u2605", straightepsilon: "\u03F5", straightphi: "\u03D5", strns: "\xAF", sub: "\u2282", Sub: "\u22D0", subdot: "\u2ABD", subE: "\u2AC5", sube: "\u2286", subedot: "\u2AC3", submult: "\u2AC1", subnE: "\u2ACB", subne: "\u228A", subplus: "\u2ABF", subrarr: "\u2979", subset: "\u2282", Subset: "\u22D0", subseteq: "\u2286", subseteqq: "\u2AC5", SubsetEqual: "\u2286", subsetneq: "\u228A", subsetneqq: "\u2ACB", subsim: "\u2AC7", subsub: "\u2AD5", subsup: "\u2AD3", succapprox: "\u2AB8", succ: "\u227B", succcurlyeq: "\u227D", Succeeds: "\u227B", SucceedsEqual: "\u2AB0", SucceedsSlantEqual: "\u227D", SucceedsTilde: "\u227F", succeq: "\u2AB0", succnapprox: "\u2ABA", succneqq: "\u2AB6", succnsim: "\u22E9", succsim: "\u227F", SuchThat: "\u220B", sum: "\u2211", Sum: "\u2211", sung: "\u266A", sup1: "\xB9", sup2: "\xB2", sup3: "\xB3", sup: "\u2283", Sup: "\u22D1", supdot: "\u2ABE", supdsub: "\u2AD8", supE: "\u2AC6", supe: "\u2287", supedot: "\u2AC4", Superset: "\u2283", SupersetEqual: "\u2287", suphsol: "\u27C9", suphsub: "\u2AD7", suplarr: "\u297B", supmult: "\u2AC2", supnE: "\u2ACC", supne: "\u228B", supplus: "\u2AC0", supset: "\u2283", Supset: "\u22D1", supseteq: "\u2287", supseteqq: "\u2AC6", supsetneq: "\u228B", supsetneqq: "\u2ACC", supsim: "\u2AC8", supsub: "\u2AD4", supsup: "\u2AD6", swarhk: "\u2926", swarr: "\u2199", swArr: "\u21D9", swarrow: "\u2199", swnwar: "\u292A", szlig: "\xDF", Tab: "	", target: "\u2316", Tau: "\u03A4", tau: "\u03C4", tbrk: "\u23B4", Tcaron: "\u0164", tcaron: "\u0165", Tcedil: "\u0162", tcedil: "\u0163", Tcy: "\u0422", tcy: "\u0442", tdot: "\u20DB", telrec: "\u2315", Tfr: "\uD835\uDD17", tfr: "\uD835\uDD31", there4: "\u2234", therefore: "\u2234", Therefore: "\u2234", Theta: "\u0398", theta: "\u03B8", thetasym: "\u03D1", thetav: "\u03D1", thickapprox: "\u2248", thicksim: "\u223C", ThickSpace: "\u205F\u200A", ThinSpace: "\u2009", thinsp: "\u2009", thkap: "\u2248", thksim: "\u223C", THORN: "\xDE", thorn: "\xFE", tilde: "\u02DC", Tilde: "\u223C", TildeEqual: "\u2243", TildeFullEqual: "\u2245", TildeTilde: "\u2248", timesbar: "\u2A31", timesb: "\u22A0", times: "\xD7", timesd: "\u2A30", tint: "\u222D", toea: "\u2928", topbot: "\u2336", topcir: "\u2AF1", top: "\u22A4", Topf: "\uD835\uDD4B", topf: "\uD835\uDD65", topfork: "\u2ADA", tosa: "\u2929", tprime: "\u2034", trade: "\u2122", TRADE: "\u2122", triangle: "\u25B5", triangledown: "\u25BF", triangleleft: "\u25C3", trianglelefteq: "\u22B4", triangleq: "\u225C", triangleright: "\u25B9", trianglerighteq: "\u22B5", tridot: "\u25EC", trie: "\u225C", triminus: "\u2A3A", TripleDot: "\u20DB", triplus: "\u2A39", trisb: "\u29CD", tritime: "\u2A3B", trpezium: "\u23E2", Tscr: "\uD835\uDCAF", tscr: "\uD835\uDCC9", TScy: "\u0426", tscy: "\u0446", TSHcy: "\u040B", tshcy: "\u045B", Tstrok: "\u0166", tstrok: "\u0167", twixt: "\u226C", twoheadleftarrow: "\u219E", twoheadrightarrow: "\u21A0", Uacute: "\xDA", uacute: "\xFA", uarr: "\u2191", Uarr: "\u219F", uArr: "\u21D1", Uarrocir: "\u2949", Ubrcy: "\u040E", ubrcy: "\u045E", Ubreve: "\u016C", ubreve: "\u016D", Ucirc: "\xDB", ucirc: "\xFB", Ucy: "\u0423", ucy: "\u0443", udarr: "\u21C5", Udblac: "\u0170", udblac: "\u0171", udhar: "\u296E", ufisht: "\u297E", Ufr: "\uD835\uDD18", ufr: "\uD835\uDD32", Ugrave: "\xD9", ugrave: "\xF9", uHar: "\u2963", uharl: "\u21BF", uharr: "\u21BE", uhblk: "\u2580", ulcorn: "\u231C", ulcorner: "\u231C", ulcrop: "\u230F", ultri: "\u25F8", Umacr: "\u016A", umacr: "\u016B", uml: "\xA8", UnderBar: "_", UnderBrace: "\u23DF", UnderBracket: "\u23B5", UnderParenthesis: "\u23DD", Union: "\u22C3", UnionPlus: "\u228E", Uogon: "\u0172", uogon: "\u0173", Uopf: "\uD835\uDD4C", uopf: "\uD835\uDD66", UpArrowBar: "\u2912", uparrow: "\u2191", UpArrow: "\u2191", Uparrow: "\u21D1", UpArrowDownArrow: "\u21C5", updownarrow: "\u2195", UpDownArrow: "\u2195", Updownarrow: "\u21D5", UpEquilibrium: "\u296E", upharpoonleft: "\u21BF", upharpoonright: "\u21BE", uplus: "\u228E", UpperLeftArrow: "\u2196", UpperRightArrow: "\u2197", upsi: "\u03C5", Upsi: "\u03D2", upsih: "\u03D2", Upsilon: "\u03A5", upsilon: "\u03C5", UpTeeArrow: "\u21A5", UpTee: "\u22A5", upuparrows: "\u21C8", urcorn: "\u231D", urcorner: "\u231D", urcrop: "\u230E", Uring: "\u016E", uring: "\u016F", urtri: "\u25F9", Uscr: "\uD835\uDCB0", uscr: "\uD835\uDCCA", utdot: "\u22F0", Utilde: "\u0168", utilde: "\u0169", utri: "\u25B5", utrif: "\u25B4", uuarr: "\u21C8", Uuml: "\xDC", uuml: "\xFC", uwangle: "\u29A7", vangrt: "\u299C", varepsilon: "\u03F5", varkappa: "\u03F0", varnothing: "\u2205", varphi: "\u03D5", varpi: "\u03D6", varpropto: "\u221D", varr: "\u2195", vArr: "\u21D5", varrho: "\u03F1", varsigma: "\u03C2", varsubsetneq: "\u228A\uFE00", varsubsetneqq: "\u2ACB\uFE00", varsupsetneq: "\u228B\uFE00", varsupsetneqq: "\u2ACC\uFE00", vartheta: "\u03D1", vartriangleleft: "\u22B2", vartriangleright: "\u22B3", vBar: "\u2AE8", Vbar: "\u2AEB", vBarv: "\u2AE9", Vcy: "\u0412", vcy: "\u0432", vdash: "\u22A2", vDash: "\u22A8", Vdash: "\u22A9", VDash: "\u22AB", Vdashl: "\u2AE6", veebar: "\u22BB", vee: "\u2228", Vee: "\u22C1", veeeq: "\u225A", vellip: "\u22EE", verbar: "|", Verbar: "\u2016", vert: "|", Vert: "\u2016", VerticalBar: "\u2223", VerticalLine: "|", VerticalSeparator: "\u2758", VerticalTilde: "\u2240", VeryThinSpace: "\u200A", Vfr: "\uD835\uDD19", vfr: "\uD835\uDD33", vltri: "\u22B2", vnsub: "\u2282\u20D2", vnsup: "\u2283\u20D2", Vopf: "\uD835\uDD4D", vopf: "\uD835\uDD67", vprop: "\u221D", vrtri: "\u22B3", Vscr: "\uD835\uDCB1", vscr: "\uD835\uDCCB", vsubnE: "\u2ACB\uFE00", vsubne: "\u228A\uFE00", vsupnE: "\u2ACC\uFE00", vsupne: "\u228B\uFE00", Vvdash: "\u22AA", vzigzag: "\u299A", Wcirc: "\u0174", wcirc: "\u0175", wedbar: "\u2A5F", wedge: "\u2227", Wedge: "\u22C0", wedgeq: "\u2259", weierp: "\u2118", Wfr: "\uD835\uDD1A", wfr: "\uD835\uDD34", Wopf: "\uD835\uDD4E", wopf: "\uD835\uDD68", wp: "\u2118", wr: "\u2240", wreath: "\u2240", Wscr: "\uD835\uDCB2", wscr: "\uD835\uDCCC", xcap: "\u22C2", xcirc: "\u25EF", xcup: "\u22C3", xdtri: "\u25BD", Xfr: "\uD835\uDD1B", xfr: "\uD835\uDD35", xharr: "\u27F7", xhArr: "\u27FA", Xi: "\u039E", xi: "\u03BE", xlarr: "\u27F5", xlArr: "\u27F8", xmap: "\u27FC", xnis: "\u22FB", xodot: "\u2A00", Xopf: "\uD835\uDD4F", xopf: "\uD835\uDD69", xoplus: "\u2A01", xotime: "\u2A02", xrarr: "\u27F6", xrArr: "\u27F9", Xscr: "\uD835\uDCB3", xscr: "\uD835\uDCCD", xsqcup: "\u2A06", xuplus: "\u2A04", xutri: "\u25B3", xvee: "\u22C1", xwedge: "\u22C0", Yacute: "\xDD", yacute: "\xFD", YAcy: "\u042F", yacy: "\u044F", Ycirc: "\u0176", ycirc: "\u0177", Ycy: "\u042B", ycy: "\u044B", yen: "\xA5", Yfr: "\uD835\uDD1C", yfr: "\uD835\uDD36", YIcy: "\u0407", yicy: "\u0457", Yopf: "\uD835\uDD50", yopf: "\uD835\uDD6A", Yscr: "\uD835\uDCB4", yscr: "\uD835\uDCCE", YUcy: "\u042E", yucy: "\u044E", yuml: "\xFF", Yuml: "\u0178", Zacute: "\u0179", zacute: "\u017A", Zcaron: "\u017D", zcaron: "\u017E", Zcy: "\u0417", zcy: "\u0437", Zdot: "\u017B", zdot: "\u017C", zeetrf: "\u2128", ZeroWidthSpace: "\u200B", Zeta: "\u0396", zeta: "\u03B6", zfr: "\uD835\uDD37", Zfr: "\u2128", ZHcy: "\u0416", zhcy: "\u0436", zigrarr: "\u21DD", zopf: "\uD835\uDD6B", Zopf: "\u2124", Zscr: "\uD835\uDCB5", zscr: "\uD835\uDCCF", zwj: "\u200D", zwnj: "\u200C" };
  }
});
var require_entities2 = __commonJS2({
  "node_modules/markdown-it/lib/common/entities.js"(exports, module) {
    module.exports = require_entities();
  }
});
var require_regex = __commonJS2({
  "node_modules/uc.micro/categories/P/regex.js"(exports, module) {
    module.exports = /[!-#%-\*,-\/:;\?@\[-\]_\{\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4E\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDF55-\uDF59]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDF3C-\uDF3E]|\uD806[\uDC3B\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]/;
  }
});
var require_encode = __commonJS2({
  "node_modules/mdurl/encode.js"(exports, module) {
    var encodeCache = {};
    function getEncodeCache(exclude) {
      var i, ch, cache = encodeCache[exclude];
      if (cache) {
        return cache;
      }
      cache = encodeCache[exclude] = [];
      for (i = 0;i < 128; i++) {
        ch = String.fromCharCode(i);
        if (/^[0-9a-z]$/i.test(ch)) {
          cache.push(ch);
        } else {
          cache.push("%" + ("0" + i.toString(16).toUpperCase()).slice(-2));
        }
      }
      for (i = 0;i < exclude.length; i++) {
        cache[exclude.charCodeAt(i)] = exclude[i];
      }
      return cache;
    }
    function encode(string, exclude, keepEscaped) {
      var i, l, code2, nextCode, cache, result = "";
      if (typeof exclude !== "string") {
        keepEscaped = exclude;
        exclude = encode.defaultChars;
      }
      if (typeof keepEscaped === "undefined") {
        keepEscaped = true;
      }
      cache = getEncodeCache(exclude);
      for (i = 0, l = string.length;i < l; i++) {
        code2 = string.charCodeAt(i);
        if (keepEscaped && code2 === 37 && i + 2 < l) {
          if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {
            result += string.slice(i, i + 3);
            i += 2;
            continue;
          }
        }
        if (code2 < 128) {
          result += cache[code2];
          continue;
        }
        if (code2 >= 55296 && code2 <= 57343) {
          if (code2 >= 55296 && code2 <= 56319 && i + 1 < l) {
            nextCode = string.charCodeAt(i + 1);
            if (nextCode >= 56320 && nextCode <= 57343) {
              result += encodeURIComponent(string[i] + string[i + 1]);
              i++;
              continue;
            }
          }
          result += "%EF%BF%BD";
          continue;
        }
        result += encodeURIComponent(string[i]);
      }
      return result;
    }
    encode.defaultChars = ";/?:@&=+$,-_.!~*'()#";
    encode.componentChars = "-_.!~*'()";
    module.exports = encode;
  }
});
var require_decode = __commonJS2({
  "node_modules/mdurl/decode.js"(exports, module) {
    var decodeCache = {};
    function getDecodeCache(exclude) {
      var i, ch, cache = decodeCache[exclude];
      if (cache) {
        return cache;
      }
      cache = decodeCache[exclude] = [];
      for (i = 0;i < 128; i++) {
        ch = String.fromCharCode(i);
        cache.push(ch);
      }
      for (i = 0;i < exclude.length; i++) {
        ch = exclude.charCodeAt(i);
        cache[ch] = "%" + ("0" + ch.toString(16).toUpperCase()).slice(-2);
      }
      return cache;
    }
    function decode(string, exclude) {
      var cache;
      if (typeof exclude !== "string") {
        exclude = decode.defaultChars;
      }
      cache = getDecodeCache(exclude);
      return string.replace(/(%[a-f0-9]{2})+/gi, function(seq) {
        var i, l, b1, b2, b3, b4, chr, result = "";
        for (i = 0, l = seq.length;i < l; i += 3) {
          b1 = parseInt(seq.slice(i + 1, i + 3), 16);
          if (b1 < 128) {
            result += cache[b1];
            continue;
          }
          if ((b1 & 224) === 192 && i + 3 < l) {
            b2 = parseInt(seq.slice(i + 4, i + 6), 16);
            if ((b2 & 192) === 128) {
              chr = b1 << 6 & 1984 | b2 & 63;
              if (chr < 128) {
                result += "\uFFFD\uFFFD";
              } else {
                result += String.fromCharCode(chr);
              }
              i += 3;
              continue;
            }
          }
          if ((b1 & 240) === 224 && i + 6 < l) {
            b2 = parseInt(seq.slice(i + 4, i + 6), 16);
            b3 = parseInt(seq.slice(i + 7, i + 9), 16);
            if ((b2 & 192) === 128 && (b3 & 192) === 128) {
              chr = b1 << 12 & 61440 | b2 << 6 & 4032 | b3 & 63;
              if (chr < 2048 || chr >= 55296 && chr <= 57343) {
                result += "\uFFFD\uFFFD\uFFFD";
              } else {
                result += String.fromCharCode(chr);
              }
              i += 6;
              continue;
            }
          }
          if ((b1 & 248) === 240 && i + 9 < l) {
            b2 = parseInt(seq.slice(i + 4, i + 6), 16);
            b3 = parseInt(seq.slice(i + 7, i + 9), 16);
            b4 = parseInt(seq.slice(i + 10, i + 12), 16);
            if ((b2 & 192) === 128 && (b3 & 192) === 128 && (b4 & 192) === 128) {
              chr = b1 << 18 & 1835008 | b2 << 12 & 258048 | b3 << 6 & 4032 | b4 & 63;
              if (chr < 65536 || chr > 1114111) {
                result += "\uFFFD\uFFFD\uFFFD\uFFFD";
              } else {
                chr -= 65536;
                result += String.fromCharCode(55296 + (chr >> 10), 56320 + (chr & 1023));
              }
              i += 9;
              continue;
            }
          }
          result += "\uFFFD";
        }
        return result;
      });
    }
    decode.defaultChars = ";/?:@&=+$,#";
    decode.componentChars = "";
    module.exports = decode;
  }
});
var require_format = __commonJS2({
  "node_modules/mdurl/format.js"(exports, module) {
    module.exports = function format2(url) {
      var result = "";
      result += url.protocol || "";
      result += url.slashes ? "//" : "";
      result += url.auth ? url.auth + "@" : "";
      if (url.hostname && url.hostname.indexOf(":") !== -1) {
        result += "[" + url.hostname + "]";
      } else {
        result += url.hostname || "";
      }
      result += url.port ? ":" + url.port : "";
      result += url.pathname || "";
      result += url.search || "";
      result += url.hash || "";
      return result;
    };
  }
});
var require_parse = __commonJS2({
  "node_modules/mdurl/parse.js"(exports, module) {
    function Url() {
      this.protocol = null;
      this.slashes = null;
      this.auth = null;
      this.port = null;
      this.hostname = null;
      this.hash = null;
      this.search = null;
      this.pathname = null;
    }
    var protocolPattern = /^([a-z0-9.+-]+:)/i;
    var portPattern = /:[0-9]*$/;
    var simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/;
    var delims = ["<", ">", '"', "`", " ", "\r", "\n", "	"];
    var unwise = ["{", "}", "|", "\\", "^", "`"].concat(delims);
    var autoEscape = ["'"].concat(unwise);
    var nonHostChars = ["%", "/", "?", ";", "#"].concat(autoEscape);
    var hostEndingChars = ["/", "?", "#"];
    var hostnameMaxLen = 255;
    var hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/;
    var hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/;
    var hostlessProtocol = {
      javascript: true,
      "javascript:": true
    };
    var slashedProtocol = {
      http: true,
      https: true,
      ftp: true,
      gopher: true,
      file: true,
      "http:": true,
      "https:": true,
      "ftp:": true,
      "gopher:": true,
      "file:": true
    };
    function urlParse(url, slashesDenoteHost) {
      if (url && url instanceof Url) {
        return url;
      }
      var u = new Url;
      u.parse(url, slashesDenoteHost);
      return u;
    }
    Url.prototype.parse = function(url, slashesDenoteHost) {
      var i, l, lowerProto, hec, slashes, rest = url;
      rest = rest.trim();
      if (!slashesDenoteHost && url.split("#").length === 1) {
        var simplePath = simplePathPattern.exec(rest);
        if (simplePath) {
          this.pathname = simplePath[1];
          if (simplePath[2]) {
            this.search = simplePath[2];
          }
          return this;
        }
      }
      var proto = protocolPattern.exec(rest);
      if (proto) {
        proto = proto[0];
        lowerProto = proto.toLowerCase();
        this.protocol = proto;
        rest = rest.substr(proto.length);
      }
      if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
        slashes = rest.substr(0, 2) === "//";
        if (slashes && !(proto && hostlessProtocol[proto])) {
          rest = rest.substr(2);
          this.slashes = true;
        }
      }
      if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
        var hostEnd = -1;
        for (i = 0;i < hostEndingChars.length; i++) {
          hec = rest.indexOf(hostEndingChars[i]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
            hostEnd = hec;
          }
        }
        var auth, atSign;
        if (hostEnd === -1) {
          atSign = rest.lastIndexOf("@");
        } else {
          atSign = rest.lastIndexOf("@", hostEnd);
        }
        if (atSign !== -1) {
          auth = rest.slice(0, atSign);
          rest = rest.slice(atSign + 1);
          this.auth = auth;
        }
        hostEnd = -1;
        for (i = 0;i < nonHostChars.length; i++) {
          hec = rest.indexOf(nonHostChars[i]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
            hostEnd = hec;
          }
        }
        if (hostEnd === -1) {
          hostEnd = rest.length;
        }
        if (rest[hostEnd - 1] === ":") {
          hostEnd--;
        }
        var host = rest.slice(0, hostEnd);
        rest = rest.slice(hostEnd);
        this.parseHost(host);
        this.hostname = this.hostname || "";
        var ipv6Hostname = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
        if (!ipv6Hostname) {
          var hostparts = this.hostname.split(/\./);
          for (i = 0, l = hostparts.length;i < l; i++) {
            var part = hostparts[i];
            if (!part) {
              continue;
            }
            if (!part.match(hostnamePartPattern)) {
              var newpart = "";
              for (var j = 0, k = part.length;j < k; j++) {
                if (part.charCodeAt(j) > 127) {
                  newpart += "x";
                } else {
                  newpart += part[j];
                }
              }
              if (!newpart.match(hostnamePartPattern)) {
                var validParts = hostparts.slice(0, i);
                var notHost = hostparts.slice(i + 1);
                var bit = part.match(hostnamePartStart);
                if (bit) {
                  validParts.push(bit[1]);
                  notHost.unshift(bit[2]);
                }
                if (notHost.length) {
                  rest = notHost.join(".") + rest;
                }
                this.hostname = validParts.join(".");
                break;
              }
            }
          }
        }
        if (this.hostname.length > hostnameMaxLen) {
          this.hostname = "";
        }
        if (ipv6Hostname) {
          this.hostname = this.hostname.substr(1, this.hostname.length - 2);
        }
      }
      var hash3 = rest.indexOf("#");
      if (hash3 !== -1) {
        this.hash = rest.substr(hash3);
        rest = rest.slice(0, hash3);
      }
      var qm = rest.indexOf("?");
      if (qm !== -1) {
        this.search = rest.substr(qm);
        rest = rest.slice(0, qm);
      }
      if (rest) {
        this.pathname = rest;
      }
      if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
        this.pathname = "";
      }
      return this;
    };
    Url.prototype.parseHost = function(host) {
      var port = portPattern.exec(host);
      if (port) {
        port = port[0];
        if (port !== ":") {
          this.port = port.substr(1);
        }
        host = host.substr(0, host.length - port.length);
      }
      if (host) {
        this.hostname = host;
      }
    };
    module.exports = urlParse;
  }
});
var require_mdurl = __commonJS2({
  "node_modules/mdurl/index.js"(exports, module) {
    module.exports.encode = require_encode();
    module.exports.decode = require_decode();
    module.exports.format = require_format();
    module.exports.parse = require_parse();
  }
});
var require_regex2 = __commonJS2({
  "node_modules/uc.micro/properties/Any/regex.js"(exports, module) {
    module.exports = /[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
  }
});
var require_regex3 = __commonJS2({
  "node_modules/uc.micro/categories/Cc/regex.js"(exports, module) {
    module.exports = /[\0-\x1F\x7F-\x9F]/;
  }
});
var require_regex4 = __commonJS2({
  "node_modules/uc.micro/categories/Cf/regex.js"(exports, module) {
    module.exports = /[\xAD\u0600-\u0605\u061C\u06DD\u070F\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB]|\uD804[\uDCBD\uDCCD]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]/;
  }
});
var require_regex5 = __commonJS2({
  "node_modules/uc.micro/categories/Z/regex.js"(exports, module) {
    module.exports = /[ \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/;
  }
});
var require_uc = __commonJS2({
  "node_modules/uc.micro/index.js"(exports) {
    exports.Any = require_regex2();
    exports.Cc = require_regex3();
    exports.Cf = require_regex4();
    exports.P = require_regex();
    exports.Z = require_regex5();
  }
});
var require_utils = __commonJS2({
  "node_modules/markdown-it/lib/common/utils.js"(exports) {
    function _class(obj) {
      return Object.prototype.toString.call(obj);
    }
    function isString8(obj) {
      return _class(obj) === "[object String]";
    }
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    function has(object, key) {
      return _hasOwnProperty.call(object, key);
    }
    function assign(obj) {
      var sources = Array.prototype.slice.call(arguments, 1);
      sources.forEach(function(source) {
        if (!source) {
          return;
        }
        if (typeof source !== "object") {
          throw new TypeError(source + "must be object");
        }
        Object.keys(source).forEach(function(key) {
          obj[key] = source[key];
        });
      });
      return obj;
    }
    function arrayReplaceAt(src, pos, newElements) {
      return [].concat(src.slice(0, pos), newElements, src.slice(pos + 1));
    }
    function isValidEntityCode(c) {
      if (c >= 55296 && c <= 57343) {
        return false;
      }
      if (c >= 64976 && c <= 65007) {
        return false;
      }
      if ((c & 65535) === 65535 || (c & 65535) === 65534) {
        return false;
      }
      if (c >= 0 && c <= 8) {
        return false;
      }
      if (c === 11) {
        return false;
      }
      if (c >= 14 && c <= 31) {
        return false;
      }
      if (c >= 127 && c <= 159) {
        return false;
      }
      if (c > 1114111) {
        return false;
      }
      return true;
    }
    function fromCodePoint(c) {
      if (c > 65535) {
        c -= 65536;
        var surrogate1 = 55296 + (c >> 10), surrogate2 = 56320 + (c & 1023);
        return String.fromCharCode(surrogate1, surrogate2);
      }
      return String.fromCharCode(c);
    }
    var UNESCAPE_MD_RE = /\\([!"#$%&'()*+,\-.\/:;<=>?@[\\\]^_`{|}~])/g;
    var ENTITY_RE = /&([a-z#][a-z0-9]{1,31});/gi;
    var UNESCAPE_ALL_RE = new RegExp(UNESCAPE_MD_RE.source + "|" + ENTITY_RE.source, "gi");
    var DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))/i;
    var entities = require_entities2();
    function replaceEntityPattern(match, name) {
      var code2 = 0;
      if (has(entities, name)) {
        return entities[name];
      }
      if (name.charCodeAt(0) === 35 && DIGITAL_ENTITY_TEST_RE.test(name)) {
        code2 = name[1].toLowerCase() === "x" ? parseInt(name.slice(2), 16) : parseInt(name.slice(1), 10);
        if (isValidEntityCode(code2)) {
          return fromCodePoint(code2);
        }
      }
      return match;
    }
    function unescapeMd(str) {
      if (str.indexOf("\\") < 0) {
        return str;
      }
      return str.replace(UNESCAPE_MD_RE, "$1");
    }
    function unescapeAll(str) {
      if (str.indexOf("\\") < 0 && str.indexOf("&") < 0) {
        return str;
      }
      return str.replace(UNESCAPE_ALL_RE, function(match, escaped, entity) {
        if (escaped) {
          return escaped;
        }
        return replaceEntityPattern(match, entity);
      });
    }
    var HTML_ESCAPE_TEST_RE = /[&<>"]/;
    var HTML_ESCAPE_REPLACE_RE = /[&<>"]/g;
    var HTML_REPLACEMENTS = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;"
    };
    function replaceUnsafeChar(ch) {
      return HTML_REPLACEMENTS[ch];
    }
    function escapeHtml2(str) {
      if (HTML_ESCAPE_TEST_RE.test(str)) {
        return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);
      }
      return str;
    }
    var REGEXP_ESCAPE_RE = /[.?*+^$[\]\\(){}|-]/g;
    function escapeRE(str) {
      return str.replace(REGEXP_ESCAPE_RE, "\\$&");
    }
    function isSpace(code2) {
      switch (code2) {
        case 9:
        case 32:
          return true;
      }
      return false;
    }
    function isWhiteSpace(code2) {
      if (code2 >= 8192 && code2 <= 8202) {
        return true;
      }
      switch (code2) {
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 32:
        case 160:
        case 5760:
        case 8239:
        case 8287:
        case 12288:
          return true;
      }
      return false;
    }
    var UNICODE_PUNCT_RE = require_regex();
    function isPunctChar(ch) {
      return UNICODE_PUNCT_RE.test(ch);
    }
    function isMdAsciiPunct(ch) {
      switch (ch) {
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 123:
        case 124:
        case 125:
        case 126:
          return true;
        default:
          return false;
      }
    }
    function normalizeReference(str) {
      str = str.trim().replace(/\s+/g, " ");
      if ("\u1E9E".toLowerCase() === "\u1E7E") {
        str = str.replace(/ẞ/g, "\xDF");
      }
      return str.toLowerCase().toUpperCase();
    }
    exports.lib = {};
    exports.lib.mdurl = require_mdurl();
    exports.lib.ucmicro = require_uc();
    exports.assign = assign;
    exports.isString = isString8;
    exports.has = has;
    exports.unescapeMd = unescapeMd;
    exports.unescapeAll = unescapeAll;
    exports.isValidEntityCode = isValidEntityCode;
    exports.fromCodePoint = fromCodePoint;
    exports.escapeHtml = escapeHtml2;
    exports.arrayReplaceAt = arrayReplaceAt;
    exports.isSpace = isSpace;
    exports.isWhiteSpace = isWhiteSpace;
    exports.isMdAsciiPunct = isMdAsciiPunct;
    exports.isPunctChar = isPunctChar;
    exports.escapeRE = escapeRE;
    exports.normalizeReference = normalizeReference;
  }
});
var require_parse_link_label = __commonJS2({
  "node_modules/markdown-it/lib/helpers/parse_link_label.js"(exports, module) {
    module.exports = function parseLinkLabel(state, start2, disableNested) {
      var level, found, marker, prevPos, labelEnd = -1, max2 = state.posMax, oldPos = state.pos;
      state.pos = start2 + 1;
      level = 1;
      while (state.pos < max2) {
        marker = state.src.charCodeAt(state.pos);
        if (marker === 93) {
          level--;
          if (level === 0) {
            found = true;
            break;
          }
        }
        prevPos = state.pos;
        state.md.inline.skipToken(state);
        if (marker === 91) {
          if (prevPos === state.pos - 1) {
            level++;
          } else if (disableNested) {
            state.pos = oldPos;
            return -1;
          }
        }
      }
      if (found) {
        labelEnd = state.pos;
      }
      state.pos = oldPos;
      return labelEnd;
    };
  }
});
var require_parse_link_destination = __commonJS2({
  "node_modules/markdown-it/lib/helpers/parse_link_destination.js"(exports, module) {
    var unescapeAll = require_utils().unescapeAll;
    module.exports = function parseLinkDestination(str, pos, max2) {
      var code2, level, lines = 0, start2 = pos, result = {
        ok: false,
        pos: 0,
        lines: 0,
        str: ""
      };
      if (str.charCodeAt(pos) === 60) {
        pos++;
        while (pos < max2) {
          code2 = str.charCodeAt(pos);
          if (code2 === 10) {
            return result;
          }
          if (code2 === 60) {
            return result;
          }
          if (code2 === 62) {
            result.pos = pos + 1;
            result.str = unescapeAll(str.slice(start2 + 1, pos));
            result.ok = true;
            return result;
          }
          if (code2 === 92 && pos + 1 < max2) {
            pos += 2;
            continue;
          }
          pos++;
        }
        return result;
      }
      level = 0;
      while (pos < max2) {
        code2 = str.charCodeAt(pos);
        if (code2 === 32) {
          break;
        }
        if (code2 < 32 || code2 === 127) {
          break;
        }
        if (code2 === 92 && pos + 1 < max2) {
          if (str.charCodeAt(pos + 1) === 32) {
            break;
          }
          pos += 2;
          continue;
        }
        if (code2 === 40) {
          level++;
          if (level > 32) {
            return result;
          }
        }
        if (code2 === 41) {
          if (level === 0) {
            break;
          }
          level--;
        }
        pos++;
      }
      if (start2 === pos) {
        return result;
      }
      if (level !== 0) {
        return result;
      }
      result.str = unescapeAll(str.slice(start2, pos));
      result.lines = lines;
      result.pos = pos;
      result.ok = true;
      return result;
    };
  }
});
var require_parse_link_title = __commonJS2({
  "node_modules/markdown-it/lib/helpers/parse_link_title.js"(exports, module) {
    var unescapeAll = require_utils().unescapeAll;
    module.exports = function parseLinkTitle(str, pos, max2) {
      var code2, marker, lines = 0, start2 = pos, result = {
        ok: false,
        pos: 0,
        lines: 0,
        str: ""
      };
      if (pos >= max2) {
        return result;
      }
      marker = str.charCodeAt(pos);
      if (marker !== 34 && marker !== 39 && marker !== 40) {
        return result;
      }
      pos++;
      if (marker === 40) {
        marker = 41;
      }
      while (pos < max2) {
        code2 = str.charCodeAt(pos);
        if (code2 === marker) {
          result.pos = pos + 1;
          result.lines = lines;
          result.str = unescapeAll(str.slice(start2 + 1, pos));
          result.ok = true;
          return result;
        } else if (code2 === 40 && marker === 41) {
          return result;
        } else if (code2 === 10) {
          lines++;
        } else if (code2 === 92 && pos + 1 < max2) {
          pos++;
          if (str.charCodeAt(pos) === 10) {
            lines++;
          }
        }
        pos++;
      }
      return result;
    };
  }
});
var require_helpers = __commonJS2({
  "node_modules/markdown-it/lib/helpers/index.js"(exports) {
    exports.parseLinkLabel = require_parse_link_label();
    exports.parseLinkDestination = require_parse_link_destination();
    exports.parseLinkTitle = require_parse_link_title();
  }
});
var require_renderer = __commonJS2({
  "node_modules/markdown-it/lib/renderer.js"(exports, module) {
    var assign = require_utils().assign;
    var unescapeAll = require_utils().unescapeAll;
    var escapeHtml2 = require_utils().escapeHtml;
    var default_rules = {};
    default_rules.code_inline = function(tokens2, idx, options, env, slf) {
      var token = tokens2[idx];
      return "<code" + slf.renderAttrs(token) + ">" + escapeHtml2(tokens2[idx].content) + "</code>";
    };
    default_rules.code_block = function(tokens2, idx, options, env, slf) {
      var token = tokens2[idx];
      return "<pre" + slf.renderAttrs(token) + "><code>" + escapeHtml2(tokens2[idx].content) + "</code></pre>\n";
    };
    default_rules.fence = function(tokens2, idx, options, env, slf) {
      var token = tokens2[idx], info2 = token.info ? unescapeAll(token.info).trim() : "", langName = "", langAttrs = "", highlighted, i, arr, tmpAttrs, tmpToken;
      if (info2) {
        arr = info2.split(/(\s+)/g);
        langName = arr[0];
        langAttrs = arr.slice(2).join("");
      }
      if (options.highlight) {
        highlighted = options.highlight(token.content, langName, langAttrs) || escapeHtml2(token.content);
      } else {
        highlighted = escapeHtml2(token.content);
      }
      if (highlighted.indexOf("<pre") === 0) {
        return highlighted + "\n";
      }
      if (info2) {
        i = token.attrIndex("class");
        tmpAttrs = token.attrs ? token.attrs.slice() : [];
        if (i < 0) {
          tmpAttrs.push(["class", options.langPrefix + langName]);
        } else {
          tmpAttrs[i] = tmpAttrs[i].slice();
          tmpAttrs[i][1] += " " + options.langPrefix + langName;
        }
        tmpToken = {
          attrs: tmpAttrs
        };
        return "<pre><code" + slf.renderAttrs(tmpToken) + ">" + highlighted + "</code></pre>\n";
      }
      return "<pre><code" + slf.renderAttrs(token) + ">" + highlighted + "</code></pre>\n";
    };
    default_rules.image = function(tokens2, idx, options, env, slf) {
      var token = tokens2[idx];
      token.attrs[token.attrIndex("alt")][1] = slf.renderInlineAsText(token.children, options, env);
      return slf.renderToken(tokens2, idx, options);
    };
    default_rules.hardbreak = function(tokens2, idx, options) {
      return options.xhtmlOut ? "<br />\n" : "<br>\n";
    };
    default_rules.softbreak = function(tokens2, idx, options) {
      return options.breaks ? options.xhtmlOut ? "<br />\n" : "<br>\n" : "\n";
    };
    default_rules.text = function(tokens2, idx) {
      return escapeHtml2(tokens2[idx].content);
    };
    default_rules.html_block = function(tokens2, idx) {
      return tokens2[idx].content;
    };
    default_rules.html_inline = function(tokens2, idx) {
      return tokens2[idx].content;
    };
    function Renderer() {
      this.rules = assign({}, default_rules);
    }
    Renderer.prototype.renderAttrs = function renderAttrs(token) {
      var i, l, result;
      if (!token.attrs) {
        return "";
      }
      result = "";
      for (i = 0, l = token.attrs.length;i < l; i++) {
        result += " " + escapeHtml2(token.attrs[i][0]) + '="' + escapeHtml2(token.attrs[i][1]) + '"';
      }
      return result;
    };
    Renderer.prototype.renderToken = function renderToken(tokens2, idx, options) {
      var nextToken, result = "", needLf = false, token = tokens2[idx];
      if (token.hidden) {
        return "";
      }
      if (token.block && token.nesting !== -1 && idx && tokens2[idx - 1].hidden) {
        result += "\n";
      }
      result += (token.nesting === -1 ? "</" : "<") + token.tag;
      result += this.renderAttrs(token);
      if (token.nesting === 0 && options.xhtmlOut) {
        result += " /";
      }
      if (token.block) {
        needLf = true;
        if (token.nesting === 1) {
          if (idx + 1 < tokens2.length) {
            nextToken = tokens2[idx + 1];
            if (nextToken.type === "inline" || nextToken.hidden) {
              needLf = false;
            } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {
              needLf = false;
            }
          }
        }
      }
      result += needLf ? ">\n" : ">";
      return result;
    };
    Renderer.prototype.renderInline = function(tokens2, options, env) {
      var type, result = "", rules = this.rules;
      for (var i = 0, len = tokens2.length;i < len; i++) {
        type = tokens2[i].type;
        if (typeof rules[type] !== "undefined") {
          result += rules[type](tokens2, i, options, env, this);
        } else {
          result += this.renderToken(tokens2, i, options);
        }
      }
      return result;
    };
    Renderer.prototype.renderInlineAsText = function(tokens2, options, env) {
      var result = "";
      for (var i = 0, len = tokens2.length;i < len; i++) {
        if (tokens2[i].type === "text") {
          result += tokens2[i].content;
        } else if (tokens2[i].type === "image") {
          result += this.renderInlineAsText(tokens2[i].children, options, env);
        } else if (tokens2[i].type === "softbreak") {
          result += "\n";
        }
      }
      return result;
    };
    Renderer.prototype.render = function(tokens2, options, env) {
      var i, len, type, result = "", rules = this.rules;
      for (i = 0, len = tokens2.length;i < len; i++) {
        type = tokens2[i].type;
        if (type === "inline") {
          result += this.renderInline(tokens2[i].children, options, env);
        } else if (typeof rules[type] !== "undefined") {
          result += rules[tokens2[i].type](tokens2, i, options, env, this);
        } else {
          result += this.renderToken(tokens2, i, options, env);
        }
      }
      return result;
    };
    module.exports = Renderer;
  }
});
var require_ruler = __commonJS2({
  "node_modules/markdown-it/lib/ruler.js"(exports, module) {
    function Ruler() {
      this.__rules__ = [];
      this.__cache__ = null;
    }
    Ruler.prototype.__find__ = function(name) {
      for (var i = 0;i < this.__rules__.length; i++) {
        if (this.__rules__[i].name === name) {
          return i;
        }
      }
      return -1;
    };
    Ruler.prototype.__compile__ = function() {
      var self = this;
      var chains = [""];
      self.__rules__.forEach(function(rule) {
        if (!rule.enabled) {
          return;
        }
        rule.alt.forEach(function(altName) {
          if (chains.indexOf(altName) < 0) {
            chains.push(altName);
          }
        });
      });
      self.__cache__ = {};
      chains.forEach(function(chain) {
        self.__cache__[chain] = [];
        self.__rules__.forEach(function(rule) {
          if (!rule.enabled) {
            return;
          }
          if (chain && rule.alt.indexOf(chain) < 0) {
            return;
          }
          self.__cache__[chain].push(rule.fn);
        });
      });
    };
    Ruler.prototype.at = function(name, fn2, options) {
      var index = this.__find__(name);
      var opt = options || {};
      if (index === -1) {
        throw new Error("Parser rule not found: " + name);
      }
      this.__rules__[index].fn = fn2;
      this.__rules__[index].alt = opt.alt || [];
      this.__cache__ = null;
    };
    Ruler.prototype.before = function(beforeName, ruleName, fn2, options) {
      var index = this.__find__(beforeName);
      var opt = options || {};
      if (index === -1) {
        throw new Error("Parser rule not found: " + beforeName);
      }
      this.__rules__.splice(index, 0, {
        name: ruleName,
        enabled: true,
        fn: fn2,
        alt: opt.alt || []
      });
      this.__cache__ = null;
    };
    Ruler.prototype.after = function(afterName, ruleName, fn2, options) {
      var index = this.__find__(afterName);
      var opt = options || {};
      if (index === -1) {
        throw new Error("Parser rule not found: " + afterName);
      }
      this.__rules__.splice(index + 1, 0, {
        name: ruleName,
        enabled: true,
        fn: fn2,
        alt: opt.alt || []
      });
      this.__cache__ = null;
    };
    Ruler.prototype.push = function(ruleName, fn2, options) {
      var opt = options || {};
      this.__rules__.push({
        name: ruleName,
        enabled: true,
        fn: fn2,
        alt: opt.alt || []
      });
      this.__cache__ = null;
    };
    Ruler.prototype.enable = function(list2, ignoreInvalid) {
      if (!Array.isArray(list2)) {
        list2 = [list2];
      }
      var result = [];
      list2.forEach(function(name) {
        var idx = this.__find__(name);
        if (idx < 0) {
          if (ignoreInvalid) {
            return;
          }
          throw new Error("Rules manager: invalid rule name " + name);
        }
        this.__rules__[idx].enabled = true;
        result.push(name);
      }, this);
      this.__cache__ = null;
      return result;
    };
    Ruler.prototype.enableOnly = function(list2, ignoreInvalid) {
      if (!Array.isArray(list2)) {
        list2 = [list2];
      }
      this.__rules__.forEach(function(rule) {
        rule.enabled = false;
      });
      this.enable(list2, ignoreInvalid);
    };
    Ruler.prototype.disable = function(list2, ignoreInvalid) {
      if (!Array.isArray(list2)) {
        list2 = [list2];
      }
      var result = [];
      list2.forEach(function(name) {
        var idx = this.__find__(name);
        if (idx < 0) {
          if (ignoreInvalid) {
            return;
          }
          throw new Error("Rules manager: invalid rule name " + name);
        }
        this.__rules__[idx].enabled = false;
        result.push(name);
      }, this);
      this.__cache__ = null;
      return result;
    };
    Ruler.prototype.getRules = function(chainName) {
      if (this.__cache__ === null) {
        this.__compile__();
      }
      return this.__cache__[chainName] || [];
    };
    module.exports = Ruler;
  }
});
var require_normalize = __commonJS2({
  "node_modules/markdown-it/lib/rules_core/normalize.js"(exports, module) {
    var NEWLINES_RE = /\r\n?|\n/g;
    var NULL_RE = /\0/g;
    module.exports = function normalize(state) {
      var str;
      str = state.src.replace(NEWLINES_RE, "\n");
      str = str.replace(NULL_RE, "\uFFFD");
      state.src = str;
    };
  }
});
var require_block = __commonJS2({
  "node_modules/markdown-it/lib/rules_core/block.js"(exports, module) {
    module.exports = function block4(state) {
      var token;
      if (state.inlineMode) {
        token = new state.Token("inline", "", 0);
        token.content = state.src;
        token.map = [0, 1];
        token.children = [];
        state.tokens.push(token);
      } else {
        state.md.block.parse(state.src, state.md, state.env, state.tokens);
      }
    };
  }
});
var require_inline = __commonJS2({
  "node_modules/markdown-it/lib/rules_core/inline.js"(exports, module) {
    module.exports = function inline4(state) {
      var tokens2 = state.tokens, tok, i, l;
      for (i = 0, l = tokens2.length;i < l; i++) {
        tok = tokens2[i];
        if (tok.type === "inline") {
          state.md.inline.parse(tok.content, state.md, state.env, tok.children);
        }
      }
    };
  }
});
var require_linkify = __commonJS2({
  "node_modules/markdown-it/lib/rules_core/linkify.js"(exports, module) {
    var arrayReplaceAt = require_utils().arrayReplaceAt;
    function isLinkOpen(str) {
      return /^<a[>\s]/i.test(str);
    }
    function isLinkClose(str) {
      return /^<\/a\s*>/i.test(str);
    }
    module.exports = function linkify(state) {
      var i, j, l, tokens2, token, currentToken, nodes, ln, text2, pos, lastPos, level, htmlLinkLevel, url, fullUrl, urlText, blockTokens = state.tokens, links;
      if (!state.md.options.linkify) {
        return;
      }
      for (j = 0, l = blockTokens.length;j < l; j++) {
        if (blockTokens[j].type !== "inline" || !state.md.linkify.pretest(blockTokens[j].content)) {
          continue;
        }
        tokens2 = blockTokens[j].children;
        htmlLinkLevel = 0;
        for (i = tokens2.length - 1;i >= 0; i--) {
          currentToken = tokens2[i];
          if (currentToken.type === "link_close") {
            i--;
            while (tokens2[i].level !== currentToken.level && tokens2[i].type !== "link_open") {
              i--;
            }
            continue;
          }
          if (currentToken.type === "html_inline") {
            if (isLinkOpen(currentToken.content) && htmlLinkLevel > 0) {
              htmlLinkLevel--;
            }
            if (isLinkClose(currentToken.content)) {
              htmlLinkLevel++;
            }
          }
          if (htmlLinkLevel > 0) {
            continue;
          }
          if (currentToken.type === "text" && state.md.linkify.test(currentToken.content)) {
            text2 = currentToken.content;
            links = state.md.linkify.match(text2);
            nodes = [];
            level = currentToken.level;
            lastPos = 0;
            for (ln = 0;ln < links.length; ln++) {
              url = links[ln].url;
              fullUrl = state.md.normalizeLink(url);
              if (!state.md.validateLink(fullUrl)) {
                continue;
              }
              urlText = links[ln].text;
              if (!links[ln].schema) {
                urlText = state.md.normalizeLinkText("http://" + urlText).replace(/^http:\/\//, "");
              } else if (links[ln].schema === "mailto:" && !/^mailto:/i.test(urlText)) {
                urlText = state.md.normalizeLinkText("mailto:" + urlText).replace(/^mailto:/, "");
              } else {
                urlText = state.md.normalizeLinkText(urlText);
              }
              pos = links[ln].index;
              if (pos > lastPos) {
                token = new state.Token("text", "", 0);
                token.content = text2.slice(lastPos, pos);
                token.level = level;
                nodes.push(token);
              }
              token = new state.Token("link_open", "a", 1);
              token.attrs = [["href", fullUrl]];
              token.level = level++;
              token.markup = "linkify";
              token.info = "auto";
              nodes.push(token);
              token = new state.Token("text", "", 0);
              token.content = urlText;
              token.level = level;
              nodes.push(token);
              token = new state.Token("link_close", "a", -1);
              token.level = --level;
              token.markup = "linkify";
              token.info = "auto";
              nodes.push(token);
              lastPos = links[ln].lastIndex;
            }
            if (lastPos < text2.length) {
              token = new state.Token("text", "", 0);
              token.content = text2.slice(lastPos);
              token.level = level;
              nodes.push(token);
            }
            blockTokens[j].children = tokens2 = arrayReplaceAt(tokens2, i, nodes);
          }
        }
      }
    };
  }
});
var require_replacements = __commonJS2({
  "node_modules/markdown-it/lib/rules_core/replacements.js"(exports, module) {
    var RARE_RE = /\+-|\.\.|\?\?\?\?|!!!!|,,|--/;
    var SCOPED_ABBR_TEST_RE = /\((c|tm|r|p)\)/i;
    var SCOPED_ABBR_RE = /\((c|tm|r|p)\)/ig;
    var SCOPED_ABBR = {
      c: "\xA9",
      r: "\xAE",
      p: "\xA7",
      tm: "\u2122"
    };
    function replaceFn(match, name) {
      return SCOPED_ABBR[name.toLowerCase()];
    }
    function replace_scoped(inlineTokens) {
      var i, token, inside_autolink = 0;
      for (i = inlineTokens.length - 1;i >= 0; i--) {
        token = inlineTokens[i];
        if (token.type === "text" && !inside_autolink) {
          token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn);
        }
        if (token.type === "link_open" && token.info === "auto") {
          inside_autolink--;
        }
        if (token.type === "link_close" && token.info === "auto") {
          inside_autolink++;
        }
      }
    }
    function replace_rare(inlineTokens) {
      var i, token, inside_autolink = 0;
      for (i = inlineTokens.length - 1;i >= 0; i--) {
        token = inlineTokens[i];
        if (token.type === "text" && !inside_autolink) {
          if (RARE_RE.test(token.content)) {
            token.content = token.content.replace(/\+-/g, "\xB1").replace(/\.{2,}/g, "\u2026").replace(/([?!])…/g, "$1..").replace(/([?!]){4,}/g, "$1$1$1").replace(/,{2,}/g, ",").replace(/(^|[^-])---(?=[^-]|$)/mg, "$1\u2014").replace(/(^|\s)--(?=\s|$)/mg, "$1\u2013").replace(/(^|[^-\s])--(?=[^-\s]|$)/mg, "$1\u2013");
          }
        }
        if (token.type === "link_open" && token.info === "auto") {
          inside_autolink--;
        }
        if (token.type === "link_close" && token.info === "auto") {
          inside_autolink++;
        }
      }
    }
    module.exports = function replace(state) {
      var blkIdx;
      if (!state.md.options.typographer) {
        return;
      }
      for (blkIdx = state.tokens.length - 1;blkIdx >= 0; blkIdx--) {
        if (state.tokens[blkIdx].type !== "inline") {
          continue;
        }
        if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {
          replace_scoped(state.tokens[blkIdx].children);
        }
        if (RARE_RE.test(state.tokens[blkIdx].content)) {
          replace_rare(state.tokens[blkIdx].children);
        }
      }
    };
  }
});
var require_smartquotes = __commonJS2({
  "node_modules/markdown-it/lib/rules_core/smartquotes.js"(exports, module) {
    var isWhiteSpace = require_utils().isWhiteSpace;
    var isPunctChar = require_utils().isPunctChar;
    var isMdAsciiPunct = require_utils().isMdAsciiPunct;
    var QUOTE_TEST_RE = /['"]/;
    var QUOTE_RE = /['"]/g;
    var APOSTROPHE = "\u2019";
    function replaceAt(str, index, ch) {
      return str.substr(0, index) + ch + str.substr(index + 1);
    }
    function process_inlines(tokens2, state) {
      var i, token, text2, t, pos, max2, thisLevel, item2, lastChar, nextChar, isLastPunctChar, isNextPunctChar, isLastWhiteSpace, isNextWhiteSpace, canOpen, canClose, j, isSingle, stack, openQuote, closeQuote;
      stack = [];
      for (i = 0;i < tokens2.length; i++) {
        token = tokens2[i];
        thisLevel = tokens2[i].level;
        for (j = stack.length - 1;j >= 0; j--) {
          if (stack[j].level <= thisLevel) {
            break;
          }
        }
        stack.length = j + 1;
        if (token.type !== "text") {
          continue;
        }
        text2 = token.content;
        pos = 0;
        max2 = text2.length;
        OUTER:
          while (pos < max2) {
            QUOTE_RE.lastIndex = pos;
            t = QUOTE_RE.exec(text2);
            if (!t) {
              break;
            }
            canOpen = canClose = true;
            pos = t.index + 1;
            isSingle = t[0] === "'";
            lastChar = 32;
            if (t.index - 1 >= 0) {
              lastChar = text2.charCodeAt(t.index - 1);
            } else {
              for (j = i - 1;j >= 0; j--) {
                if (tokens2[j].type === "softbreak" || tokens2[j].type === "hardbreak")
                  break;
                if (!tokens2[j].content)
                  continue;
                lastChar = tokens2[j].content.charCodeAt(tokens2[j].content.length - 1);
                break;
              }
            }
            nextChar = 32;
            if (pos < max2) {
              nextChar = text2.charCodeAt(pos);
            } else {
              for (j = i + 1;j < tokens2.length; j++) {
                if (tokens2[j].type === "softbreak" || tokens2[j].type === "hardbreak")
                  break;
                if (!tokens2[j].content)
                  continue;
                nextChar = tokens2[j].content.charCodeAt(0);
                break;
              }
            }
            isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));
            isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));
            isLastWhiteSpace = isWhiteSpace(lastChar);
            isNextWhiteSpace = isWhiteSpace(nextChar);
            if (isNextWhiteSpace) {
              canOpen = false;
            } else if (isNextPunctChar) {
              if (!(isLastWhiteSpace || isLastPunctChar)) {
                canOpen = false;
              }
            }
            if (isLastWhiteSpace) {
              canClose = false;
            } else if (isLastPunctChar) {
              if (!(isNextWhiteSpace || isNextPunctChar)) {
                canClose = false;
              }
            }
            if (nextChar === 34 && t[0] === '"') {
              if (lastChar >= 48 && lastChar <= 57) {
                canClose = canOpen = false;
              }
            }
            if (canOpen && canClose) {
              canOpen = isLastPunctChar;
              canClose = isNextPunctChar;
            }
            if (!canOpen && !canClose) {
              if (isSingle) {
                token.content = replaceAt(token.content, t.index, APOSTROPHE);
              }
              continue;
            }
            if (canClose) {
              for (j = stack.length - 1;j >= 0; j--) {
                item2 = stack[j];
                if (stack[j].level < thisLevel) {
                  break;
                }
                if (item2.single === isSingle && stack[j].level === thisLevel) {
                  item2 = stack[j];
                  if (isSingle) {
                    openQuote = state.md.options.quotes[2];
                    closeQuote = state.md.options.quotes[3];
                  } else {
                    openQuote = state.md.options.quotes[0];
                    closeQuote = state.md.options.quotes[1];
                  }
                  token.content = replaceAt(token.content, t.index, closeQuote);
                  tokens2[item2.token].content = replaceAt(tokens2[item2.token].content, item2.pos, openQuote);
                  pos += closeQuote.length - 1;
                  if (item2.token === i) {
                    pos += openQuote.length - 1;
                  }
                  text2 = token.content;
                  max2 = text2.length;
                  stack.length = j;
                  continue OUTER;
                }
              }
            }
            if (canOpen) {
              stack.push({
                token: i,
                pos: t.index,
                single: isSingle,
                level: thisLevel
              });
            } else if (canClose && isSingle) {
              token.content = replaceAt(token.content, t.index, APOSTROPHE);
            }
          }
      }
    }
    module.exports = function smartquotes(state) {
      var blkIdx;
      if (!state.md.options.typographer) {
        return;
      }
      for (blkIdx = state.tokens.length - 1;blkIdx >= 0; blkIdx--) {
        if (state.tokens[blkIdx].type !== "inline" || !QUOTE_TEST_RE.test(state.tokens[blkIdx].content)) {
          continue;
        }
        process_inlines(state.tokens[blkIdx].children, state);
      }
    };
  }
});
var require_token = __commonJS2({
  "node_modules/markdown-it/lib/token.js"(exports, module) {
    function Token(type, tag, nesting) {
      this.type = type;
      this.tag = tag;
      this.attrs = null;
      this.map = null;
      this.nesting = nesting;
      this.level = 0;
      this.children = null;
      this.content = "";
      this.markup = "";
      this.info = "";
      this.meta = null;
      this.block = false;
      this.hidden = false;
    }
    Token.prototype.attrIndex = function attrIndex(name) {
      var attrs, i, len;
      if (!this.attrs) {
        return -1;
      }
      attrs = this.attrs;
      for (i = 0, len = attrs.length;i < len; i++) {
        if (attrs[i][0] === name) {
          return i;
        }
      }
      return -1;
    };
    Token.prototype.attrPush = function attrPush(attrData) {
      if (this.attrs) {
        this.attrs.push(attrData);
      } else {
        this.attrs = [attrData];
      }
    };
    Token.prototype.attrSet = function attrSet(name, value) {
      var idx = this.attrIndex(name), attrData = [name, value];
      if (idx < 0) {
        this.attrPush(attrData);
      } else {
        this.attrs[idx] = attrData;
      }
    };
    Token.prototype.attrGet = function attrGet(name) {
      var idx = this.attrIndex(name), value = null;
      if (idx >= 0) {
        value = this.attrs[idx][1];
      }
      return value;
    };
    Token.prototype.attrJoin = function attrJoin(name, value) {
      var idx = this.attrIndex(name);
      if (idx < 0) {
        this.attrPush([name, value]);
      } else {
        this.attrs[idx][1] = this.attrs[idx][1] + " " + value;
      }
    };
    module.exports = Token;
  }
});
var require_state_core = __commonJS2({
  "node_modules/markdown-it/lib/rules_core/state_core.js"(exports, module) {
    var Token = require_token();
    function StateCore(src, md, env) {
      this.src = src;
      this.env = env;
      this.tokens = [];
      this.inlineMode = false;
      this.md = md;
    }
    StateCore.prototype.Token = Token;
    module.exports = StateCore;
  }
});
var require_parser_core = __commonJS2({
  "node_modules/markdown-it/lib/parser_core.js"(exports, module) {
    var Ruler = require_ruler();
    var _rules = [
      ["normalize", require_normalize()],
      ["block", require_block()],
      ["inline", require_inline()],
      ["linkify", require_linkify()],
      ["replacements", require_replacements()],
      ["smartquotes", require_smartquotes()]
    ];
    function Core() {
      this.ruler = new Ruler;
      for (var i = 0;i < _rules.length; i++) {
        this.ruler.push(_rules[i][0], _rules[i][1]);
      }
    }
    Core.prototype.process = function(state) {
      var i, l, rules;
      rules = this.ruler.getRules("");
      for (i = 0, l = rules.length;i < l; i++) {
        rules[i](state);
      }
    };
    Core.prototype.State = require_state_core();
    module.exports = Core;
  }
});
var require_table = __commonJS2({
  "node_modules/markdown-it/lib/rules_block/table.js"(exports, module) {
    var isSpace = require_utils().isSpace;
    function getLine2(state, line) {
      var pos = state.bMarks[line] + state.tShift[line], max2 = state.eMarks[line];
      return state.src.substr(pos, max2 - pos);
    }
    function escapedSplit(str) {
      var result = [], pos = 0, max2 = str.length, ch, isEscaped = false, lastPos = 0, current = "";
      ch = str.charCodeAt(pos);
      while (pos < max2) {
        if (ch === 124) {
          if (!isEscaped) {
            result.push(current + str.substring(lastPos, pos));
            current = "";
            lastPos = pos + 1;
          } else {
            current += str.substring(lastPos, pos - 1);
            lastPos = pos;
          }
        }
        isEscaped = ch === 92;
        pos++;
        ch = str.charCodeAt(pos);
      }
      result.push(current + str.substring(lastPos));
      return result;
    }
    module.exports = function table3(state, startLine, endLine, silent) {
      var ch, lineText, pos, i, l, nextLine, columns, columnCount, token, aligns, t, tableLines, tbodyLines, oldParentType, terminate, terminatorRules, firstCh, secondCh;
      if (startLine + 2 > endLine) {
        return false;
      }
      nextLine = startLine + 1;
      if (state.sCount[nextLine] < state.blkIndent) {
        return false;
      }
      if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent >= 4) {
        return false;
      }
      pos = state.bMarks[nextLine] + state.tShift[nextLine];
      if (pos >= state.eMarks[nextLine]) {
        return false;
      }
      firstCh = state.src.charCodeAt(pos++);
      if (firstCh !== 124 && firstCh !== 45 && firstCh !== 58) {
        return false;
      }
      if (pos >= state.eMarks[nextLine]) {
        return false;
      }
      secondCh = state.src.charCodeAt(pos++);
      if (secondCh !== 124 && secondCh !== 45 && secondCh !== 58 && !isSpace(secondCh)) {
        return false;
      }
      if (firstCh === 45 && isSpace(secondCh)) {
        return false;
      }
      while (pos < state.eMarks[nextLine]) {
        ch = state.src.charCodeAt(pos);
        if (ch !== 124 && ch !== 45 && ch !== 58 && !isSpace(ch)) {
          return false;
        }
        pos++;
      }
      lineText = getLine2(state, startLine + 1);
      columns = lineText.split("|");
      aligns = [];
      for (i = 0;i < columns.length; i++) {
        t = columns[i].trim();
        if (!t) {
          if (i === 0 || i === columns.length - 1) {
            continue;
          } else {
            return false;
          }
        }
        if (!/^:?-+:?$/.test(t)) {
          return false;
        }
        if (t.charCodeAt(t.length - 1) === 58) {
          aligns.push(t.charCodeAt(0) === 58 ? "center" : "right");
        } else if (t.charCodeAt(0) === 58) {
          aligns.push("left");
        } else {
          aligns.push("");
        }
      }
      lineText = getLine2(state, startLine).trim();
      if (lineText.indexOf("|") === -1) {
        return false;
      }
      if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {
        return false;
      }
      columns = escapedSplit(lineText);
      if (columns.length && columns[0] === "")
        columns.shift();
      if (columns.length && columns[columns.length - 1] === "")
        columns.pop();
      columnCount = columns.length;
      if (columnCount === 0 || columnCount !== aligns.length) {
        return false;
      }
      if (silent) {
        return true;
      }
      oldParentType = state.parentType;
      state.parentType = "table";
      terminatorRules = state.md.block.ruler.getRules("blockquote");
      token = state.push("table_open", "table", 1);
      token.map = tableLines = [startLine, 0];
      token = state.push("thead_open", "thead", 1);
      token.map = [startLine, startLine + 1];
      token = state.push("tr_open", "tr", 1);
      token.map = [startLine, startLine + 1];
      for (i = 0;i < columns.length; i++) {
        token = state.push("th_open", "th", 1);
        if (aligns[i]) {
          token.attrs = [["style", "text-align:" + aligns[i]]];
        }
        token = state.push("inline", "", 0);
        token.content = columns[i].trim();
        token.children = [];
        token = state.push("th_close", "th", -1);
      }
      token = state.push("tr_close", "tr", -1);
      token = state.push("thead_close", "thead", -1);
      for (nextLine = startLine + 2;nextLine < endLine; nextLine++) {
        if (state.sCount[nextLine] < state.blkIndent) {
          break;
        }
        terminate = false;
        for (i = 0, l = terminatorRules.length;i < l; i++) {
          if (terminatorRules[i](state, nextLine, endLine, true)) {
            terminate = true;
            break;
          }
        }
        if (terminate) {
          break;
        }
        lineText = getLine2(state, nextLine).trim();
        if (!lineText) {
          break;
        }
        if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent >= 4) {
          break;
        }
        columns = escapedSplit(lineText);
        if (columns.length && columns[0] === "")
          columns.shift();
        if (columns.length && columns[columns.length - 1] === "")
          columns.pop();
        if (nextLine === startLine + 2) {
          token = state.push("tbody_open", "tbody", 1);
          token.map = tbodyLines = [startLine + 2, 0];
        }
        token = state.push("tr_open", "tr", 1);
        token.map = [nextLine, nextLine + 1];
        for (i = 0;i < columnCount; i++) {
          token = state.push("td_open", "td", 1);
          if (aligns[i]) {
            token.attrs = [["style", "text-align:" + aligns[i]]];
          }
          token = state.push("inline", "", 0);
          token.content = columns[i] ? columns[i].trim() : "";
          token.children = [];
          token = state.push("td_close", "td", -1);
        }
        token = state.push("tr_close", "tr", -1);
      }
      if (tbodyLines) {
        token = state.push("tbody_close", "tbody", -1);
        tbodyLines[1] = nextLine;
      }
      token = state.push("table_close", "table", -1);
      tableLines[1] = nextLine;
      state.parentType = oldParentType;
      state.line = nextLine;
      return true;
    };
  }
});
var require_code = __commonJS2({
  "node_modules/markdown-it/lib/rules_block/code.js"(exports, module) {
    module.exports = function code2(state, startLine, endLine) {
      if (state.md.options.allowIndentation) {
        return false;
      }
      var nextLine, last2, token;
      if (state.sCount[startLine] - state.blkIndent < 4) {
        return false;
      }
      last2 = nextLine = startLine + 1;
      while (nextLine < endLine) {
        if (state.isEmpty(nextLine)) {
          nextLine++;
          continue;
        }
        if (state.sCount[nextLine] - state.blkIndent >= 4) {
          nextLine++;
          last2 = nextLine;
          continue;
        }
        break;
      }
      state.line = last2;
      token = state.push("code_block", "code", 0);
      token.content = state.getLines(startLine, last2, 4 + state.blkIndent, false) + "\n";
      token.map = [startLine, state.line];
      return true;
    };
  }
});
var require_fence = __commonJS2({
  "node_modules/markdown-it/lib/rules_block/fence.js"(exports, module) {
    module.exports = function fence3(state, startLine, endLine, silent) {
      var marker, len, params, nextLine, mem, token, markup, haveEndMarker = false, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine];
      if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {
        return false;
      }
      if (pos + 3 > max2) {
        return false;
      }
      marker = state.src.charCodeAt(pos);
      if (marker !== 126 && marker !== 96) {
        return false;
      }
      mem = pos;
      pos = state.skipChars(pos, marker);
      len = pos - mem;
      if (len < 3) {
        return false;
      }
      markup = state.src.slice(mem, pos);
      params = state.src.slice(pos, max2);
      if (marker === 96) {
        if (params.indexOf(String.fromCharCode(marker)) >= 0) {
          return false;
        }
      }
      if (silent) {
        return true;
      }
      nextLine = startLine;
      for (;; ) {
        nextLine++;
        if (nextLine >= endLine) {
          break;
        }
        pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];
        max2 = state.eMarks[nextLine];
        if (pos < max2 && state.sCount[nextLine] < state.blkIndent) {
          break;
        }
        if (state.src.charCodeAt(pos) !== marker) {
          continue;
        }
        if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent >= 4) {
          continue;
        }
        pos = state.skipChars(pos, marker);
        if (pos - mem < len) {
          continue;
        }
        pos = state.skipSpaces(pos);
        if (pos < max2) {
          continue;
        }
        haveEndMarker = true;
        break;
      }
      len = state.sCount[startLine];
      state.line = nextLine + (haveEndMarker ? 1 : 0);
      token = state.push("fence", "code", 0);
      token.info = params;
      token.content = state.getLines(startLine + 1, nextLine, len, true);
      token.markup = markup;
      token.map = [startLine, state.line];
      return true;
    };
  }
});
var require_blockquote = __commonJS2({
  "node_modules/markdown-it/lib/rules_block/blockquote.js"(exports, module) {
    var isSpace = require_utils().isSpace;
    module.exports = function blockquote2(state, startLine, endLine, silent) {
      var adjustTab, ch, i, initial, l, lastLineEmpty, lines, nextLine, offset3, oldBMarks, oldBSCount, oldIndent, oldParentType, oldSCount, oldTShift, spaceAfterMarker, terminate, terminatorRules, token, isOutdented, oldLineMax = state.lineMax, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine];
      if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {
        return false;
      }
      if (state.src.charCodeAt(pos++) !== 62) {
        return false;
      }
      if (silent) {
        return true;
      }
      initial = offset3 = state.sCount[startLine] + 1;
      if (state.src.charCodeAt(pos) === 32) {
        pos++;
        initial++;
        offset3++;
        adjustTab = false;
        spaceAfterMarker = true;
      } else if (state.src.charCodeAt(pos) === 9) {
        spaceAfterMarker = true;
        if ((state.bsCount[startLine] + offset3) % 4 === 3) {
          pos++;
          initial++;
          offset3++;
          adjustTab = false;
        } else {
          adjustTab = true;
        }
      } else {
        spaceAfterMarker = false;
      }
      oldBMarks = [state.bMarks[startLine]];
      state.bMarks[startLine] = pos;
      while (pos < max2) {
        ch = state.src.charCodeAt(pos);
        if (isSpace(ch)) {
          if (ch === 9) {
            offset3 += 4 - (offset3 + state.bsCount[startLine] + (adjustTab ? 1 : 0)) % 4;
          } else {
            offset3++;
          }
        } else {
          break;
        }
        pos++;
      }
      oldBSCount = [state.bsCount[startLine]];
      state.bsCount[startLine] = state.sCount[startLine] + 1 + (spaceAfterMarker ? 1 : 0);
      lastLineEmpty = pos >= max2;
      oldSCount = [state.sCount[startLine]];
      state.sCount[startLine] = offset3 - initial;
      oldTShift = [state.tShift[startLine]];
      state.tShift[startLine] = pos - state.bMarks[startLine];
      terminatorRules = state.md.block.ruler.getRules("blockquote");
      oldParentType = state.parentType;
      state.parentType = "blockquote";
      for (nextLine = startLine + 1;nextLine < endLine; nextLine++) {
        isOutdented = state.sCount[nextLine] < state.blkIndent;
        pos = state.bMarks[nextLine] + state.tShift[nextLine];
        max2 = state.eMarks[nextLine];
        if (pos >= max2) {
          break;
        }
        if (state.src.charCodeAt(pos++) === 62 && !isOutdented) {
          initial = offset3 = state.sCount[nextLine] + 1;
          if (state.src.charCodeAt(pos) === 32) {
            pos++;
            initial++;
            offset3++;
            adjustTab = false;
            spaceAfterMarker = true;
          } else if (state.src.charCodeAt(pos) === 9) {
            spaceAfterMarker = true;
            if ((state.bsCount[nextLine] + offset3) % 4 === 3) {
              pos++;
              initial++;
              offset3++;
              adjustTab = false;
            } else {
              adjustTab = true;
            }
          } else {
            spaceAfterMarker = false;
          }
          oldBMarks.push(state.bMarks[nextLine]);
          state.bMarks[nextLine] = pos;
          while (pos < max2) {
            ch = state.src.charCodeAt(pos);
            if (isSpace(ch)) {
              if (ch === 9) {
                offset3 += 4 - (offset3 + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4;
              } else {
                offset3++;
              }
            } else {
              break;
            }
            pos++;
          }
          lastLineEmpty = pos >= max2;
          oldBSCount.push(state.bsCount[nextLine]);
          state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0);
          oldSCount.push(state.sCount[nextLine]);
          state.sCount[nextLine] = offset3 - initial;
          oldTShift.push(state.tShift[nextLine]);
          state.tShift[nextLine] = pos - state.bMarks[nextLine];
          continue;
        }
        if (lastLineEmpty) {
          break;
        }
        terminate = false;
        for (i = 0, l = terminatorRules.length;i < l; i++) {
          if (terminatorRules[i](state, nextLine, endLine, true)) {
            terminate = true;
            break;
          }
        }
        if (terminate) {
          state.lineMax = nextLine;
          if (state.blkIndent !== 0) {
            oldBMarks.push(state.bMarks[nextLine]);
            oldBSCount.push(state.bsCount[nextLine]);
            oldTShift.push(state.tShift[nextLine]);
            oldSCount.push(state.sCount[nextLine]);
            state.sCount[nextLine] -= state.blkIndent;
          }
          break;
        }
        oldBMarks.push(state.bMarks[nextLine]);
        oldBSCount.push(state.bsCount[nextLine]);
        oldTShift.push(state.tShift[nextLine]);
        oldSCount.push(state.sCount[nextLine]);
        state.sCount[nextLine] = -1;
      }
      oldIndent = state.blkIndent;
      state.blkIndent = 0;
      token = state.push("blockquote_open", "blockquote", 1);
      token.markup = ">";
      token.map = lines = [startLine, 0];
      state.md.block.tokenize(state, startLine, nextLine);
      token = state.push("blockquote_close", "blockquote", -1);
      token.markup = ">";
      state.lineMax = oldLineMax;
      state.parentType = oldParentType;
      lines[1] = state.line;
      for (i = 0;i < oldTShift.length; i++) {
        state.bMarks[i + startLine] = oldBMarks[i];
        state.tShift[i + startLine] = oldTShift[i];
        state.sCount[i + startLine] = oldSCount[i];
        state.bsCount[i + startLine] = oldBSCount[i];
      }
      state.blkIndent = oldIndent;
      return true;
    };
  }
});
var require_hr = __commonJS2({
  "node_modules/markdown-it/lib/rules_block/hr.js"(exports, module) {
    var isSpace = require_utils().isSpace;
    module.exports = function hr2(state, startLine, endLine, silent) {
      var marker, cnt, ch, token, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine];
      if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {
        return false;
      }
      marker = state.src.charCodeAt(pos++);
      if (marker !== 42 && marker !== 45 && marker !== 95) {
        return false;
      }
      cnt = 1;
      while (pos < max2) {
        ch = state.src.charCodeAt(pos++);
        if (ch !== marker && !isSpace(ch)) {
          return false;
        }
        if (ch === marker) {
          cnt++;
        }
      }
      if (cnt < 3) {
        return false;
      }
      if (silent) {
        return true;
      }
      state.line = startLine + 1;
      token = state.push("hr", "hr", 0);
      token.map = [startLine, state.line];
      token.markup = Array(cnt + 1).join(String.fromCharCode(marker));
      return true;
    };
  }
});
var require_list = __commonJS2({
  "node_modules/markdown-it/lib/rules_block/list.js"(exports, module) {
    var isSpace = require_utils().isSpace;
    function skipBulletListMarker(state, startLine) {
      var marker, pos, max2, ch;
      pos = state.bMarks[startLine] + state.tShift[startLine];
      max2 = state.eMarks[startLine];
      marker = state.src.charCodeAt(pos++);
      if (marker !== 42 && marker !== 45 && marker !== 43) {
        return -1;
      }
      if (pos < max2) {
        ch = state.src.charCodeAt(pos);
        if (!isSpace(ch)) {
          return -1;
        }
      }
      return pos;
    }
    function skipOrderedListMarker(state, startLine) {
      var ch, start2 = state.bMarks[startLine] + state.tShift[startLine], pos = start2, max2 = state.eMarks[startLine];
      if (pos + 1 >= max2) {
        return -1;
      }
      ch = state.src.charCodeAt(pos++);
      if (ch < 48 || ch > 57) {
        return -1;
      }
      for (;; ) {
        if (pos >= max2) {
          return -1;
        }
        ch = state.src.charCodeAt(pos++);
        if (ch >= 48 && ch <= 57) {
          if (pos - start2 >= 10) {
            return -1;
          }
          continue;
        }
        if (ch === 41 || ch === 46) {
          break;
        }
        return -1;
      }
      if (pos < max2) {
        ch = state.src.charCodeAt(pos);
        if (!isSpace(ch)) {
          return -1;
        }
      }
      return pos;
    }
    function markTightParagraphs(state, idx) {
      var i, l, level = state.level + 2;
      for (i = idx + 2, l = state.tokens.length - 2;i < l; i++) {
        if (state.tokens[i].level === level && state.tokens[i].type === "paragraph_open") {
          state.tokens[i + 2].hidden = true;
          state.tokens[i].hidden = true;
          i += 2;
        }
      }
    }
    module.exports = function list2(state, startLine, endLine, silent) {
      var ch, contentStart, i, indent, indentAfterMarker, initial, isOrdered, itemLines, l, listLines, listTokIdx, markerCharCode, markerValue, max2, nextLine, offset3, oldListIndent, oldParentType, oldSCount, oldTShift, oldTight, pos, posAfterMarker, prevEmptyEnd, start2, terminate, terminatorRules, token, isTerminatingParagraph = false, tight = true;
      if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {
        return false;
      }
      if (!state.md.options.allowIndentation && state.listIndent >= 0 && state.sCount[startLine] - state.listIndent >= 4 && state.sCount[startLine] < state.blkIndent) {
        return false;
      }
      if (silent && state.parentType === "paragraph") {
        if (state.sCount[startLine] >= state.blkIndent) {
          isTerminatingParagraph = true;
        }
      }
      if ((posAfterMarker = skipOrderedListMarker(state, startLine)) >= 0) {
        isOrdered = true;
        start2 = state.bMarks[startLine] + state.tShift[startLine];
        markerValue = Number(state.src.slice(start2, posAfterMarker - 1));
        if (isTerminatingParagraph && markerValue !== 1)
          return false;
      } else if ((posAfterMarker = skipBulletListMarker(state, startLine)) >= 0) {
        isOrdered = false;
      } else {
        return false;
      }
      if (isTerminatingParagraph) {
        if (state.skipSpaces(posAfterMarker) >= state.eMarks[startLine])
          return false;
      }
      markerCharCode = state.src.charCodeAt(posAfterMarker - 1);
      if (silent) {
        return true;
      }
      listTokIdx = state.tokens.length;
      if (isOrdered) {
        token = state.push("ordered_list_open", "ol", 1);
        if (markerValue !== 1) {
          token.attrs = [["start", markerValue]];
        }
      } else {
        token = state.push("bullet_list_open", "ul", 1);
      }
      token.map = listLines = [startLine, 0];
      token.markup = String.fromCharCode(markerCharCode);
      nextLine = startLine;
      prevEmptyEnd = false;
      terminatorRules = state.md.block.ruler.getRules("list");
      oldParentType = state.parentType;
      state.parentType = "list";
      while (nextLine < endLine) {
        pos = posAfterMarker;
        max2 = state.eMarks[nextLine];
        initial = offset3 = state.sCount[nextLine] + posAfterMarker - (state.bMarks[startLine] + state.tShift[startLine]);
        while (pos < max2) {
          ch = state.src.charCodeAt(pos);
          if (ch === 9) {
            offset3 += 4 - (offset3 + state.bsCount[nextLine]) % 4;
          } else if (ch === 32) {
            offset3++;
          } else {
            break;
          }
          pos++;
        }
        contentStart = pos;
        if (contentStart >= max2) {
          indentAfterMarker = 1;
        } else {
          indentAfterMarker = offset3 - initial;
        }
        if (!state.md.options.allowIndentation && indentAfterMarker > 4) {
          indentAfterMarker = 1;
        }
        indent = initial + indentAfterMarker;
        token = state.push("list_item_open", "li", 1);
        token.markup = String.fromCharCode(markerCharCode);
        token.map = itemLines = [startLine, 0];
        if (isOrdered) {
          token.info = state.src.slice(start2, posAfterMarker - 1);
        }
        oldTight = state.tight;
        oldTShift = state.tShift[startLine];
        oldSCount = state.sCount[startLine];
        oldListIndent = state.listIndent;
        state.listIndent = state.blkIndent;
        state.blkIndent = indent;
        state.tight = true;
        state.tShift[startLine] = contentStart - state.bMarks[startLine];
        state.sCount[startLine] = offset3;
        if (contentStart >= max2 && state.isEmpty(startLine + 1)) {
          state.line = Math.min(state.line + 2, endLine);
        } else {
          state.md.block.tokenize(state, startLine, endLine, true);
        }
        if (!state.tight || prevEmptyEnd) {
          tight = false;
        }
        prevEmptyEnd = state.line - startLine > 1 && state.isEmpty(state.line - 1);
        state.blkIndent = state.listIndent;
        state.listIndent = oldListIndent;
        state.tShift[startLine] = oldTShift;
        state.sCount[startLine] = oldSCount;
        state.tight = oldTight;
        token = state.push("list_item_close", "li", -1);
        token.markup = String.fromCharCode(markerCharCode);
        nextLine = startLine = state.line;
        itemLines[1] = nextLine;
        contentStart = state.bMarks[startLine];
        if (nextLine >= endLine) {
          break;
        }
        if (state.sCount[nextLine] < state.blkIndent) {
          break;
        }
        if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {
          break;
        }
        terminate = false;
        for (i = 0, l = terminatorRules.length;i < l; i++) {
          if (terminatorRules[i](state, nextLine, endLine, true)) {
            terminate = true;
            break;
          }
        }
        if (terminate) {
          break;
        }
        if (isOrdered) {
          posAfterMarker = skipOrderedListMarker(state, nextLine);
          if (posAfterMarker < 0) {
            break;
          }
          start2 = state.bMarks[nextLine] + state.tShift[nextLine];
        } else {
          posAfterMarker = skipBulletListMarker(state, nextLine);
          if (posAfterMarker < 0) {
            break;
          }
        }
        if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) {
          break;
        }
      }
      if (isOrdered) {
        token = state.push("ordered_list_close", "ol", -1);
      } else {
        token = state.push("bullet_list_close", "ul", -1);
      }
      token.markup = String.fromCharCode(markerCharCode);
      listLines[1] = nextLine;
      state.line = nextLine;
      state.parentType = oldParentType;
      if (tight) {
        markTightParagraphs(state, listTokIdx);
      }
      return true;
    };
  }
});
var require_reference = __commonJS2({
  "node_modules/markdown-it/lib/rules_block/reference.js"(exports, module) {
    var normalizeReference = require_utils().normalizeReference;
    var isSpace = require_utils().isSpace;
    module.exports = function reference(state, startLine, _endLine, silent) {
      var ch, destEndPos, destEndLineNo, endLine, href, i, l, label, labelEnd, oldParentType, res, start2, str, terminate, terminatorRules, title, lines = 0, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine], nextLine = startLine + 1;
      if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {
        return false;
      }
      if (state.src.charCodeAt(pos) !== 91) {
        return false;
      }
      while (++pos < max2) {
        if (state.src.charCodeAt(pos) === 93 && state.src.charCodeAt(pos - 1) !== 92) {
          if (pos + 1 === max2) {
            return false;
          }
          if (state.src.charCodeAt(pos + 1) !== 58) {
            return false;
          }
          break;
        }
      }
      endLine = state.lineMax;
      terminatorRules = state.md.block.ruler.getRules("reference");
      oldParentType = state.parentType;
      state.parentType = "reference";
      for (;nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
        if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent > 3) {
          continue;
        }
        if (state.sCount[nextLine] < 0) {
          continue;
        }
        terminate = false;
        for (i = 0, l = terminatorRules.length;i < l; i++) {
          if (terminatorRules[i](state, nextLine, endLine, true)) {
            terminate = true;
            break;
          }
        }
        if (terminate) {
          break;
        }
      }
      str = state.getLines(startLine, nextLine, state.blkIndent, false).trim();
      max2 = str.length;
      for (pos = 1;pos < max2; pos++) {
        ch = str.charCodeAt(pos);
        if (ch === 91) {
          return false;
        } else if (ch === 93) {
          labelEnd = pos;
          break;
        } else if (ch === 10) {
          lines++;
        } else if (ch === 92) {
          pos++;
          if (pos < max2 && str.charCodeAt(pos) === 10) {
            lines++;
          }
        }
      }
      if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 58) {
        return false;
      }
      for (pos = labelEnd + 2;pos < max2; pos++) {
        ch = str.charCodeAt(pos);
        if (ch === 10) {
          lines++;
        } else if (isSpace(ch)) {
        } else {
          break;
        }
      }
      res = state.md.helpers.parseLinkDestination(str, pos, max2);
      if (!res.ok) {
        return false;
      }
      href = state.md.normalizeLink(res.str);
      if (!state.md.validateLink(href)) {
        return false;
      }
      pos = res.pos;
      lines += res.lines;
      destEndPos = pos;
      destEndLineNo = lines;
      start2 = pos;
      for (;pos < max2; pos++) {
        ch = str.charCodeAt(pos);
        if (ch === 10) {
          lines++;
        } else if (isSpace(ch)) {
        } else {
          break;
        }
      }
      res = state.md.helpers.parseLinkTitle(str, pos, max2);
      if (pos < max2 && start2 !== pos && res.ok) {
        title = res.str;
        pos = res.pos;
        lines += res.lines;
      } else {
        title = "";
        pos = destEndPos;
        lines = destEndLineNo;
      }
      while (pos < max2) {
        ch = str.charCodeAt(pos);
        if (!isSpace(ch)) {
          break;
        }
        pos++;
      }
      if (pos < max2 && str.charCodeAt(pos) !== 10) {
        if (title) {
          title = "";
          pos = destEndPos;
          lines = destEndLineNo;
          while (pos < max2) {
            ch = str.charCodeAt(pos);
            if (!isSpace(ch)) {
              break;
            }
            pos++;
          }
        }
      }
      if (pos < max2 && str.charCodeAt(pos) !== 10) {
        return false;
      }
      label = normalizeReference(str.slice(1, labelEnd));
      if (!label) {
        return false;
      }
      if (silent) {
        return true;
      }
      if (typeof state.env.references === "undefined") {
        state.env.references = {};
      }
      if (typeof state.env.references[label] === "undefined") {
        state.env.references[label] = { title, href };
      }
      state.parentType = oldParentType;
      state.line = startLine + lines + 1;
      return true;
    };
  }
});
var require_html_blocks = __commonJS2({
  "node_modules/markdown-it/lib/common/html_blocks.js"(exports, module) {
    module.exports = [
      "address",
      "article",
      "aside",
      "base",
      "basefont",
      "blockquote",
      "body",
      "caption",
      "center",
      "col",
      "colgroup",
      "dd",
      "details",
      "dialog",
      "dir",
      "div",
      "dl",
      "dt",
      "fieldset",
      "figcaption",
      "figure",
      "footer",
      "form",
      "frame",
      "frameset",
      "h1",
      "h2",
      "h3",
      "h4",
      "h5",
      "h6",
      "head",
      "header",
      "hr",
      "html",
      "iframe",
      "legend",
      "li",
      "link",
      "main",
      "menu",
      "menuitem",
      "nav",
      "noframes",
      "ol",
      "optgroup",
      "option",
      "p",
      "param",
      "section",
      "source",
      "summary",
      "table",
      "tbody",
      "td",
      "tfoot",
      "th",
      "thead",
      "title",
      "tr",
      "track",
      "ul"
    ];
  }
});
var require_html_re = __commonJS2({
  "node_modules/markdown-it/lib/common/html_re.js"(exports, module) {
    var attr_name = "[a-zA-Z_:][a-zA-Z0-9:._-]*";
    var unquoted = "[^\"'=<>`\\x00-\\x20]+";
    var single_quoted = "'[^']*'";
    var double_quoted = '"[^"]*"';
    var attr_value = "(?:" + unquoted + "|" + single_quoted + "|" + double_quoted + ")";
    var attribute = "(?:\\s+" + attr_name + "(?:\\s*=\\s*" + attr_value + ")?)";
    var open_tag = "<[A-Za-z][A-Za-z0-9\\-]*" + attribute + "*\\s*\\/?>";
    var close_tag = "<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>";
    var comment2 = "<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->";
    var processing = "<[?][\\s\\S]*?[?]>";
    var declaration = "<![A-Z]+\\s+[^>]*>";
    var cdata = "<!\\[CDATA\\[[\\s\\S]*?\\]\\]>";
    var HTML_TAG_RE = new RegExp("^(?:" + open_tag + "|" + close_tag + "|" + comment2 + "|" + processing + "|" + declaration + "|" + cdata + ")");
    var HTML_OPEN_CLOSE_TAG_RE = new RegExp("^(?:" + open_tag + "|" + close_tag + ")");
    module.exports.HTML_TAG_RE = HTML_TAG_RE;
    module.exports.HTML_OPEN_CLOSE_TAG_RE = HTML_OPEN_CLOSE_TAG_RE;
  }
});
var require_html_block = __commonJS2({
  "node_modules/markdown-it/lib/rules_block/html_block.js"(exports, module) {
    var block_names = require_html_blocks();
    var HTML_OPEN_CLOSE_TAG_RE = require_html_re().HTML_OPEN_CLOSE_TAG_RE;
    var HTML_SEQUENCES = [
      [/^<(script|pre|style|textarea)(?=(\s|>|$))/i, /<\/(script|pre|style|textarea)>/i, true],
      [/^<!--/, /-->/, true],
      [/^<\?/, /\?>/, true],
      [/^<![A-Z]/, />/, true],
      [/^<!\[CDATA\[/, /\]\]>/, true],
      [new RegExp("^</?(" + block_names.join("|") + ")(?=(\\s|/?>|$))", "i"), /^$/, true],
      [new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + "\\s*$"), /^$/, false]
    ];
    module.exports = function html_block(state, startLine, endLine, silent) {
      var i, nextLine, token, lineText, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine];
      if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {
        return false;
      }
      if (!state.md.options.html) {
        return false;
      }
      if (state.src.charCodeAt(pos) !== 60) {
        return false;
      }
      lineText = state.src.slice(pos, max2);
      for (i = 0;i < HTML_SEQUENCES.length; i++) {
        if (HTML_SEQUENCES[i][0].test(lineText)) {
          break;
        }
      }
      if (i === HTML_SEQUENCES.length) {
        return false;
      }
      if (silent) {
        return HTML_SEQUENCES[i][2];
      }
      nextLine = startLine + 1;
      if (!HTML_SEQUENCES[i][1].test(lineText)) {
        for (;nextLine < endLine; nextLine++) {
          if (state.sCount[nextLine] < state.blkIndent) {
            break;
          }
          pos = state.bMarks[nextLine] + state.tShift[nextLine];
          max2 = state.eMarks[nextLine];
          lineText = state.src.slice(pos, max2);
          if (HTML_SEQUENCES[i][1].test(lineText)) {
            if (lineText.length !== 0) {
              nextLine++;
            }
            break;
          }
        }
      }
      state.line = nextLine;
      token = state.push("html_block", "", 0);
      token.map = [startLine, nextLine];
      token.content = state.getLines(startLine, nextLine, state.blkIndent, true);
      return true;
    };
  }
});
var require_heading = __commonJS2({
  "node_modules/markdown-it/lib/rules_block/heading.js"(exports, module) {
    var isSpace = require_utils().isSpace;
    module.exports = function heading2(state, startLine, endLine, silent) {
      var ch, level, tmp, token, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine];
      if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {
        return false;
      }
      ch = state.src.charCodeAt(pos);
      if (ch !== 35 || pos >= max2) {
        return false;
      }
      level = 1;
      ch = state.src.charCodeAt(++pos);
      while (ch === 35 && pos < max2 && level <= 6) {
        level++;
        ch = state.src.charCodeAt(++pos);
      }
      if (level > 6 || pos < max2 && !isSpace(ch)) {
        return false;
      }
      if (silent) {
        return true;
      }
      max2 = state.skipSpacesBack(max2, pos);
      tmp = state.skipCharsBack(max2, 35, pos);
      if (tmp > pos && isSpace(state.src.charCodeAt(tmp - 1))) {
        max2 = tmp;
      }
      state.line = startLine + 1;
      token = state.push("heading_open", "h" + String(level), 1);
      token.markup = "########".slice(0, level);
      token.map = [startLine, state.line];
      token = state.push("inline", "", 0);
      token.content = state.src.slice(pos, max2).trim();
      token.map = [startLine, state.line];
      token.children = [];
      token = state.push("heading_close", "h" + String(level), -1);
      token.markup = "########".slice(0, level);
      return true;
    };
  }
});
var require_lheading = __commonJS2({
  "node_modules/markdown-it/lib/rules_block/lheading.js"(exports, module) {
    module.exports = function lheading(state, startLine, endLine) {
      var content, terminate, i, l, token, pos, max2, level, marker, nextLine = startLine + 1, oldParentType, terminatorRules = state.md.block.ruler.getRules("paragraph");
      if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {
        return false;
      }
      oldParentType = state.parentType;
      state.parentType = "paragraph";
      for (;nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
        if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent > 3) {
          continue;
        }
        if (state.sCount[nextLine] >= state.blkIndent) {
          pos = state.bMarks[nextLine] + state.tShift[nextLine];
          max2 = state.eMarks[nextLine];
          if (pos < max2) {
            marker = state.src.charCodeAt(pos);
            if (marker === 45 || marker === 61) {
              pos = state.skipChars(pos, marker);
              pos = state.skipSpaces(pos);
              if (pos >= max2) {
                level = marker === 61 ? 1 : 2;
                break;
              }
            }
          }
        }
        if (state.sCount[nextLine] < 0) {
          continue;
        }
        terminate = false;
        for (i = 0, l = terminatorRules.length;i < l; i++) {
          if (terminatorRules[i](state, nextLine, endLine, true)) {
            terminate = true;
            break;
          }
        }
        if (terminate) {
          break;
        }
      }
      if (!level) {
        return false;
      }
      content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();
      state.line = nextLine + 1;
      token = state.push("heading_open", "h" + String(level), 1);
      token.markup = String.fromCharCode(marker);
      token.map = [startLine, state.line];
      token = state.push("inline", "", 0);
      token.content = content;
      token.map = [startLine, state.line - 1];
      token.children = [];
      token = state.push("heading_close", "h" + String(level), -1);
      token.markup = String.fromCharCode(marker);
      state.parentType = oldParentType;
      return true;
    };
  }
});
var require_paragraph = __commonJS2({
  "node_modules/markdown-it/lib/rules_block/paragraph.js"(exports, module) {
    module.exports = function paragraph2(state, startLine) {
      var content, terminate, i, l, token, oldParentType, nextLine = startLine + 1, terminatorRules = state.md.block.ruler.getRules("paragraph"), endLine = state.lineMax;
      oldParentType = state.parentType;
      state.parentType = "paragraph";
      for (;nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
        if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent > 3) {
          continue;
        }
        if (state.sCount[nextLine] < 0) {
          continue;
        }
        terminate = false;
        for (i = 0, l = terminatorRules.length;i < l; i++) {
          if (terminatorRules[i](state, nextLine, endLine, true)) {
            terminate = true;
            break;
          }
        }
        if (terminate) {
          break;
        }
      }
      content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();
      state.line = nextLine;
      token = state.push("paragraph_open", "p", 1);
      token.map = [startLine, state.line];
      token = state.push("inline", "", 0);
      token.content = content;
      token.map = [startLine, state.line];
      token.children = [];
      token = state.push("paragraph_close", "p", -1);
      state.parentType = oldParentType;
      return true;
    };
  }
});
var require_state_block = __commonJS2({
  "node_modules/markdown-it/lib/rules_block/state_block.js"(exports, module) {
    var Token = require_token();
    var isSpace = require_utils().isSpace;
    function StateBlock(src, md, env, tokens2) {
      var ch, s2, start2, pos, len, indent, offset3, indent_found;
      this.src = src;
      this.md = md;
      this.env = env;
      this.tokens = tokens2;
      this.bMarks = [];
      this.eMarks = [];
      this.tShift = [];
      this.sCount = [];
      this.bsCount = [];
      this.blkIndent = 0;
      this.line = 0;
      this.lineMax = 0;
      this.tight = false;
      this.ddIndent = -1;
      this.listIndent = -1;
      this.parentType = "root";
      this.level = 0;
      this.result = "";
      s2 = this.src;
      indent_found = false;
      for (start2 = pos = indent = offset3 = 0, len = s2.length;pos < len; pos++) {
        ch = s2.charCodeAt(pos);
        if (!indent_found) {
          if (isSpace(ch)) {
            indent++;
            if (ch === 9) {
              offset3 += 4 - offset3 % 4;
            } else {
              offset3++;
            }
            continue;
          } else {
            indent_found = true;
          }
        }
        if (ch === 10 || pos === len - 1) {
          if (ch !== 10) {
            pos++;
          }
          this.bMarks.push(start2);
          this.eMarks.push(pos);
          this.tShift.push(indent);
          this.sCount.push(offset3);
          this.bsCount.push(0);
          indent_found = false;
          indent = 0;
          offset3 = 0;
          start2 = pos + 1;
        }
      }
      this.bMarks.push(s2.length);
      this.eMarks.push(s2.length);
      this.tShift.push(0);
      this.sCount.push(0);
      this.bsCount.push(0);
      this.lineMax = this.bMarks.length - 1;
    }
    StateBlock.prototype.push = function(type, tag, nesting) {
      var token = new Token(type, tag, nesting);
      token.block = true;
      if (nesting < 0)
        this.level--;
      token.level = this.level;
      if (nesting > 0)
        this.level++;
      this.tokens.push(token);
      return token;
    };
    StateBlock.prototype.isEmpty = function isEmpty(line) {
      return this.bMarks[line] + this.tShift[line] >= this.eMarks[line];
    };
    StateBlock.prototype.skipEmptyLines = function skipEmptyLines(from) {
      for (var max2 = this.lineMax;from < max2; from++) {
        if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {
          break;
        }
      }
      return from;
    };
    StateBlock.prototype.skipSpaces = function skipSpaces(pos) {
      var ch;
      for (var max2 = this.src.length;pos < max2; pos++) {
        ch = this.src.charCodeAt(pos);
        if (!isSpace(ch)) {
          break;
        }
      }
      return pos;
    };
    StateBlock.prototype.skipSpacesBack = function skipSpacesBack(pos, min2) {
      if (pos <= min2) {
        return pos;
      }
      while (pos > min2) {
        if (!isSpace(this.src.charCodeAt(--pos))) {
          return pos + 1;
        }
      }
      return pos;
    };
    StateBlock.prototype.skipChars = function skipChars(pos, code2) {
      for (var max2 = this.src.length;pos < max2; pos++) {
        if (this.src.charCodeAt(pos) !== code2) {
          break;
        }
      }
      return pos;
    };
    StateBlock.prototype.skipCharsBack = function skipCharsBack(pos, code2, min2) {
      if (pos <= min2) {
        return pos;
      }
      while (pos > min2) {
        if (code2 !== this.src.charCodeAt(--pos)) {
          return pos + 1;
        }
      }
      return pos;
    };
    StateBlock.prototype.getLines = function getLines(begin, end2, indent, keepLastLF) {
      var i, lineIndent, ch, first, last2, queue, lineStart, line = begin;
      if (begin >= end2) {
        return "";
      }
      queue = new Array(end2 - begin);
      for (i = 0;line < end2; line++, i++) {
        lineIndent = 0;
        lineStart = first = this.bMarks[line];
        if (line + 1 < end2 || keepLastLF) {
          last2 = this.eMarks[line] + 1;
        } else {
          last2 = this.eMarks[line];
        }
        while (first < last2 && lineIndent < indent) {
          ch = this.src.charCodeAt(first);
          if (isSpace(ch)) {
            if (ch === 9) {
              lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4;
            } else {
              lineIndent++;
            }
          } else if (first - lineStart < this.tShift[line]) {
            lineIndent++;
          } else {
            break;
          }
          first++;
        }
        if (lineIndent > indent) {
          queue[i] = new Array(lineIndent - indent + 1).join(" ") + this.src.slice(first, last2);
        } else {
          queue[i] = this.src.slice(first, last2);
        }
      }
      return queue.join("");
    };
    StateBlock.prototype.Token = Token;
    module.exports = StateBlock;
  }
});
var require_parser_block = __commonJS2({
  "node_modules/markdown-it/lib/parser_block.js"(exports, module) {
    var Ruler = require_ruler();
    var _rules = [
      ["table", require_table(), ["paragraph", "reference"]],
      ["code", require_code()],
      ["fence", require_fence(), ["paragraph", "reference", "blockquote", "list"]],
      ["blockquote", require_blockquote(), ["paragraph", "reference", "blockquote", "list"]],
      ["hr", require_hr(), ["paragraph", "reference", "blockquote", "list"]],
      ["list", require_list(), ["paragraph", "reference", "blockquote"]],
      ["reference", require_reference()],
      ["html_block", require_html_block(), ["paragraph", "reference", "blockquote"]],
      ["heading", require_heading(), ["paragraph", "reference", "blockquote"]],
      ["lheading", require_lheading()],
      ["paragraph", require_paragraph()]
    ];
    function ParserBlock() {
      this.ruler = new Ruler;
      for (var i = 0;i < _rules.length; i++) {
        this.ruler.push(_rules[i][0], _rules[i][1], { alt: (_rules[i][2] || []).slice() });
      }
    }
    ParserBlock.prototype.tokenize = function(state, startLine, endLine) {
      var ok, i, rules = this.ruler.getRules(""), len = rules.length, line = startLine, hasEmptyLines = false, maxNesting = state.md.options.maxNesting;
      while (line < endLine) {
        state.line = line = state.skipEmptyLines(line);
        if (line >= endLine) {
          break;
        }
        if (state.sCount[line] < state.blkIndent) {
          break;
        }
        if (state.level >= maxNesting) {
          state.line = endLine;
          break;
        }
        for (i = 0;i < len; i++) {
          ok = rules[i](state, line, endLine, false);
          if (ok) {
            break;
          }
        }
        state.tight = !hasEmptyLines;
        if (state.isEmpty(state.line - 1)) {
          hasEmptyLines = true;
        }
        line = state.line;
        if (line < endLine && state.isEmpty(line)) {
          hasEmptyLines = true;
          line++;
          state.line = line;
        }
      }
    };
    ParserBlock.prototype.parse = function(src, md, env, outTokens) {
      var state;
      if (!src) {
        return;
      }
      state = new this.State(src, md, env, outTokens);
      this.tokenize(state, state.line, state.lineMax);
    };
    ParserBlock.prototype.State = require_state_block();
    module.exports = ParserBlock;
  }
});
var require_text = __commonJS2({
  "node_modules/markdown-it/lib/rules_inline/text.js"(exports, module) {
    function isTerminatorChar(ch) {
      switch (ch) {
        case 10:
        case 33:
        case 35:
        case 36:
        case 37:
        case 38:
        case 42:
        case 43:
        case 45:
        case 58:
        case 60:
        case 61:
        case 62:
        case 64:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 123:
        case 125:
        case 126:
          return true;
        default:
          return false;
      }
    }
    module.exports = function text2(state, silent) {
      var pos = state.pos;
      while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {
        pos++;
      }
      if (pos === state.pos) {
        return false;
      }
      if (!silent) {
        state.pending += state.src.slice(state.pos, pos);
      }
      state.pos = pos;
      return true;
    };
  }
});
var require_newline = __commonJS2({
  "node_modules/markdown-it/lib/rules_inline/newline.js"(exports, module) {
    var isSpace = require_utils().isSpace;
    module.exports = function newline(state, silent) {
      var pmax, max2, ws, pos = state.pos;
      if (state.src.charCodeAt(pos) !== 10) {
        return false;
      }
      pmax = state.pending.length - 1;
      max2 = state.posMax;
      if (!silent) {
        if (pmax >= 0 && state.pending.charCodeAt(pmax) === 32) {
          if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 32) {
            ws = pmax - 1;
            while (ws >= 1 && state.pending.charCodeAt(ws - 1) === 32)
              ws--;
            state.pending = state.pending.slice(0, ws);
            state.push("hardbreak", "br", 0);
          } else {
            state.pending = state.pending.slice(0, -1);
            state.push("softbreak", "br", 0);
          }
        } else {
          state.push("softbreak", "br", 0);
        }
      }
      pos++;
      while (pos < max2 && isSpace(state.src.charCodeAt(pos))) {
        pos++;
      }
      state.pos = pos;
      return true;
    };
  }
});
var require_escape = __commonJS2({
  "node_modules/markdown-it/lib/rules_inline/escape.js"(exports, module) {
    var isSpace = require_utils().isSpace;
    var ESCAPED = [];
    for (i = 0;i < 256; i++) {
      ESCAPED.push(0);
    }
    var i;
    "\\!\"#$%&'()*+,./:;<=>?@[]^_`{|}~-".split("").forEach(function(ch) {
      ESCAPED[ch.charCodeAt(0)] = 1;
    });
    module.exports = function escape(state, silent) {
      var ch, pos = state.pos, max2 = state.posMax;
      if (state.src.charCodeAt(pos) !== 92) {
        return false;
      }
      pos++;
      if (pos < max2) {
        ch = state.src.charCodeAt(pos);
        if (ch < 256 && ESCAPED[ch] !== 0) {
          if (!silent) {
            state.pending += state.src[pos];
          }
          state.pos += 2;
          return true;
        }
        if (ch === 10) {
          if (!silent) {
            state.push("hardbreak", "br", 0);
          }
          pos++;
          while (pos < max2) {
            ch = state.src.charCodeAt(pos);
            if (!isSpace(ch)) {
              break;
            }
            pos++;
          }
          state.pos = pos;
          return true;
        }
      }
      if (!silent) {
        state.pending += "\\";
      }
      state.pos++;
      return true;
    };
  }
});
var require_backticks = __commonJS2({
  "node_modules/markdown-it/lib/rules_inline/backticks.js"(exports, module) {
    module.exports = function backtick(state, silent) {
      var start2, max2, marker, token, matchStart, matchEnd, openerLength, closerLength, pos = state.pos, ch = state.src.charCodeAt(pos);
      if (ch !== 96) {
        return false;
      }
      start2 = pos;
      pos++;
      max2 = state.posMax;
      while (pos < max2 && state.src.charCodeAt(pos) === 96) {
        pos++;
      }
      marker = state.src.slice(start2, pos);
      openerLength = marker.length;
      if (state.backticksScanned && (state.backticks[openerLength] || 0) <= start2) {
        if (!silent)
          state.pending += marker;
        state.pos += openerLength;
        return true;
      }
      matchStart = matchEnd = pos;
      while ((matchStart = state.src.indexOf("`", matchEnd)) !== -1) {
        matchEnd = matchStart + 1;
        while (matchEnd < max2 && state.src.charCodeAt(matchEnd) === 96) {
          matchEnd++;
        }
        closerLength = matchEnd - matchStart;
        if (closerLength === openerLength) {
          if (!silent) {
            token = state.push("code_inline", "code", 0);
            token.markup = marker;
            token.content = state.src.slice(pos, matchStart).replace(/\n/g, " ").replace(/^ (.+) $/, "$1");
          }
          state.pos = matchEnd;
          return true;
        }
        state.backticks[closerLength] = matchStart;
      }
      state.backticksScanned = true;
      if (!silent)
        state.pending += marker;
      state.pos += openerLength;
      return true;
    };
  }
});
var require_strikethrough = __commonJS2({
  "node_modules/markdown-it/lib/rules_inline/strikethrough.js"(exports, module) {
    module.exports.tokenize = function strikethrough(state, silent) {
      var i, scanned, token, len, ch, start2 = state.pos, marker = state.src.charCodeAt(start2);
      if (silent) {
        return false;
      }
      if (marker !== 126) {
        return false;
      }
      scanned = state.scanDelims(state.pos, true);
      len = scanned.length;
      ch = String.fromCharCode(marker);
      if (len < 2) {
        return false;
      }
      if (len % 2) {
        token = state.push("text", "", 0);
        token.content = ch;
        len--;
      }
      for (i = 0;i < len; i += 2) {
        token = state.push("text", "", 0);
        token.content = ch + ch;
        state.delimiters.push({
          marker,
          length: 0,
          token: state.tokens.length - 1,
          end: -1,
          open: scanned.can_open,
          close: scanned.can_close
        });
      }
      state.pos += scanned.length;
      return true;
    };
    function postProcess(state, delimiters) {
      var i, j, startDelim, endDelim, token, loneMarkers = [], max2 = delimiters.length;
      for (i = 0;i < max2; i++) {
        startDelim = delimiters[i];
        if (startDelim.marker !== 126) {
          continue;
        }
        if (startDelim.end === -1) {
          continue;
        }
        endDelim = delimiters[startDelim.end];
        token = state.tokens[startDelim.token];
        token.type = "s_open";
        token.tag = "s";
        token.nesting = 1;
        token.markup = "~~";
        token.content = "";
        token = state.tokens[endDelim.token];
        token.type = "s_close";
        token.tag = "s";
        token.nesting = -1;
        token.markup = "~~";
        token.content = "";
        if (state.tokens[endDelim.token - 1].type === "text" && state.tokens[endDelim.token - 1].content === "~") {
          loneMarkers.push(endDelim.token - 1);
        }
      }
      while (loneMarkers.length) {
        i = loneMarkers.pop();
        j = i + 1;
        while (j < state.tokens.length && state.tokens[j].type === "s_close") {
          j++;
        }
        j--;
        if (i !== j) {
          token = state.tokens[j];
          state.tokens[j] = state.tokens[i];
          state.tokens[i] = token;
        }
      }
    }
    module.exports.postProcess = function strikethrough(state) {
      var curr, tokens_meta = state.tokens_meta, max2 = state.tokens_meta.length;
      postProcess(state, state.delimiters);
      for (curr = 0;curr < max2; curr++) {
        if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
          postProcess(state, tokens_meta[curr].delimiters);
        }
      }
    };
  }
});
var require_emphasis = __commonJS2({
  "node_modules/markdown-it/lib/rules_inline/emphasis.js"(exports, module) {
    module.exports.tokenize = function emphasis(state, silent) {
      var i, scanned, token, start2 = state.pos, marker = state.src.charCodeAt(start2);
      if (silent) {
        return false;
      }
      if (marker !== 95 && marker !== 42) {
        return false;
      }
      scanned = state.scanDelims(state.pos, marker === 42);
      for (i = 0;i < scanned.length; i++) {
        token = state.push("text", "", 0);
        token.content = String.fromCharCode(marker);
        state.delimiters.push({
          marker,
          length: scanned.length,
          token: state.tokens.length - 1,
          end: -1,
          open: scanned.can_open,
          close: scanned.can_close
        });
      }
      state.pos += scanned.length;
      return true;
    };
    function postProcess(state, delimiters) {
      var i, startDelim, endDelim, token, ch, isStrong, max2 = delimiters.length;
      for (i = max2 - 1;i >= 0; i--) {
        startDelim = delimiters[i];
        if (startDelim.marker !== 95 && startDelim.marker !== 42) {
          continue;
        }
        if (startDelim.end === -1) {
          continue;
        }
        endDelim = delimiters[startDelim.end];
        isStrong = i > 0 && delimiters[i - 1].end === startDelim.end + 1 && delimiters[i - 1].marker === startDelim.marker && delimiters[i - 1].token === startDelim.token - 1 && delimiters[startDelim.end + 1].token === endDelim.token + 1;
        ch = String.fromCharCode(startDelim.marker);
        token = state.tokens[startDelim.token];
        token.type = isStrong ? "strong_open" : "em_open";
        token.tag = isStrong ? "strong" : "em";
        token.nesting = 1;
        token.markup = isStrong ? ch + ch : ch;
        token.content = "";
        token = state.tokens[endDelim.token];
        token.type = isStrong ? "strong_close" : "em_close";
        token.tag = isStrong ? "strong" : "em";
        token.nesting = -1;
        token.markup = isStrong ? ch + ch : ch;
        token.content = "";
        if (isStrong) {
          state.tokens[delimiters[i - 1].token].content = "";
          state.tokens[delimiters[startDelim.end + 1].token].content = "";
          i--;
        }
      }
    }
    module.exports.postProcess = function emphasis(state) {
      var curr, tokens_meta = state.tokens_meta, max2 = state.tokens_meta.length;
      postProcess(state, state.delimiters);
      for (curr = 0;curr < max2; curr++) {
        if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
          postProcess(state, tokens_meta[curr].delimiters);
        }
      }
    };
  }
});
var require_link = __commonJS2({
  "node_modules/markdown-it/lib/rules_inline/link.js"(exports, module) {
    var normalizeReference = require_utils().normalizeReference;
    var isSpace = require_utils().isSpace;
    module.exports = function link2(state, silent) {
      var attrs, code2, label, labelEnd, labelStart, pos, res, ref, token, href = "", title = "", oldPos = state.pos, max2 = state.posMax, start2 = state.pos, parseReference = true;
      if (state.src.charCodeAt(state.pos) !== 91) {
        return false;
      }
      labelStart = state.pos + 1;
      labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true);
      if (labelEnd < 0) {
        return false;
      }
      pos = labelEnd + 1;
      if (pos < max2 && state.src.charCodeAt(pos) === 40) {
        parseReference = false;
        pos++;
        for (;pos < max2; pos++) {
          code2 = state.src.charCodeAt(pos);
          if (!isSpace(code2) && code2 !== 10) {
            break;
          }
        }
        if (pos >= max2) {
          return false;
        }
        start2 = pos;
        res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);
        if (res.ok) {
          href = state.md.normalizeLink(res.str);
          if (state.md.validateLink(href)) {
            pos = res.pos;
          } else {
            href = "";
          }
          start2 = pos;
          for (;pos < max2; pos++) {
            code2 = state.src.charCodeAt(pos);
            if (!isSpace(code2) && code2 !== 10) {
              break;
            }
          }
          res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);
          if (pos < max2 && start2 !== pos && res.ok) {
            title = res.str;
            pos = res.pos;
            for (;pos < max2; pos++) {
              code2 = state.src.charCodeAt(pos);
              if (!isSpace(code2) && code2 !== 10) {
                break;
              }
            }
          }
        }
        if (pos >= max2 || state.src.charCodeAt(pos) !== 41) {
          parseReference = true;
        }
        pos++;
      }
      if (parseReference) {
        if (typeof state.env.references === "undefined") {
          return false;
        }
        if (pos < max2 && state.src.charCodeAt(pos) === 91) {
          start2 = pos + 1;
          pos = state.md.helpers.parseLinkLabel(state, pos);
          if (pos >= 0) {
            label = state.src.slice(start2, pos++);
          } else {
            pos = labelEnd + 1;
          }
        } else {
          pos = labelEnd + 1;
        }
        if (!label) {
          label = state.src.slice(labelStart, labelEnd);
        }
        ref = state.env.references[normalizeReference(label)];
        if (!ref) {
          state.pos = oldPos;
          return false;
        }
        href = ref.href;
        title = ref.title;
      }
      if (!silent) {
        state.pos = labelStart;
        state.posMax = labelEnd;
        token = state.push("link_open", "a", 1);
        token.attrs = attrs = [["href", href]];
        if (title) {
          attrs.push(["title", title]);
        }
        state.md.inline.tokenize(state);
        token = state.push("link_close", "a", -1);
      }
      state.pos = pos;
      state.posMax = max2;
      return true;
    };
  }
});
var require_image = __commonJS2({
  "node_modules/markdown-it/lib/rules_inline/image.js"(exports, module) {
    var normalizeReference = require_utils().normalizeReference;
    var isSpace = require_utils().isSpace;
    module.exports = function image2(state, silent) {
      var attrs, code2, content, label, labelEnd, labelStart, pos, ref, res, title, token, tokens2, start2, href = "", oldPos = state.pos, max2 = state.posMax;
      if (state.src.charCodeAt(state.pos) !== 33) {
        return false;
      }
      if (state.src.charCodeAt(state.pos + 1) !== 91) {
        return false;
      }
      labelStart = state.pos + 2;
      labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false);
      if (labelEnd < 0) {
        return false;
      }
      pos = labelEnd + 1;
      if (pos < max2 && state.src.charCodeAt(pos) === 40) {
        pos++;
        for (;pos < max2; pos++) {
          code2 = state.src.charCodeAt(pos);
          if (!isSpace(code2) && code2 !== 10) {
            break;
          }
        }
        if (pos >= max2) {
          return false;
        }
        start2 = pos;
        res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);
        if (res.ok) {
          href = state.md.normalizeLink(res.str);
          if (state.md.validateLink(href)) {
            pos = res.pos;
          } else {
            href = "";
          }
        }
        start2 = pos;
        for (;pos < max2; pos++) {
          code2 = state.src.charCodeAt(pos);
          if (!isSpace(code2) && code2 !== 10) {
            break;
          }
        }
        res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);
        if (pos < max2 && start2 !== pos && res.ok) {
          title = res.str;
          pos = res.pos;
          for (;pos < max2; pos++) {
            code2 = state.src.charCodeAt(pos);
            if (!isSpace(code2) && code2 !== 10) {
              break;
            }
          }
        } else {
          title = "";
        }
        if (pos >= max2 || state.src.charCodeAt(pos) !== 41) {
          state.pos = oldPos;
          return false;
        }
        pos++;
      } else {
        if (typeof state.env.references === "undefined") {
          return false;
        }
        if (pos < max2 && state.src.charCodeAt(pos) === 91) {
          start2 = pos + 1;
          pos = state.md.helpers.parseLinkLabel(state, pos);
          if (pos >= 0) {
            label = state.src.slice(start2, pos++);
          } else {
            pos = labelEnd + 1;
          }
        } else {
          pos = labelEnd + 1;
        }
        if (!label) {
          label = state.src.slice(labelStart, labelEnd);
        }
        ref = state.env.references[normalizeReference(label)];
        if (!ref) {
          state.pos = oldPos;
          return false;
        }
        href = ref.href;
        title = ref.title;
      }
      if (!silent) {
        content = state.src.slice(labelStart, labelEnd);
        state.md.inline.parse(content, state.md, state.env, tokens2 = []);
        token = state.push("image", "img", 0);
        token.attrs = attrs = [["src", href], ["alt", ""]];
        token.children = tokens2;
        token.content = content;
        if (title) {
          attrs.push(["title", title]);
        }
      }
      state.pos = pos;
      state.posMax = max2;
      return true;
    };
  }
});
var require_autolink = __commonJS2({
  "node_modules/markdown-it/lib/rules_inline/autolink.js"(exports, module) {
    var EMAIL_RE = /^([a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/;
    var AUTOLINK_RE = /^([a-zA-Z][a-zA-Z0-9+.\-]{1,31}):([^<>\x00-\x20]*)$/;
    module.exports = function autolink(state, silent) {
      var url, fullUrl, token, ch, start2, max2, pos = state.pos;
      if (state.src.charCodeAt(pos) !== 60) {
        return false;
      }
      start2 = state.pos;
      max2 = state.posMax;
      for (;; ) {
        if (++pos >= max2)
          return false;
        ch = state.src.charCodeAt(pos);
        if (ch === 60)
          return false;
        if (ch === 62)
          break;
      }
      url = state.src.slice(start2 + 1, pos);
      if (AUTOLINK_RE.test(url)) {
        fullUrl = state.md.normalizeLink(url);
        if (!state.md.validateLink(fullUrl)) {
          return false;
        }
        if (!silent) {
          token = state.push("link_open", "a", 1);
          token.attrs = [["href", fullUrl]];
          token.markup = "autolink";
          token.info = "auto";
          token = state.push("text", "", 0);
          token.content = state.md.normalizeLinkText(url);
          token = state.push("link_close", "a", -1);
          token.markup = "autolink";
          token.info = "auto";
        }
        state.pos += url.length + 2;
        return true;
      }
      if (EMAIL_RE.test(url)) {
        fullUrl = state.md.normalizeLink("mailto:" + url);
        if (!state.md.validateLink(fullUrl)) {
          return false;
        }
        if (!silent) {
          token = state.push("link_open", "a", 1);
          token.attrs = [["href", fullUrl]];
          token.markup = "autolink";
          token.info = "auto";
          token = state.push("text", "", 0);
          token.content = state.md.normalizeLinkText(url);
          token = state.push("link_close", "a", -1);
          token.markup = "autolink";
          token.info = "auto";
        }
        state.pos += url.length + 2;
        return true;
      }
      return false;
    };
  }
});
var require_html_inline = __commonJS2({
  "node_modules/markdown-it/lib/rules_inline/html_inline.js"(exports, module) {
    var HTML_TAG_RE = require_html_re().HTML_TAG_RE;
    function isLetter(ch) {
      var lc = ch | 32;
      return lc >= 97 && lc <= 122;
    }
    module.exports = function html_inline(state, silent) {
      var ch, match, max2, token, pos = state.pos;
      if (!state.md.options.html) {
        return false;
      }
      max2 = state.posMax;
      if (state.src.charCodeAt(pos) !== 60 || pos + 2 >= max2) {
        return false;
      }
      ch = state.src.charCodeAt(pos + 1);
      if (ch !== 33 && ch !== 63 && ch !== 47 && !isLetter(ch)) {
        return false;
      }
      match = state.src.slice(pos).match(HTML_TAG_RE);
      if (!match) {
        return false;
      }
      if (!silent) {
        token = state.push("html_inline", "", 0);
        token.content = state.src.slice(pos, pos + match[0].length);
      }
      state.pos += match[0].length;
      return true;
    };
  }
});
var require_entity = __commonJS2({
  "node_modules/markdown-it/lib/rules_inline/entity.js"(exports, module) {
    var entities = require_entities2();
    var has = require_utils().has;
    var isValidEntityCode = require_utils().isValidEntityCode;
    var fromCodePoint = require_utils().fromCodePoint;
    var DIGITAL_RE = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i;
    var NAMED_RE = /^&([a-z][a-z0-9]{1,31});/i;
    module.exports = function entity(state, silent) {
      var ch, code2, match, pos = state.pos, max2 = state.posMax;
      if (state.src.charCodeAt(pos) !== 38) {
        return false;
      }
      if (pos + 1 < max2) {
        ch = state.src.charCodeAt(pos + 1);
        if (ch === 35) {
          match = state.src.slice(pos).match(DIGITAL_RE);
          if (match) {
            if (!silent) {
              code2 = match[1][0].toLowerCase() === "x" ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10);
              state.pending += isValidEntityCode(code2) ? fromCodePoint(code2) : fromCodePoint(65533);
            }
            state.pos += match[0].length;
            return true;
          }
        } else {
          match = state.src.slice(pos).match(NAMED_RE);
          if (match) {
            if (has(entities, match[1])) {
              if (!silent) {
                state.pending += entities[match[1]];
              }
              state.pos += match[0].length;
              return true;
            }
          }
        }
      }
      if (!silent) {
        state.pending += "&";
      }
      state.pos++;
      return true;
    };
  }
});
var require_balance_pairs = __commonJS2({
  "node_modules/markdown-it/lib/rules_inline/balance_pairs.js"(exports, module) {
    function processDelimiters(state, delimiters) {
      var closerIdx, openerIdx, closer, opener, minOpenerIdx, newMinOpenerIdx, isOddMatch, lastJump, openersBottom = {}, max2 = delimiters.length;
      if (!max2)
        return;
      var headerIdx = 0;
      var lastTokenIdx = -2;
      var jumps = [];
      for (closerIdx = 0;closerIdx < max2; closerIdx++) {
        closer = delimiters[closerIdx];
        jumps.push(0);
        if (delimiters[headerIdx].marker !== closer.marker || lastTokenIdx !== closer.token - 1) {
          headerIdx = closerIdx;
        }
        lastTokenIdx = closer.token;
        closer.length = closer.length || 0;
        if (!closer.close)
          continue;
        if (!openersBottom.hasOwnProperty(closer.marker)) {
          openersBottom[closer.marker] = [-1, -1, -1, -1, -1, -1];
        }
        minOpenerIdx = openersBottom[closer.marker][(closer.open ? 3 : 0) + closer.length % 3];
        openerIdx = headerIdx - jumps[headerIdx] - 1;
        newMinOpenerIdx = openerIdx;
        for (;openerIdx > minOpenerIdx; openerIdx -= jumps[openerIdx] + 1) {
          opener = delimiters[openerIdx];
          if (opener.marker !== closer.marker)
            continue;
          if (opener.open && opener.end < 0) {
            isOddMatch = false;
            if (opener.close || closer.open) {
              if ((opener.length + closer.length) % 3 === 0) {
                if (opener.length % 3 !== 0 || closer.length % 3 !== 0) {
                  isOddMatch = true;
                }
              }
            }
            if (!isOddMatch) {
              lastJump = openerIdx > 0 && !delimiters[openerIdx - 1].open ? jumps[openerIdx - 1] + 1 : 0;
              jumps[closerIdx] = closerIdx - openerIdx + lastJump;
              jumps[openerIdx] = lastJump;
              closer.open = false;
              opener.end = closerIdx;
              opener.close = false;
              newMinOpenerIdx = -1;
              lastTokenIdx = -2;
              break;
            }
          }
        }
        if (newMinOpenerIdx !== -1) {
          openersBottom[closer.marker][(closer.open ? 3 : 0) + (closer.length || 0) % 3] = newMinOpenerIdx;
        }
      }
    }
    module.exports = function link_pairs(state) {
      var curr, tokens_meta = state.tokens_meta, max2 = state.tokens_meta.length;
      processDelimiters(state, state.delimiters);
      for (curr = 0;curr < max2; curr++) {
        if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
          processDelimiters(state, tokens_meta[curr].delimiters);
        }
      }
    };
  }
});
var require_text_collapse = __commonJS2({
  "node_modules/markdown-it/lib/rules_inline/text_collapse.js"(exports, module) {
    module.exports = function text_collapse(state) {
      var curr, last2, level = 0, tokens2 = state.tokens, max2 = state.tokens.length;
      for (curr = last2 = 0;curr < max2; curr++) {
        if (tokens2[curr].nesting < 0)
          level--;
        tokens2[curr].level = level;
        if (tokens2[curr].nesting > 0)
          level++;
        if (tokens2[curr].type === "text" && curr + 1 < max2 && tokens2[curr + 1].type === "text") {
          tokens2[curr + 1].content = tokens2[curr].content + tokens2[curr + 1].content;
        } else {
          if (curr !== last2) {
            tokens2[last2] = tokens2[curr];
          }
          last2++;
        }
      }
      if (curr !== last2) {
        tokens2.length = last2;
      }
    };
  }
});
var require_state_inline = __commonJS2({
  "node_modules/markdown-it/lib/rules_inline/state_inline.js"(exports, module) {
    var Token = require_token();
    var isWhiteSpace = require_utils().isWhiteSpace;
    var isPunctChar = require_utils().isPunctChar;
    var isMdAsciiPunct = require_utils().isMdAsciiPunct;
    function StateInline(src, md, env, outTokens) {
      this.src = src;
      this.env = env;
      this.md = md;
      this.tokens = outTokens;
      this.tokens_meta = Array(outTokens.length);
      this.pos = 0;
      this.posMax = this.src.length;
      this.level = 0;
      this.pending = "";
      this.pendingLevel = 0;
      this.cache = {};
      this.delimiters = [];
      this._prev_delimiters = [];
      this.backticks = {};
      this.backticksScanned = false;
    }
    StateInline.prototype.pushPending = function() {
      var token = new Token("text", "", 0);
      token.content = this.pending;
      token.level = this.pendingLevel;
      this.tokens.push(token);
      this.pending = "";
      return token;
    };
    StateInline.prototype.push = function(type, tag, nesting) {
      if (this.pending) {
        this.pushPending();
      }
      var token = new Token(type, tag, nesting);
      var token_meta = null;
      if (nesting < 0) {
        this.level--;
        this.delimiters = this._prev_delimiters.pop();
      }
      token.level = this.level;
      if (nesting > 0) {
        this.level++;
        this._prev_delimiters.push(this.delimiters);
        this.delimiters = [];
        token_meta = { delimiters: this.delimiters };
      }
      this.pendingLevel = this.level;
      this.tokens.push(token);
      this.tokens_meta.push(token_meta);
      return token;
    };
    StateInline.prototype.scanDelims = function(start2, canSplitWord) {
      var pos = start2, lastChar, nextChar, count, can_open, can_close, isLastWhiteSpace, isLastPunctChar, isNextWhiteSpace, isNextPunctChar, left_flanking = true, right_flanking = true, max2 = this.posMax, marker = this.src.charCodeAt(start2);
      lastChar = start2 > 0 ? this.src.charCodeAt(start2 - 1) : 32;
      while (pos < max2 && this.src.charCodeAt(pos) === marker) {
        pos++;
      }
      count = pos - start2;
      nextChar = pos < max2 ? this.src.charCodeAt(pos) : 32;
      isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));
      isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));
      isLastWhiteSpace = isWhiteSpace(lastChar);
      isNextWhiteSpace = isWhiteSpace(nextChar);
      if (isNextWhiteSpace) {
        left_flanking = false;
      } else if (isNextPunctChar) {
        if (!(isLastWhiteSpace || isLastPunctChar)) {
          left_flanking = false;
        }
      }
      if (isLastWhiteSpace) {
        right_flanking = false;
      } else if (isLastPunctChar) {
        if (!(isNextWhiteSpace || isNextPunctChar)) {
          right_flanking = false;
        }
      }
      if (!canSplitWord) {
        can_open = left_flanking && (!right_flanking || isLastPunctChar);
        can_close = right_flanking && (!left_flanking || isNextPunctChar);
      } else {
        can_open = left_flanking;
        can_close = right_flanking;
      }
      return {
        can_open,
        can_close,
        length: count
      };
    };
    StateInline.prototype.Token = Token;
    module.exports = StateInline;
  }
});
var require_parser_inline = __commonJS2({
  "node_modules/markdown-it/lib/parser_inline.js"(exports, module) {
    var Ruler = require_ruler();
    var _rules = [
      ["text", require_text()],
      ["newline", require_newline()],
      ["escape", require_escape()],
      ["backticks", require_backticks()],
      ["strikethrough", require_strikethrough().tokenize],
      ["emphasis", require_emphasis().tokenize],
      ["link", require_link()],
      ["image", require_image()],
      ["autolink", require_autolink()],
      ["html_inline", require_html_inline()],
      ["entity", require_entity()]
    ];
    var _rules2 = [
      ["balance_pairs", require_balance_pairs()],
      ["strikethrough", require_strikethrough().postProcess],
      ["emphasis", require_emphasis().postProcess],
      ["text_collapse", require_text_collapse()]
    ];
    function ParserInline() {
      var i;
      this.ruler = new Ruler;
      for (i = 0;i < _rules.length; i++) {
        this.ruler.push(_rules[i][0], _rules[i][1]);
      }
      this.ruler2 = new Ruler;
      for (i = 0;i < _rules2.length; i++) {
        this.ruler2.push(_rules2[i][0], _rules2[i][1]);
      }
    }
    ParserInline.prototype.skipToken = function(state) {
      var ok, i, pos = state.pos, rules = this.ruler.getRules(""), len = rules.length, maxNesting = state.md.options.maxNesting, cache = state.cache;
      if (typeof cache[pos] !== "undefined") {
        state.pos = cache[pos];
        return;
      }
      if (state.level < maxNesting) {
        for (i = 0;i < len; i++) {
          state.level++;
          ok = rules[i](state, true);
          state.level--;
          if (ok) {
            break;
          }
        }
      } else {
        state.pos = state.posMax;
      }
      if (!ok) {
        state.pos++;
      }
      cache[pos] = state.pos;
    };
    ParserInline.prototype.tokenize = function(state) {
      var ok, i, rules = this.ruler.getRules(""), len = rules.length, end2 = state.posMax, maxNesting = state.md.options.maxNesting;
      while (state.pos < end2) {
        if (state.level < maxNesting) {
          for (i = 0;i < len; i++) {
            ok = rules[i](state, false);
            if (ok) {
              break;
            }
          }
        }
        if (ok) {
          if (state.pos >= end2) {
            break;
          }
          continue;
        }
        state.pending += state.src[state.pos++];
      }
      if (state.pending) {
        state.pushPending();
      }
    };
    ParserInline.prototype.parse = function(str, md, env, outTokens) {
      var i, rules, len;
      var state = new this.State(str, md, env, outTokens);
      this.tokenize(state);
      rules = this.ruler2.getRules("");
      len = rules.length;
      for (i = 0;i < len; i++) {
        rules[i](state);
      }
    };
    ParserInline.prototype.State = require_state_inline();
    module.exports = ParserInline;
  }
});
var require_re = __commonJS2({
  "node_modules/linkify-it/lib/re.js"(exports, module) {
    module.exports = function(opts) {
      var re = {};
      re.src_Any = require_regex2().source;
      re.src_Cc = require_regex3().source;
      re.src_Z = require_regex5().source;
      re.src_P = require_regex().source;
      re.src_ZPCc = [re.src_Z, re.src_P, re.src_Cc].join("|");
      re.src_ZCc = [re.src_Z, re.src_Cc].join("|");
      var text_separators = "[><\uFF5C]";
      re.src_pseudo_letter = "(?:(?!" + text_separators + "|" + re.src_ZPCc + ")" + re.src_Any + ")";
      re.src_ip4 = "(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)";
      re.src_auth = "(?:(?:(?!" + re.src_ZCc + "|[@/\\[\\]()]).)+@)?";
      re.src_port = "(?::(?:6(?:[0-4]\\d{3}|5(?:[0-4]\\d{2}|5(?:[0-2]\\d|3[0-5])))|[1-5]?\\d{1,4}))?";
      re.src_host_terminator = "(?=$|" + text_separators + "|" + re.src_ZPCc + ")(?!-|_|:\\d|\\.-|\\.(?!$|" + re.src_ZPCc + "))";
      re.src_path = "(?:[/?#](?:(?!" + re.src_ZCc + "|" + text_separators + `|[()[\\]{}.,"'?!\\-;]).|\\[(?:(?!` + re.src_ZCc + "|\\]).)*\\]|\\((?:(?!" + re.src_ZCc + "|[)]).)*\\)|\\{(?:(?!" + re.src_ZCc + '|[}]).)*\\}|\\"(?:(?!' + re.src_ZCc + `|["]).)+\\"|\\'(?:(?!` + re.src_ZCc + "|[']).)+\\'|\\'(?=" + re.src_pseudo_letter + "|[-]).|\\.{2,}[a-zA-Z0-9%/&]|\\.(?!" + re.src_ZCc + "|[.]).|" + (opts && opts["---"] ? "\\-(?!--(?:[^-]|$))(?:-*)|" : "\\-+|") + ",(?!" + re.src_ZCc + ").|;(?!" + re.src_ZCc + ").|\\!+(?!" + re.src_ZCc + "|[!]).|\\?(?!" + re.src_ZCc + "|[?]).)+|\\/)?";
      re.src_email_name = '[\\-;:&=\\+\\$,\\.a-zA-Z0-9_][\\-;:&=\\+\\$,\\"\\.a-zA-Z0-9_]*';
      re.src_xn = "xn--[a-z0-9\\-]{1,59}";
      re.src_domain_root = "(?:" + re.src_xn + "|" + re.src_pseudo_letter + "{1,63})";
      re.src_domain = "(?:" + re.src_xn + "|(?:" + re.src_pseudo_letter + ")|(?:" + re.src_pseudo_letter + "(?:-|" + re.src_pseudo_letter + "){0,61}" + re.src_pseudo_letter + "))";
      re.src_host = "(?:(?:(?:(?:" + re.src_domain + ")\\.)*" + re.src_domain + "))";
      re.tpl_host_fuzzy = "(?:" + re.src_ip4 + "|(?:(?:(?:" + re.src_domain + ")\\.)+(?:%TLDS%)))";
      re.tpl_host_no_ip_fuzzy = "(?:(?:(?:" + re.src_domain + ")\\.)+(?:%TLDS%))";
      re.src_host_strict = re.src_host + re.src_host_terminator;
      re.tpl_host_fuzzy_strict = re.tpl_host_fuzzy + re.src_host_terminator;
      re.src_host_port_strict = re.src_host + re.src_port + re.src_host_terminator;
      re.tpl_host_port_fuzzy_strict = re.tpl_host_fuzzy + re.src_port + re.src_host_terminator;
      re.tpl_host_port_no_ip_fuzzy_strict = re.tpl_host_no_ip_fuzzy + re.src_port + re.src_host_terminator;
      re.tpl_host_fuzzy_test = "localhost|www\\.|\\.\\d{1,3}\\.|(?:\\.(?:%TLDS%)(?:" + re.src_ZPCc + "|>|$))";
      re.tpl_email_fuzzy = "(^|" + text_separators + '|"|\\(|' + re.src_ZCc + ")(" + re.src_email_name + "@" + re.tpl_host_fuzzy_strict + ")";
      re.tpl_link_fuzzy = "(^|(?![.:/\\-_@])(?:[$+<=>^`|\uFF5C]|" + re.src_ZPCc + "))((?![$+<=>^`|\uFF5C])" + re.tpl_host_port_fuzzy_strict + re.src_path + ")";
      re.tpl_link_no_ip_fuzzy = "(^|(?![.:/\\-_@])(?:[$+<=>^`|\uFF5C]|" + re.src_ZPCc + "))((?![$+<=>^`|\uFF5C])" + re.tpl_host_port_no_ip_fuzzy_strict + re.src_path + ")";
      return re;
    };
  }
});
var require_linkify_it = __commonJS2({
  "node_modules/linkify-it/index.js"(exports, module) {
    function assign(obj) {
      var sources = Array.prototype.slice.call(arguments, 1);
      sources.forEach(function(source) {
        if (!source) {
          return;
        }
        Object.keys(source).forEach(function(key) {
          obj[key] = source[key];
        });
      });
      return obj;
    }
    function _class(obj) {
      return Object.prototype.toString.call(obj);
    }
    function isString8(obj) {
      return _class(obj) === "[object String]";
    }
    function isObject4(obj) {
      return _class(obj) === "[object Object]";
    }
    function isRegExp(obj) {
      return _class(obj) === "[object RegExp]";
    }
    function isFunction22(obj) {
      return _class(obj) === "[object Function]";
    }
    function escapeRE(str) {
      return str.replace(/[.?*+^$[\]\\(){}|-]/g, "\\$&");
    }
    var defaultOptions = {
      fuzzyLink: true,
      fuzzyEmail: true,
      fuzzyIP: false
    };
    function isOptionsObj(obj) {
      return Object.keys(obj || {}).reduce(function(acc, k) {
        return acc || defaultOptions.hasOwnProperty(k);
      }, false);
    }
    var defaultSchemas = {
      "http:": {
        validate: function(text2, pos, self) {
          var tail = text2.slice(pos);
          if (!self.re.http) {
            self.re.http = new RegExp("^\\/\\/" + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, "i");
          }
          if (self.re.http.test(tail)) {
            return tail.match(self.re.http)[0].length;
          }
          return 0;
        }
      },
      "https:": "http:",
      "ftp:": "http:",
      "//": {
        validate: function(text2, pos, self) {
          var tail = text2.slice(pos);
          if (!self.re.no_http) {
            self.re.no_http = new RegExp("^" + self.re.src_auth + "(?:localhost|(?:(?:" + self.re.src_domain + ")\\.)+" + self.re.src_domain_root + ")" + self.re.src_port + self.re.src_host_terminator + self.re.src_path, "i");
          }
          if (self.re.no_http.test(tail)) {
            if (pos >= 3 && text2[pos - 3] === ":") {
              return 0;
            }
            if (pos >= 3 && text2[pos - 3] === "/") {
              return 0;
            }
            return tail.match(self.re.no_http)[0].length;
          }
          return 0;
        }
      },
      "mailto:": {
        validate: function(text2, pos, self) {
          var tail = text2.slice(pos);
          if (!self.re.mailto) {
            self.re.mailto = new RegExp("^" + self.re.src_email_name + "@" + self.re.src_host_strict, "i");
          }
          if (self.re.mailto.test(tail)) {
            return tail.match(self.re.mailto)[0].length;
          }
          return 0;
        }
      }
    };
    var tlds_2ch_src_re = "a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]";
    var tlds_default = "biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|\u0440\u0444".split("|");
    function resetScanCache(self) {
      self.__index__ = -1;
      self.__text_cache__ = "";
    }
    function createValidator(re) {
      return function(text2, pos) {
        var tail = text2.slice(pos);
        if (re.test(tail)) {
          return tail.match(re)[0].length;
        }
        return 0;
      };
    }
    function createNormalizer() {
      return function(match, self) {
        self.normalize(match);
      };
    }
    function compile(self) {
      var re = self.re = require_re()(self.__opts__);
      var tlds = self.__tlds__.slice();
      self.onCompile();
      if (!self.__tlds_replaced__) {
        tlds.push(tlds_2ch_src_re);
      }
      tlds.push(re.src_xn);
      re.src_tlds = tlds.join("|");
      function untpl(tpl) {
        return tpl.replace("%TLDS%", re.src_tlds);
      }
      re.email_fuzzy = RegExp(untpl(re.tpl_email_fuzzy), "i");
      re.link_fuzzy = RegExp(untpl(re.tpl_link_fuzzy), "i");
      re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), "i");
      re.host_fuzzy_test = RegExp(untpl(re.tpl_host_fuzzy_test), "i");
      var aliases = [];
      self.__compiled__ = {};
      function schemaError(name, val) {
        throw new Error('(LinkifyIt) Invalid schema "' + name + '": ' + val);
      }
      Object.keys(self.__schemas__).forEach(function(name) {
        var val = self.__schemas__[name];
        if (val === null) {
          return;
        }
        var compiled = { validate: null, link: null };
        self.__compiled__[name] = compiled;
        if (isObject4(val)) {
          if (isRegExp(val.validate)) {
            compiled.validate = createValidator(val.validate);
          } else if (isFunction22(val.validate)) {
            compiled.validate = val.validate;
          } else {
            schemaError(name, val);
          }
          if (isFunction22(val.normalize)) {
            compiled.normalize = val.normalize;
          } else if (!val.normalize) {
            compiled.normalize = createNormalizer();
          } else {
            schemaError(name, val);
          }
          return;
        }
        if (isString8(val)) {
          aliases.push(name);
          return;
        }
        schemaError(name, val);
      });
      aliases.forEach(function(alias) {
        if (!self.__compiled__[self.__schemas__[alias]]) {
          return;
        }
        self.__compiled__[alias].validate = self.__compiled__[self.__schemas__[alias]].validate;
        self.__compiled__[alias].normalize = self.__compiled__[self.__schemas__[alias]].normalize;
      });
      self.__compiled__[""] = { validate: null, normalize: createNormalizer() };
      var slist = Object.keys(self.__compiled__).filter(function(name) {
        return name.length > 0 && self.__compiled__[name];
      }).map(escapeRE).join("|");
      self.re.schema_test = RegExp("(^|(?!_)(?:[><\uFF5C]|" + re.src_ZPCc + "))(" + slist + ")", "i");
      self.re.schema_search = RegExp("(^|(?!_)(?:[><\uFF5C]|" + re.src_ZPCc + "))(" + slist + ")", "ig");
      self.re.pretest = RegExp("(" + self.re.schema_test.source + ")|(" + self.re.host_fuzzy_test.source + ")|@", "i");
      resetScanCache(self);
    }
    function Match(self, shift) {
      var { __index__: start2, __last_index__: end2 } = self, text2 = self.__text_cache__.slice(start2, end2);
      this.schema = self.__schema__.toLowerCase();
      this.index = start2 + shift;
      this.lastIndex = end2 + shift;
      this.raw = text2;
      this.text = text2;
      this.url = text2;
    }
    function createMatch(self, shift) {
      var match = new Match(self, shift);
      self.__compiled__[match.schema].normalize(match, self);
      return match;
    }
    function LinkifyIt(schemas, options) {
      if (!(this instanceof LinkifyIt)) {
        return new LinkifyIt(schemas, options);
      }
      if (!options) {
        if (isOptionsObj(schemas)) {
          options = schemas;
          schemas = {};
        }
      }
      this.__opts__ = assign({}, defaultOptions, options);
      this.__index__ = -1;
      this.__last_index__ = -1;
      this.__schema__ = "";
      this.__text_cache__ = "";
      this.__schemas__ = assign({}, defaultSchemas, schemas);
      this.__compiled__ = {};
      this.__tlds__ = tlds_default;
      this.__tlds_replaced__ = false;
      this.re = {};
      compile(this);
    }
    LinkifyIt.prototype.add = function add(schema, definition) {
      this.__schemas__[schema] = definition;
      compile(this);
      return this;
    };
    LinkifyIt.prototype.set = function set(options) {
      this.__opts__ = assign(this.__opts__, options);
      return this;
    };
    LinkifyIt.prototype.test = function test(text2) {
      this.__text_cache__ = text2;
      this.__index__ = -1;
      if (!text2.length) {
        return false;
      }
      var m, ml, me, len, shift, next, re, tld_pos, at_pos;
      if (this.re.schema_test.test(text2)) {
        re = this.re.schema_search;
        re.lastIndex = 0;
        while ((m = re.exec(text2)) !== null) {
          len = this.testSchemaAt(text2, m[2], re.lastIndex);
          if (len) {
            this.__schema__ = m[2];
            this.__index__ = m.index + m[1].length;
            this.__last_index__ = m.index + m[0].length + len;
            break;
          }
        }
      }
      if (this.__opts__.fuzzyLink && this.__compiled__["http:"]) {
        tld_pos = text2.search(this.re.host_fuzzy_test);
        if (tld_pos >= 0) {
          if (this.__index__ < 0 || tld_pos < this.__index__) {
            if ((ml = text2.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {
              shift = ml.index + ml[1].length;
              if (this.__index__ < 0 || shift < this.__index__) {
                this.__schema__ = "";
                this.__index__ = shift;
                this.__last_index__ = ml.index + ml[0].length;
              }
            }
          }
        }
      }
      if (this.__opts__.fuzzyEmail && this.__compiled__["mailto:"]) {
        at_pos = text2.indexOf("@");
        if (at_pos >= 0) {
          if ((me = text2.match(this.re.email_fuzzy)) !== null) {
            shift = me.index + me[1].length;
            next = me.index + me[0].length;
            if (this.__index__ < 0 || shift < this.__index__ || shift === this.__index__ && next > this.__last_index__) {
              this.__schema__ = "mailto:";
              this.__index__ = shift;
              this.__last_index__ = next;
            }
          }
        }
      }
      return this.__index__ >= 0;
    };
    LinkifyIt.prototype.pretest = function pretest(text2) {
      return this.re.pretest.test(text2);
    };
    LinkifyIt.prototype.testSchemaAt = function testSchemaAt(text2, schema, pos) {
      if (!this.__compiled__[schema.toLowerCase()]) {
        return 0;
      }
      return this.__compiled__[schema.toLowerCase()].validate(text2, pos, this);
    };
    LinkifyIt.prototype.match = function match(text2) {
      var shift = 0, result = [];
      if (this.__index__ >= 0 && this.__text_cache__ === text2) {
        result.push(createMatch(this, shift));
        shift = this.__last_index__;
      }
      var tail = shift ? text2.slice(shift) : text2;
      while (this.test(tail)) {
        result.push(createMatch(this, shift));
        tail = tail.slice(this.__last_index__);
        shift += this.__last_index__;
      }
      if (result.length) {
        return result;
      }
      return null;
    };
    LinkifyIt.prototype.tlds = function tlds(list2, keepOld) {
      list2 = Array.isArray(list2) ? list2 : [list2];
      if (!keepOld) {
        this.__tlds__ = list2.slice();
        this.__tlds_replaced__ = true;
        compile(this);
        return this;
      }
      this.__tlds__ = this.__tlds__.concat(list2).sort().filter(function(el, idx, arr) {
        return el !== arr[idx - 1];
      }).reverse();
      compile(this);
      return this;
    };
    LinkifyIt.prototype.normalize = function normalize(match) {
      if (!match.schema) {
        match.url = "http://" + match.url;
      }
      if (match.schema === "mailto:" && !/^mailto:/i.test(match.url)) {
        match.url = "mailto:" + match.url;
      }
    };
    LinkifyIt.prototype.onCompile = function onCompile() {
    };
    module.exports = LinkifyIt;
  }
});
var require_punycode = __commonJS2({
  "node_modules/punycode/punycode.js"(exports, module) {
    var maxInt = 2147483647;
    var base = 36;
    var tMin = 1;
    var tMax = 26;
    var skew = 38;
    var damp = 700;
    var initialBias = 72;
    var initialN = 128;
    var delimiter = "-";
    var regexPunycode = /^xn--/;
    var regexNonASCII = /[^\0-\x7E]/;
    var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g;
    var errors = {
      overflow: "Overflow: input needs wider integers to process",
      "not-basic": "Illegal input >= 0x80 (not a basic code point)",
      "invalid-input": "Invalid input"
    };
    var baseMinusTMin = base - tMin;
    var floor = Math.floor;
    var stringFromCharCode = String.fromCharCode;
    function error2(type) {
      throw new RangeError(errors[type]);
    }
    function map(array, fn2) {
      const result = [];
      let length = array.length;
      while (length--) {
        result[length] = fn2(array[length]);
      }
      return result;
    }
    function mapDomain(string, fn2) {
      const parts = string.split("@");
      let result = "";
      if (parts.length > 1) {
        result = parts[0] + "@";
        string = parts[1];
      }
      string = string.replace(regexSeparators, ".");
      const labels = string.split(".");
      const encoded = map(labels, fn2).join(".");
      return result + encoded;
    }
    function ucs2decode(string) {
      const output = [];
      let counter = 0;
      const length = string.length;
      while (counter < length) {
        const value = string.charCodeAt(counter++);
        if (value >= 55296 && value <= 56319 && counter < length) {
          const extra = string.charCodeAt(counter++);
          if ((extra & 64512) == 56320) {
            output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
          } else {
            output.push(value);
            counter--;
          }
        } else {
          output.push(value);
        }
      }
      return output;
    }
    var ucs2encode = (array) => String.fromCodePoint(...array);
    var basicToDigit = function(codePoint) {
      if (codePoint - 48 < 10) {
        return codePoint - 22;
      }
      if (codePoint - 65 < 26) {
        return codePoint - 65;
      }
      if (codePoint - 97 < 26) {
        return codePoint - 97;
      }
      return base;
    };
    var digitToBasic = function(digit, flag) {
      return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
    };
    var adapt = function(delta, numPoints, firstTime) {
      let k = 0;
      delta = firstTime ? floor(delta / damp) : delta >> 1;
      delta += floor(delta / numPoints);
      for (;delta > baseMinusTMin * tMax >> 1; k += base) {
        delta = floor(delta / baseMinusTMin);
      }
      return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
    };
    var decode = function(input) {
      const output = [];
      const inputLength = input.length;
      let i = 0;
      let n = initialN;
      let bias = initialBias;
      let basic = input.lastIndexOf(delimiter);
      if (basic < 0) {
        basic = 0;
      }
      for (let j = 0;j < basic; ++j) {
        if (input.charCodeAt(j) >= 128) {
          error2("not-basic");
        }
        output.push(input.charCodeAt(j));
      }
      for (let index = basic > 0 ? basic + 1 : 0;index < inputLength; ) {
        let oldi = i;
        for (let w = 1, k = base;; k += base) {
          if (index >= inputLength) {
            error2("invalid-input");
          }
          const digit = basicToDigit(input.charCodeAt(index++));
          if (digit >= base || digit > floor((maxInt - i) / w)) {
            error2("overflow");
          }
          i += digit * w;
          const t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
          if (digit < t) {
            break;
          }
          const baseMinusT = base - t;
          if (w > floor(maxInt / baseMinusT)) {
            error2("overflow");
          }
          w *= baseMinusT;
        }
        const out = output.length + 1;
        bias = adapt(i - oldi, out, oldi == 0);
        if (floor(i / out) > maxInt - n) {
          error2("overflow");
        }
        n += floor(i / out);
        i %= out;
        output.splice(i++, 0, n);
      }
      return String.fromCodePoint(...output);
    };
    var encode = function(input) {
      const output = [];
      input = ucs2decode(input);
      let inputLength = input.length;
      let n = initialN;
      let delta = 0;
      let bias = initialBias;
      for (const currentValue of input) {
        if (currentValue < 128) {
          output.push(stringFromCharCode(currentValue));
        }
      }
      let basicLength = output.length;
      let handledCPCount = basicLength;
      if (basicLength) {
        output.push(delimiter);
      }
      while (handledCPCount < inputLength) {
        let m = maxInt;
        for (const currentValue of input) {
          if (currentValue >= n && currentValue < m) {
            m = currentValue;
          }
        }
        const handledCPCountPlusOne = handledCPCount + 1;
        if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
          error2("overflow");
        }
        delta += (m - n) * handledCPCountPlusOne;
        n = m;
        for (const currentValue of input) {
          if (currentValue < n && ++delta > maxInt) {
            error2("overflow");
          }
          if (currentValue == n) {
            let q = delta;
            for (let k = base;; k += base) {
              const t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
              if (q < t) {
                break;
              }
              const qMinusT = q - t;
              const baseMinusT = base - t;
              output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
              q = floor(qMinusT / baseMinusT);
            }
            output.push(stringFromCharCode(digitToBasic(q, 0)));
            bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
            delta = 0;
            ++handledCPCount;
          }
        }
        ++delta;
        ++n;
      }
      return output.join("");
    };
    var toUnicode = function(input) {
      return mapDomain(input, function(string) {
        return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
      });
    };
    var toASCII = function(input) {
      return mapDomain(input, function(string) {
        return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
      });
    };
    var punycode = {
      version: "2.1.0",
      ucs2: {
        decode: ucs2decode,
        encode: ucs2encode
      },
      decode,
      encode,
      toASCII,
      toUnicode
    };
    module.exports = punycode;
  }
});
var require_default = __commonJS2({
  "node_modules/markdown-it/lib/presets/default.js"(exports, module) {
    module.exports = {
      options: {
        html: false,
        xhtmlOut: false,
        breaks: false,
        langPrefix: "language-",
        linkify: false,
        typographer: false,
        quotes: "\u201C\u201D\u2018\u2019",
        highlight: null,
        maxNesting: 100
      },
      components: {
        core: {},
        block: {},
        inline: {}
      }
    };
  }
});
var require_zero = __commonJS2({
  "node_modules/markdown-it/lib/presets/zero.js"(exports, module) {
    module.exports = {
      options: {
        html: false,
        xhtmlOut: false,
        breaks: false,
        langPrefix: "language-",
        linkify: false,
        typographer: false,
        quotes: "\u201C\u201D\u2018\u2019",
        highlight: null,
        maxNesting: 20
      },
      components: {
        core: {
          rules: [
            "normalize",
            "block",
            "inline"
          ]
        },
        block: {
          rules: [
            "paragraph"
          ]
        },
        inline: {
          rules: [
            "text"
          ],
          rules2: [
            "balance_pairs",
            "text_collapse"
          ]
        }
      }
    };
  }
});
var require_commonmark = __commonJS2({
  "node_modules/markdown-it/lib/presets/commonmark.js"(exports, module) {
    module.exports = {
      options: {
        html: true,
        xhtmlOut: true,
        breaks: false,
        langPrefix: "language-",
        linkify: false,
        typographer: false,
        quotes: "\u201C\u201D\u2018\u2019",
        highlight: null,
        maxNesting: 20
      },
      components: {
        core: {
          rules: [
            "normalize",
            "block",
            "inline"
          ]
        },
        block: {
          rules: [
            "blockquote",
            "code",
            "fence",
            "heading",
            "hr",
            "html_block",
            "lheading",
            "list",
            "reference",
            "paragraph"
          ]
        },
        inline: {
          rules: [
            "autolink",
            "backticks",
            "emphasis",
            "entity",
            "escape",
            "html_inline",
            "image",
            "link",
            "newline",
            "text"
          ],
          rules2: [
            "balance_pairs",
            "emphasis",
            "text_collapse"
          ]
        }
      }
    };
  }
});
var require_lib = __commonJS2({
  "node_modules/markdown-it/lib/index.js"(exports, module) {
    var utils = require_utils();
    var helpers = require_helpers();
    var Renderer = require_renderer();
    var ParserCore = require_parser_core();
    var ParserBlock = require_parser_block();
    var ParserInline = require_parser_inline();
    var LinkifyIt = require_linkify_it();
    var mdurl = require_mdurl();
    var punycode = require_punycode();
    var config = {
      default: require_default(),
      zero: require_zero(),
      commonmark: require_commonmark()
    };
    var BAD_PROTO_RE = /^(vbscript|javascript|file|data):/;
    var GOOD_DATA_RE = /^data:image\/(gif|png|jpeg|webp);/;
    function validateLink(url) {
      var str = url.trim().toLowerCase();
      return BAD_PROTO_RE.test(str) ? GOOD_DATA_RE.test(str) ? true : false : true;
    }
    var RECODE_HOSTNAME_FOR = ["http:", "https:", "mailto:"];
    function normalizeLink(url) {
      var parsed = mdurl.parse(url, true);
      if (parsed.hostname) {
        if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {
          try {
            parsed.hostname = punycode.toASCII(parsed.hostname);
          } catch (er) {
          }
        }
      }
      return mdurl.encode(mdurl.format(parsed));
    }
    function normalizeLinkText(url) {
      var parsed = mdurl.parse(url, true);
      if (parsed.hostname) {
        if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {
          try {
            parsed.hostname = punycode.toUnicode(parsed.hostname);
          } catch (er) {
          }
        }
      }
      return mdurl.decode(mdurl.format(parsed), mdurl.decode.defaultChars + "%");
    }
    function MarkdownIt3(presetName, options) {
      if (!(this instanceof MarkdownIt3)) {
        return new MarkdownIt3(presetName, options);
      }
      if (!options) {
        if (!utils.isString(presetName)) {
          options = presetName || {};
          presetName = "default";
        }
      }
      this.inline = new ParserInline;
      this.block = new ParserBlock;
      this.core = new ParserCore;
      this.renderer = new Renderer;
      this.linkify = new LinkifyIt;
      this.validateLink = validateLink;
      this.normalizeLink = normalizeLink;
      this.normalizeLinkText = normalizeLinkText;
      this.utils = utils;
      this.helpers = utils.assign({}, helpers);
      this.options = {};
      this.configure(presetName);
      if (options) {
        this.set(options);
      }
    }
    MarkdownIt3.prototype.set = function(options) {
      utils.assign(this.options, options);
      return this;
    };
    MarkdownIt3.prototype.configure = function(presets) {
      var self = this, presetName;
      if (utils.isString(presets)) {
        presetName = presets;
        presets = config[presetName];
        if (!presets) {
          throw new Error('Wrong `markdown-it` preset "' + presetName + '", check name');
        }
      }
      if (!presets) {
        throw new Error("Wrong `markdown-it` preset, can't be empty");
      }
      if (presets.options) {
        self.set(presets.options);
      }
      if (presets.components) {
        Object.keys(presets.components).forEach(function(name) {
          if (presets.components[name].rules) {
            self[name].ruler.enableOnly(presets.components[name].rules);
          }
          if (presets.components[name].rules2) {
            self[name].ruler2.enableOnly(presets.components[name].rules2);
          }
        });
      }
      return this;
    };
    MarkdownIt3.prototype.enable = function(list2, ignoreInvalid) {
      var result = [];
      if (!Array.isArray(list2)) {
        list2 = [list2];
      }
      ["core", "block", "inline"].forEach(function(chain) {
        result = result.concat(this[chain].ruler.enable(list2, true));
      }, this);
      result = result.concat(this.inline.ruler2.enable(list2, true));
      var missed = list2.filter(function(name) {
        return result.indexOf(name) < 0;
      });
      if (missed.length && !ignoreInvalid) {
        throw new Error("MarkdownIt. Failed to enable unknown rule(s): " + missed);
      }
      return this;
    };
    MarkdownIt3.prototype.disable = function(list2, ignoreInvalid) {
      var result = [];
      if (!Array.isArray(list2)) {
        list2 = [list2];
      }
      ["core", "block", "inline"].forEach(function(chain) {
        result = result.concat(this[chain].ruler.disable(list2, true));
      }, this);
      result = result.concat(this.inline.ruler2.disable(list2, true));
      var missed = list2.filter(function(name) {
        return result.indexOf(name) < 0;
      });
      if (missed.length && !ignoreInvalid) {
        throw new Error("MarkdownIt. Failed to disable unknown rule(s): " + missed);
      }
      return this;
    };
    MarkdownIt3.prototype.use = function(plugin4) {
      var args = [this].concat(Array.prototype.slice.call(arguments, 1));
      plugin4.apply(plugin4, args);
      return this;
    };
    MarkdownIt3.prototype.parse = function(src, env) {
      if (typeof src !== "string") {
        throw new Error("Input data should be a String");
      }
      var state = new this.core.State(src, this, env);
      this.core.process(state);
      return state.tokens;
    };
    MarkdownIt3.prototype.render = function(src, env) {
      env = env || {};
      return this.renderer.render(this.parse(src, env), this.options, env);
    };
    MarkdownIt3.prototype.parseInline = function(src, env) {
      var state = new this.core.State(src, this, env);
      state.inlineMode = true;
      this.core.process(state);
      return state.tokens;
    };
    MarkdownIt3.prototype.renderInline = function(src, env) {
      env = env || {};
      return this.renderer.render(this.parseInline(src, env), this.options, env);
    };
    module.exports = MarkdownIt3;
  }
});
var require_markdown_it = __commonJS2({
  "node_modules/markdown-it/index.js"(exports, module) {
    module.exports = require_lib();
  }
});
var base_exports = {};
__export(base_exports, {
  getAstValues: () => getAstValues,
  isAst: () => isAst,
  isFunction: () => isFunction3,
  isVariable: () => isVariable,
  resolve: () => resolve2
});
var Tag = class {
  constructor(name = "div", attributes = {}, children = []) {
    this.$$mdtype = "Tag";
    this.name = name;
    this.attributes = attributes;
    this.children = children;
  }
};
Tag.isTag = (tag) => {
  return !!(tag?.$$mdtype === "Tag");
};
var Class = class {
  validate(value, _config, key) {
    if (typeof value === "string" || typeof value === "object")
      return [];
    return [
      {
        id: "attribute-type-invalid",
        level: "error",
        message: `Attribute '${key}' must be type 'string | object'`
      }
    ];
  }
  transform(value) {
    if (!value || typeof value === "string")
      return value;
    const classes = [];
    for (const [k, v] of Object.entries(value ?? {}))
      if (v)
        classes.push(k);
    return classes.join(" ");
  }
};
var Id = class {
  validate(value) {
    if (typeof value === "string" && value.match(/^[a-zA-Z]/))
      return [];
    return [
      {
        id: "attribute-value-invalid",
        level: "error",
        message: "The 'id' attribute must start with a letter"
      }
    ];
  }
};
var import_tag = __toModule(require_tag());
var Variable = class {
  constructor(path = []) {
    this.$$mdtype = "Variable";
    this.path = path;
  }
  resolve({ variables } = {}) {
    return variables instanceof Function ? variables(this.path) : this.path.reduce((obj = {}, key) => obj[key], variables);
  }
};
var Function2 = class {
  constructor(name, parameters) {
    this.$$mdtype = "Function";
    this.name = name;
    this.parameters = parameters;
  }
  resolve(config = {}) {
    const fn2 = config?.functions?.[this.name];
    if (!fn2)
      return null;
    const parameters = resolve2(this.parameters, config);
    return fn2.transform?.(parameters, config);
  }
};
var STATES;
(function(STATES2) {
  STATES2[STATES2["normal"] = 0] = "normal";
  STATES2[STATES2["string"] = 1] = "string";
  STATES2[STATES2["escape"] = 2] = "escape";
})(STATES || (STATES = {}));
var OPEN = "{%";
var CLOSE = "%}";
var IDENTIFIER_REGEX = /^[a-zA-Z0-9_-]+$/;
var globalAttributes = {
  class: { type: Class, render: true },
  id: { type: Id, render: true }
};
var transformer_default = {
  findSchema(node2, { nodes = {}, tags = {} } = {}) {
    return node2.tag ? tags[node2.tag] : nodes[node2.type];
  },
  attributes(node2, config = {}) {
    const schema = this.findSchema(node2, config) ?? {};
    const output = {};
    const attrs = { ...globalAttributes, ...schema.attributes };
    for (const [key, attr] of Object.entries(attrs)) {
      if (attr.render == false)
        continue;
      const name = typeof attr.render === "string" ? attr.render : key;
      let value = node2.attributes[key];
      if (typeof attr.type === "function") {
        const instance = new attr.type;
        if (instance.transform) {
          value = instance.transform(value, config);
        }
      }
      value = value === undefined ? attr.default : value;
      if (value === undefined)
        continue;
      output[name] = value;
    }
    if (schema.slots) {
      for (const [key, slot2] of Object.entries(schema.slots)) {
        if (slot2.render === false)
          continue;
        const name = typeof slot2.render === "string" ? slot2.render : key;
        if (node2.slots[key])
          output[name] = this.node(node2.slots[key], config);
      }
    }
    return output;
  },
  children(node2, config = {}) {
    const children = node2.children.flatMap((child) => this.node(child, config));
    if (children.some(isPromise)) {
      return Promise.all(children);
    }
    return children;
  },
  node(node2, config = {}) {
    const schema = this.findSchema(node2, config) ?? {};
    if (schema && schema.transform instanceof Function)
      return schema.transform(node2, config);
    const children = this.children(node2, config);
    if (!schema || !schema.render)
      return children;
    const attributes = this.attributes(node2, config);
    if (isPromise(attributes) || isPromise(children)) {
      return Promise.all([attributes, children]).then((values) => new Tag(schema.render, ...values));
    }
    return new Tag(schema.render, attributes, children);
  }
};
var Node = class {
  constructor(type = "node", attributes = {}, children = [], tag) {
    this.$$mdtype = "Node";
    this.errors = [];
    this.lines = [];
    this.inline = false;
    this.attributes = attributes;
    this.children = children;
    this.type = type;
    this.tag = tag;
    this.annotations = [];
    this.slots = {};
  }
  *walk() {
    for (const child of [...Object.values(this.slots), ...this.children]) {
      yield child;
      yield* child.walk();
    }
  }
  push(node2) {
    this.children.push(node2);
  }
  resolve(config = {}) {
    return Object.assign(new Node, this, {
      children: this.children.map((child) => child.resolve(config)),
      attributes: resolve2(this.attributes, config),
      slots: Object.fromEntries(Object.entries(this.slots).map(([name, slot2]) => [
        name,
        slot2.resolve(config)
      ]))
    });
  }
  findSchema(config = {}) {
    return transformer_default.findSchema(this, config);
  }
  transformAttributes(config = {}) {
    return transformer_default.attributes(this, config);
  }
  transformChildren(config) {
    return transformer_default.children(this, config);
  }
  transform(config) {
    return transformer_default.node(this, config);
  }
};
var AstTypes = {
  Function: Function2,
  Node,
  Variable
};
var ast_default = {
  ...AstTypes,
  ...base_exports,
  fromJSON
};
var SPACE = " ";
var SEP = ", ";
var NL = "\n";
var OL = ".";
var UL = "-";
var MAX_TAG_OPENING_WIDTH = 80;
var WRAPPING_TYPES = ["strong", "em", "s"];
var max2 = (a, b) => Math.max(a, b);
var increment = (o, n = 2) => ({
  ...o,
  indent: (o.indent || 0) + n
});
var tagIf = {
  attributes: {
    primary: { type: Object, render: false }
  },
  transform(node2, config) {
    const conditions = renderConditions(node2);
    for (const { condition, children } of conditions)
      if (truthy(condition)) {
        const nodes = children.flatMap((child) => child.transform(config));
        if (nodes.some(isPromise)) {
          return Promise.all(nodes).then((nodes2) => nodes2.flat());
        }
        return nodes;
      }
    return [];
  }
};
var tagElse = {
  selfClosing: true,
  attributes: {
    primary: { type: Object, render: false }
  }
};
var and = {
  transform(parameters) {
    return Object.values(parameters).every((x) => truthy(x));
  }
};
var or = {
  transform(parameters) {
    return Object.values(parameters).find((x) => truthy(x)) !== undefined;
  }
};
var not = {
  parameters: {
    0: { required: true }
  },
  transform(parameters) {
    return !truthy(parameters[0]);
  }
};
var equals = {
  transform(parameters) {
    const values = Object.values(parameters);
    return values.every((v) => v === values[0]);
  }
};
var debug2 = {
  transform(parameters) {
    return JSON.stringify(parameters[0], null, 2);
  }
};
var defaultFn = {
  transform(parameters) {
    return parameters[0] === undefined ? parameters[1] : parameters[0];
  }
};
var functions_default = { and, or, not, equals, default: defaultFn, debug: debug2 };
var transforms_default = [transform];
var mappings = {
  ordered_list: "list",
  bullet_list: "list",
  code_inline: "code",
  list_item: "item",
  variable: "text"
};
var schema_exports = {};
__export(schema_exports, {
  blockquote: () => blockquote,
  code: () => code,
  comment: () => comment,
  document: () => document,
  em: () => em,
  error: () => error2,
  fence: () => fence,
  hardbreak: () => hardbreak,
  heading: () => heading,
  hr: () => hr,
  image: () => image,
  inline: () => inline,
  item: () => item,
  link: () => link,
  list: () => list,
  node: () => node,
  paragraph: () => paragraph,
  s: () => s,
  softbreak: () => softbreak,
  strong: () => strong,
  table: () => table,
  tbody: () => tbody,
  td: () => td,
  text: () => text,
  th: () => th,
  thead: () => thead,
  tr: () => tr
});
var document = {
  render: "article",
  children: [
    "heading",
    "paragraph",
    "image",
    "table",
    "tag",
    "fence",
    "blockquote",
    "comment",
    "list",
    "hr"
  ],
  attributes: {
    frontmatter: { render: false }
  }
};
var heading = {
  children: ["inline"],
  attributes: {
    level: { type: Number, render: false, required: true }
  },
  transform(node2, config) {
    return new Tag(`h${node2.attributes["level"]}`, node2.transformAttributes(config), node2.transformChildren(config));
  }
};
var paragraph = {
  render: "p",
  children: ["inline"]
};
var image = {
  render: "img",
  attributes: {
    src: { type: String, required: true },
    alt: { type: String },
    title: { type: String }
  }
};
var fence = {
  render: "pre",
  attributes: {
    content: { type: String, render: false, required: true },
    language: { type: String, render: "data-language" },
    process: { type: Boolean, render: false, default: true }
  },
  transform(node2, config) {
    const attributes = node2.transformAttributes(config);
    const children = node2.children.length ? node2.transformChildren(config) : [node2.attributes.content];
    return new Tag("pre", attributes, children);
  }
};
var blockquote = {
  render: "blockquote",
  children: [
    "heading",
    "paragraph",
    "image",
    "table",
    "tag",
    "fence",
    "blockquote",
    "list",
    "hr"
  ]
};
var item = {
  render: "li",
  children: [
    "inline",
    "heading",
    "paragraph",
    "image",
    "table",
    "tag",
    "fence",
    "blockquote",
    "list",
    "hr"
  ]
};
var list = {
  children: ["item"],
  attributes: {
    ordered: { type: Boolean, render: false, required: true },
    start: { type: Number },
    marker: { type: String, render: false }
  },
  transform(node2, config) {
    return new Tag(node2.attributes.ordered ? "ol" : "ul", node2.transformAttributes(config), node2.transformChildren(config));
  }
};
var hr = {
  render: "hr"
};
var table = {
  render: "table"
};
var td = {
  render: "td",
  children: [
    "inline",
    "heading",
    "paragraph",
    "image",
    "table",
    "tag",
    "fence",
    "blockquote",
    "list",
    "hr"
  ],
  attributes: {
    align: { type: String },
    colspan: { type: Number, render: "colSpan" },
    rowspan: { type: Number, render: "rowSpan" }
  }
};
var th = {
  render: "th",
  attributes: {
    width: { type: String },
    align: { type: String },
    colspan: { type: Number, render: "colSpan" },
    rowspan: { type: Number, render: "rowSpan" }
  }
};
var tr = {
  render: "tr",
  children: ["th", "td"]
};
var tbody = {
  render: "tbody",
  children: ["tr", "tag"]
};
var thead = {
  render: "thead",
  children: ["tr"]
};
var strong = {
  render: "strong",
  children: ["em", "s", "link", "code", "text", "tag"],
  attributes: {
    marker: { type: String, render: false }
  }
};
var em = {
  render: "em",
  children: ["strong", "s", "link", "code", "text", "tag"],
  attributes: {
    marker: { type: String, render: false }
  }
};
var s = {
  render: "s",
  children: ["strong", "em", "link", "code", "text", "tag"]
};
var inline = {
  children: [
    "strong",
    "em",
    "s",
    "code",
    "text",
    "tag",
    "link",
    "image",
    "hardbreak",
    "softbreak",
    "comment"
  ]
};
var link = {
  render: "a",
  children: ["strong", "em", "s", "code", "text", "tag"],
  attributes: {
    href: { type: String, required: true },
    title: { type: String }
  }
};
var code = {
  render: "code",
  attributes: {
    content: { type: String, render: false, required: true }
  },
  transform(node2, config) {
    const attributes = node2.transformAttributes(config);
    return new Tag("code", attributes, [node2.attributes.content]);
  }
};
var text = {
  attributes: {
    content: { type: String, required: true }
  },
  transform(node2) {
    return node2.attributes.content;
  }
};
var hardbreak = {
  render: "br"
};
var softbreak = {
  transform() {
    return " ";
  }
};
var comment = {
  attributes: {
    content: { type: String, required: true }
  }
};
var error2 = {};
var node = {};
var import_markdown_it = __toModule(require_markdown_it());
var { escapeHtml } = (0, import_markdown_it.default)().utils;
var voidElements = new Set([
  "area",
  "base",
  "br",
  "col",
  "embed",
  "hr",
  "img",
  "input",
  "link",
  "meta",
  "param",
  "source",
  "track",
  "wbr"
]);
var renderers_default = { html: render, react: dynamic, reactStatic };
var PartialFile = class {
  validate(file, config) {
    const { partials = {} } = config;
    const partial2 = partials[file];
    if (!partial2)
      return [
        {
          id: "attribute-value-invalid",
          level: "error",
          message: `Partial \`${file}\` not found. The 'file' attribute must be set in \`config.partials\``
        }
      ];
    return [];
  }
};
var partial = {
  inline: false,
  selfClosing: true,
  attributes: {
    file: { type: PartialFile, render: false, required: true },
    variables: { type: Object, render: false }
  },
  transform(node2, config) {
    const { partials = {} } = config;
    const { file, variables } = node2.attributes;
    const partial2 = partials[file];
    if (!partial2)
      return null;
    const scopedConfig = {
      ...config,
      variables: {
        ...config.variables,
        ...variables,
        ["$$partial:filename"]: file
      }
    };
    const transformChildren = (part) => part.resolve(scopedConfig).transformChildren(scopedConfig);
    return Array.isArray(partial2) ? partial2.flatMap(transformChildren) : transformChildren(partial2);
  }
};
var table2 = {
  children: ["table"],
  inline: false
};
var slot = {
  attributes: {
    primary: { type: String, required: true }
  }
};
var tags_default = {
  else: tagElse,
  if: tagIf,
  partial,
  slot,
  table: table2
};
var import_lib = __toModule(require_lib());
var import_tag7 = __toModule(require_tag());
var fence2 = "---";
var OPEN2 = "<!--";
var CLOSE2 = "-->";
var Tokenizer = class {
  constructor(config = {}) {
    this.parser = new import_lib.default(config);
    this.parser.use(plugin, "annotations", {});
    this.parser.use(plugin2, "frontmatter", {});
    this.parser.disable([
      "lheading",
      "code"
    ]);
    if (config.allowComments)
      this.parser.use(plugin3, "comments", {});
  }
  tokenize(content) {
    return this.parser.parse(content.toString(), {});
  }
};
var TypeMappings = {
  String,
  Number,
  Array,
  Object,
  Boolean
};
var tokenizer = new Tokenizer;
var Markdoc = class {
  constructor(config) {
    this.parse = parse3;
    this.resolve = (content) => resolve22(content, this.config);
    this.transform = (content) => transform2(content, this.config);
    this.validate = (content) => validate(content, this.config);
    this.config = config;
  }
};
Markdoc.nodes = schema_exports;
Markdoc.tags = tags_default;
Markdoc.functions = functions_default;
Markdoc.globalAttributes = globalAttributes;
Markdoc.renderers = renderers_default;
Markdoc.transforms = transforms_default;
Markdoc.Ast = ast_default;
Markdoc.Tag = Tag;
Markdoc.Tokenizer = Tokenizer;
Markdoc.parseTags = parseTags;
Markdoc.transformer = transformer_default;
Markdoc.validator = validator;
Markdoc.parse = parse3;
Markdoc.transform = transform2;
Markdoc.validate = validate;
Markdoc.createElement = createElement;
Markdoc.truthy = truthy;
Markdoc.format = format;

// src/utils/splitContent.ts
var splitContent = (c) => {
  const re = /^(---.*\n---\s*\n){0,1}(.*)$/s;
  const result = c.trimStart().match(re);
  if (!result) {
    throw new Error(`Invalid Content passed to splitContent(${c})`);
  }
  const [_, yaml, body] = Array.from(result);
  const [preH1, h1, postH1] = `\n${body}`.includes("\n# ") ? [
    stripTrailing(stripAfter(`\n${body}`, "\n# "), "\n#"),
    stripAfter(stripBefore(`\n${body}`, "\n#"), "\n").trim(),
    stripBefore(stripBefore(`\n${body}`, "\n#"), "\n")
  ] : [
    undefined,
    undefined,
    body
  ];
  const blocks = (h1 ? postH1 : body).replace(/\n## (.*)\n/g, "\n## $1:::\n").slice(1).split(/\n## /).map((blk) => {
    if (/.+:::/.test(blk)) {
      let [name, ...rest] = blk.split("\n");
      name = name.replace(/(.*):::/, "$1");
      let content = rest.join("\n").replace(/^\n(.*)/, "$1").trim();
      return { name, content };
    } else {
      return { name: "anonymous", content: blk };
    }
  });
  return { yaml, body, blocks, preH1, postH1, h1 };
};

// src/utils/getHeadingLevel.ts
var isTag = (v) => {
  return typeof v === "object" ? true : false;
};
var getHeadingLevel = (file, content, level, plugin4) => {
  const root = transform2(parse3(content || ""));
  let headings = [];
  if (isTag(root)) {
    const nodes = root.children;
    headings = nodes.filter((n) => isTag(n) && n.name === `h${level}`).map((h) => {
      const content2 = h.children.join("\n");
      const name = content2.replaceAll(/<(.+)>/gs, "").trim();
      return {
        level,
        name,
        content: content2,
        link: plugin4.dv.fileLink(`${file}#${content2}`, false, name),
        attributes: h.attributes
      };
    });
    plugin4.debug(`H${level} tags`, () => `${nodes.length} total nodes, ${nodes.filter((i) => isTag(i)).length} are tags, the rest are scalar items.`, `Of these tags, ${headings.length} are H${level} tags.`, headings);
  } else {
    plugin4.error(`The page content passed in did not result in a renderable tag node!`);
  }
  return headings;
};

// src/utils/convertToPageWithArrays.ts
var convertToPageWithArrays = (obj) => {
  if (obj === null) {
    return null;
  }
  const root = obj.file;
  const file = {
    ...obj?.file ? obj.file : obj,
    aliases: Array.from(root.aliases.values || []),
    inlinks: Array.from(root.inlinks.values || []),
    outlinks: Array.from(root.outlinks.values || []),
    etags: Array.from(root.etags.values || []),
    tags: Array.from(root.tags.values || []),
    tasks: Array.from(root.tasks.values || []),
    lists: Array.from(root.lists.values || [])
  };
  return { ...obj, file };
};

// src/utils/page/getBasePageContext.ts
var getBasePageContext = (plugin4) => (ref) => {
  let context = {};
  const page = convertToPageWithArrays(plugin4.api.get_dv_page(ref));
  const view = isMarkdownView(ref) ? ref : null;
  if (page) {
    const content = view ? view.getViewData() : "";
    const ast = Markdoc.parse(content || "");
    const fm = page.file.frontmatter;
    const aliases = page.file.aliases || [];
    const renderableTree = Markdoc.transform(ast);
    const withView = view ? {
      mode: view.currentMode,
      leaf: view.leaf,
      leaf_height: view.leaf?.height,
      leaf_width: view.leaf?.width,
      leaf_id: view.leaf?.id || "",
      popover: view.hoverPopover,
      allowNoFile: view.allowNoFile,
      previewMode: view.previewMode,
      viewType: view.getViewType(),
      navigation: view.navigation,
      editor: view.editor,
      requestSave: view.requestSave,
      content,
      showBackLinks: view?.showBackLinks,
      contentStructure: {
        ast: Markdoc.parse(content),
        renderableTree,
        h2_tags: getHeadingLevel(page.file.path, content, 2, plugin4),
        ...splitContent(content)
      },
      dom: {
        container: view.containerEl,
        content: view.contentEl,
        icon: view?.iconEl,
        backButton: view?.backButtonEl,
        forwardButton: view?.forwardButtonEl,
        title: view?.titleEl,
        titleContainer: view?.titleContainerEl,
        titleParent: view?.titleParentEl,
        inlineTitle: view?.inlineTitleEl,
        actions: view?.actionsEl,
        modeButton: view?.modeButtonEl,
        backlinks: view?.backlinksEl
      }
    } : {};
    try {
      context = {
        aliases,
        fm,
        inlinks: page.file.inlinks,
        outlinks: page.file.outlinks,
        etags: page.file.etags,
        tags: page.file.tags,
        starred: page.file.starred,
        lists: page.file.lists,
        tasks: page.file.tasks,
        cday: page.file.cday,
        ctime: page.file.ctime,
        mday: page.file.mday,
        mtime: page.file.mtime,
        file: {
          name: page.file.name,
          path: page.file.path,
          folder: page.file.folder,
          ext: page.file.ext,
          link: page.file.link,
          size: page.file.size
        },
        ...withView
      };
    } catch (e) {
      console.log({ plugin: plugin4 });
      plugin4.error(`Problems getting page context: ${page.file.path}`, e);
    }
  } else {
    plugin4.error(`Could not build a base page context!!`, ref);
  }
  return context;
};

// src/utils/type_guards/isDvPage.ts
var isDvPage = (val) => {
  return isObject(val) && "file" in val && isObject(val.file) && "link" in val.file && "name" in val.file && "path" in val.file;
};

// src/constants/obsidian-constants.ts
var MARKDOWN_PAGE_ICON = `<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 15 15"><path fill="currentColor" fill-rule="evenodd" d="M0 3.5A1.5 1.5 0 0 1 1.5 2h12A1.5 1.5 0 0 1 15 3.5v8a1.5 1.5 0 0 1-1.5 1.5h-12A1.5 1.5 0 0 1 0 11.5zM10 5v3.293L8.854 7.146l-.708.708l2 2a.5.5 0 0 0 .708 0l2-2l-.707-.708L11 8.293V5zm-7.146.146A.5.5 0 0 0 2 5.5V10h1V6.707l1.5 1.5l1.5-1.5V10h1V5.5a.5.5 0 0 0-.854-.354L4.5 6.793z" clip-rule="evenodd"/></svg>`;
var WARN_ICON = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="svg-icon lucide-alert-triangle"><path d="m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z"></path><path d="M12 9v4"></path><path d="M12 17h.01"></path></svg>`;
var QUOTE_ICON = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="svg-icon lucide-quote"><path d="M3 21c3 0 7-1 7-8V5c0-1.25-.756-2.017-2-2H4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2 1 0 1 0 1 1v1c0 1-1 2-2 2s-1 .008-1 1.031V20c0 1 0 1 1 1z"></path><path d="M15 21c3 0 7-1 7-8V5c0-1.25-.757-2.017-2-2h-4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2h.75c0 2.25.25 4-2.75 4v3c0 1 0 1 1 1z"></path></svg>`;
var INFO_ICON = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="svg-icon lucide-info"><circle cx="12" cy="12" r="10"></circle><path d="M12 16v-4"></path><path d="M12 8h.01"></path></svg>`;
var TIP_ICON = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="svg-icon lucide-flame"><path d="M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z"></path></svg>`;
var SUMMARY_ICON = `<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 256 256"><path fill="currentColor" d="M200.12 55.87A102 102 0 1 0 55.88 200.12A102 102 0 1 0 200.12 55.87M94 211.37V152a2 2 0 0 1 2-2h64a2 2 0 0 1 2 2v59.37a90.49 90.49 0 0 1-68 0M146 138h-36V99.71l36-18Zm45.64 53.64A90.93 90.93 0 0 1 174 205.39V152a14 14 0 0 0-14-14h-2V72a6 6 0 0 0-8.68-5.37l-48 24A6 6 0 0 0 98 96v42h-2a14 14 0 0 0-14 14v53.39a90.93 90.93 0 0 1-17.64-13.75a90 90 0 1 1 127.28 0"/></svg>`;
var BUG_ICON = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="svg-icon lucide-bug"><path d="m8 2 1.88 1.88"></path><path d="M14.12 3.88 16 2"></path><path d="M9 7.13v-1a3.003 3.003 0 1 1 6 0v1"></path><path d="M12 20c-3.3 0-6-2.7-6-6v-3a4 4 0 0 1 4-4h4a4 4 0 0 1 4 4v3c0 3.3-2.7 6-6 6"></path><path d="M12 20v-9"></path><path d="M6.53 9C4.6 8.8 3 7.1 3 5"></path><path d="M6 13H2"></path><path d="M3 21c0-2.1 1.7-3.9 3.8-4"></path><path d="M20.97 5c0 2.1-1.6 3.8-3.5 4"></path><path d="M22 13h-4"></path><path d="M17.2 17c2.1.1 3.8 1.9 3.8 4"></path></svg>`;
var EXAMPLE_ICON = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="svg-icon lucide-list"><line x1="8" y1="6" x2="21" y2="6"></line><line x1="8" y1="12" x2="21" y2="12"></line><line x1="8" y1="18" x2="21" y2="18"></line><line x1="3" y1="6" x2="3.01" y2="6"></line><line x1="3" y1="12" x2="3.01" y2="12"></line><line x1="3" y1="18" x2="3.01" y2="18"></line></svg>`;
var QUESTION_ICON = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="svg-icon lucide-help-circle"><circle cx="12" cy="12" r="10"></circle><path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"></path><path d="M12 17h.01"></path></svg>`;
var SUCCESS_ICON = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="svg-icon lucide-check"><path d="M20 6 9 17l-5-5"></path></svg>`;
var ERROR_ICON = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="svg-icon lucide-zap"><polygon points="13 2 3 14 12 14 11 22 21 10 12 10 13 2"></polygon></svg>`;
var NOTE_ICON = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="svg-icon lucide-pencil"><path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"></path><path d="m15 5 4 4"></path></svg>`;
var BOOK_ICON = `<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24"><path fill="currentColor" d="M14 9.9V8.2q.825-.35 1.688-.525T17.5 7.5q.65 0 1.275.1T20 7.85v1.6q-.6-.225-1.213-.337T17.5 9q-.95 0-1.825.238T14 9.9m0 5.5v-1.7q.825-.35 1.688-.525T17.5 13q.65 0 1.275.1t1.225.25v1.6q-.6-.225-1.213-.338T17.5 14.5q-.95 0-1.825.225T14 15.4m0-2.75v-1.7q.825-.35 1.688-.525t1.812-.175q.65 0 1.275.1T20 10.6v1.6q-.6-.225-1.213-.338T17.5 11.75q-.95 0-1.825.238T14 12.65M6.5 16q1.175 0 2.288.263T11 17.05V7.2q-1.025-.6-2.175-.9T6.5 6q-.9 0-1.788.175T3 6.7v9.9q.875-.3 1.738-.45T6.5 16m6.5 1.05q1.1-.525 2.213-.787T17.5 16q.9 0 1.763.15T21 16.6V6.7q-.825-.35-1.713-.525T17.5 6q-1.175 0-2.325.3T13 7.2zM12 20q-1.2-.95-2.6-1.475T6.5 18q-1.05 0-2.062.275T2.5 19.05q-.525.275-1.012-.025T1 18.15V6.1q0-.275.138-.525T1.55 5.2q1.15-.6 2.4-.9T6.5 4q1.45 0 2.838.375T12 5.5q1.275-.75 2.663-1.125T17.5 4q1.3 0 2.55.3t2.4.9q.275.125.413.375T23 6.1v12.05q0 .575-.487.875t-1.013.025q-.925-.5-1.937-.775T17.5 18q-1.5 0-2.9.525T12 20m-5-8.35"/></svg>`;
var KINDLE_ICON = `<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 48 48"><circle cx="24" cy="24" r="21.5" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"/><path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M6.944 37.03a56.3 56.3 0 0 1 9.696-.751c4.318 0 11.836 1.626 20.316 4.879"/><path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M20.167 36.547c1.52-.212 3.833-2.679 3.833-2.679a15 15 0 0 0 2.237-1.57l2.179 2.124v1.24l1.29.885l3.589-2.96s-.379-1.293-1.262-1.64c-.042-.62-2.748-5.06-3-5.425m-6.589.533a15 15 0 0 0 2.44 1.542c.392.028 6.532-4.093 6.532-4.093a4.73 4.73 0 0 0 2.13-1.122a2.7 2.7 0 0 0 .225-1.15s.365-.476.365-.645s.28-1.01.28-1.093"/><path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M24.855 24.504s.701.869.925.869s5.103-2.58 5.215-3.14m-10.828 6.532c.09-.084 2.644-1.444 2.644-1.444"/><path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M18.154 21.868c.477 1.907 3.673 5.453 3.673 5.453l3.365-3.294s-2.832-3.028-3.169-3.953s-.785-2.524-1.682-2.916s-4.458-2.243-4.458-2.243l-.673 1.233a11.73 11.73 0 0 0-5.13 9.673c0 6.561.756 8.804.756 8.804s4.85-1.037 6.589-2.888s2.742-2.972 2.742-2.972l.353-3.004"/><path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M11.597 34.44a3.44 3.44 0 0 0 1.423 1.93m19.701-2.31a15.5 15.5 0 0 0 3.391 4.532a17 17 0 0 0 2.25 1.304M30.03 36.28c.573.756 2.396 2.817 2.956 3.448M20.167 17.079l.454-.426s2.047 1.402 2.664 1.01s.589-.842.589-.842s1.01-.617.981-.925a1.7 1.7 0 0 1 0-.449h.841s-.532-1.598-.196-2.186l.336-.59l.401.365a2.6 2.6 0 0 0 1.03-2.58c-.393-1.57-2.776-4.037-3.87-4.205s-.953.196-.953.196s-1.99-1.177-3.224-.084s-2.692 2.356-2.663 4.599s.056 2.887.224 3.112a2.6 2.6 0 0 0 .766.481l-.494.964m17.924.738l3.028.2l-5.284 5.663l-2.511-.308z"/></svg>`;
var SEARCH_BOOK = `<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24"><path fill="currentColor" d="M11.724 7.447a2.276 2.276 0 1 0 0 4.553a2.276 2.276 0 0 0 0-4.553M4 4.5A2.5 2.5 0 0 1 6.5 2H18a2.5 2.5 0 0 1 2.5 2.5v14.25a.75.75 0 0 1-.75.75H5.5a1 1 0 0 0 1 1h13.25a.75.75 0 0 1 0 1.5H6.5A2.5 2.5 0 0 1 4 19.5zm10.819 7.295a3.724 3.724 0 1 0-1.024 1.024l2.476 2.475l.067.058l.008.006a.724.724 0 0 0 .942-1.093z"/></svg>`;
var AMAZON = `<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24"><path d="M15.93 17.09c-.18.16-.43.17-.63.06c-.89-.74-1.05-1.08-1.54-1.79c-1.47 1.5-2.51 1.95-4.42 1.95c-2.25 0-4.01-1.39-4.01-4.17c0-2.18 1.17-3.64 2.86-4.38c1.46-.64 3.49-.76 5.04-.93V7.5c0-.66.05-1.41-.33-1.96c-.32-.49-.95-.7-1.5-.7c-1.02 0-1.93.53-2.15 1.61c-.05.24-.25.48-.47.49l-2.6-.28c-.22-.05-.46-.22-.4-.56c.6-3.15 3.45-4.1 6-4.1c1.3 0 3 .35 4.03 1.33C17.11 4.55 17 6.18 17 7.95v4.17c0 1.25.5 1.81 1 2.48c.17.25.21.54 0 .71l-2.06 1.78h-.01m-2.7-6.53V10c-1.94 0-3.99.39-3.99 2.67c0 1.16.61 1.95 1.63 1.95c.76 0 1.43-.47 1.86-1.22c.52-.93.5-1.8.5-2.84m6.93 8.98C18 21.14 14.82 22 12.1 22c-3.81 0-7.25-1.41-9.85-3.76c-.2-.18-.02-.43.25-.29c2.78 1.63 6.25 2.61 9.83 2.61c2.41 0 5.07-.5 7.51-1.53c.37-.16.66.24.32.51m.91-1.04c-.28-.36-1.85-.17-2.57-.08c-.19.02-.22-.16-.03-.3c1.24-.88 3.29-.62 3.53-.33c.24.3-.07 2.35-1.24 3.32c-.18.16-.35.07-.26-.11c.26-.67.85-2.14.57-2.5z" fill="currentColor"/></svg>`;
var BOOK_CATALOG = `<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 48 48"><path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M6.3 42.5h34.1m-34-2l7-.2l-.5-34.7l-6.3-.1Zm8.6-27l-.3 26.3l6.5-.2l.8-25.9Zm9-5.6l-1.4 32.2l8.7-.1L33 8.4Zm10 6.3l-1.5 26.3l7.8.1l1.4-26.3Zm1 0a8.5 8.5 0 0 1 5.7-3.7M12.9 5.6L14.8 9l.1 4.6m-1.5 26.7l1.3-.5"/></svg>`;

// src/dv_queries/fmt.ts
var style = (opts) => {
  let fmt = [];
  if (opts?.pb) {
    fmt.push(`padding-bottom: ${opts.pb}`);
  }
  if (opts?.pt) {
    fmt.push(`padding-top: ${opts.pt}`);
  }
  if (opts?.py) {
    fmt.push(`padding-top: ${opts.py}`);
    fmt.push(`padding-bottom: ${opts.py}`);
  }
  if (opts?.px) {
    fmt.push(`padding-left: ${opts.px}`);
    fmt.push(`padding-right: ${opts.px}`);
  }
  if (opts?.pl) {
    fmt.push(`padding-left: ${opts.pl}`);
  }
  if (opts?.pr) {
    fmt.push(`padding-right: ${opts.pr}`);
  }
  if (opts?.p) {
    fmt.push(`padding: ${opts.p}`);
  }
  if (opts?.m) {
    fmt.push(`margin-top: ${opts.m}`);
    fmt.push(`margin-bottom: ${opts.m}`);
    fmt.push(`margin-left: ${opts.m}`);
    fmt.push(`margin-right: ${opts.m}`);
  }
  if (opts?.mb) {
    fmt.push(`margin-bottom: ${opts.mb}`);
  }
  if (opts?.mt) {
    fmt.push(`margin-top: ${opts.mt}`);
  }
  if (opts?.my) {
    fmt.push(`margin-top: ${opts.mx}`);
    fmt.push(`margin-bottom: ${opts.mx}`);
  }
  if (opts?.mx) {
    fmt.push(`margin-left: ${opts.mx}`);
    fmt.push(`margin-right: ${opts.mx}`);
  }
  if (opts?.ml) {
    fmt.push(`margin-left: ${opts.ml}`);
  }
  if (opts?.mr) {
    fmt.push(`margin-right: ${opts.mr}`);
  }
  if (opts?.bespoke) {
    fmt.push(...opts.bespoke);
  }
  if (opts?.w) {
    fmt.push(`weight: ${opts.w}`);
  }
  if (opts?.fw) {
    fmt.push(`font-weight: ${opts.fw}`);
  }
  if (opts?.fs) {
    fmt.push(`font-style: ${opts.fs}`);
  }
  if (opts?.ts) {
    switch (opts.ts) {
      case "xs":
        fmt.push(`font-size: 0.75rem`);
        fmt.push(`line-height: 1rem`);
        break;
      case "sm":
        fmt.push(`font-size: 0.875rem`);
        fmt.push(`line-height: 1.25rem`);
        break;
      case "base":
        fmt.push(`font-size: 1rem`);
        fmt.push(`line-height: 1.5rem`);
        break;
      case "lg":
        fmt.push(`font-size: 1.125rem`);
        fmt.push(`line-height: 1.75rem`);
        break;
      case "xl":
        fmt.push(`font-size: 1.25rem`);
        fmt.push(`line-height: 1.75rem`);
        break;
      case "2xl":
        fmt.push(`font-size: 1.5rem`);
        fmt.push(`line-height: 2rem`);
        break;
      default:
        fmt.push(`font-size: ${opts.ts}`);
        fmt.push(`line-height: auto`);
    }
  }
  if (opts?.flex) {
    fmt.push(`display: flex`);
  }
  if (opts?.direction) {
    fmt.push(`flex-direction: ${opts.direction}`);
  }
  if (opts?.grow) {
    fmt.push(`flex-grow: ${opts.grow}`);
  }
  if (opts?.gap) {
    fmt.push(`gap: ${opts.gap}`);
  }
  if (opts?.cursor) {
    fmt.push(`cursor: ${opts.cursor}`);
  }
  if (opts?.alignItems) {
    fmt.push(`align-items: ${opts.alignItems}`);
  }
  if (opts?.justifyItems) {
    fmt.push(`justify-items: ${opts.justifyItems}`);
  }
  if (opts?.justifyContent) {
    fmt.push(`justify-content: ${opts.justifyContent}`);
  }
  if (opts?.position) {
    fmt.push(`position: ${opts.position}`);
  }
  if (opts?.display) {
    fmt.push(`display: ${opts.display}`);
  }
  if (opts?.opacity) {
    fmt.push(`opacity: ${opts.opacity}`);
  }
  return fmt.length === 0 ? `style=""` : `style="${fmt.join("; ")}"`;
};
var listStyle = (opts = {}) => {
  let fmt = [];
  if (opts?.indentation && opts.indentation !== "default") {
    switch (opts.indentation) {
      case "24px":
        fmt.push(`padding-inline-start: 24px`);
        break;
      case "20px":
        fmt.push(`padding-inline-start: 20px`);
        break;
      case "16px":
        fmt.push(`padding-inline-start: 16px`);
        break;
      case "12px":
        fmt.push(`padding-inline-start: 12px`);
        break;
      case "none":
        fmt.push(`padding-inline-start: 0px`);
        break;
    }
  }
  if (opts?.mt && opts.mt !== "default") {
    fmt.push(`margin-block-start: ${opts.mt === "tight" ? "2px" : opts.mt === "none" ? "0px" : opts.mt === "spaced" ? "1.5rem" : opts.mt}`);
  }
  if (opts?.mb && opts.mb !== "default") {
    fmt.push(`margin-block-end: ${opts.mb === "tight" ? "2px" : opts.mb === "none" ? "0px" : opts.mb === "spaced" ? "1.5rem" : opts.mb}`);
  }
  if (opts?.my && opts.my !== "default") {
    fmt.push(`margin-block-start: ${opts.my === "tight" ? "2px" : opts.my === "none" ? "0px" : opts.my === "spaced" ? "1.5rem" : opts.my}`);
    fmt.push(`margin-block-end: ${opts.my === "tight" ? "2px" : opts.my === "none" ? "0px" : opts.my === "spaced" ? "1.5rem" : opts.my}`);
  }
  return fmt.length === 0 ? `style=""` : `style="${fmt.join("; ")}"`;
};
var obsidian_blockquote = (kind, title, opts) => [
  `<div data-callout-metadata="" data-callout-fold="${opts?.fold || ""}" data-callout="${kind}" class="callout" ${style(opts?.style || {})}>`,
  `<div class="callout-title" style="gap:15px; align-items: center">`,
  ...opts?.icon ? [`<div class="callout-icon">${opts?.icon}</div>`] : [],
  `<div class="callout-title-inner">${title}</div>`,
  ...opts?.toRight ? [
    `<div class="callout-title-right" style="display: flex; flex-grow: 1; justify-content: right">${opts.toRight}</div>`
  ] : [],
  `</div>`,
  ...opts?.content ? [
    `<div class="callout-content" ${style(opts.contentStyle || {})}>`,
    `<p>${opts.content}</p>`,
    `</div>`
  ] : [],
  ...opts?.belowTheFold ? [`<div class="below-the-fold" ${style(opts?.belowTheFoldStyle || {})}>${opts?.belowTheFold}</div>`] : [""],
  `</div>`
].filter((i) => i).join("\n");
var empty_callout = (fmt) => [
  `<div class="callout" ${style(fmt)}>`,
  `<div class="callout-title">&nbsp;</div>`,
  `<div class="callout-content">&nbsp;</div>`,
  `</div>`
].join("\n");
var blockquote2 = (kind, title, opts) => {
  const iconLookup = {
    warning: WARN_ICON,
    quote: QUOTE_ICON,
    info: INFO_ICON,
    tip: TIP_ICON,
    summary: SUMMARY_ICON,
    bug: BUG_ICON,
    example: EXAMPLE_ICON,
    question: QUESTION_ICON,
    success: SUCCESS_ICON,
    error: ERROR_ICON,
    note: NOTE_ICON
  };
  return obsidian_blockquote(kind, title, opts?.icon && opts.icon in iconLookup ? { ...opts, icon: iconLookup[opts.icon] } : opts);
};
var list_items_api = (wrapper) => ({
  indent: (...items) => render_list_items(wrapper, items),
  done: createFnWithProps(() => "", { escape: true })
});
var wrap_ol = (items, opts) => `<ol ${listStyle(opts)}>${items}</ol>`;
var wrap_ul = (items, opts) => `<ul ${listStyle(opts)}>${items}</ul>`;
var render_list_items = (wrapper, items, opts) => wrapper(items.filter((i) => i !== undefined).map((i) => isFunction(i) ? isFunction(i(list_items_api)) ? "" : i(list_items_api) : `<li ${style(opts?.li ? isFunction(opts?.li) ? opts.li(i ? i : "") : opts.li : {})}>${i}</li>`).filter((i) => i !== "").join("\n"), opts);
var span = (text2, fmt) => {
  return `<span ${style(fmt || { fw: "400" })}>${text2}</span>`;
};
var italics = (text2, fmt) => {
  return `<span ${style({ ...fmt || { fw: "400" }, fs: "italic" })}>${text2}</span>`;
};
var bold = (text2, fmt) => {
  return `<span ${style({ ...fmt || {}, fw: "700" })}>${text2}</span>`;
};
var light = (text2, fmt) => {
  return `<span ${style({ ...fmt || {}, fw: "300" })}>${text2}</span>`;
};
var thin = (text2, fmt) => {
  return `<span ${style({ ...fmt || {}, fw: "100" })}>${text2}</span>`;
};
var medium = (text2, fmt) => {
  return `<span ${style({ ...fmt || {}, fw: "500" })}>${text2}</span>`;
};
var normal = (text2, fmt) => {
  return `<span ${style({ ...fmt || {}, fw: "400" })}>${text2}</span>`;
};
var fmt = (p) => (container, filePath) => ({
  async ul(...items) {
    return p.dv.renderValue(render_list_items(wrap_ul, items), container, p, filePath, false);
  },
  async render(data) {
    await p.dv.renderValue(data, container, p, filePath, false);
  },
  html_ul(items, opts) {
    return render_list_items(wrap_ul, items.filter((i) => i !== undefined), opts);
  },
  async ol(...items) {
    return p.dv.renderValue(render_list_items(wrap_ol, items), container, p, filePath, false);
  },
  code: (code2) => p.dv.renderValue(`<code>${code2}</code>`, container, p, filePath, true),
  renderToRight: (text2) => p.dv.renderValue(`<span class="to-right" style="display: flex; flex-direction: row; width: auto;"><span class="spacer" style="display: flex; flex-grow: 1">&nbsp;</span><span class="right-text" style: "display: flex; flex-grow: 0>${text2}</span></span>`, container, p, filePath, true),
  toRight: (content, fmt2) => {
    const html = [
      `<div class="wrapper-to-right" style="display: relative">`,
      `<span class="block-to-right" style="position: absolute; right: 0">`,
      `<span ${style({ ...fmt2, position: "relative" })}>`,
      content,
      `</span>`,
      `</div>`
    ].join("\n");
    return html;
  },
  internalLink: (ref, opt) => {
    const link2 = (href, title) => `<a data-tooltip-position="top" aria-label="${href}" data-href="${href}" class="internal-link data-link-icon data-link-text" _target="_blank" rel="noopener" data-link-path="${href}" style="">${title}</a>`;
    return isDvPage(ref) ? link2(ref.file.path, opt?.title || ref.file.name) : isLink(ref) ? link2(ref.path, opt?.title || ref?.hover || "link") : "";
  },
  span,
  italics,
  bold,
  light,
  thin,
  medium,
  normal,
  wrap: (children, fmt2) => {
    return [
      `<div class="wrapped-content" ${style(fmt2 || {})}>`,
      ...children.filter((i) => i !== undefined),
      `</div>`
    ].join("\n");
  },
  link: (title, url, opts) => {
    return [
      `<a href="${url}" >`,
      ...opts?.iconUrl || opts?.svgInline ? opts?.titlePosition === "top" ? [
        normal(title)
      ] : [
        `<span class="grouping" ${style(opts?.style || { alignItems: "center", flex: true })}>`,
        opts?.iconUrl ? `<img src="${opts.iconUrl}" style="padding-right: 4px">` : opts?.svgInline,
        normal(title),
        `</span>`
      ] : [
        normal(title)
      ],
      `</a>`
    ].join("\n");
  },
  as_tag: (text2) => `<code class="tag-reference">${ensureLeading(text2, "#")}</code>`,
  blockquote: (kind, title, opts) => blockquote2(kind, title, opts),
  callout: (kind, title, opts) => p.dv.renderValue(blockquote2(kind, title, opts), container, p, filePath, false),
  empty_callout
});

// src/dv_queries/dv_page.ts
var extractTitle = function(s2) {
  return s2 && typeof s2 === "string" ? s2.replace(/\d{0,4}-\d{2}-\d{2}\s*/, "") : s2;
};
var get_classification = function(pg) {
  if (pg === undefined) {
    return { isCategory: false, isSubcategory: false, category: undefined, subcategory: undefined };
  }
  const directCat = pg.file.etags.find((t) => t?.startsWith(`#category/`));
  const directSubCat = pg.file.etags.find((t) => t?.startsWith(`#subcategory/`));
  const indirectCat = pg.file.etags.find((t) => t?.split("/").length > 2 && t?.split("/")[1] === "category");
  const indirectSubCat = pg.file.etags.find((t) => t?.split("/").length > 2 && t.split("/")[1] === "subcategory");
  const kindedPage = pg.file.etags.find((t) => t?.split("/").length > 1 && !["#category", "#subcategory"].includes(t.split("/")[0]) && !["category", "subcategory"].includes(t.split("/")[1]));
  return directCat ? {
    isCategory: true,
    isSubcategory: false,
    category: directCat.split("/")[1],
    subcategory: undefined
  } : directSubCat ? {
    isCategory: false,
    isSubcategory: true,
    category: directSubCat.split("/")[1],
    subcategory: directSubCat.split("/")[2]
  } : indirectCat ? {
    isCategory: true,
    isSubcategory: false,
    category: indirectCat.split("/")[2],
    subcategory: undefined
  } : indirectSubCat ? {
    isCategory: false,
    isSubcategory: true,
    category: indirectSubCat.split("/")[2],
    subcategory: indirectSubCat.split("/")[3]
  } : kindedPage ? {
    isCategory: false,
    isSubcategory: false,
    category: kindedPage.split("/")[1],
    subcategory: kindedPage.split("/")[2]
  } : {
    isCategory: false,
    isSubcategory: false,
    category: undefined,
    subcategory: undefined
  };
};
var removePound = function(tag) {
  return typeof tag === "string" && tag?.startsWith("#") ? tag.slice(1) : tag;
};
var isKindDefnPage = function(pg) {
  return isUndefined(pg) ? false : pg.file.etags.find((t) => t.startsWith(`#kind/`));
};
var show_tags = function(pg, ...exclude) {
  return pg.file.etags.filter((t) => !exclude.some((i) => t.startsWith(i) ? true : false)).map((t) => `\`${t}\``).join(", ") || "";
};
var show_created_date = function(pg, format2) {
  return format2 ? pg.file.cday.toFormat(format2) : pg.file.cday;
};
var show_modified_date = function(pg, format2) {
  return format2 ? pg.file.mday.toFormat(format2) : pg.file.mday;
};
var DEFAULT_LINK = `<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 256 256"><path fill="#a3a3a3" d="M134.71 189.19a4 4 0 0 1 0 5.66l-9.94 9.94a52 52 0 0 1-73.56-73.56l24.12-24.12a52 52 0 0 1 71.32-2.1a4 4 0 1 1-5.32 6A44 44 0 0 0 81 112.77l-24.13 24.12a44 44 0 0 0 62.24 62.24l9.94-9.94a4 4 0 0 1 5.66 0Zm70.08-138a52.07 52.07 0 0 0-73.56 0l-9.94 9.94a4 4 0 1 0 5.71 5.68l9.94-9.94a44 44 0 0 1 62.24 62.24L175 143.23a44 44 0 0 1-60.33 1.77a4 4 0 1 0-5.32 6a52 52 0 0 0 71.32-2.1l24.12-24.12a52.07 52.07 0 0 0 0-73.57Z"/></svg>`;
var isKeyOf = (container, key) => {
  return isContainer(container) && (isString(key) || isNumber(key)) && key in container ? true : false;
};
var extractPath = (path) => {
  return isDvPage(path) ? path.file.path : isLink(path) ? path.path : isString(path) ? path : Never;
};
var isKindedPage = (plugin4) => (pg, category, subcategory) => {
  return isUndefined(pg) ? false : get_classification(pg).isCategory === false && get_classification(pg).isSubcategory === false && !pg.file.etags.find((i) => i.startsWith("#kind")) ? isUndefined(category) ? true : pg.category ? plugin4.dv.page(pg.category)?.file?.path === extractPath(category) ? isUndefined(subcategory) ? true : pg.subcategory && plugin4.dv.page(pg.subcategory)?.file?.path === extractPath(subcategory) : false : false : false;
};
var get_kind_prop = (p) => (pg) => {
  if (!pg) {
    return { kind: undefined, tag: undefined };
  }
  if (!isDvPage(pg)) {
    return get_kind_prop(p)(p.dv.page(pg));
  } else {
    let [_, kind] = get_prop(p)(pg, "kind");
    return isDvPage(kind) ? {
      kind,
      tag: get_kind_tag(p)(kind)
    } : {
      kind: {},
      tag: undefined
    };
  }
};
var get_kind_tag = (p) => (pg) => {
  return pg.file.etags.find((i) => i?.startsWith(`#kind/`)) ? pg.file.etags.find((i) => i?.startsWith(`#kind/`))?.split("/")[1] : removePound(pg.file.etags.find((t) => !t.startsWith("#category") && !t.startsWith("#subcategory") && !(t.split("/")[1] === "category" || t.split("/")[1] === "subcategory"))?.split("/")[0]) || get_kind_prop(p)(pg).tag || "unknown";
};
var get_internal_links = (p) => (pg, ...props) => {
  let links = [];
  for (const prop of props) {
    const pgProp = pg[prop];
    if (!pgProp) {
      break;
    }
    if (Array.isArray(pgProp)) {
      links = [...links, ...pgProp.filter((i) => isLink(i))];
    } else if (isLink(pgProp)) {
      links.push(pgProp);
    } else if (isDvPage(pgProp)) {
      links.push(pgProp.file.link);
    }
  }
  return links;
};
var show_links = (p, icons) => (pg) => {
  const [_, pageIcon] = get_prop(p)(pg, "icon", "svg_icon", "_icon", "_svg_icon");
  const link_props = {
    website: "website",
    wikipedia: "wikipedia",
    company: "company",
    retailer: "company",
    docs: "documentation",
    retail_urls: "retail",
    retail: "retail",
    url: "link",
    repo: "repo",
    review: "review",
    reviews: "review",
    blog: "blog",
    api: "api",
    map: "map",
    place: "pin",
    home: "home",
    office: "office",
    offices: "office",
    work: "office",
    employer: "office",
    playground: "playground",
    demo: "playground",
    support: "support",
    help: "support"
  };
  const create_lnk = (icon, url, prop) => {
    icon = prop === "website" && isString(pageIcon) ? pageIcon : /youtube.com/.test(url) ? "you_tube" : icon;
    p.debug(prop, pageIcon);
    return `<a href="${url}" data-href="${url}" alt="${prop}" style="display: flex; align-items: baseline; padding-right: 2px" data-tooltip-position="top"><span class="link-icon" style="display: flex;width: auto; max-width: 24px; max-height: 24px; height: 24px">${icon}</span></a>`;
  };
  const links = [];
  for (const prop of keysOf(pg)) {
    if (prop in pg && isString(pg[prop])) {
      if (Array.isArray(pg[prop])) {
        pg[prop].forEach((p2) => {
          if (isString(p2) && /^http/.test(p2)) {
            links.push([prop, p2]);
          }
        });
      } else if (isString(pg[prop]) && !prop.startsWith("_") && /^http/.test(pg[prop])) {
        links.push([prop, pg[prop]]);
      }
    }
  }
  const prettify = (tuple) => {
    const [prop, url] = tuple;
    if (prop in link_props) {
      if (link_props[prop] in icons) {
        return create_lnk(icons[link_props[prop]], url, prop);
      } else {
        return create_lnk(DEFAULT_LINK, url, prop);
      }
    } else {
      return create_lnk(DEFAULT_LINK, url, prop);
    }
  };
  return `<span style='display: flex; flex-direction: row;'>${links.map(prettify).join(" ")}</span>`;
};
var get_prop = (plugin4) => (pg, ...props) => {
  if (!pg?.file?.name) {
    plugin4.error(`Call to get_prop(pg) passed in an invalid DvPage`, { pg, props });
    return [undefined, undefined];
  }
  const found = props.find((prop) => isKeyOf(pg, prop) && pg[prop] !== undefined);
  if (!found) {
    return [undefined, undefined];
  } else {
    const value = pg[found];
    return [
      found,
      isLink(value) ? plugin4.dv.page(value) : Array.isArray(value) ? value.map((i) => isLink(i) ? plugin4.dv.page(i) : i) : value
    ];
  }
};
var show_prop = (plugin4) => (pg, ...props) => {
  if (!pg?.file?.name) {
    throw new Error(`Attempt to call get_prop(pg, ${props.join(", ")}) with an invalid page passed in!`);
  }
  const found = props.find((prop) => isKeyOf(pg, prop) && pg[prop] !== undefined);
  if (!found) {
    return "";
  }
  if (isKeyOf(pg, found)) {
    const value = pg[found];
    try {
      return isString(value) ? value : isLink(value) ? value : isDvPage(value) ? value.file.link : isArray(value) ? value.map((v) => isLink(v) ? v : isDvPage(v) ? v.file.link : "").filter((i) => i).join(", ") : "";
    } catch (e) {
      plugin4.error(`Ran into problem displaying the "${found}" property on the page "${pg.file.path}" passed in while calling show_prop().`, e);
      return "";
    }
  }
};
var when = (_p) => (pg, format2 = "LLL yyyy") => {
  if (pg) {
    const created = pg.file.cday;
    const modified = pg.file.mday;
    const deltaCreated = Math.abs(created.diffNow("days").days);
    const deltaModified = Math.abs(modified.diffNow("days").days);
    if (deltaCreated < 14) {
      const desc = created.toRelative();
      return `<span style="cursor: default"><i style="font-weight: 150">created</i> ${desc}</span>`;
    } else if (deltaModified < 14) {
      const desc = modified.toRelative();
      return `<span style="cursor: default"><i style="font-weight: 150">modified</i> ${desc}</span>`;
    } else {
      return `<span style="cursor: default">${modified.toFormat(format2)}</span>`;
    }
  } else {
    return "";
  }
};
var show_subcategories_for = (plg) => (pg) => {
  if (!pg) {
    return [];
  }
  if (get_classification(pg).isCategory) {
    const kindTag = get_kind_tag(plg)(pg);
    const category = get_classification(pg).category;
    const query = kindTag ? `#${kindTag}/subcategory/${category} OR #subcategory/${category}` : `#subcategory/${category}`;
    return plg.dv.pages(query).map((i) => i.file.link);
  } else {
    return [];
  }
};
var dv_page = (plugin4) => (source, container, component, filePath) => {
  const current = plugin4.dv.page(filePath);
  if (!current) {
    throw new Error("Attempt to initialize dv_page() with an invalid sourcePath: ${sourcePath}!");
  }
  const linkIcons = plugin4.dv.page("Link Icons") || {};
  const metadata = () => {
  };
  return {
    current,
    linkIcons,
    removePound,
    get_kind_tag: get_kind_tag(plugin4),
    extractTitle,
    get_classification,
    ...get_classification(current),
    show_tags,
    get_prop: get_prop(plugin4),
    get_kind_prop: get_kind_prop(plugin4),
    get_internal_links: get_internal_links(plugin4),
    metadata,
    show_prop: show_prop(plugin4),
    show_desc: (pg) => {
      const desc = show_prop(plugin4)(pg, "about", "desc", "description");
      if (typeof desc == "string") {
        return `<span style="font-weight:200; font-size: 14px">${desc}</span>`;
      } else {
        return "";
      }
    },
    show_links: show_links(plugin4, linkIcons),
    show_created_date,
    show_modified_date,
    show_when: when(plugin4),
    kind_tag: get_kind_tag(plugin4)(current),
    isKindedPage: isKindedPage(plugin4),
    isKindDefnPage,
    page(pg, originFile) {
      return plugin4.dv.page(pg, originFile);
    },
    pages(query, originFile) {
      return plugin4.dv.pages(query, originFile);
    },
    as_array: (v) => {
      return plugin4.dv.isDataArray(v) ? Array.from(v.values) : isArray(v) ? v.map((i) => plugin4.dv.isDataArray(i) ? i.values : i) : [v];
    },
    pagePaths(query, originFile) {
      return plugin4.dv.pagePaths(query, originFile);
    },
    date(pathLike) {
      return plugin4.dv.date(pathLike);
    },
    duration(str) {
      return plugin4.dv.duration(str);
    },
    createFileLink(pathLike, embed, display) {
      if (isLink(pathLike)) {
        const pg = plugin4.dv.page(pathLike.path);
        if (!pg) {
          plugin4.error(`createFileLink() had issues creating a link from the passed in parameters`, { pathLike, embed, display });
          return "";
        }
        return plugin4.dv.fileLink(pg.file.path, isUndefined(embed) ? false : embed, isUndefined(display) ? extractTitle(pg.file.name) : display);
      } else if (isDvPage(pathLike)) {
        return plugin4.dv.fileLink(pathLike.file.path, isUndefined(embed) ? false : embed, isUndefined(display) ? extractTitle(pathLike.file.name) : display);
      } else if (isString(pathLike)) {
        const pg = plugin4.dv.page(pathLike);
        if (!pg) {
          plugin4.error(`createFileLink() had issues creating a link from the passed in string path`, { pathLike, embed, display });
          return "";
        }
        return plugin4.dv.fileLink(pg.file.path, isUndefined(embed) ? false : embed, isUndefined(display) ? extractTitle(pg.file.name) : display);
      }
    },
    fileLink(path, embed, displayAs) {
      return plugin4.dv.fileLink(path, embed, displayAs);
    },
    sectionLink(path, embed, display) {
      return plugin4.dv.sectionLink(path, embed, display);
    },
    blockLink(path, embed, display) {
      return plugin4.dv.blockLink(path, embed, display);
    },
    async table(headers, values) {
      return plugin4.dv.table(headers, values, container, plugin4, filePath);
    },
    async renderValue(value, inline4 = false) {
      return plugin4.dv.renderValue(value, container, plugin4, filePath, inline4);
    },
    async taskList(tasks, groupByFile) {
      return plugin4.dv.taskList(tasks, groupByFile, container, plugin4, filePath);
    },
    async list(values) {
      return plugin4.dv.list(values, container, plugin4, filePath);
    },
    async paragraph(text2) {
      return plugin4.dv.renderValue(text2, container, plugin4, filePath, false);
    },
    show_subcategories_for: show_subcategories_for(plugin4),
    async ul(...items) {
      const wrap_ul2 = (items2) => `<ul>${items2}</ul>`;
      const render_items = (items2) => items2.map((i) => isFunction(i) ? isFunction(i(ul_api)) ? "" : i(ul_api) : `<li>${i}</li>`).filter((i) => i !== "").join("\n");
      const ul_api = {
        indent: (...items2) => wrap_ul2(render_items(items2)),
        done: createFnWithProps(() => "", { escape: true })
      };
      return plugin4.dv.renderValue(wrap_ul2(render_items(items)), container, plugin4, filePath, false);
    },
    fmt: fmt(plugin4)(container, filePath)
  };
};

// src/utils/type_guards/isError.ts
var isError = (val) => {
  return isObject(val) && "msg" in val && isString(val.msg) || val instanceof Error;
};

// src/helpers/parseParams.ts
var options = (state) => ({
  done: () => state,
  strings: (...p) => options({ ...state, strings: p }),
  stringArrays: (...p) => options({ ...state, stringArrays: p }),
  numerics: (...p) => options({ ...state, numerics: p }),
  boolean: (...p) => options({ ...state, boolean: p }),
  enums: (p, ...e) => options({
    ...state,
    enums: {
      ...state.enums,
      [p]: e
    }
  })
});
var getScalarDefn = (param) => {
  if (param.startsWith("enum::")) {
    let key_value = stripBefore(param, "enum::");
    let [token, name] = key_value.split(" AS ");
    return ["enum", name, token.split(/,\s{0,1}/)];
  } else {
    return param.split(" AS ");
  }
};
var validate_scalar = (result, param) => {
  const [defn, _name, _values] = getScalarDefn(param);
  switch (defn) {
    case "boolean":
      return isBoolean(result);
    case "number":
      return isNumber(result);
    case "string":
      return isString(result);
    case "opt(boolean)":
      return isBoolean(result) || isUndefined(result);
    case "opt(number)":
      return isNumber(result) || isUndefined(result);
    case "opt(string)":
      return isString(result) || isUndefined(result);
    default:
      if (defn.startsWith("enum")) {
        const values = stripBefore(defn, "enum::").split(/,\s{0,1}/);
        return values.includes(result);
      } else {
        return false;
      }
  }
};
var option_prop_type = (key, defn) => {
  if (defn.strings?.includes(key)) {
    return "string";
  } else if (defn.boolean?.includes(key)) {
    return "boolean";
  } else if (defn.numerics?.includes(key)) {
    return "number";
  } else if (defn.stringArrays?.includes(key)) {
    return "string[]";
  } else if (Object.keys(defn.enums || {}).includes(key)) {
    return "enum";
  } else {
    return "unknown";
  }
};
var validate_opts = (opts, defn) => {
  let result = { valid: [], invalid: [] };
  Object.keys(opts).forEach((k) => {
    switch (option_prop_type(k, defn)) {
      case "boolean":
        if (isBoolean(opts[k])) {
          result.valid.push(k);
        } else {
          result.invalid.push(k);
        }
        break;
      case "number":
        if (isNumber(opts[k])) {
          result.valid.push(k);
        } else {
          result.invalid.push(k);
        }
        break;
      case "string":
        if (isString(opts[k])) {
          result.valid.push(k);
        } else {
          result.invalid.push(k);
        }
        break;
      case "string[]":
        if (isArray(opts[k])) {
          result.valid.push(k);
        } else {
          result.invalid.push(k);
        }
        break;
      case "enum":
        const enum_values = Array.isArray((defn?.enums || {})[k]) ? (defn?.enums || {})[k] : [];
        if (enum_values.includes(opts[k])) {
          result.valid.push(k);
        } else {
          result.invalid.push(k);
        }
        break;
    }
  });
  return result;
};
var isOkUserParam = (val) => {
  return isObject(val) && "isOk" in val && val.isOk === true ? true : false;
};
var parseParams = (...scalar) => (optCallback) => {
  const empty = {
    strings: [],
    numerics: [],
    boolean: [],
    stringArrays: [],
    enums: {}
  };
  let requiredScalar = scalar.reduce((count, current) => current.includes("opt(") ? count : count + 1, 0);
  let optScalar = scalar.reduce((count, current) => current.includes("opt(") ? count + 1 : count, 0);
  const state = options(empty);
  const optDefn = optCallback ? handleDoneFn(optCallback(state)) : empty;
  return (match) => {
    if (!match) {
      return {
        isOk: true,
        msg: "No parameters passed",
        kind: "no-parameters",
        user_params: undefined,
        params: [],
        optionsDefn: optDefn,
        scalarDefn: scalar
      };
    }
    const [_, user_params] = Array.from(match || []);
    let known_opt_keys = [
      ...optDefn?.strings || [],
      ...optDefn?.stringArrays || [],
      ...optDefn?.numerics || [],
      ...optDefn?.boolean || [],
      ...Object.keys(optDefn?.enums || {})
    ];
    try {
      let parsedParams = JSON.parse(`[ ${JSON.stringify(user_params)} ]`);
      const objects = parsedParams.map((i) => isObject(i));
      const objIndex = parsedParams.findIndex((i) => isObject(i));
      const scalars = parsedParams.map((i, idx) => isScalar(i) || objIndex !== -1 && idx > objIndex ? i : undefined).filter((i) => i);
      if (parsedParams.length === scalar.length || parsedParams.length === scalar.length + 1) {
        let invalid_scalars = [];
        for (const [i] of Array(scalar.length).entries()) {
          if (!validate_scalar(parsedParams[i], scalar[i])) {
            invalid_scalars.push({
              index: i,
              value: parsedParams[i],
              expected_type: scalar[i]
            });
          }
        }
        if (invalid_scalars.length > 0) {
          return {
            isOk: false,
            kind: "invalid-scalars",
            msg: `${invalid_scalars.length} of the expected ${scalar.length} scalar parameters were of the wrong type`,
            user_params,
            optionsDefn: optDefn,
            scalarDefn: scalar
          };
        }
        if (parsedParams.length === scalar.length + 1) {
          let optParam = last(parsedParams);
          if (optParam && !isObject(optParam)) {
            return {
              isOk: false,
              kind: "wrong-type-for-options",
              msg: `The parameter passed into the position of the options dictionary was of the wrong type [${typeof last(parsedParams)}]`,
              user_params,
              optionsDefn: optDefn,
              scalarDefn: scalar
            };
          }
          const unknown = Object.keys(optParam).filter((k) => !known_opt_keys.includes(k));
          if (unknown.length > 0) {
            return {
              isOk: false,
              kind: "unknown-key-used",
              msg: `the keys ${unknown.join(", ")} are not not known options for this query!`,
              user_params,
              optionsDefn: optDefn,
              scalarDefn: scalar
            };
          }
          const results = validate_opts(optParam, optDefn);
          if (results.invalid.length === 0) {
            return {
              isOk: true,
              user_params,
              params: parsedParams,
              optionsDefn: optDefn,
              scalarDefn: scalar
            };
          } else {
            return {
              isOk: false,
              kind: "invalid-option-param",
              user_params,
              optionsDefn: optDefn,
              scalarDefn: scalar,
              msg: `${results.invalid.length} parameters of the options hash provided -- ${results.invalid.join(", ")} -- were of the wrong type.`
            };
          }
        } else {
          return {
            isOk: true,
            user_params,
            params: [...parsedParams, {}],
            optionsDefn: optDefn,
            scalarDefn: scalar
          };
        }
      } else if (parsedParams.length > scalar.length + 1) {
        return {
          isOk: false,
          kind: "too-many-parameters",
          msg: `Wrong number parameters passed in: ${parsedParams.length}`,
          user_params,
          optionsDefn: optDefn,
          scalarDefn: scalar
        };
      } else {
      }
    } catch (e) {
      return {
        isOk: false,
        msg: isError(e) ? e.msg : String(e),
        user_params,
        kind: "unable-to-parse",
        optionsDefn: optDefn,
        scalarDefn: scalar
      };
    }
  };
};

// src/dv_queries/back_links.ts
var back_links = (plg) => (source, container, component, filePath) => async (params_str = "") => {
  const {
    current,
    kind_tag,
    page,
    isCategory,
    isSubcategory,
    isKindedPage: isKindedPage2,
    isKindDefnPage: isKindDefnPage2,
    fmt: fmt3,
    ul,
    paragraph: paragraph2,
    category,
    table: table3,
    show_subcategories_for: show_subcategories_for2,
    get_classification: get_classification2,
    get_prop: get_prop2,
    createFileLink,
    show_links: show_links2,
    show_prop: show_prop2,
    show_created_date: show_created_date2,
    get_kind_prop: get_kind_prop2,
    show_modified_date: show_modified_date2,
    renderValue,
    subcategory
  } = plg.api.dv_page(source, container, component, filePath);
  let opt = parseParams([], {});
  const links = current.file.inlinks.sort((p) => page(p)?.file.name).where((p) => page(p)?.file.path !== current.file.path);
  if (isCategory) {
    const subCategories = links.where((p) => get_classification2(page(p)).isSubcategory === true && page(p)?.category?.path === current.file.path && !isKindedPage2(page(p)));
    const kindPages = links.where((p) => isKindedPage2(page(p)) && get_classification2(page(p))?.category === category);
    const otherPages = links.where((p) => !isKindedPage2(page(p), current) && !(get_classification2(page(p))?.isSubcategory || get_classification2(page(p))?.category === category));
    if (subCategories.length > 0) {
      fmt3.callout("info", "Subcategories", {
        style: {
          mt: "1rem",
          mb: "1rem"
        },
        content: `subcategory pages which are part of the ${fmt3.bold(category || "")} ${fmt3.italics("category")}.`
      });
      table3(["Page", "Created", "Modified", "Desc", "Links"], subCategories.map((p) => {
        const pg = page(p);
        return [
          createFileLink(pg),
          show_created_date2(pg, "DD"),
          show_modified_date2(pg, "DD"),
          show_prop2(pg, "desc", "description", "about"),
          show_links2(pg)
        ];
      })).catch((e) => plg.error(`Problems rendering subcategories table`, e));
    } else {
      ul(`no subcategories found for this category page`, `to be listed a page would need one of the following tags:`, (l) => l.indent(`\`#subcategory/${category}/[subcategory]\`, `, `\`#${kind_tag}/subcategory/${category}/[subcategory]`));
    }
    if (kindPages.length > 0) {
      fmt3.callout("info", "Kinded Pages", {
        style: {
          mt: "1rem",
          mb: "1rem"
        },
        content: `pages that are kinded as ${fmt3.bold(kind_tag || "")} ${fmt3.italics("and")} are part of the ${fmt3.bold(category || "")} category.`
      });
      table3(["Page", "Created", "Subcategory", "Desc", "Links"], kindPages.map((p) => {
        const pg = page(p);
        return [
          createFileLink(pg),
          show_created_date2(pg, "DD"),
          show_prop2(pg, "subcategory"),
          show_prop2(pg, "desc", "description", "about"),
          show_links2(pg)
        ];
      })).catch((e) => plg.error(`Problems rendering table`, e));
    }
    if (otherPages.length > 0) {
      if (kindPages.length > 0 || subCategories.length > 0) {
        fmt3.callout("info", "Other Pages", {
          style: {
            mt: "1rem",
            mb: "1rem"
          },
          content: `other back links which aren't related directly via their classification`
        });
      }
      table3(["Page", "Created", "Kind", "Category", "Links"], otherPages.map((p) => {
        const pg = page(p);
        return [
          createFileLink(pg),
          show_created_date2(pg, "DD"),
          show_prop2(pg, "kind"),
          show_prop2(pg, "category", "categories"),
          show_links2(pg)
        ];
      })).catch((e) => plg.error(`Problems rendering otherPages table`, e));
    }
  } else if (isSubcategory) {
    const kinded = links.where((p) => page(p) && page(p)?.subcategory && page(page(p)?.subcategory)?.file?.path === current.file.path);
    const other = links.where((p) => !page(p)?.subcategory || page(page(p)?.subcategory)?.file?.path !== current.file.path);
    if (kinded.length > 0) {
      fmt3.callout("info", "Kinded Pages", {
        style: {
          mt: "1rem",
          mb: "1rem"
        },
        content: `pages that are kinded as ${fmt3.bold(kind_tag || "")} ${fmt3.italics("and")} are part of the ${fmt3.bold(current.file.name)} subcategory .`
      });
      table3(["Page", "Created", "Modified", "Desc", "Links"], kinded.map((p) => {
        const pg = page(p);
        return [
          createFileLink(pg),
          show_created_date2(pg, "DD"),
          show_modified_date2(pg, "DD"),
          show_prop2(pg, "desc", "description", "about"),
          show_links2(pg)
        ];
      }));
    } else {
      paragraph2(`### Subcategory Page`);
      ul(`no pages which identify as being in this subcategory`, `to be listed, a page would need one of the following tag groups:`, (l) => l.indent(`<code>#${kind_tag}/${category}/${subcategory}</code>`, `<code>#${kind_tag} #subcategory/${category}/${subcategory}</code>`));
    }
    if (other.length > 0) {
      paragraph2(`### Other Back Links`);
      table3(["Page", "Created", "Kind", "Category", "Links"], other.map((p) => {
        const pg = page(p);
        return [
          createFileLink(pg),
          show_created_date2(pg, "DD"),
          show_prop2(pg, "kind"),
          show_prop2(pg, "category", "categories"),
          show_links2(pg)
        ];
      }));
    }
  } else if (isKindedPage2(current)) {
    let peering = "none";
    if (subcategory) {
      const peers = links.where((p) => get_classification2(page(p))?.subcategory === subcategory);
      if (peers.length > 0) {
        peering = "subcategory";
        fmt3.callout("info", "Peers", {
          content: `pages who share the same ${fmt3.bold(current.file.name)} ${fmt3.italics("subcategory")} as this page`,
          style: {
            mt: "1rem",
            mb: "1rem"
          },
          fold: ""
        });
        table3(["Page", "Created", "Modified", "Desc", "Links"], peers.map((p) => {
          const pg = page(p);
          return [
            createFileLink(pg),
            show_created_date2(pg, "DD"),
            show_modified_date2(pg, "DD"),
            show_prop2(pg, "desc", "description", "about"),
            show_links2(pg)
          ];
        }));
      }
    } else if (category && peering === "none") {
      const peers = links.where((p) => get_classification2(page(p))?.category === category);
      if (peers.length > 0) {
        peering = "category";
        if (subcategory) {
          fmt3.callout("info", "Peers", {
            style: {
              pt: "1rem"
            },
            content: `no peers with your subcategory ${fmt3.bold(subcategory)} found but there are peers with your ${fmt3.italics("category")} ${fmt3.bold(category)}`
          });
          paragraph2(`> ![note] no peers with your subcategory ${subcategory} found but there are peers with your category of ${category}`);
        } else {
          fmt3.callout("info", "Peers", {
            style: {
              mt: "1rem",
              mb: "1rem"
            },
            content: `pages who share the same ${fmt3.bold(category)} ${fmt3.italics("category")} as this page`
          });
        }
        table3(["Page", "Created", "Modified", "Desc", "Links"], peers.map((p) => {
          const pg = page(p);
          return [
            createFileLink(pg),
            show_created_date2(pg, "DD"),
            show_modified_date2(pg, "DD"),
            show_prop2(pg, "desc", "description", "about"),
            show_links2(pg)
          ];
        }));
      }
    } else {
      if (category && subcategory) {
        paragraph2(`- no peer pages with either your ${category} category or your ${subcategory} subcategory`);
      } else if (category) {
        paragraph2(`- no peer pages found with your ${category} category`);
      }
    }
    const other = links.where((p) => peering === "category" && get_classification2(page(p))?.category !== category || peering === "subcategory" && get_classification2(page(p))?.subcategory !== subcategory || peering === "none");
    if (other.length > 0) {
      if (category || subcategory) {
        fmt3.callout("info", "Other Back Links", {
          style: {
            mt: "2rem",
            mb: "1rem"
          }
        });
      }
      table3(["Page", "Created", "Kind", "Category", "Links"], other.map((p) => {
        const pg = page(p);
        return [
          createFileLink(pg),
          show_created_date2(pg, "DD"),
          show_prop2(pg, "kind"),
          show_prop2(pg, "category", "categories"),
          show_links2(pg)
        ];
      }));
    }
  } else if (isKindDefnPage2(current)) {
    const categoryPages = links.where((p) => get_classification2(page(p))?.isCategory && get_kind_prop2(page(p)).kind?.file?.path === current.file.path);
    if (categoryPages.length > 0) {
      fmt3.callout("info", "Classification Pages", {
        style: {
          mt: "1rem",
          mb: "1rem"
        },
        content: `pages that are category pages of this ${fmt3.italics("kind definition")} page and their subcategories.`
      });
      table3(["Category", "Tag", "Subcategories"], categoryPages.map((p) => {
        const pg = page(p);
        return [
          createFileLink(pg),
          get_classification2(pg).category,
          show_subcategories_for2(pg).join(`, `)
        ];
      }));
    }
    const kindPages = links.where((p) => get_kind_prop2(page(p)).kind?.file?.path === current.file.path && isKindedPage2(page(p)));
    if (kindPages.length > 0) {
      fmt3.callout("info", "Kinded Pages", {
        style: {
          mt: "1rem",
          mb: "1rem"
        },
        content: `pages who's "kind" is defined by this page.`
      });
      const [_, classification2] = get_prop2(current, "__classification");
      if (isString(classification2) && classification2 === "categories") {
        table3(["Page", "Categories", "Links"], kindPages.map((p) => {
          const pg = page(p);
          return [
            createFileLink(pg),
            show_prop2(pg, "categories"),
            show_links2(pg)
          ];
        }));
      } else {
        table3(["Page", "Category", "Subcategory", "Links"], kindPages.map((p) => {
          const pg = page(p);
          return [
            createFileLink(pg),
            show_prop2(pg, "category", "categories"),
            show_prop2(pg, "subcategory"),
            show_links2(pg)
          ];
        }));
      }
    }
  }
  if (links.length === 0) {
    renderValue(`- no back links found to this page`).catch((e) => plg.error(`Problem rendering paragraph WRT to no back links`, e));
  }
};

// src/utils/type_guards/isWikipediaUrl.ts
var isWikipediaUrl = (val) => {
  return isString(val) && val.startsWith("https://") && val.includes("wikipedia.org/");
};

// src/utils/type_guards/find_in.ts
var find_in = (tg) => (...values) => {
  const found = values.find((v) => tg(v));
  return found;
};

// src/dv_queries/page_entry.ts
var page_entry = (p) => async (source, container, component, filePath) => {
  const dv = p.api.dv_page(source, container, component, filePath);
  const { fmt: fmt3, current } = dv;
  const banner_img = isUrl(dv.current["_banner"]) ? dv.current["_banner"] : undefined;
  const banner_aspect = isCssAspectRatio(dv.current["_banner_aspect"]) ? dv.current["_banner_aspect"] : "32/12";
  const hasBanner = isUrl(banner_img);
  let [_p1, icon] = dv.get_prop(dv.current, "icon", "_icon", "svgIcon", "_svgIcon");
  const hasIcon = isInlineSvg(icon);
  let [_p2, desc] = dv.get_prop(dv.current, "desc", "description", "about", "tagline", "summary");
  const hasDesc = isString(desc);
  const type = current.type ? dv.fmt.internalLink(dv.page(current.type)) : undefined;
  const kind = current.kind ? dv.fmt.internalLink(dv.page(current.kind)) : undefined;
  const category = current.category ? dv.fmt.internalLink(dv.page(current.category)) : undefined;
  const categories = current.categories ? current.categories.map((c) => dv.fmt.internalLink(dv.page(c))).join(fmt3.light(" | ", { opacity: 0.5 })) : undefined;
  const subcategory = current.subcategory ? dv.fmt.internalLink(dv.page(current.subcategory)) : undefined;
  const wiki = isWikipediaUrl(current.wiki) ? fmt3.link("Wikipedia", current.wiki) : isWikipediaUrl(current.wikipedia) ? fmt3.link("Wikipedia", current.wikipedia) : undefined;
  const siblings = dv.get_internal_links(dv.current, "about", "related", "competitors", "partners").map((i) => fmt3.internalLink(i));
  const parents = dv.get_internal_links(dv.current, "parent", "parents", "father", "mother", "belongs_to", "member_of", "child_of").map((i) => fmt3.internalLink(i));
  const children = dv.get_internal_links(dv.current, "child", "children", "son", "daughter").map((i) => fmt3.internalLink(i));
  const siblingsNoOthers = siblings.length > 0 && parents.length === 0 && children.length === 0;
  const repo = find_in(isRepoUrl)(current.repo, current.github, current.git, current.homepage, current.url, current.home);
  const repo_lnk = repo ? fmt3.link("Repo", repo) : undefined;
  const shouldDisplay = hasIcon || hasDesc || type || kind || category || categories;
  if (shouldDisplay) {
    const breadcrumbs = [type, kind, category, categories, subcategory].filter((i) => i).join(fmt3.light("&nbsp;>&nbsp;", { opacity: 0.5 }));
    const ext_links = [wiki, repo_lnk].filter((i) => i).join(", ");
    const title = isString(desc) ? desc.length < 120 ? desc : ext_links : ext_links;
    const body = isString(desc) && desc.length >= 120 ? ensureTrailing(desc, ".") : undefined;
    const right2 = breadcrumbs.length > 0 ? siblingsNoOthers ? `${breadcrumbs} [ ${siblings} ]` : breadcrumbs : fmt3.light("<i>no classification</i>");
    await fmt3.callout("example", title, {
      style: {
        mt: "0.55rem",
        mb: "1rem"
      },
      icon: hasIcon ? icon : MARKDOWN_PAGE_ICON,
      content: body,
      toRight: right2,
      fold: "+"
    });
  }
  if (hasBanner) {
    dv.renderValue(`<img src="${banner_img}" style="width:100%;aspect-ratio:${banner_aspect}; object-fit: cover"> `);
  }
};

// node_modules/@yankeeinlondon/happy-wrapper/dist/index.js
var function2 = __toESM(require_function(), 1);
var function3 = __toESM(require_function(), 1);

// node_modules/whatwg-url/index.js
var { URL: URL2, URLSearchParams } = require_webidl2js_wrapper();
var urlStateMachine = require_url_state_machine();
var percentEncoding = require_percent_encoding();
var sharedGlobalObject = { Array, Object, Promise, String, TypeError };
URL2.install(sharedGlobalObject, ["Window"]);
URLSearchParams.install(sharedGlobalObject, ["Window"]);
var $URL = sharedGlobalObject.URL;
var $URLSearchParams = sharedGlobalObject.URLSearchParams;
var $parseURL = urlStateMachine.parseURL;
var $basicURLParse = urlStateMachine.basicURLParse;
var $serializeURL = urlStateMachine.serializeURL;
var $serializePath = urlStateMachine.serializePath;
var $serializeHost = urlStateMachine.serializeHost;
var $serializeInteger = urlStateMachine.serializeInteger;
var $serializeURLOrigin = urlStateMachine.serializeURLOrigin;
var $setTheUsername = urlStateMachine.setTheUsername;
var $setThePassword = urlStateMachine.setThePassword;
var $cannotHaveAUsernamePasswordPort = urlStateMachine.cannotHaveAUsernamePasswordPort;
var $hasAnOpaquePath = urlStateMachine.hasAnOpaquePath;
var $percentDecodeString = percentEncoding.percentDecodeString;
var $percentDecodeBytes = percentEncoding.percentDecodeBytes;

// node_modules/happy-dom-without-node/lib/PropertySymbol.js
var abort = Symbol("abort");
var activeElement = Symbol("activeElement");
var appendFormControlItem = Symbol("appendFormControlItem");
var appendNamedItem = Symbol("appendNamedItem");
var asyncTaskManager = Symbol("asyncTaskManager");
var bodyBuffer = Symbol("bodyBuffer");
var buffer = Symbol("buffer");
var cacheID = Symbol("cacheID");
var cachedResponse = Symbol("cachedResponse");
var callbacks = Symbol("callbacks");
var captureEventListenerCount = Symbol("captureEventListenerCount");
var checked = Symbol("checked");
var childNodes = Symbol("childNodes");
var children = Symbol("children");
var classList = Symbol("classList");
var computedStyle = Symbol("computedStyle");
var connectToNode = Symbol("connectToNode");
var contentLength = Symbol("contentLength");
var contentType = Symbol("contentType");
var cssText = Symbol("cssText");
var currentScript = Symbol("currentScript");
var currentTarget = Symbol("currentTarget");
var data = Symbol("data");
var defaultView = Symbol("defaultView");
var destroy = Symbol("destroy");
var dirtyness = Symbol("dirtyness");
var end2 = Symbol("end");
var entries = Symbol("entries");
var evaluateCSS = Symbol("evaluateCSS");
var evaluateScript = Symbol("evaluateScript");
var exceptionObserver = Symbol("exceptionObserver");
var formNode = Symbol("formNode");
var getAttributeName = Symbol("getAttributeName");
var happyDOMSettingsID = Symbol("happyDOMSettingsID");
var height = Symbol("height");
var immediatePropagationStopped = Symbol("immediatePropagationStopped");
var isFirstWrite = Symbol("isFirstWrite");
var isFirstWriteAfterOpen = Symbol("isFirstWriteAfterOpen");
var isInPassiveEventListener = Symbol("isInPassiveEventListener");
var isValidPropertyName = Symbol("isValidPropertyName");
var isValue = Symbol("isValue");
var listenerOptions = Symbol("listenerOptions");
var listeners = Symbol("listeners");
var namedItems = Symbol("namedItems");
var nextActiveElement = Symbol("nextActiveElement");
var observe = Symbol("observe");
var observedAttributes = Symbol("observedAttributes");
var observers = Symbol("observers");
var ownerDocument = Symbol("ownerDocument");
var ownerElement = Symbol("ownerElement");
var propagationStopped = Symbol("propagationStopped");
var readyStateManager = Symbol("readyStateManager");
var referrer = Symbol("referrer");
var registry = Symbol("registry");
var relList = Symbol("relList");
var removeFormControlItem = Symbol("removeFormControlItem");
var removeNamedItem = Symbol("removeNamedItem");
var removeNamedItemIndex = Symbol("removeNamedItemIndex");
var removeNamedItemWithoutConsequences = Symbol("removeNamedItemWithoutConsequences");
var resetSelection = Symbol("resetSelection");
var rootNode = Symbol("rootNode");
var selectNode = Symbol("selectNode");
var selectedness = Symbol("selectedness");
var selection = Symbol("selection");
var setNamedItemWithoutConsequences = Symbol("setNamedItemWithoutConsequences");
var setupVMContext = Symbol("setupVMContext");
var shadowRoot = Symbol("shadowRoot");
var start2 = Symbol("start");
var style2 = Symbol("style");
var target = Symbol("target");
var textAreaNode = Symbol("textAreaNode");
var unobserve = Symbol("unobserve");
var updateIndices = Symbol("updateIndices");
var updateOptionItems = Symbol("updateOptionItems");
var url = Symbol("url");
var value = Symbol("value");
var width = Symbol("width");
var window2 = Symbol("window");
var windowResizeListener = Symbol("windowResizeListener");
var mutationObservers = Symbol("mutationObservers");
var openerFrame = Symbol("openerFrame");
var openerWindow = Symbol("openerFrame");
var popup = Symbol("popup");
var isConnected = Symbol("isConnected");
var parentNode = Symbol("parentNode");
var nodeType = Symbol("nodeType");
var tagName3 = Symbol("tagName");
var prefix = Symbol("prefix");
var scrollHeight = Symbol("scrollHeight");
var scrollWidth = Symbol("scrollWidth");
var scrollTop = Symbol("scrollTop");
var scrollLeft = Symbol("scrollLeft");
var attributes = Symbol("attributes");
var namespaceURI = Symbol("namespaceURI");
var accessKey = Symbol("accessKey");
var accessKeyLabel = Symbol("accessKeyLabel");
var contentEditable = Symbol("contentEditable");
var isContentEditable = Symbol("isContentEditable");
var offsetHeight = Symbol("offsetHeight");
var offsetWidth = Symbol("offsetWidth");
var offsetLeft = Symbol("offsetLeft");
var offsetTop = Symbol("offsetTop");
var clientHeight = Symbol("clientHeight");
var clientWidth = Symbol("clientWidth");
var clientLeft = Symbol("clientLeft");
var clientTop = Symbol("clientTop");
var name = Symbol("name");
var specified = Symbol("specified");
var adoptedStyleSheets = Symbol("adoptedStyleSheets");
var implementation = Symbol("implementation");
var readyState = Symbol("readyState");
var ownerWindow = Symbol("ownerWindow");
var publicId = Symbol("publicId");
var systemId = Symbol("systemId");
var validationMessage = Symbol("validationMessage");
var validity = Symbol("validity");
var returnValue = Symbol("returnValue");
var elements = Symbol("elements");
var length = Symbol("length");
var complete = Symbol("complete");
var naturalHeight = Symbol("naturalHeight");
var naturalWidth = Symbol("naturalWidth");
var loading = Symbol("loading");
var x = Symbol("x");
var y = Symbol("y");
var defaultChecked = Symbol("defaultChecked");
var files = Symbol("files");
var sheet = Symbol("sheet");
var volume = Symbol("volume");
var paused = Symbol("paused");
var currentTime = Symbol("currentTime");
var playbackRate = Symbol("playbackRate");
var defaultPlaybackRate = Symbol("defaultPlaybackRate");
var muted = Symbol("muted");
var defaultMuted = Symbol("defaultMuted");
var preservesPitch = Symbol("preservesPitch");
var buffered = Symbol("buffered");
var duration = Symbol("duration");
var error3 = Symbol("error");
var ended = Symbol("ended");
var networkState = Symbol("networkState");
var textTracks = Symbol("textTracks");
var videoTracks = Symbol("videoTracks");
var seeking = Symbol("seeking");
var seekable = Symbol("seekable");
var played = Symbol("played");
var options2 = Symbol("options");
var content = Symbol("content");
var mode = Symbol("mode");
var host = Symbol("host");
var setURL = Symbol("setURL");
var localName = Symbol("localName");
var registedClass = Symbol("registedClass");
var nodeStream = Symbol("nodeStream");
var location = Symbol("location");
var history = Symbol("history");
var navigator2 = Symbol("navigator");
var screen = Symbol("screen");
var sessionStorage = Symbol("sessionStorage");
var localStorage = Symbol("localStorage");
var sandbox = Symbol("sandbox");
var cloneNode = Symbol("cloneNode");
var appendChild = Symbol("appendChild");
var removeChild = Symbol("removeChild");
var insertBefore = Symbol("insertBefore");
var replaceChild = Symbol("replaceChild");
var styleNode = Symbol("styleNode");
var updateSheet = Symbol("updateSheet");

// node_modules/happy-dom-without-node/lib/cookie/urilities/CookieExpireUtility.js
class CookieExpireUtility {
  static hasExpired(cookie) {
    return cookie.expires && cookie.expires.getTime() < Date.now();
  }
}

// node_modules/happy-dom-without-node/lib/cookie/enums/CookieSameSiteEnum.js
var CookieSameSiteEnum;
(function(CookieSameSiteEnum2) {
  CookieSameSiteEnum2["strict"] = "Strict";
  CookieSameSiteEnum2["lax"] = "Lax";
  CookieSameSiteEnum2["none"] = "None";
})(CookieSameSiteEnum || (CookieSameSiteEnum = {}));
var CookieSameSiteEnum_default = CookieSameSiteEnum;

// node_modules/happy-dom-without-node/lib/cookie/urilities/CookieURLUtility.js
class CookieURLUtility {
  static cookieMatchesURL(cookie, url2) {
    return (!cookie.secure || url2.protocol === "https:") && (!cookie.domain || url2.hostname.endsWith(cookie.domain)) && (!cookie.path || url2.pathname.startsWith(cookie.path)) && (cookie.sameSite === CookieSameSiteEnum_default.none && cookie.secure || cookie.originURL.hostname === url2.hostname);
  }
}

// node_modules/happy-dom-without-node/lib/cookie/CookieContainer.js
var __classPrivateFieldGet = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _CookieContainer_cookies;

class CookieContainer {
  constructor() {
    _CookieContainer_cookies.set(this, []);
  }
  addCookies(cookies) {
    const indexMap = {};
    const getKey = (cookie) => `${cookie.key}-${cookie.originURL.hostname}-${cookie.path}-${typeof cookie.value}`;
    for (let i = 0, max3 = __classPrivateFieldGet(this, _CookieContainer_cookies, "f").length;i < max3; i++) {
      indexMap[getKey(__classPrivateFieldGet(this, _CookieContainer_cookies, "f")[i])] = i;
    }
    for (const cookie of cookies) {
      if (cookie?.key) {
        const index = indexMap[getKey(cookie)];
        if (index !== undefined) {
          __classPrivateFieldGet(this, _CookieContainer_cookies, "f").splice(index, 1);
        }
        if (!CookieExpireUtility.hasExpired(cookie)) {
          indexMap[getKey(cookie)] = __classPrivateFieldGet(this, _CookieContainer_cookies, "f").length;
          __classPrivateFieldGet(this, _CookieContainer_cookies, "f").push(cookie);
        }
      }
    }
  }
  getCookies(url2 = null, httpOnly = false) {
    const cookies = [];
    for (const cookie of __classPrivateFieldGet(this, _CookieContainer_cookies, "f")) {
      if (!CookieExpireUtility.hasExpired(cookie) && (!httpOnly || !cookie.httpOnly) && (!url2 || CookieURLUtility.cookieMatchesURL(cookie, url2 || cookie.originURL))) {
        cookies.push(cookie);
      }
    }
    return cookies;
  }
}
_CookieContainer_cookies = new WeakMap;
var CookieContainer_default = CookieContainer;

// node_modules/happy-dom-without-node/lib/fetch/cache/response/ResponseCache.js
class NotSupported {
}

// node_modules/happy-dom-without-node/lib/console/enums/VirtualConsoleLogLevelEnum.js
var VirtualConsoleLogLevelEnum;
(function(VirtualConsoleLogLevelEnum2) {
  VirtualConsoleLogLevelEnum2[VirtualConsoleLogLevelEnum2["log"] = 0] = "log";
  VirtualConsoleLogLevelEnum2[VirtualConsoleLogLevelEnum2["info"] = 1] = "info";
  VirtualConsoleLogLevelEnum2[VirtualConsoleLogLevelEnum2["warn"] = 2] = "warn";
  VirtualConsoleLogLevelEnum2[VirtualConsoleLogLevelEnum2["error"] = 3] = "error";
})(VirtualConsoleLogLevelEnum || (VirtualConsoleLogLevelEnum = {}));
var VirtualConsoleLogLevelEnum_default = VirtualConsoleLogLevelEnum;

// node_modules/happy-dom-without-node/lib/nodes/node/NodeTypeEnum.js
var NodeTypeEnum;
(function(NodeTypeEnum2) {
  NodeTypeEnum2[NodeTypeEnum2["elementNode"] = 1] = "elementNode";
  NodeTypeEnum2[NodeTypeEnum2["attributeNode"] = 2] = "attributeNode";
  NodeTypeEnum2[NodeTypeEnum2["textNode"] = 3] = "textNode";
  NodeTypeEnum2[NodeTypeEnum2["cdataSectionNode"] = 4] = "cdataSectionNode";
  NodeTypeEnum2[NodeTypeEnum2["commentNode"] = 8] = "commentNode";
  NodeTypeEnum2[NodeTypeEnum2["documentNode"] = 9] = "documentNode";
  NodeTypeEnum2[NodeTypeEnum2["documentTypeNode"] = 10] = "documentTypeNode";
  NodeTypeEnum2[NodeTypeEnum2["documentFragmentNode"] = 11] = "documentFragmentNode";
  NodeTypeEnum2[NodeTypeEnum2["processingInstructionNode"] = 7] = "processingInstructionNode";
})(NodeTypeEnum || (NodeTypeEnum = {}));
var NodeTypeEnum_default = NodeTypeEnum;

// node_modules/happy-dom-without-node/lib/event/EventPhaseEnum.js
var EventPhaseEnum;
(function(EventPhaseEnum2) {
  EventPhaseEnum2[EventPhaseEnum2["none"] = 0] = "none";
  EventPhaseEnum2[EventPhaseEnum2["capturing"] = 1] = "capturing";
  EventPhaseEnum2[EventPhaseEnum2["atTarget"] = 2] = "atTarget";
  EventPhaseEnum2[EventPhaseEnum2["bubbling"] = 3] = "bubbling";
})(EventPhaseEnum || (EventPhaseEnum = {}));
var EventPhaseEnum_default = EventPhaseEnum;

// node_modules/happy-dom-without-node/lib/event/Event.js
var _a;
var _b;
var _c;
var _d;
var _e;

class Event {
  constructor(type, eventInit = null) {
    this.defaultPrevented = false;
    this.eventPhase = EventPhaseEnum_default.none;
    this.timeStamp = performance.now();
    this.NONE = EventPhaseEnum_default.none;
    this.CAPTURING_PHASE = EventPhaseEnum_default.capturing;
    this.AT_TARGET = EventPhaseEnum_default.atTarget;
    this.BUBBLING_PHASE = EventPhaseEnum_default.bubbling;
    this[_a] = false;
    this[_b] = false;
    this[_c] = null;
    this[_d] = null;
    this[_e] = false;
    this.type = type;
    this.bubbles = eventInit?.bubbles ?? false;
    this.cancelable = eventInit?.cancelable ?? false;
    this.composed = eventInit?.composed ?? false;
  }
  get target() {
    return this[target];
  }
  get currentTarget() {
    return this[currentTarget];
  }
  get cancelBubble() {
    return this[propagationStopped];
  }
  composedPath() {
    if (!this[target]) {
      return [];
    }
    const composedPath = [];
    let eventTarget = this[target];
    while (eventTarget) {
      composedPath.push(eventTarget);
      if (eventTarget.parentNode) {
        eventTarget = eventTarget.parentNode;
      } else if (this.composed && eventTarget[nodeType] === NodeTypeEnum_default.documentFragmentNode && eventTarget.host) {
        eventTarget = eventTarget.host;
      } else if (eventTarget[nodeType] === NodeTypeEnum_default.documentNode) {
        eventTarget = eventTarget[ownerWindow];
      } else {
        break;
      }
    }
    return composedPath;
  }
  initEvent(type, bubbles = false, cancelable = false) {
    this.type = type;
    this.bubbles = bubbles;
    this.cancelable = cancelable;
  }
  preventDefault() {
    if (!this[isInPassiveEventListener]) {
      this.defaultPrevented = true;
    }
  }
  stopImmediatePropagation() {
    this[immediatePropagationStopped] = true;
  }
  stopPropagation() {
    this[propagationStopped] = true;
  }
}
_a = immediatePropagationStopped, _b = propagationStopped, _c = target, _d = currentTarget, _e = isInPassiveEventListener;
var Event_default = Event;

// node_modules/happy-dom-without-node/lib/console/enums/VirtualConsoleLogTypeEnum.js
var VirtualConsoleLogTypeEnum;
(function(VirtualConsoleLogTypeEnum2) {
  VirtualConsoleLogTypeEnum2["log"] = "log";
  VirtualConsoleLogTypeEnum2["table"] = "table";
  VirtualConsoleLogTypeEnum2["trace"] = "trace";
  VirtualConsoleLogTypeEnum2["dir"] = "dir";
  VirtualConsoleLogTypeEnum2["dirxml"] = "dirxml";
  VirtualConsoleLogTypeEnum2["group"] = "group";
  VirtualConsoleLogTypeEnum2["groupCollapsed"] = "groupCollapsed";
  VirtualConsoleLogTypeEnum2["debug"] = "debug";
  VirtualConsoleLogTypeEnum2["timeLog"] = "timeLog";
  VirtualConsoleLogTypeEnum2["info"] = "info";
  VirtualConsoleLogTypeEnum2["count"] = "count";
  VirtualConsoleLogTypeEnum2["timeEnd"] = "timeEnd";
  VirtualConsoleLogTypeEnum2["warn"] = "warn";
  VirtualConsoleLogTypeEnum2["countReset"] = "countReset";
  VirtualConsoleLogTypeEnum2["error"] = "error";
  VirtualConsoleLogTypeEnum2["assert"] = "assert";
})(VirtualConsoleLogTypeEnum || (VirtualConsoleLogTypeEnum = {}));
var VirtualConsoleLogTypeEnum_default = VirtualConsoleLogTypeEnum;

// node_modules/happy-dom-without-node/lib/console/utilities/VirtualConsoleLogEntryStringifier.js
class VirtualConsoleLogEntryStringifier {
  static toString(logEntry) {
    if (this.isLogEntryCollapsed(logEntry)) {
      return "";
    }
    const tabbing = this.getLogEntryGroupTabbing(logEntry);
    let output = tabbing;
    for (const part of logEntry.message) {
      output += output !== "" && output !== tabbing ? " " : "";
      if (typeof part === "object" && (part === null || part.constructor.name === "Object" || Array.isArray(part))) {
        try {
          output += JSON.stringify(part);
        } catch (error4) {
          output += new Error("Failed to JSON stringify object in log entry.").stack.replace(/\n    at/gm, "\n    " + tabbing + "at");
        }
      } else if (typeof part === "object" && part["message"] && part["stack"]) {
        output += part["stack"].replace(/\n    at/gm, "\n    " + tabbing + "at");
      } else {
        output += this.getLogEntryIcon(logEntry) + String(part);
      }
    }
    return output + "\n";
  }
  static getLogEntryIcon(logEntry) {
    switch (logEntry.type) {
      case VirtualConsoleLogTypeEnum_default.group:
        return "\u25BC ";
      case VirtualConsoleLogTypeEnum_default.groupCollapsed:
        return "\u25B6 ";
    }
    return "";
  }
  static getLogEntryGroupTabbing(logEntry) {
    let tabs = "";
    let group = logEntry.type === VirtualConsoleLogTypeEnum_default.group || logEntry.type === VirtualConsoleLogTypeEnum_default.groupCollapsed ? logEntry.group?.parent : logEntry.group;
    while (group) {
      tabs += "  ";
      group = group.parent;
    }
    return tabs;
  }
  static isLogEntryCollapsed(logEntry) {
    let group = logEntry.type === VirtualConsoleLogTypeEnum_default.group || logEntry.type === VirtualConsoleLogTypeEnum_default.groupCollapsed ? logEntry.group?.parent : logEntry.group;
    while (group) {
      if (group.collapsed) {
        return true;
      }
      group = group.parent;
    }
    return false;
  }
}

// node_modules/happy-dom-without-node/lib/console/VirtualConsolePrinter.js
var __classPrivateFieldGet2 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = function(receiver, state, value2, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
};
var _VirtualConsolePrinter_logEntries;
var _VirtualConsolePrinter_listeners;

class VirtualConsolePrinter {
  constructor() {
    _VirtualConsolePrinter_logEntries.set(this, []);
    _VirtualConsolePrinter_listeners.set(this, { print: [], clear: [] });
  }
  print(logEntry) {
    __classPrivateFieldGet2(this, _VirtualConsolePrinter_logEntries, "f").push(logEntry);
    this.dispatchEvent(new Event_default("print"));
  }
  clear() {
    __classPrivateFieldSet(this, _VirtualConsolePrinter_logEntries, [], "f");
    this.dispatchEvent(new Event_default("clear"));
  }
  addEventListener(eventType, listener) {
    if (!__classPrivateFieldGet2(this, _VirtualConsolePrinter_listeners, "f")[eventType]) {
      throw new Error(`Event type "${eventType}" is not supported.`);
    }
    __classPrivateFieldGet2(this, _VirtualConsolePrinter_listeners, "f")[eventType].push(listener);
  }
  removeEventListener(eventType, listener) {
    if (!__classPrivateFieldGet2(this, _VirtualConsolePrinter_listeners, "f")[eventType]) {
      throw new Error(`Event type "${eventType}" is not supported.`);
    }
    const index = __classPrivateFieldGet2(this, _VirtualConsolePrinter_listeners, "f")[eventType].indexOf(listener);
    if (index !== -1) {
      __classPrivateFieldGet2(this, _VirtualConsolePrinter_listeners, "f")[eventType].splice(index, 1);
    }
  }
  dispatchEvent(event) {
    if (!__classPrivateFieldGet2(this, _VirtualConsolePrinter_listeners, "f")[event.type]) {
      throw new Error(`Event type "${event.type}" is not supported.`);
    }
    for (const listener of __classPrivateFieldGet2(this, _VirtualConsolePrinter_listeners, "f")[event.type]) {
      listener(event);
    }
  }
  read() {
    const logEntries = __classPrivateFieldGet2(this, _VirtualConsolePrinter_logEntries, "f");
    __classPrivateFieldSet(this, _VirtualConsolePrinter_logEntries, [], "f");
    return logEntries;
  }
  readAsString(logLevel = VirtualConsoleLogLevelEnum_default.log) {
    const logEntries = this.read();
    let output = "";
    for (const logEntry of logEntries) {
      if (logEntry.level >= logLevel) {
        output += VirtualConsoleLogEntryStringifier.toString(logEntry);
      }
    }
    return output;
  }
}
_VirtualConsolePrinter_logEntries = new WeakMap, _VirtualConsolePrinter_listeners = new WeakMap;
var VirtualConsolePrinter_default = VirtualConsolePrinter;

// node_modules/happy-dom-without-node/lib/async-task-manager/AsyncTaskManager.js
var TIMER = {
  setTimeout: globalThis.setTimeout.bind(globalThis),
  clearTimeout: globalThis.clearTimeout.bind(globalThis),
  clearImmediate: globalThis.clearTimeout.bind(globalThis)
};

class AsyncTaskManager {
  constructor() {
    this.runningTasks = {};
    this.runningTaskCount = 0;
    this.runningTimers = [];
    this.runningImmediates = [];
    this.waitUntilCompleteTimer = null;
    this.waitUntilCompleteResolvers = [];
  }
  waitUntilComplete() {
    return new Promise((resolve3) => {
      this.waitUntilCompleteResolvers.push(resolve3);
      this.endTask(this.startTask());
    });
  }
  abort() {
    return this.abortAll(false);
  }
  destroy() {
    return this.abortAll(true);
  }
  startTimer(timerID) {
    if (this.waitUntilCompleteTimer) {
      TIMER.clearTimeout(this.waitUntilCompleteTimer);
      this.waitUntilCompleteTimer = null;
    }
    this.runningTimers.push(timerID);
  }
  endTimer(timerID) {
    if (this.waitUntilCompleteTimer) {
      TIMER.clearTimeout(this.waitUntilCompleteTimer);
      this.waitUntilCompleteTimer = null;
    }
    const index = this.runningTimers.indexOf(timerID);
    if (index !== -1) {
      this.runningTimers.splice(index, 1);
    }
    if (!this.runningTaskCount && !this.runningTimers.length && !this.runningImmediates.length) {
      this.resolveWhenComplete();
    }
  }
  startImmediate(immediateID) {
    if (this.waitUntilCompleteTimer) {
      TIMER.clearTimeout(this.waitUntilCompleteTimer);
      this.waitUntilCompleteTimer = null;
    }
    this.runningImmediates.push(immediateID);
  }
  endImmediate(immediateID) {
    if (this.waitUntilCompleteTimer) {
      TIMER.clearTimeout(this.waitUntilCompleteTimer);
      this.waitUntilCompleteTimer = null;
    }
    const index = this.runningImmediates.indexOf(immediateID);
    if (index !== -1) {
      this.runningImmediates.splice(index, 1);
    }
    if (!this.runningTaskCount && !this.runningTimers.length && !this.runningImmediates.length) {
      this.resolveWhenComplete();
    }
  }
  startTask(abortHandler) {
    if (this.waitUntilCompleteTimer) {
      TIMER.clearTimeout(this.waitUntilCompleteTimer);
      this.waitUntilCompleteTimer = null;
    }
    const taskID = this.newTaskID();
    this.runningTasks[taskID] = abortHandler ? abortHandler : () => {
    };
    this.runningTaskCount++;
    return taskID;
  }
  endTask(taskID) {
    if (this.waitUntilCompleteTimer) {
      TIMER.clearTimeout(this.waitUntilCompleteTimer);
      this.waitUntilCompleteTimer = null;
    }
    if (this.runningTasks[taskID]) {
      delete this.runningTasks[taskID];
      this.runningTaskCount--;
    }
    if (!this.runningTaskCount && !this.runningTimers.length && !this.runningImmediates.length) {
      this.resolveWhenComplete();
    }
  }
  getTaskCount() {
    return this.runningTaskCount;
  }
  newTaskID() {
    this.constructor.taskID++;
    return this.constructor.taskID;
  }
  resolveWhenComplete() {
    if (this.runningTaskCount || this.runningTimers.length || this.runningImmediates.length) {
      return;
    }
    if (this.waitUntilCompleteTimer) {
      TIMER.clearTimeout(this.waitUntilCompleteTimer);
      this.waitUntilCompleteTimer = null;
    }
    this.waitUntilCompleteTimer = TIMER.setTimeout(() => {
      this.waitUntilCompleteTimer = null;
      if (!this.runningTaskCount && !this.runningTimers.length && !this.runningImmediates.length) {
        const resolvers = this.waitUntilCompleteResolvers;
        this.waitUntilCompleteResolvers = [];
        for (const resolver of resolvers) {
          resolver();
        }
      }
    });
  }
  abortAll(destroy2) {
    const runningTimers = this.runningTimers;
    const runningImmediates = this.runningImmediates;
    const runningTasks = this.runningTasks;
    this.runningTasks = {};
    this.runningTaskCount = 0;
    this.runningImmediates = [];
    this.runningTimers = [];
    if (this.waitUntilCompleteTimer) {
      TIMER.clearTimeout(this.waitUntilCompleteTimer);
      this.waitUntilCompleteTimer = null;
    }
    for (const immediate of runningImmediates) {
      TIMER.clearImmediate(immediate);
    }
    for (const timer of runningTimers) {
      TIMER.clearTimeout(timer);
    }
    const taskPromises = [];
    for (const key of Object.keys(runningTasks)) {
      const returnValue2 = runningTasks[key](destroy2);
      if (returnValue2 instanceof Promise) {
        taskPromises.push(returnValue2);
      }
    }
    if (taskPromises.length) {
      return Promise.all(taskPromises).then(() => this.waitUntilComplete()).catch((error4) => {
        console.error(error4);
        throw error4;
      });
    }
    return this.waitUntilComplete();
  }
}
AsyncTaskManager.taskID = 0;
var AsyncTaskManager_default = AsyncTaskManager;

// node_modules/happy-dom-without-node/lib/exception/DOMExceptionNameEnum.js
var DOMExceptionNameEnum;
(function(DOMExceptionNameEnum2) {
  DOMExceptionNameEnum2["invalidStateError"] = "InvalidStateError";
  DOMExceptionNameEnum2["indexSizeError"] = "IndexSizeError";
  DOMExceptionNameEnum2["syntaxError"] = "SyntaxError";
  DOMExceptionNameEnum2["hierarchyRequestError"] = "HierarchyRequestError";
  DOMExceptionNameEnum2["notSupportedError"] = "NotSupportedError";
  DOMExceptionNameEnum2["wrongDocumentError"] = "WrongDocumentError";
  DOMExceptionNameEnum2["invalidNodeTypeError"] = "InvalidNodeTypeError";
  DOMExceptionNameEnum2["invalidCharacterError"] = "InvalidCharacterError";
  DOMExceptionNameEnum2["notFoundError"] = "NotFoundError";
  DOMExceptionNameEnum2["securityError"] = "SecurityError";
  DOMExceptionNameEnum2["networkError"] = "NetworkError";
  DOMExceptionNameEnum2["domException"] = "DOMException";
  DOMExceptionNameEnum2["invalidAccessError"] = "InvalidAccessError";
  DOMExceptionNameEnum2["unknownError"] = "UnknownError";
  DOMExceptionNameEnum2["abortError"] = "AbortError";
  DOMExceptionNameEnum2["encodingError"] = "EncodingError";
  DOMExceptionNameEnum2["uriMismatchError"] = "URIMismatchError";
})(DOMExceptionNameEnum || (DOMExceptionNameEnum = {}));
var DOMExceptionNameEnum_default = DOMExceptionNameEnum;

// node_modules/happy-dom-without-node/lib/exception/DOMException.js
class DOMException extends Error {
  constructor(message, name2 = null) {
    super(message);
    this.name = name2 || DOMExceptionNameEnum_default.domException;
  }
}

// node_modules/happy-dom-without-node/lib/config/NamespaceURI.js
var NamespaceURI_default = {
  html: "http://www.w3.org/1999/xhtml",
  svg: "http://www.w3.org/2000/svg",
  mathML: "http://www.w3.org/1998/Math/MathML",
  xmlns: "http://www.w3.org/2000/xmlns/"
};

// node_modules/happy-dom-without-node/lib/custom-element/CustomElementRegistry.js
var __classPrivateFieldSet2 = function(receiver, state, value2, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
};
var __classPrivateFieldGet3 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _CustomElementRegistry_instances;
var _CustomElementRegistry_window;
var _CustomElementRegistry_isValidCustomElementName;
var _a2;
var _b2;
var _c2;

class CustomElementRegistry {
  constructor(window3) {
    _CustomElementRegistry_instances.add(this);
    this[_a2] = {};
    this[_b2] = new Map;
    this[_c2] = {};
    _CustomElementRegistry_window.set(this, undefined);
    __classPrivateFieldSet2(this, _CustomElementRegistry_window, window3, "f");
  }
  define(name2, elementClass, options3) {
    if (!__classPrivateFieldGet3(this, _CustomElementRegistry_instances, "m", _CustomElementRegistry_isValidCustomElementName).call(this, name2)) {
      throw new DOMException(`Failed to execute 'define' on 'CustomElementRegistry': "${name2}" is not a valid custom element name`);
    }
    if (this[registry][name2]) {
      throw new DOMException(`Failed to execute 'define' on 'CustomElementRegistry': the name "${name2}" has already been used with this registry`);
    }
    if (this[registedClass].has(elementClass)) {
      throw new DOMException("Failed to execute 'define' on 'CustomElementRegistry': this constructor has already been used with this registry");
    }
    const tagName4 = name2.toUpperCase();
    elementClass[ownerDocument] = __classPrivateFieldGet3(this, _CustomElementRegistry_window, "f").document;
    elementClass[tagName3] = tagName4;
    elementClass[localName] = name2;
    elementClass[namespaceURI] = NamespaceURI_default.html;
    this[registry][name2] = {
      elementClass,
      extends: options3 && options3.extends ? options3.extends.toLowerCase() : null
    };
    this[registedClass].set(elementClass, name2);
    if (elementClass.prototype.attributeChangedCallback) {
      elementClass[observedAttributes] = elementClass.observedAttributes;
    }
    if (this[callbacks][name2]) {
      const callbacks2 = this[callbacks][name2];
      delete this[callbacks][name2];
      for (const callback of callbacks2) {
        callback();
      }
    }
  }
  get(name2) {
    return this[registry][name2]?.elementClass;
  }
  upgrade(_root) {
  }
  whenDefined(name2) {
    if (!__classPrivateFieldGet3(this, _CustomElementRegistry_instances, "m", _CustomElementRegistry_isValidCustomElementName).call(this, name2)) {
      return Promise.reject(new DOMException(`Invalid custom element name: "${name2}"`));
    }
    if (this.get(name2)) {
      return Promise.resolve();
    }
    return new Promise((resolve3) => {
      this[callbacks][name2] = this[callbacks][name2] || [];
      this[callbacks][name2].push(resolve3);
    });
  }
  getName(elementClass) {
    return this[registedClass].get(elementClass) || null;
  }
  [(_CustomElementRegistry_window = new WeakMap, _CustomElementRegistry_instances = new WeakSet, _a2 = registry, _b2 = registedClass, _c2 = callbacks, destroy)]() {
    for (const entity of Object.values(this[registry])) {
      entity.elementClass[ownerDocument] = null;
    }
    this[registry] = {};
    this[registedClass] = new Map;
    this[callbacks] = {};
  }
}
_CustomElementRegistry_isValidCustomElementName = function _CustomElementRegistry_isValidCustomElementName2(name2) {
  const PCENChar = "[-_.]|[0-9]|[a-z]|\xB7|[\xC0-\xD6]|[\xD8-\xF6]" + "|[\xF8-\u037D]|[\u037F-\u1FFF]" + "|[\u200C-\u200D]|[\u203F-\u2040]|[\u2070-\u218F]" + "|[\u2C00-\u2FEF]|[\u3001-\uD7FF]" + "|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800\uDC00-\uDB7F\uDFFF]";
  const PCEN = new RegExp(`^[a-z](${PCENChar})*-(${PCENChar})*\$`, "u");
  const reservedNames = [
    "annotation-xml",
    "color-profile",
    "font-face",
    "font-face-src",
    "font-face-uri",
    "font-face-format",
    "font-face-name",
    "missing-glyph"
  ];
  return PCEN.test(name2) && !reservedNames.includes(name2);
};
var CustomElementRegistry_default = CustomElementRegistry;

// node_modules/happy-dom-without-node/lib/event/UIEvent.js
class UIEvent extends Event_default {
  constructor(type, eventInit = null) {
    super(type, eventInit);
    this.layerX = 0;
    this.layerY = 0;
    this.pageX = 0;
    this.pageY = 0;
    this.detail = eventInit?.detail ?? 0;
    this.view = eventInit?.view ?? null;
  }
}
UIEvent.NONE = 0;
UIEvent.CAPTURING_PHASE = 1;
UIEvent.AT_TARGET = 2;
UIEvent.BUBBLING_PHASE = 3;
var UIEvent_default = UIEvent;

// node_modules/happy-dom-without-node/lib/event/events/ErrorEvent.js
class ErrorEvent extends UIEvent_default {
  constructor(type, eventInit = null) {
    super(type, eventInit);
    this.message = eventInit?.message ?? "";
    this.filename = eventInit?.filename ?? "";
    this.lineno = eventInit?.lineno ?? 0;
    this.colno = eventInit?.colno ?? 0;
    this.error = eventInit?.error ?? null;
  }
}

// node_modules/happy-dom-without-node/lib/window/WindowErrorUtility.js
class WindowErrorUtility {
  static captureError(elementOrWindow, callback, cleanup) {
    let result = null;
    try {
      result = callback();
    } catch (error4) {
      this.dispatchError(elementOrWindow, error4);
      if (cleanup) {
        cleanup();
      }
    }
    if (result && result instanceof Promise) {
      result.catch((error4) => {
        this.dispatchError(elementOrWindow, error4);
        if (cleanup) {
          cleanup();
        }
      });
    }
    return result;
  }
  static dispatchError(elementOrWindow, error4) {
    if (elementOrWindow.console) {
      elementOrWindow.console.error(error4);
      elementOrWindow.dispatchEvent(new ErrorEvent("error", { message: error4.message, error: error4 }));
    } else {
      elementOrWindow[ownerDocument][defaultView].console.error(error4);
      elementOrWindow.dispatchEvent(new ErrorEvent("error", { message: error4.message, error: error4 }));
    }
  }
}

// node_modules/happy-dom-without-node/lib/window/WindowBrowserSettingsReader.js
var __classPrivateFieldGet4 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _a3;
var _WindowBrowserSettingsReader_settings;

class WindowBrowserSettingsReader {
  static getSettings(window3) {
    const id = window3[happyDOMSettingsID];
    if (id === undefined || !__classPrivateFieldGet4(this, _a3, "f", _WindowBrowserSettingsReader_settings)[id]) {
      return null;
    }
    return __classPrivateFieldGet4(this, _a3, "f", _WindowBrowserSettingsReader_settings)[id];
  }
  static setSettings(window3, settings) {
    if (window3[happyDOMSettingsID] !== undefined) {
      return;
    }
    window3[happyDOMSettingsID] = __classPrivateFieldGet4(this, _a3, "f", _WindowBrowserSettingsReader_settings).length;
    __classPrivateFieldGet4(this, _a3, "f", _WindowBrowserSettingsReader_settings).push(settings);
  }
  static removeSettings(window3) {
    const id = window3[happyDOMSettingsID];
    if (id !== undefined && __classPrivateFieldGet4(this, _a3, "f", _WindowBrowserSettingsReader_settings)[id]) {
      delete __classPrivateFieldGet4(this, _a3, "f", _WindowBrowserSettingsReader_settings)[id];
    }
    delete window3[happyDOMSettingsID];
  }
}
_a3 = WindowBrowserSettingsReader;
_WindowBrowserSettingsReader_settings = { value: [] };
var WindowBrowserSettingsReader_default = WindowBrowserSettingsReader;

// node_modules/happy-dom-without-node/lib/browser/enums/BrowserErrorCaptureEnum.js
var BrowserErrorCaptureEnum;
(function(BrowserErrorCaptureEnum2) {
  BrowserErrorCaptureEnum2["tryAndCatch"] = "tryAndCatch";
  BrowserErrorCaptureEnum2["processLevel"] = "processLevel";
  BrowserErrorCaptureEnum2["disabled"] = "disabled";
})(BrowserErrorCaptureEnum || (BrowserErrorCaptureEnum = {}));
var BrowserErrorCaptureEnum_default = BrowserErrorCaptureEnum;

// node_modules/happy-dom-without-node/lib/event/EventTarget.js
var __classPrivateFieldGet5 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _EventTarget_instances;
var _EventTarget_getWindow;
var _a4;
var _b3;

class EventTarget {
  constructor() {
    _EventTarget_instances.add(this);
    this[_a4] = {};
    this[_b3] = {};
  }
  get [(_EventTarget_instances = new WeakSet, _a4 = listeners, _b3 = listenerOptions, Symbol.toStringTag)]() {
    return "EventTarget";
  }
  addEventListener(type, listener, options3) {
    const listenerOptions2 = typeof options3 === "boolean" ? { capture: options3 } : options3 || null;
    this[listeners][type] = this[listeners][type] || [];
    this[listenerOptions][type] = this[listenerOptions][type] || [];
    if (this[listeners][type].includes(listener)) {
      return;
    }
    this[listeners][type].push(listener);
    this[listenerOptions][type].push(listenerOptions2);
    if (listenerOptions2 && listenerOptions2.capture) {
      const window3 = __classPrivateFieldGet5(this, _EventTarget_instances, "m", _EventTarget_getWindow).call(this);
      if (window3) {
        window3[captureEventListenerCount][type] = window3[captureEventListenerCount][type] ?? 0;
        window3[captureEventListenerCount][type]++;
      }
    }
  }
  removeEventListener(type, listener) {
    if (this[listeners][type]) {
      const index = this[listeners][type].indexOf(listener);
      if (index !== -1) {
        if (this[listenerOptions][type][index] && this[listenerOptions][type][index].capture) {
          const window3 = __classPrivateFieldGet5(this, _EventTarget_instances, "m", _EventTarget_getWindow).call(this);
          if (window3 && window3[captureEventListenerCount][type]) {
            window3[captureEventListenerCount][type]--;
          }
        }
        this[listeners][type].splice(index, 1);
        this[listenerOptions][type].splice(index, 1);
      }
    }
  }
  dispatchEvent(event) {
    const window3 = __classPrivateFieldGet5(this, _EventTarget_instances, "m", _EventTarget_getWindow).call(this);
    if (event.eventPhase === EventPhaseEnum_default.none) {
      event[target] = this;
      const composedPath = event.composedPath();
      if (window3 && window3[captureEventListenerCount][event.type]) {
        event.eventPhase = EventPhaseEnum_default.capturing;
        for (let i = composedPath.length - 1;i >= 0; i--) {
          composedPath[i].dispatchEvent(event);
          if (event[propagationStopped] || event[immediatePropagationStopped]) {
            break;
          }
        }
      }
      event.eventPhase = EventPhaseEnum_default.atTarget;
      this.dispatchEvent(event);
      if (event.bubbles && !event[propagationStopped] && !event[immediatePropagationStopped]) {
        event.eventPhase = EventPhaseEnum_default.bubbling;
        for (let i = 1;i < composedPath.length; i++) {
          composedPath[i].dispatchEvent(event);
          if (event[propagationStopped] || event[immediatePropagationStopped]) {
            break;
          }
        }
      }
      event.eventPhase = EventPhaseEnum_default.none;
      return !(event.cancelable && event.defaultPrevented);
    }
    event[currentTarget] = this;
    const browserSettings = window3 ? WindowBrowserSettingsReader_default.getSettings(window3) : null;
    if (event.eventPhase !== EventPhaseEnum_default.capturing) {
      const onEventName = "on" + event.type.toLowerCase();
      if (typeof this[onEventName] === "function") {
        if (window3 && (this !== window3 || event.type !== "error") && !browserSettings?.disableErrorCapturing && browserSettings?.errorCapture === BrowserErrorCaptureEnum_default.tryAndCatch) {
          WindowErrorUtility.captureError(window3, this[onEventName].bind(this, event));
        } else {
          this[onEventName].call(this, event);
        }
      }
    }
    if (this[listeners][event.type]) {
      const listeners2 = this[listeners][event.type].slice();
      const listenerOptions2 = this[listenerOptions][event.type].slice();
      for (let i = 0, max3 = listeners2.length;i < max3; i++) {
        const listener = listeners2[i];
        const options3 = listenerOptions2[i];
        if (options3?.capture && event.eventPhase !== EventPhaseEnum_default.capturing || !options3?.capture && event.eventPhase === EventPhaseEnum_default.capturing) {
          continue;
        }
        if (options3?.passive) {
          event[isInPassiveEventListener] = true;
        }
        if (window3 && (this !== window3 || event.type !== "error") && !browserSettings?.disableErrorCapturing && browserSettings?.errorCapture === BrowserErrorCaptureEnum_default.tryAndCatch) {
          if (listener.handleEvent) {
            WindowErrorUtility.captureError(window3, listener.handleEvent.bind(listener, event));
          } else {
            WindowErrorUtility.captureError(window3, listener.bind(this, event));
          }
        } else {
          if (listener.handleEvent) {
            listener.handleEvent(event);
          } else {
            listener.call(this, event);
          }
        }
        event[isInPassiveEventListener] = false;
        if (options3?.once) {
          listeners2.splice(i, 1);
          listenerOptions2.splice(i, 1);
          this.removeEventListener(event.type, listener);
          i--;
          max3--;
        }
        if (event[immediatePropagationStopped]) {
          return !(event.cancelable && event.defaultPrevented);
        }
      }
    }
    return !(event.cancelable && event.defaultPrevented);
  }
  attachEvent(type, listener) {
    this.addEventListener(type.replace("on", ""), listener);
  }
  detachEvent(type, listener) {
    this.removeEventListener(type.replace("on", ""), listener);
  }
}
_EventTarget_getWindow = function _EventTarget_getWindow2() {
  if (this[ownerDocument]) {
    return this[ownerDocument][ownerWindow];
  }
  if (this[ownerWindow]) {
    return this[ownerWindow];
  }
  if (this.document) {
    return this;
  }
  return null;
};
var EventTarget_default = EventTarget;

// node_modules/happy-dom-without-node/lib/nodes/node/NodeDocumentPositionEnum.js
var NodeDocumentPositionEnum;
(function(NodeDocumentPositionEnum2) {
  NodeDocumentPositionEnum2[NodeDocumentPositionEnum2["disconnect"] = 1] = "disconnect";
  NodeDocumentPositionEnum2[NodeDocumentPositionEnum2["preceding"] = 2] = "preceding";
  NodeDocumentPositionEnum2[NodeDocumentPositionEnum2["following"] = 4] = "following";
  NodeDocumentPositionEnum2[NodeDocumentPositionEnum2["contains"] = 8] = "contains";
  NodeDocumentPositionEnum2[NodeDocumentPositionEnum2["containedBy"] = 16] = "containedBy";
  NodeDocumentPositionEnum2[NodeDocumentPositionEnum2["implementationSpecific"] = 32] = "implementationSpecific";
})(NodeDocumentPositionEnum || (NodeDocumentPositionEnum = {}));
var NodeDocumentPositionEnum_default = NodeDocumentPositionEnum;

// node_modules/happy-dom-without-node/lib/mutation-observer/MutationRecord.js
class MutationRecord {
  constructor(init) {
    this.type = null;
    this.target = null;
    this.addedNodes = [];
    this.removedNodes = [];
    this.previousSibling = null;
    this.nextSibling = null;
    this.attributeName = null;
    this.attributeNamespace = null;
    this.oldValue = null;
    Object.assign(this, init);
  }
}

// node_modules/happy-dom-without-node/lib/mutation-observer/MutationTypeEnum.js
var MutationTypeEnum;
(function(MutationTypeEnum2) {
  MutationTypeEnum2["attributes"] = "attributes";
  MutationTypeEnum2["characterData"] = "characterData";
  MutationTypeEnum2["childList"] = "childList";
})(MutationTypeEnum || (MutationTypeEnum = {}));
var MutationTypeEnum_default = MutationTypeEnum;

// node_modules/happy-dom-without-node/lib/nodes/node/NodeUtility.js
class NodeUtility {
  static appendChild(ancestorNode, node2, options3) {
    if (node2 === ancestorNode) {
      throw new DOMException("Failed to execute 'appendChild' on 'Node': Not possible to append a node as a child of itself.");
    }
    if (!options3?.disableAncestorValidation && this.isInclusiveAncestor(node2, ancestorNode, true)) {
      throw new DOMException("Failed to execute 'appendChild' on 'Node': The new node is a parent of the node to insert to.", DOMExceptionNameEnum_default.domException);
    }
    if (node2[nodeType] === NodeTypeEnum_default.documentFragmentNode) {
      for (const child of node2[childNodes].slice()) {
        ancestorNode.appendChild(child);
      }
      return node2;
    }
    if (node2[parentNode]) {
      const index = node2[parentNode][childNodes].indexOf(node2);
      if (index !== -1) {
        node2[parentNode][childNodes].splice(index, 1);
      }
    }
    if (ancestorNode[isConnected]) {
      (ancestorNode[ownerDocument] || this)[cacheID]++;
    }
    ancestorNode[childNodes].push(node2);
    node2[connectToNode](ancestorNode);
    if (ancestorNode[observers].length > 0) {
      const record = new MutationRecord({
        target: ancestorNode,
        type: MutationTypeEnum_default.childList,
        addedNodes: [node2]
      });
      for (const observer of ancestorNode[observers]) {
        if (observer.options?.subtree) {
          node2[observe](observer);
        }
        if (observer.options?.childList) {
          observer.report(record);
        }
      }
    }
    return node2;
  }
  static removeChild(ancestorNode, node2) {
    const index = ancestorNode[childNodes].indexOf(node2);
    if (index === -1) {
      throw new DOMException("Failed to remove node. Node is not child of parent.");
    }
    if (ancestorNode[isConnected]) {
      (ancestorNode[ownerDocument] || this)[cacheID]++;
    }
    ancestorNode[childNodes].splice(index, 1);
    node2[connectToNode](null);
    if (ancestorNode[observers].length > 0) {
      const record = new MutationRecord({
        target: ancestorNode,
        type: MutationTypeEnum_default.childList,
        removedNodes: [node2]
      });
      for (const observer of ancestorNode[observers]) {
        if (observer.options?.subtree) {
          node2[unobserve](observer);
        }
        if (observer.options?.childList) {
          observer.report(record);
        }
      }
    }
    return node2;
  }
  static insertBefore(ancestorNode, newNode, referenceNode, options3) {
    if (!options3?.disableAncestorValidation && this.isInclusiveAncestor(newNode, ancestorNode, true)) {
      throw new DOMException("Failed to execute 'insertBefore' on 'Node': The new node is a parent of the node to insert to.", DOMExceptionNameEnum_default.domException);
    }
    if (newNode[nodeType] === NodeTypeEnum_default.documentFragmentNode) {
      for (const child of newNode[childNodes].slice()) {
        ancestorNode.insertBefore(child, referenceNode);
      }
      return newNode;
    }
    if (!referenceNode) {
      ancestorNode.appendChild(newNode);
      return newNode;
    }
    if (ancestorNode[childNodes].indexOf(referenceNode) === -1) {
      throw new DOMException("Failed to execute 'insertBefore' on 'Node': The node before which the new node is to be inserted is not a child of this node.");
    }
    if (ancestorNode[isConnected]) {
      (ancestorNode[ownerDocument] || this)[cacheID]++;
    }
    if (newNode[parentNode]) {
      const index = newNode[parentNode][childNodes].indexOf(newNode);
      if (index !== -1) {
        newNode[parentNode][childNodes].splice(index, 1);
      }
    }
    ancestorNode[childNodes].splice(ancestorNode[childNodes].indexOf(referenceNode), 0, newNode);
    newNode[connectToNode](ancestorNode);
    if (ancestorNode[observers].length > 0) {
      const record = new MutationRecord({
        target: ancestorNode,
        type: MutationTypeEnum_default.childList,
        addedNodes: [newNode]
      });
      for (const observer of ancestorNode[observers]) {
        if (observer.options?.subtree) {
          newNode[observe](observer);
        }
        if (observer.options?.childList) {
          observer.report(record);
        }
      }
    }
    return newNode;
  }
  static isTextNode(node2) {
    return node2?.[nodeType] === NodeTypeEnum_default.textNode;
  }
  static isInclusiveAncestor(ancestorNode, referenceNode, includeShadowRoots = false) {
    if (ancestorNode === null || referenceNode === null) {
      return false;
    }
    if (ancestorNode === referenceNode) {
      return true;
    }
    if (!ancestorNode[childNodes].length) {
      return false;
    }
    if (includeShadowRoots && referenceNode[isConnected] !== ancestorNode[isConnected]) {
      return false;
    }
    if (includeShadowRoots && ancestorNode === referenceNode[ownerDocument] && referenceNode[isConnected]) {
      return true;
    }
    let parent = referenceNode[parentNode];
    while (parent) {
      if (ancestorNode === parent) {
        return true;
      }
      parent = parent[parentNode] ? parent[parentNode] : includeShadowRoots && parent.host ? parent.host : null;
    }
    return false;
  }
  static isFollowing(nodeA, nodeB) {
    if (nodeA === nodeB) {
      return false;
    }
    let current = nodeB;
    while (current) {
      current = this.following(current);
      if (current === nodeA) {
        return true;
      }
    }
    return false;
  }
  static getNodeLength(node2) {
    switch (node2[nodeType]) {
      case NodeTypeEnum_default.documentTypeNode:
        return 0;
      case NodeTypeEnum_default.textNode:
      case NodeTypeEnum_default.processingInstructionNode:
      case NodeTypeEnum_default.commentNode:
        return node2.data.length;
      default:
        return node2[childNodes].length;
    }
  }
  static following(node2, root) {
    const firstChild = node2.firstChild;
    if (firstChild) {
      return firstChild;
    }
    let current = node2;
    while (current) {
      if (current === root) {
        return null;
      }
      const nextSibling = current.nextSibling;
      if (nextSibling) {
        return nextSibling;
      }
      current = current[parentNode];
    }
    return null;
  }
  static nextDescendantNode(node2) {
    while (node2 && !node2.nextSibling) {
      node2 = node2[parentNode];
    }
    if (!node2) {
      return null;
    }
    return node2.nextSibling;
  }
  static attributeListsEqual(elementA, elementB) {
    for (let i = 0, max3 = elementA[attributes].length;i < max3; i++) {
      const attributeA = elementA[attributes][i];
      const attributeB = elementB[attributes].getNamedItemNS(attributeA[namespaceURI], attributeA.localName);
      if (!attributeB || attributeB[value] !== attributeA[value]) {
        return false;
      }
    }
    return true;
  }
  static isEqualNode(nodeA, nodeB) {
    if (nodeA[nodeType] !== nodeB[nodeType]) {
      return false;
    }
    switch (nodeA[nodeType]) {
      case NodeTypeEnum_default.documentTypeNode:
        const documentTypeA = nodeA;
        const documentTypeB = nodeB;
        if (documentTypeA.name !== documentTypeB.name || documentTypeA.publicId !== documentTypeB.publicId || documentTypeA.systemId !== documentTypeB.systemId) {
          return false;
        }
        break;
      case NodeTypeEnum_default.elementNode:
        const elementA = nodeA;
        const elementB = nodeB;
        if (elementA[namespaceURI] !== elementB[namespaceURI] || elementA[prefix] !== elementB[prefix] || elementA.localName !== elementB.localName || elementA[attributes].length !== elementB[attributes].length) {
          return false;
        }
        break;
      case NodeTypeEnum_default.attributeNode:
        const attributeA = nodeA;
        const attributeB = nodeB;
        if (attributeA[namespaceURI] !== attributeB[namespaceURI] || attributeA.localName !== attributeB.localName || attributeA[value] !== attributeB[value]) {
          return false;
        }
        break;
      case NodeTypeEnum_default.processingInstructionNode:
        const processingInstructionA = nodeA;
        const processingInstructionB = nodeB;
        if (processingInstructionA.target !== processingInstructionB.target || processingInstructionA.data !== processingInstructionB.data) {
          return false;
        }
        break;
      case NodeTypeEnum_default.textNode:
      case NodeTypeEnum_default.commentNode:
        const textOrCommentA = nodeA;
        const textOrCommentB = nodeB;
        if (textOrCommentA.data !== textOrCommentB.data) {
          return false;
        }
        break;
    }
    if (nodeA[nodeType] === NodeTypeEnum_default.elementNode && !NodeUtility.attributeListsEqual(nodeA, nodeB)) {
      return false;
    }
    if (nodeA[childNodes].length !== nodeB[childNodes].length) {
      return false;
    }
    for (let i = 0;i < nodeA[childNodes].length; i++) {
      const childNodeA = nodeA[childNodes][i];
      const childNodeB = nodeB[childNodes][i];
      if (!NodeUtility.isEqualNode(childNodeA, childNodeB)) {
        return false;
      }
    }
    return true;
  }
}

// node_modules/happy-dom-without-node/lib/nodes/node/NodeList.js
class NodeList extends Array {
  get [Symbol.toStringTag]() {
    return this.constructor.name;
  }
  item(index) {
    return index >= 0 && this[index] ? this[index] : null;
  }
}

// node_modules/happy-dom-without-node/lib/nodes/NodeFactory.js
class NodeFactory {
  static createNode(ownerDocument2, nodeClass, ...args) {
    this.ownerDocuments.push(ownerDocument2);
    return new nodeClass(...args);
  }
  static pullOwnerDocument() {
    return this.ownerDocuments.pop();
  }
}
NodeFactory.ownerDocuments = [];
var NodeFactory_default = NodeFactory;

// node_modules/happy-dom-without-node/lib/nodes/node/Node.js
var _a5;
var _b4;
var _c3;
var _d2;
var _e2;
var _f;
var _g;
var _h;
var _j;

class Node2 extends EventTarget_default {
  constructor() {
    super();
    this[_a5] = false;
    this[_b4] = null;
    this[_c3] = null;
    this[_d2] = null;
    this[_e2] = null;
    this[_f] = null;
    this[_g] = null;
    this[_h] = [];
    this[_j] = new NodeList;
    if (this.constructor[ownerDocument] !== undefined) {
      this[ownerDocument] = this.constructor[ownerDocument];
    } else {
      const ownerDocument2 = NodeFactory_default.pullOwnerDocument();
      if (!ownerDocument2) {
        throw new Error('Failed to construct "Node": No owner document in queue. Please use "NodeFactory" to create instances of a Node.');
      }
      this[ownerDocument] = ownerDocument2;
    }
  }
  get [(ownerDocument, _a5 = isConnected, ownerDocument, _b4 = parentNode, nodeType, _c3 = rootNode, _d2 = formNode, _e2 = selectNode, _f = textAreaNode, _g = styleNode, _h = observers, _j = childNodes, Symbol.toStringTag)]() {
    return this.constructor.name;
  }
  get isConnected() {
    return this[isConnected];
  }
  get ownerDocument() {
    return this[ownerDocument];
  }
  get parentNode() {
    return this[parentNode];
  }
  get nodeType() {
    return this[nodeType];
  }
  get childNodes() {
    return this[childNodes];
  }
  get textContent() {
    return null;
  }
  set textContent(_textContent) {
  }
  get nodeValue() {
    return null;
  }
  set nodeValue(_nodeValue) {
  }
  get nodeName() {
    return "";
  }
  get previousSibling() {
    if (this[parentNode]) {
      const index = this[parentNode][childNodes].indexOf(this);
      if (index > 0) {
        return this[parentNode][childNodes][index - 1];
      }
    }
    return null;
  }
  get nextSibling() {
    if (this[parentNode]) {
      const index = this[parentNode][childNodes].indexOf(this);
      if (index > -1 && index + 1 < this[parentNode][childNodes].length) {
        return this[parentNode][childNodes][index + 1];
      }
    }
    return null;
  }
  get firstChild() {
    if (this[childNodes].length > 0) {
      return this[childNodes][0];
    }
    return null;
  }
  get lastChild() {
    if (this[childNodes].length > 0) {
      return this[childNodes][this[childNodes].length - 1];
    }
    return null;
  }
  get parentElement() {
    let parent = this[parentNode];
    while (parent && parent[nodeType] !== NodeTypeEnum_default.elementNode) {
      parent = parent[parentNode];
    }
    return parent;
  }
  get baseURI() {
    const base = this[ownerDocument].querySelector("base");
    if (base) {
      return base.href;
    }
    return this[ownerDocument][ownerWindow].location.href;
  }
  hasChildNodes() {
    return this[childNodes].length > 0;
  }
  contains(otherNode) {
    if (otherNode === undefined) {
      return false;
    }
    return NodeUtility.isInclusiveAncestor(this, otherNode);
  }
  getRootNode(options3) {
    if (!this[isConnected]) {
      return this;
    }
    if (this[rootNode] && !options3?.composed) {
      return this[rootNode];
    }
    return this[ownerDocument];
  }
  cloneNode(deep = false) {
    return this[cloneNode](deep);
  }
  appendChild(node2) {
    return this[appendChild](node2);
  }
  removeChild(node2) {
    return this[removeChild](node2);
  }
  insertBefore(newNode, referenceNode) {
    if (arguments.length < 2) {
      throw new TypeError(`Failed to execute 'insertBefore' on 'Node': 2 arguments required, but only ${arguments.length} present.`);
    }
    return this[insertBefore](newNode, referenceNode);
  }
  replaceChild(newChild, oldChild) {
    return this[replaceChild](newChild, oldChild);
  }
  [cloneNode](deep = false) {
    const clone = NodeFactory_default.createNode(this[ownerDocument], this.constructor);
    if (clone[childNodes].length) {
      for (const node2 of clone[childNodes].slice()) {
        node2[parentNode].removeChild(node2);
      }
    }
    if (deep) {
      for (const childNode of this[childNodes]) {
        const childClone = childNode.cloneNode(true);
        childClone[parentNode] = clone;
        clone[childNodes].push(childClone);
      }
    }
    return clone;
  }
  [appendChild](node2) {
    return NodeUtility.appendChild(this, node2);
  }
  [removeChild](node2) {
    return NodeUtility.removeChild(this, node2);
  }
  [insertBefore](newNode, referenceNode) {
    return NodeUtility.insertBefore(this, newNode, referenceNode);
  }
  [replaceChild](newChild, oldChild) {
    this.insertBefore(newChild, oldChild);
    this.removeChild(oldChild);
    return oldChild;
  }
  isEqualNode(node2) {
    return NodeUtility.isEqualNode(this, node2);
  }
  toString() {
    return `[object ${this.constructor.name}]`;
  }
  [observe](listener) {
    this[observers].push(listener);
    if (listener.options.subtree) {
      for (const node2 of this[childNodes]) {
        node2[observe](listener);
      }
    }
  }
  [unobserve](listener) {
    const index = this[observers].indexOf(listener);
    if (index !== -1) {
      this[observers].splice(index, 1);
    }
    if (listener.options.subtree) {
      for (const node2 of this[childNodes]) {
        node2[unobserve](listener);
      }
    }
  }
  [connectToNode](parentNode2 = null) {
    const isConnected2 = !!parentNode2 && parentNode2[isConnected];
    const formNode2 = this[formNode];
    const selectNode2 = this[selectNode];
    const textAreaNode2 = this[textAreaNode];
    const styleNode2 = this[styleNode];
    if (this[nodeType] !== NodeTypeEnum_default.documentFragmentNode) {
      this[parentNode] = parentNode2;
      this[rootNode] = isConnected2 && parentNode2 ? parentNode2[rootNode] : null;
      if (this["tagName"] !== "FORM") {
        this[formNode] = parentNode2 ? parentNode2[formNode] : null;
      }
      if (this["tagName"] !== "SELECT") {
        this[selectNode] = parentNode2 ? parentNode2[selectNode] : null;
      }
      if (this["tagName"] !== "TEXTAREA") {
        this[textAreaNode] = parentNode2 ? parentNode2[textAreaNode] : null;
      }
      if (this["tagName"] !== "STYLE") {
        this[styleNode] = parentNode2 ? parentNode2[styleNode] : null;
      }
    }
    if (this[isConnected] !== isConnected2) {
      this[isConnected] = isConnected2;
      if (!isConnected2) {
        if (this[ownerDocument][activeElement] === this) {
          this[ownerDocument][activeElement] = null;
        }
      }
      if (isConnected2 && this.connectedCallback) {
        const result = this.connectedCallback();
        if (result instanceof Promise) {
          const asyncTaskManager2 = this[ownerDocument][ownerWindow][asyncTaskManager];
          const taskID = asyncTaskManager2.startTask();
          result.then(() => asyncTaskManager2.endTask(taskID)).catch(() => asyncTaskManager2.endTask(taskID));
        }
      } else if (!isConnected2 && this.disconnectedCallback) {
        this.disconnectedCallback();
      }
      for (const child of this[childNodes]) {
        child[connectToNode](this);
      }
      if (this[shadowRoot]) {
        this[shadowRoot][connectToNode](this);
      }
    } else if (formNode2 !== this[formNode] || selectNode2 !== this[selectNode] || textAreaNode2 !== this[textAreaNode] || styleNode2 !== this[styleNode]) {
      for (const child of this[childNodes]) {
        child[connectToNode](this);
      }
    }
  }
  compareDocumentPosition(otherNode) {
    if (this === otherNode) {
      return 0;
    }
    let node1 = otherNode;
    let node2 = this;
    let attr1 = null;
    let attr2 = null;
    if (node1[nodeType] === NodeTypeEnum_default.attributeNode) {
      attr1 = node1;
      node1 = attr1[ownerElement];
    }
    if (node2[nodeType] === NodeTypeEnum_default.attributeNode) {
      attr2 = node2;
      node2 = attr2[ownerElement];
      if (attr1 !== null && node1 !== null && node2 === node1) {
        for (const attr of Object.values(node2[attributes])) {
          if (NodeUtility.isEqualNode(attr, attr1)) {
            return Node2.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC | Node2.DOCUMENT_POSITION_PRECEDING;
          }
          if (NodeUtility.isEqualNode(attr, attr2)) {
            return Node2.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC | Node2.DOCUMENT_POSITION_FOLLOWING;
          }
        }
      }
    }
    const node2Ancestors = [];
    let node2Ancestor = node2;
    while (node2Ancestor) {
      if (node2Ancestor === node1) {
        return Node2.DOCUMENT_POSITION_CONTAINS | Node2.DOCUMENT_POSITION_PRECEDING;
      }
      node2Ancestors.push(node2Ancestor);
      node2Ancestor = node2Ancestor[parentNode];
    }
    const node1Ancestors = [];
    let node1Ancestor = node1;
    while (node1Ancestor) {
      if (node1Ancestor === node2) {
        return Node2.DOCUMENT_POSITION_CONTAINED_BY | Node2.DOCUMENT_POSITION_FOLLOWING;
      }
      node1Ancestors.push(node1Ancestor);
      node1Ancestor = node1Ancestor[parentNode];
    }
    const reverseArrayIndex = (array, reverseIndex) => {
      return array[array.length - 1 - reverseIndex];
    };
    const root = reverseArrayIndex(node2Ancestors, 0);
    if (!root || root !== reverseArrayIndex(node1Ancestors, 0)) {
      return Node2.DOCUMENT_POSITION_DISCONNECTED | Node2.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC | Node2.DOCUMENT_POSITION_FOLLOWING;
    }
    let commonAncestorIndex = 0;
    const ancestorsMinLength = Math.min(node2Ancestors.length, node1Ancestors.length);
    for (let i = 0;i < ancestorsMinLength; ++i) {
      const node2Ancestor2 = reverseArrayIndex(node2Ancestors, i);
      const node1Ancestor2 = reverseArrayIndex(node1Ancestors, i);
      if (node2Ancestor2 !== node1Ancestor2) {
        break;
      }
      commonAncestorIndex = i;
    }
    const commonAncestor = reverseArrayIndex(node2Ancestors, commonAncestorIndex);
    let indexes = 0;
    let node2Index = -1;
    let node1Index = -1;
    const node2Node = reverseArrayIndex(node2Ancestors, commonAncestorIndex + 1);
    const node1Node = reverseArrayIndex(node1Ancestors, commonAncestorIndex + 1);
    const computeNodeIndexes = (nodes) => {
      for (const childNode of nodes) {
        computeNodeIndexes(childNode[childNodes]);
        if (childNode === node2Node) {
          node2Index = indexes;
        } else if (childNode === node1Node) {
          node1Index = indexes;
        }
        if (node2Index !== -1 && node1Index !== -1) {
          break;
        }
        indexes++;
      }
    };
    computeNodeIndexes(commonAncestor[childNodes]);
    return node1Index < node2Index ? Node2.DOCUMENT_POSITION_PRECEDING : Node2.DOCUMENT_POSITION_FOLLOWING;
  }
  normalize() {
    let child = this.firstChild;
    while (child) {
      if (NodeUtility.isTextNode(child)) {
        while (NodeUtility.isTextNode(child.nextSibling)) {
          child.data += child.nextSibling.data;
          child.nextSibling.remove();
        }
        if (!child.data.length) {
          const node2 = child;
          child = child.nextSibling;
          node2.remove();
          continue;
        }
      } else {
        child.normalize();
      }
      child = child.nextSibling;
    }
  }
  isSameNode(node2) {
    return this === node2;
  }
}
Node2.ELEMENT_NODE = NodeTypeEnum_default.elementNode;
Node2.ATTRIBUTE_NODE = NodeTypeEnum_default.attributeNode;
Node2.TEXT_NODE = NodeTypeEnum_default.textNode;
Node2.CDATA_SECTION_NODE = NodeTypeEnum_default.cdataSectionNode;
Node2.COMMENT_NODE = NodeTypeEnum_default.commentNode;
Node2.DOCUMENT_NODE = NodeTypeEnum_default.documentNode;
Node2.DOCUMENT_TYPE_NODE = NodeTypeEnum_default.documentTypeNode;
Node2.DOCUMENT_FRAGMENT_NODE = NodeTypeEnum_default.documentFragmentNode;
Node2.PROCESSING_INSTRUCTION_NODE = NodeTypeEnum_default.processingInstructionNode;
Node2.DOCUMENT_POSITION_CONTAINED_BY = NodeDocumentPositionEnum_default.containedBy;
Node2.DOCUMENT_POSITION_CONTAINS = NodeDocumentPositionEnum_default.contains;
Node2.DOCUMENT_POSITION_DISCONNECTED = NodeDocumentPositionEnum_default.disconnect;
Node2.DOCUMENT_POSITION_FOLLOWING = NodeDocumentPositionEnum_default.following;
Node2.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = NodeDocumentPositionEnum_default.implementationSpecific;
Node2.DOCUMENT_POSITION_PRECEDING = NodeDocumentPositionEnum_default.preceding;
var Node_default = Node2;
Node2.prototype.ELEMENT_NODE = NodeTypeEnum_default.elementNode;
Node2.prototype.ATTRIBUTE_NODE = NodeTypeEnum_default.attributeNode;
Node2.prototype.TEXT_NODE = NodeTypeEnum_default.textNode;
Node2.prototype.CDATA_SECTION_NODE = NodeTypeEnum_default.cdataSectionNode;
Node2.prototype.COMMENT_NODE = NodeTypeEnum_default.commentNode;
Node2.prototype.DOCUMENT_NODE = NodeTypeEnum_default.documentNode;
Node2.prototype.DOCUMENT_TYPE_NODE = NodeTypeEnum_default.documentTypeNode;
Node2.prototype.DOCUMENT_FRAGMENT_NODE = NodeTypeEnum_default.documentFragmentNode;
Node2.prototype.PROCESSING_INSTRUCTION_NODE = NodeTypeEnum_default.processingInstructionNode;
Node2.prototype.DOCUMENT_POSITION_CONTAINED_BY = NodeDocumentPositionEnum_default.containedBy;
Node2.prototype.DOCUMENT_POSITION_CONTAINS = NodeDocumentPositionEnum_default.contains;
Node2.prototype.DOCUMENT_POSITION_DISCONNECTED = NodeDocumentPositionEnum_default.disconnect;
Node2.prototype.DOCUMENT_POSITION_FOLLOWING = NodeDocumentPositionEnum_default.following;
Node2.prototype.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = NodeDocumentPositionEnum_default.implementationSpecific;
Node2.prototype.DOCUMENT_POSITION_PRECEDING = NodeDocumentPositionEnum_default.preceding;

// node_modules/happy-dom-without-node/lib/nodes/element/DOMRectReadOnly.js
var _a6;
var _b5;
var _c4;
var _d3;

class DOMRectReadOnly {
  constructor(x2, y2, width2, height2) {
    this[_a6] = 0;
    this[_b5] = 0;
    this[_c4] = 0;
    this[_d3] = 0;
    this[x] = x2 !== undefined && x2 !== null ? Number(x2) : 0;
    this[y] = y2 !== undefined && y2 !== null ? Number(y2) : 0;
    this[width] = width2 !== undefined && width2 !== null ? Number(width2) : 0;
    this[height] = height2 !== undefined && height2 !== null ? Number(height2) : 0;
  }
  get x() {
    return this[x];
  }
  get y() {
    return this[y];
  }
  get width() {
    return this[width];
  }
  get height() {
    return this[height];
  }
  get top() {
    return Math.min(this[y], this[y] + this[height]);
  }
  get right() {
    return Math.max(this[x], this[x] + this[width]);
  }
  get bottom() {
    return Math.max(this[y], this[y] + this[height]);
  }
  get left() {
    return Math.min(this[x], this[x] + this[width]);
  }
  toJSON() {
    return {
      x: this.x,
      y: this.y,
      width: this.width,
      height: this.height,
      top: this.top,
      right: this.right,
      bottom: this.bottom,
      left: this.left
    };
  }
  static fromRect(other) {
    return new DOMRectReadOnly(other.x, other.y, other.width, other.height);
  }
}
_a6 = x, _b5 = y, _c4 = width, _d3 = height;
var DOMRectReadOnly_default = DOMRectReadOnly;

// node_modules/happy-dom-without-node/lib/nodes/element/DOMRect.js
class DOMRect extends DOMRectReadOnly_default {
  set x(value2) {
    this[x] = value2;
  }
  get x() {
    return this[x];
  }
  set y(value2) {
    this[y] = value2;
  }
  get y() {
    return this[y];
  }
  set width(value2) {
    this[width] = value2;
  }
  get width() {
    return this[width];
  }
  set height(value2) {
    this[height] = value2;
  }
  get height() {
    return this[height];
  }
  static fromRect(other) {
    return new DOMRect(other.x, other.y, other.width, other.height);
  }
}

// node_modules/happy-dom-without-node/lib/dom-token-list/DOMTokenList.js
var __classPrivateFieldSet3 = function(receiver, state, value2, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
};
var __classPrivateFieldGet6 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _DOMTokenList_instances;
var _DOMTokenList_length;
var _DOMTokenList_ownerElement;
var _DOMTokenList_attributeName;
var _DOMTokenList_getTokenList;
var ATTRIBUTE_SPLIT_REGEXP = /[\t\f\n\r ]+/;

class DOMTokenList {
  constructor(ownerElement2, attributeName) {
    _DOMTokenList_instances.add(this);
    _DOMTokenList_length.set(this, 0);
    _DOMTokenList_ownerElement.set(this, undefined);
    _DOMTokenList_attributeName.set(this, undefined);
    __classPrivateFieldSet3(this, _DOMTokenList_ownerElement, ownerElement2, "f");
    __classPrivateFieldSet3(this, _DOMTokenList_attributeName, attributeName, "f");
    this[updateIndices]();
  }
  get length() {
    return __classPrivateFieldGet6(this, _DOMTokenList_length, "f");
  }
  set value(value2) {
    __classPrivateFieldGet6(this, _DOMTokenList_ownerElement, "f").setAttribute(__classPrivateFieldGet6(this, _DOMTokenList_attributeName, "f"), value2);
  }
  get value() {
    return __classPrivateFieldGet6(this, _DOMTokenList_ownerElement, "f").getAttribute(__classPrivateFieldGet6(this, _DOMTokenList_attributeName, "f"));
  }
  [(_DOMTokenList_length = new WeakMap, _DOMTokenList_ownerElement = new WeakMap, _DOMTokenList_attributeName = new WeakMap, _DOMTokenList_instances = new WeakSet, Symbol.iterator)]() {
    return __classPrivateFieldGet6(this, _DOMTokenList_instances, "m", _DOMTokenList_getTokenList).call(this).values();
  }
  item(index) {
    index = typeof index === "number" ? index : 0;
    return index >= 0 && this[index] ? this[index] : null;
  }
  replace(token, newToken) {
    const list2 = __classPrivateFieldGet6(this, _DOMTokenList_instances, "m", _DOMTokenList_getTokenList).call(this);
    const index = list2.indexOf(token);
    if (index === -1) {
      return false;
    }
    list2[index] = newToken;
    __classPrivateFieldGet6(this, _DOMTokenList_ownerElement, "f").setAttribute(__classPrivateFieldGet6(this, _DOMTokenList_attributeName, "f"), list2.join(" "));
    return true;
  }
  supports(_token) {
    return false;
  }
  values() {
    return __classPrivateFieldGet6(this, _DOMTokenList_instances, "m", _DOMTokenList_getTokenList).call(this).values();
  }
  entries() {
    return __classPrivateFieldGet6(this, _DOMTokenList_instances, "m", _DOMTokenList_getTokenList).call(this).entries();
  }
  forEach(callback, thisArg) {
    return __classPrivateFieldGet6(this, _DOMTokenList_instances, "m", _DOMTokenList_getTokenList).call(this).forEach(callback, thisArg);
  }
  keys() {
    return __classPrivateFieldGet6(this, _DOMTokenList_instances, "m", _DOMTokenList_getTokenList).call(this).keys();
  }
  add(...tokens2) {
    const list2 = __classPrivateFieldGet6(this, _DOMTokenList_instances, "m", _DOMTokenList_getTokenList).call(this);
    for (const token of tokens2) {
      const index = list2.indexOf(token);
      if (index === -1) {
        list2.push(token);
      } else {
        list2[index] = token;
      }
    }
    __classPrivateFieldGet6(this, _DOMTokenList_ownerElement, "f").setAttribute(__classPrivateFieldGet6(this, _DOMTokenList_attributeName, "f"), list2.join(" "));
  }
  remove(...tokens2) {
    const list2 = __classPrivateFieldGet6(this, _DOMTokenList_instances, "m", _DOMTokenList_getTokenList).call(this);
    for (const token of tokens2) {
      const index = list2.indexOf(token);
      if (index !== -1) {
        list2.splice(index, 1);
      }
    }
    __classPrivateFieldGet6(this, _DOMTokenList_ownerElement, "f").setAttribute(__classPrivateFieldGet6(this, _DOMTokenList_attributeName, "f"), list2.join(" "));
  }
  contains(className) {
    const list2 = __classPrivateFieldGet6(this, _DOMTokenList_instances, "m", _DOMTokenList_getTokenList).call(this);
    return list2.includes(className);
  }
  toggle(token, force) {
    let shouldAdd;
    if (force !== undefined) {
      shouldAdd = force;
    } else {
      shouldAdd = !this.contains(token);
    }
    if (shouldAdd) {
      this.add(token);
      return true;
    }
    this.remove(token);
    return false;
  }
  [updateIndices]() {
    const list2 = __classPrivateFieldGet6(this, _DOMTokenList_instances, "m", _DOMTokenList_getTokenList).call(this);
    for (let i = list2.length - 1, max3 = this.length;i < max3; i++) {
      delete this[i];
    }
    for (let i = 0, max3 = list2.length;i < max3; i++) {
      this[i] = list2[i];
    }
    __classPrivateFieldSet3(this, _DOMTokenList_length, list2.length, "f");
  }
  toString() {
    return this.value || "";
  }
}
_DOMTokenList_getTokenList = function _DOMTokenList_getTokenList2() {
  const attr = __classPrivateFieldGet6(this, _DOMTokenList_ownerElement, "f").getAttribute(__classPrivateFieldGet6(this, _DOMTokenList_attributeName, "f"));
  if (!attr) {
    return [];
  }
  const list2 = [];
  for (const item2 of attr.trim().split(ATTRIBUTE_SPLIT_REGEXP)) {
    if (!list2.includes(item2)) {
      list2.push(item2);
    }
  }
  return list2;
};
var DOMTokenList_default = DOMTokenList;

// node_modules/happy-dom-without-node/lib/query-selector/SelectorCombinatorEnum.js
var SelectorCombinatorEnum;
(function(SelectorCombinatorEnum2) {
  SelectorCombinatorEnum2["descendant"] = "descendant";
  SelectorCombinatorEnum2["child"] = "child";
  SelectorCombinatorEnum2["adjacentSibling"] = "adjacentSibling";
})(SelectorCombinatorEnum || (SelectorCombinatorEnum = {}));
var SelectorCombinatorEnum_default = SelectorCombinatorEnum;

// node_modules/happy-dom-without-node/lib/query-selector/SelectorItem.js
class SelectorItem {
  constructor(options3) {
    this.tagName = options3?.tagName || null;
    this.id = options3?.id || null;
    this.classNames = options3?.classNames || null;
    this.attributes = options3?.attributes || null;
    this.pseudos = options3?.pseudos || null;
    this.isPseudoElement = options3?.isPseudoElement || false;
    this.combinator = options3?.combinator || SelectorCombinatorEnum_default.descendant;
    this.ignoreErrors = options3?.ignoreErrors || false;
  }
  match(element) {
    let priorityWeight = 0;
    if (this.isPseudoElement) {
      return null;
    }
    if (this.tagName) {
      if (this.tagName !== "*" && this.tagName !== element[tagName3].toUpperCase()) {
        return null;
      }
      priorityWeight += 1;
    }
    if (this.id) {
      if (this.id !== element.id) {
        return null;
      }
      priorityWeight += 100;
    }
    if (this.classNames) {
      const result = this.matchClass(element);
      if (!result) {
        return null;
      }
      priorityWeight += result.priorityWeight;
    }
    if (this.attributes) {
      const result = this.matchAttributes(element);
      if (!result) {
        return null;
      }
      priorityWeight += result.priorityWeight;
    }
    if (this.pseudos) {
      const result = this.matchPseudo(element);
      if (!result) {
        return null;
      }
      priorityWeight += result.priorityWeight;
    }
    return { priorityWeight };
  }
  matchPseudo(element) {
    const parent = element[parentNode];
    const parentChildren = element[parentNode] ? element[parentNode][children] : [];
    if (!this.pseudos) {
      return { priorityWeight: 0 };
    }
    let priorityWeight = 0;
    for (const pseudo of this.pseudos) {
      switch (pseudo.name) {
        case "not":
        case "nth-child":
        case "nth-of-type":
        case "nth-last-child":
        case "nth-last-of-type":
        case "is":
        case "where":
          if (!pseudo.arguments) {
            if (this.ignoreErrors) {
              return null;
            }
            throw new DOMException(`Failed to execute 'matches' on '${element.constructor.name}': '${this.getSelectorString()}' is not a valid selector.`);
          }
          break;
      }
      if (!parent) {
        switch (pseudo.name) {
          case "first-child":
          case "last-child":
          case "only-child":
          case "first-of-type":
          case "last-of-type":
          case "only-of-type":
          case "nth-child":
          case "nth-of-type":
          case "nth-last-child":
          case "nth-last-of-type":
            return null;
        }
      }
      const selectorMatch = this.matchPseudoItem(element, parentChildren, pseudo);
      if (!selectorMatch) {
        return null;
      }
      priorityWeight += selectorMatch.priorityWeight;
    }
    return { priorityWeight };
  }
  matchPseudoItem(element, parentChildren, pseudo) {
    switch (pseudo.name) {
      case "first-child":
        return parentChildren[0] === element ? { priorityWeight: 10 } : null;
      case "last-child":
        return parentChildren.length && parentChildren[parentChildren.length - 1] === element ? { priorityWeight: 10 } : null;
      case "only-child":
        return parentChildren.length === 1 && parentChildren[0] === element ? { priorityWeight: 10 } : null;
      case "first-of-type":
        for (const child of parentChildren) {
          if (child[tagName3] === element[tagName3]) {
            return child === element ? { priorityWeight: 10 } : null;
          }
        }
        return null;
      case "last-of-type":
        for (let i = parentChildren.length - 1;i >= 0; i--) {
          const child = parentChildren[i];
          if (child[tagName3] === element[tagName3]) {
            return child === element ? { priorityWeight: 10 } : null;
          }
        }
        return null;
      case "only-of-type":
        let isFound = false;
        for (const child of parentChildren) {
          if (child[tagName3] === element[tagName3]) {
            if (isFound || child !== element) {
              return null;
            }
            isFound = true;
          }
        }
        return isFound ? { priorityWeight: 10 } : null;
      case "checked":
        return element[tagName3] === "INPUT" && element.checked ? { priorityWeight: 10 } : null;
      case "empty":
        return !element[children].length ? { priorityWeight: 10 } : null;
      case "root":
        return element[tagName3] === "HTML" ? { priorityWeight: 10 } : null;
      case "not":
        return !pseudo.selectorItems[0].match(element) ? { priorityWeight: 10 } : null;
      case "nth-child":
        const nthChildIndex = pseudo.selectorItems[0] ? parentChildren.filter((child) => pseudo.selectorItems[0].match(child)).indexOf(element) : parentChildren.indexOf(element);
        return nthChildIndex !== -1 && pseudo.nthFunction(nthChildIndex + 1) ? { priorityWeight: 10 } : null;
      case "nth-of-type":
        if (!element[parentNode]) {
          return null;
        }
        const nthOfTypeIndex = parentChildren.filter((child) => child[tagName3] === element[tagName3]).indexOf(element);
        return nthOfTypeIndex !== -1 && pseudo.nthFunction(nthOfTypeIndex + 1) ? { priorityWeight: 10 } : null;
      case "nth-last-child":
        const nthLastChildIndex = pseudo.selectorItems[0] ? parentChildren.filter((child) => pseudo.selectorItems[0].match(child)).reverse().indexOf(element) : parentChildren.reverse().indexOf(element);
        return nthLastChildIndex !== -1 && pseudo.nthFunction(nthLastChildIndex + 1) ? { priorityWeight: 10 } : null;
      case "nth-last-of-type":
        const nthLastOfTypeIndex = parentChildren.filter((child) => child[tagName3] === element[tagName3]).reverse().indexOf(element);
        return nthLastOfTypeIndex !== -1 && pseudo.nthFunction(nthLastOfTypeIndex + 1) ? { priorityWeight: 10 } : null;
      case "target":
        const hash3 = element[ownerDocument].location.hash;
        if (!hash3) {
          return null;
        }
        return element.isConnected && element.id === hash3.slice(1) ? { priorityWeight: 10 } : null;
      case "is":
        let priorityWeight = 0;
        for (const selectorItem of pseudo.selectorItems) {
          const match = selectorItem.match(element);
          if (match) {
            priorityWeight = match.priorityWeight;
          }
        }
        return priorityWeight ? { priorityWeight } : null;
      case "where":
        for (const selectorItem of pseudo.selectorItems) {
          if (selectorItem.match(element)) {
            return { priorityWeight: 0 };
          }
        }
        return null;
      default:
        return null;
    }
  }
  matchAttributes(element) {
    if (!this.attributes) {
      return null;
    }
    let priorityWeight = 0;
    for (const attribute of this.attributes) {
      const elementAttribute = element[attributes].getNamedItem(attribute.name);
      if (!elementAttribute) {
        return null;
      }
      priorityWeight += 10;
      if (attribute.value !== null && (elementAttribute[value] === null || attribute.regExp && !attribute.regExp.test(elementAttribute[value]) || !attribute.regExp && attribute.value !== elementAttribute[value])) {
        return null;
      }
    }
    return { priorityWeight };
  }
  matchClass(element) {
    if (!this.classNames) {
      return null;
    }
    const classList2 = element.className.split(" ");
    let priorityWeight = 0;
    for (const className of this.classNames) {
      if (!classList2.includes(className)) {
        return null;
      }
      priorityWeight += 10;
    }
    return { priorityWeight };
  }
  getSelectorString() {
    return `${this.tagName ? this.tagName.toLowerCase() : ""}${this.id ? `#${this.id}` : ""}${this.classNames ? `.${this.classNames.join(".")}` : ""}${this.attributes ? this.attributes.map((attribute) => `[${attribute.name}${attribute.value ? `${attribute.operator || ""}="${attribute.value}"` : ""}]`).join("") : ""}${this.pseudos ? this.pseudos.map((pseudo) => `:${pseudo.name}${pseudo.arguments ? `(${pseudo.arguments})` : ""}`).join("") : ""}`;
  }
}

// node_modules/happy-dom-without-node/lib/query-selector/SelectorParser.js
var SELECTOR_REGEXP = /(\*)|([a-zA-Z0-9-]+)|#((?:[a-zA-Z0-9-_]|\\.)+)|\.((?:[a-zA-Z0-9-_]|\\.)+)|\[([a-zA-Z0-9-_]+)\]|\[([a-zA-Z0-9-_]+) *([~|^$*]{0,1}) *= *["']{1}([^"']*)["']{1} *(s|i){0,1}\]|\[([a-zA-Z0-9-_]+) *([~|^$*]{0,1}) *= *([^\]]*)\]|:([a-zA-Z-]+) *\(([^)]+\)?)\)|:([a-zA-Z-]+)|::([a-zA-Z-]+)|([ ,+>]*)/g;
var ESCAPED_CHARACTER_REGEXP = /\\/g;
var NTH_FUNCTION = {
  odd: (n) => (n + 1) % 2 === 0,
  even: (n) => (n + 1) % 2 !== 0,
  alwaysFalse: () => false
};
var SPACE_REGEXP = / /g;
var SIMPLE_SELECTOR_REGEXP = /(^[a-zA-Z0-9-]+$)|(^\.[a-zA-Z0-9-_.]+$)|(^#[a-zA-Z0-9-_]+$)/;

class SelectorParser {
  static getSelectorItem(selector, options3) {
    return this.getSelectorGroups(selector, options3)[0][0];
  }
  static getSelectorGroups(selector, options3) {
    const ignoreErrors = options3?.ignoreErrors;
    if (selector === "*") {
      return [[new SelectorItem({ tagName: "*", ignoreErrors })]];
    }
    const simpleMatch = selector.match(SIMPLE_SELECTOR_REGEXP);
    if (simpleMatch) {
      if (simpleMatch[1]) {
        return [[new SelectorItem({ tagName: selector.toUpperCase(), ignoreErrors })]];
      } else if (simpleMatch[2]) {
        return [
          [new SelectorItem({ classNames: selector.replace(".", "").split("."), ignoreErrors })]
        ];
      } else if (simpleMatch[3]) {
        return [[new SelectorItem({ id: selector.replace("#", ""), ignoreErrors })]];
      }
    }
    const regexp = new RegExp(SELECTOR_REGEXP);
    let currentSelectorItem = new SelectorItem({
      combinator: SelectorCombinatorEnum_default.descendant,
      ignoreErrors
    });
    let currentGroup = [currentSelectorItem];
    const groups = [currentGroup];
    let isValid = false;
    let match;
    while (match = regexp.exec(selector)) {
      if (match[0]) {
        isValid = true;
        if (match[1]) {
          currentSelectorItem.tagName = "*";
        } else if (match[2]) {
          currentSelectorItem.tagName = match[2].toUpperCase();
        } else if (match[3]) {
          currentSelectorItem.id = match[3].replace(ESCAPED_CHARACTER_REGEXP, "");
        } else if (match[4]) {
          currentSelectorItem.classNames = currentSelectorItem.classNames || [];
          currentSelectorItem.classNames.push(match[4].replace(ESCAPED_CHARACTER_REGEXP, ""));
        } else if (match[5]) {
          currentSelectorItem.attributes = currentSelectorItem.attributes || [];
          currentSelectorItem.attributes.push({
            name: match[5].toLowerCase(),
            operator: null,
            value: null,
            modifier: null,
            regExp: null
          });
        } else if (match[6] && match[8] !== undefined) {
          currentSelectorItem.attributes = currentSelectorItem.attributes || [];
          currentSelectorItem.attributes.push({
            name: match[6].toLowerCase(),
            operator: match[7] || null,
            value: match[8].replace(ESCAPED_CHARACTER_REGEXP, ""),
            modifier: match[9] || null,
            regExp: this.getAttributeRegExp({
              operator: match[7],
              value: match[8],
              modifier: match[9]
            })
          });
        } else if (match[10] && match[12] !== undefined) {
          currentSelectorItem.attributes = currentSelectorItem.attributes || [];
          currentSelectorItem.attributes.push({
            name: match[10].toLowerCase(),
            operator: match[11] || null,
            value: match[12].replace(ESCAPED_CHARACTER_REGEXP, ""),
            modifier: null,
            regExp: this.getAttributeRegExp({ operator: match[11], value: match[12] })
          });
        } else if (match[13] && match[14]) {
          currentSelectorItem.pseudos = currentSelectorItem.pseudos || [];
          currentSelectorItem.pseudos.push(this.getPseudo(match[13], match[14], options3));
        } else if (match[15]) {
          currentSelectorItem.pseudos = currentSelectorItem.pseudos || [];
          currentSelectorItem.pseudos.push(this.getPseudo(match[15], null, options3));
        } else if (match[16]) {
          currentSelectorItem.isPseudoElement = true;
        } else if (match[17]) {
          switch (match[17].trim()) {
            case ",":
              currentSelectorItem = new SelectorItem({
                combinator: SelectorCombinatorEnum_default.descendant,
                ignoreErrors
              });
              currentGroup = [currentSelectorItem];
              groups.push(currentGroup);
              break;
            case ">":
              currentSelectorItem = new SelectorItem({
                combinator: SelectorCombinatorEnum_default.child,
                ignoreErrors
              });
              currentGroup.push(currentSelectorItem);
              break;
            case "+":
              currentSelectorItem = new SelectorItem({
                combinator: SelectorCombinatorEnum_default.adjacentSibling,
                ignoreErrors
              });
              currentGroup.push(currentSelectorItem);
              break;
            case "":
              currentSelectorItem = new SelectorItem({
                combinator: SelectorCombinatorEnum_default.descendant,
                ignoreErrors
              });
              currentGroup.push(currentSelectorItem);
              break;
          }
        }
      } else {
        break;
      }
    }
    if (!isValid) {
      if (options3?.ignoreErrors) {
        return [];
      }
      throw new DOMException(`Invalid selector: "${selector}"`);
    }
    return groups;
  }
  static getAttributeRegExp(attribute) {
    const modifier = attribute.modifier === "i" ? "i" : "";
    if (!attribute.operator || !attribute.value) {
      return null;
    }
    switch (attribute.operator) {
      case "~":
        return new RegExp(`[- ]${attribute.value}|${attribute.value}[- ]|^${attribute.value}\$`, modifier);
      case "|":
        return new RegExp(`^${attribute.value}[- ]|^${attribute.value}\$`, modifier);
      case "^":
        return new RegExp(`^${attribute.value}`, modifier);
      case "$":
        return new RegExp(`${attribute.value}\$`, modifier);
      case "*":
        return new RegExp(`${attribute.value}`, modifier);
      default:
        return null;
    }
  }
  static getPseudo(name2, args, options3) {
    const lowerName = name2.toLowerCase();
    if (!args) {
      return { name: lowerName, arguments: null, selectorItems: null, nthFunction: null };
    }
    switch (lowerName) {
      case "nth-last-child":
      case "nth-child":
        const nthOfIndex = args.indexOf(" of ");
        const nthFunction = nthOfIndex !== -1 ? args.substring(0, nthOfIndex) : args;
        const selectorItem = nthOfIndex !== -1 ? this.getSelectorItem(args.substring(nthOfIndex + 4).trim(), options3) : null;
        return {
          name: lowerName,
          arguments: args,
          selectorItems: [selectorItem],
          nthFunction: this.getPseudoNthFunction(nthFunction)
        };
      case "nth-of-type":
      case "nth-last-of-type":
        return {
          name: lowerName,
          arguments: args,
          selectorItems: null,
          nthFunction: this.getPseudoNthFunction(args)
        };
      case "not":
        return {
          name: lowerName,
          arguments: args,
          selectorItems: [this.getSelectorItem(args, options3)],
          nthFunction: null
        };
      case "is":
      case "where":
        const selectorGroups = this.getSelectorGroups(args, options3);
        const selectorItems = [];
        for (const group of selectorGroups) {
          selectorItems.push(group[0]);
        }
        return {
          name: lowerName,
          arguments: args,
          selectorItems,
          nthFunction: null
        };
      default:
        return { name: lowerName, arguments: args, selectorItems: null, nthFunction: null };
    }
  }
  static getPseudoNthFunction(args) {
    if (args === "odd") {
      return NTH_FUNCTION.odd;
    } else if (args === "even") {
      return NTH_FUNCTION.even;
    }
    const parts = args.replace(SPACE_REGEXP, "").split("n");
    let partA = parseInt(parts[0], 10) || 0;
    if (parts[0] == "-") {
      partA = -1;
    }
    if (parts.length === 1) {
      return (n) => n == partA;
    }
    let partB = parseInt(parts[1], 10) || 0;
    if (parts[0] == "+") {
      partB = 1;
    }
    if (partA >= 1 || partA <= -1) {
      if (partA >= 1) {
        if (Math.abs(partA) === 1) {
          return (n) => n > partB - 1;
        }
        return (n) => n > partB - 1 && (n + -1 * partB) % partA === 0;
      }
      if (Math.abs(partA) === 1) {
        return (n) => n < partB + 1;
      }
      return (n) => n < partB + 1 && (n + -1 * partB) % partA === 0;
    }
    if (parts[0]) {
      return (n) => n === partB;
    }
    return (n) => n > partB - 1;
  }
}

// node_modules/happy-dom-without-node/lib/query-selector/QuerySelector.js
var INVALID_SELECTOR_REGEXP = /^[.#\[]?\d|[.#]$/;

class QuerySelector {
  static querySelectorAll(node2, selector) {
    if (selector === "") {
      throw new Error(`Failed to execute 'querySelectorAll' on '${node2.constructor.name}': The provided selector is empty.`);
    }
    if (selector === null || selector === undefined) {
      return new NodeList;
    }
    if (INVALID_SELECTOR_REGEXP.test(selector)) {
      throw new Error(`Failed to execute 'querySelectorAll' on '${node2.constructor.name}': '${selector}' is not a valid selector.`);
    }
    const groups = SelectorParser.getSelectorGroups(selector);
    let matches = [];
    for (const items of groups) {
      matches = matches.concat(node2[nodeType] === NodeTypeEnum_default.elementNode ? this.findAll(node2, [node2], items) : this.findAll(null, node2[children], items));
    }
    const nodeList = new NodeList;
    const matchesMap = {};
    for (let i = 0, max3 = matches.length;i < max3; i++) {
      matchesMap[matches[i].documentPosition] = matches[i].element;
    }
    const keys = Object.keys(matchesMap).sort();
    for (let i = 0, max3 = keys.length;i < max3; i++) {
      nodeList.push(matchesMap[keys[i]]);
    }
    return nodeList;
  }
  static querySelector(node2, selector) {
    if (selector === "") {
      throw new Error(`Failed to execute 'querySelector' on '${node2.constructor.name}': The provided selector is empty.`);
    }
    if (selector === null || selector === undefined) {
      return null;
    }
    if (INVALID_SELECTOR_REGEXP.test(selector)) {
      throw new Error(`Failed to execute 'querySelector' on '${node2.constructor.name}': '${selector}' is not a valid selector.`);
    }
    for (const items of SelectorParser.getSelectorGroups(selector)) {
      const match = node2[nodeType] === NodeTypeEnum_default.elementNode ? this.findFirst(node2, [node2], items) : this.findFirst(null, node2[children], items);
      if (match) {
        return match;
      }
    }
    return null;
  }
  static matches(element, selector, options3) {
    if (!selector) {
      return null;
    }
    if (selector === "*") {
      return {
        priorityWeight: 1
      };
    }
    const ignoreErrors = options3?.ignoreErrors;
    if (INVALID_SELECTOR_REGEXP.test(selector)) {
      if (ignoreErrors) {
        return null;
      }
      throw new Error(`Failed to execute 'matches' on '${element.constructor.name}': '${selector}' is not a valid selector.`);
    }
    for (const items of SelectorParser.getSelectorGroups(selector, options3)) {
      const result = this.matchSelector(element, element, items.reverse(), 0);
      if (result) {
        return result;
      }
    }
    return null;
  }
  static matchSelector(targetElement, currentElement, selectorItems, priorityWeight = 0) {
    const selectorItem = selectorItems[0];
    const result = selectorItem.match(currentElement);
    if (result) {
      if (selectorItems.length === 1) {
        return {
          priorityWeight: priorityWeight + result.priorityWeight
        };
      }
      switch (selectorItem.combinator) {
        case SelectorCombinatorEnum_default.adjacentSibling:
          if (currentElement.previousElementSibling) {
            const match = this.matchSelector(targetElement, currentElement.previousElementSibling, selectorItems.slice(1), priorityWeight + result.priorityWeight);
            if (match) {
              return match;
            }
          }
          break;
        case SelectorCombinatorEnum_default.child:
        case SelectorCombinatorEnum_default.descendant:
          if (currentElement.parentElement) {
            const match = this.matchSelector(targetElement, currentElement.parentElement, selectorItems.slice(1), priorityWeight + result.priorityWeight);
            if (match) {
              return match;
            }
          }
          break;
      }
    }
    if (selectorItem.combinator === SelectorCombinatorEnum_default.descendant && targetElement !== currentElement && currentElement.parentElement) {
      return this.matchSelector(targetElement, currentElement.parentElement, selectorItems, priorityWeight);
    }
    return null;
  }
  static findAll(rootElement, children2, selectorItems, documentPosition) {
    const selectorItem = selectorItems[0];
    const nextSelectorItem = selectorItems[1];
    let matched = [];
    for (let i = 0, max3 = children2.length;i < max3; i++) {
      const child = children2[i];
      const position = (documentPosition ? documentPosition + ">" : "") + String.fromCharCode(i);
      if (selectorItem.match(child)) {
        if (!nextSelectorItem) {
          if (rootElement !== child) {
            matched.push({
              documentPosition: position,
              element: child
            });
          }
        } else {
          switch (nextSelectorItem.combinator) {
            case SelectorCombinatorEnum_default.adjacentSibling:
              if (child.nextElementSibling) {
                matched = matched.concat(this.findAll(rootElement, [child.nextElementSibling], selectorItems.slice(1), position));
              }
              break;
            case SelectorCombinatorEnum_default.descendant:
            case SelectorCombinatorEnum_default.child:
              matched = matched.concat(this.findAll(rootElement, child[children], selectorItems.slice(1), position));
              break;
          }
        }
      }
      if (selectorItem.combinator === SelectorCombinatorEnum_default.descendant && child[children].length) {
        matched = matched.concat(this.findAll(rootElement, child[children], selectorItems, position));
      }
    }
    return matched;
  }
  static findFirst(rootElement, children2, selectorItems) {
    const selectorItem = selectorItems[0];
    const nextSelectorItem = selectorItems[1];
    for (const child of children2) {
      if (selectorItem.match(child)) {
        if (!nextSelectorItem) {
          if (rootElement !== child) {
            return child;
          }
        } else {
          switch (nextSelectorItem.combinator) {
            case SelectorCombinatorEnum_default.adjacentSibling:
              if (child.nextElementSibling) {
                const match2 = this.findFirst(rootElement, [child.nextElementSibling], selectorItems.slice(1));
                if (match2) {
                  return match2;
                }
              }
              break;
            case SelectorCombinatorEnum_default.descendant:
            case SelectorCombinatorEnum_default.child:
              const match = this.findFirst(rootElement, child[children], selectorItems.slice(1));
              if (match) {
                return match;
              }
              break;
          }
        }
      }
      if (selectorItem.combinator === SelectorCombinatorEnum_default.descendant && child[children].length) {
        const match = this.findFirst(rootElement, child[children], selectorItems);
        if (match) {
          return match;
        }
      }
    }
    return null;
  }
}

// node_modules/happy-dom-without-node/lib/config/HTMLElementConfigContentModelEnum.js
var HTMLElementConfigContentModelEnum;
(function(HTMLElementConfigContentModelEnum2) {
  HTMLElementConfigContentModelEnum2["rawText"] = "rawText";
  HTMLElementConfigContentModelEnum2["noSelfDescendants"] = "noSelfDescendants";
  HTMLElementConfigContentModelEnum2["noFirstLevelSelfDescendants"] = "noFirstLevelSelfDescendants";
  HTMLElementConfigContentModelEnum2["noDescendants"] = "noDescendants";
  HTMLElementConfigContentModelEnum2["anyDescendants"] = "anyDescendants";
})(HTMLElementConfigContentModelEnum || (HTMLElementConfigContentModelEnum = {}));
var HTMLElementConfigContentModelEnum_default = HTMLElementConfigContentModelEnum;

// node_modules/happy-dom-without-node/lib/config/HTMLElementConfig.js
var HTMLElementConfig_default = {
  a: {
    className: "HTMLAnchorElement",
    localName: "a",
    tagName: "A",
    contentModel: HTMLElementConfigContentModelEnum_default.noSelfDescendants
  },
  abbr: {
    className: "HTMLElement",
    localName: "abbr",
    tagName: "ABBR",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  address: {
    className: "HTMLElement",
    localName: "address",
    tagName: "ADDRESS",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  area: {
    className: "HTMLElement",
    localName: "area",
    tagName: "AREA",
    contentModel: HTMLElementConfigContentModelEnum_default.noDescendants
  },
  article: {
    className: "HTMLElement",
    localName: "article",
    tagName: "ARTICLE",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  aside: {
    className: "HTMLElement",
    localName: "aside",
    tagName: "ASIDE",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  audio: {
    className: "HTMLAudioElement",
    localName: "audio",
    tagName: "AUDIO",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  b: {
    className: "HTMLElement",
    localName: "b",
    tagName: "B",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  base: {
    className: "HTMLBaseElement",
    localName: "base",
    tagName: "BASE",
    contentModel: HTMLElementConfigContentModelEnum_default.noDescendants
  },
  bdi: {
    className: "HTMLElement",
    localName: "bdi",
    tagName: "BDI",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  bdo: {
    className: "HTMLElement",
    localName: "bdo",
    tagName: "BDO",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  blockquaote: {
    className: "HTMLElement",
    localName: "blockquaote",
    tagName: "BLOCKQUAOTE",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  body: {
    className: "HTMLElement",
    localName: "body",
    tagName: "BODY",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  template: {
    className: "HTMLTemplateElement",
    localName: "template",
    tagName: "TEMPLATE",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  form: {
    className: "HTMLFormElement",
    localName: "form",
    tagName: "FORM",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  input: {
    className: "HTMLInputElement",
    localName: "input",
    tagName: "INPUT",
    contentModel: HTMLElementConfigContentModelEnum_default.noDescendants
  },
  textarea: {
    className: "HTMLTextAreaElement",
    localName: "textarea",
    tagName: "TEXTAREA",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  script: {
    className: "HTMLScriptElement",
    localName: "script",
    tagName: "SCRIPT",
    contentModel: HTMLElementConfigContentModelEnum_default.rawText
  },
  img: {
    className: "HTMLImageElement",
    localName: "img",
    tagName: "IMG",
    contentModel: HTMLElementConfigContentModelEnum_default.noDescendants
  },
  link: {
    className: "HTMLLinkElement",
    localName: "link",
    tagName: "LINK",
    contentModel: HTMLElementConfigContentModelEnum_default.noDescendants
  },
  style: {
    className: "HTMLStyleElement",
    localName: "style",
    tagName: "STYLE",
    contentModel: HTMLElementConfigContentModelEnum_default.rawText
  },
  label: {
    className: "HTMLLabelElement",
    localName: "label",
    tagName: "LABEL",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  slot: {
    className: "HTMLSlotElement",
    localName: "slot",
    tagName: "SLOT",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  meta: {
    className: "HTMLMetaElement",
    localName: "meta",
    tagName: "META",
    contentModel: HTMLElementConfigContentModelEnum_default.noDescendants
  },
  blockquote: {
    className: "HTMLElement",
    localName: "blockquote",
    tagName: "BLOCKQUOTE",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  br: {
    className: "HTMLElement",
    localName: "br",
    tagName: "BR",
    contentModel: HTMLElementConfigContentModelEnum_default.noDescendants
  },
  button: {
    className: "HTMLButtonElement",
    localName: "button",
    tagName: "BUTTON",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  canvas: {
    className: "HTMLElement",
    localName: "canvas",
    tagName: "CANVAS",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  caption: {
    className: "HTMLElement",
    localName: "caption",
    tagName: "CAPTION",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  cite: {
    className: "HTMLElement",
    localName: "cite",
    tagName: "CITE",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  code: {
    className: "HTMLElement",
    localName: "code",
    tagName: "CODE",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  col: {
    className: "HTMLElement",
    localName: "col",
    tagName: "COL",
    contentModel: HTMLElementConfigContentModelEnum_default.noDescendants
  },
  colgroup: {
    className: "HTMLElement",
    localName: "colgroup",
    tagName: "COLGROUP",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  data: {
    className: "HTMLElement",
    localName: "data",
    tagName: "DATA",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  datalist: {
    className: "HTMLElement",
    localName: "datalist",
    tagName: "DATALIST",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  dd: {
    className: "HTMLElement",
    localName: "dd",
    tagName: "DD",
    contentModel: HTMLElementConfigContentModelEnum_default.noFirstLevelSelfDescendants
  },
  del: {
    className: "HTMLElement",
    localName: "del",
    tagName: "DEL",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  details: {
    className: "HTMLElement",
    localName: "details",
    tagName: "DETAILS",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  dfn: {
    className: "HTMLElement",
    localName: "dfn",
    tagName: "DFN",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  dialog: {
    className: "HTMLDialogElement",
    localName: "dialog",
    tagName: "DIALOG",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  div: {
    className: "HTMLElement",
    localName: "div",
    tagName: "DIV",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  dl: {
    className: "HTMLElement",
    localName: "dl",
    tagName: "DL",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  dt: {
    className: "HTMLElement",
    localName: "dt",
    tagName: "DT",
    contentModel: HTMLElementConfigContentModelEnum_default.noFirstLevelSelfDescendants
  },
  em: {
    className: "HTMLElement",
    localName: "em",
    tagName: "EM",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  embed: {
    className: "HTMLElement",
    localName: "embed",
    tagName: "EMBED",
    contentModel: HTMLElementConfigContentModelEnum_default.noDescendants
  },
  fieldset: {
    className: "HTMLElement",
    localName: "fieldset",
    tagName: "FIELDSET",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  figcaption: {
    className: "HTMLElement",
    localName: "figcaption",
    tagName: "FIGCAPTION",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  figure: {
    className: "HTMLElement",
    localName: "figure",
    tagName: "FIGURE",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  footer: {
    className: "HTMLElement",
    localName: "footer",
    tagName: "FOOTER",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  h1: {
    className: "HTMLElement",
    localName: "h1",
    tagName: "H1",
    contentModel: HTMLElementConfigContentModelEnum_default.noFirstLevelSelfDescendants
  },
  h2: {
    className: "HTMLElement",
    localName: "h2",
    tagName: "H2",
    contentModel: HTMLElementConfigContentModelEnum_default.noFirstLevelSelfDescendants
  },
  h3: {
    className: "HTMLElement",
    localName: "h3",
    tagName: "H3",
    contentModel: HTMLElementConfigContentModelEnum_default.noFirstLevelSelfDescendants
  },
  h4: {
    className: "HTMLElement",
    localName: "h4",
    tagName: "H4",
    contentModel: HTMLElementConfigContentModelEnum_default.noFirstLevelSelfDescendants
  },
  h5: {
    className: "HTMLElement",
    localName: "h5",
    tagName: "H5",
    contentModel: HTMLElementConfigContentModelEnum_default.noFirstLevelSelfDescendants
  },
  h6: {
    className: "HTMLElement",
    localName: "h6",
    tagName: "H6",
    contentModel: HTMLElementConfigContentModelEnum_default.noFirstLevelSelfDescendants
  },
  head: {
    className: "HTMLElement",
    localName: "head",
    tagName: "HEAD",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  header: {
    className: "HTMLElement",
    localName: "header",
    tagName: "HEADER",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  hgroup: {
    className: "HTMLElement",
    localName: "hgroup",
    tagName: "HGROUP",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  hr: {
    className: "HTMLElement",
    localName: "hr",
    tagName: "HR",
    contentModel: HTMLElementConfigContentModelEnum_default.noDescendants
  },
  html: {
    className: "HTMLElement",
    localName: "html",
    tagName: "HTML",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  i: {
    className: "HTMLElement",
    localName: "i",
    tagName: "I",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  iframe: {
    className: "HTMLIFrameElement",
    localName: "iframe",
    tagName: "IFRAME",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  ins: {
    className: "HTMLElement",
    localName: "ins",
    tagName: "INS",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  kbd: {
    className: "HTMLElement",
    localName: "kbd",
    tagName: "KBD",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  legend: {
    className: "HTMLElement",
    localName: "legend",
    tagName: "LEGEND",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  li: {
    className: "HTMLElement",
    localName: "li",
    tagName: "LI",
    contentModel: HTMLElementConfigContentModelEnum_default.noFirstLevelSelfDescendants
  },
  main: {
    className: "HTMLElement",
    localName: "main",
    tagName: "MAIN",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  map: {
    className: "HTMLElement",
    localName: "map",
    tagName: "MAP",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  mark: {
    className: "HTMLElement",
    localName: "mark",
    tagName: "MARK",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  math: {
    className: "HTMLElement",
    localName: "math",
    tagName: "MATH",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  menu: {
    className: "HTMLElement",
    localName: "menu",
    tagName: "MENU",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  menuitem: {
    className: "HTMLElement",
    localName: "menuitem",
    tagName: "MENUITEM",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  meter: {
    className: "HTMLElement",
    localName: "meter",
    tagName: "METER",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  nav: {
    className: "HTMLElement",
    localName: "nav",
    tagName: "NAV",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  noscript: {
    className: "HTMLElement",
    localName: "noscript",
    tagName: "NOSCRIPT",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  object: {
    className: "HTMLElement",
    localName: "object",
    tagName: "OBJECT",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  ol: {
    className: "HTMLElement",
    localName: "ol",
    tagName: "OL",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  optgroup: {
    className: "HTMLOptGroupElement",
    localName: "optgroup",
    tagName: "OPTGROUP",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  option: {
    className: "HTMLOptionElement",
    localName: "option",
    tagName: "OPTION",
    contentModel: HTMLElementConfigContentModelEnum_default.noFirstLevelSelfDescendants
  },
  output: {
    className: "HTMLElement",
    localName: "output",
    tagName: "OUTPUT",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  p: {
    className: "HTMLElement",
    localName: "p",
    tagName: "P",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  param: {
    className: "HTMLElement",
    localName: "param",
    tagName: "PARAM",
    contentModel: HTMLElementConfigContentModelEnum_default.noDescendants
  },
  picture: {
    className: "HTMLElement",
    localName: "picture",
    tagName: "PICTURE",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  pre: {
    className: "HTMLElement",
    localName: "pre",
    tagName: "PRE",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  progress: {
    className: "HTMLElement",
    localName: "progress",
    tagName: "PROGRESS",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  q: {
    className: "HTMLElement",
    localName: "q",
    tagName: "Q",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  rb: {
    className: "HTMLElement",
    localName: "rb",
    tagName: "RB",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  rp: {
    className: "HTMLElement",
    localName: "rp",
    tagName: "RP",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  rt: {
    className: "HTMLElement",
    localName: "rt",
    tagName: "RT",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  rtc: {
    className: "HTMLElement",
    localName: "rtc",
    tagName: "RTC",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  ruby: {
    className: "HTMLElement",
    localName: "ruby",
    tagName: "RUBY",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  s: {
    className: "HTMLElement",
    localName: "s",
    tagName: "S",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  samp: {
    className: "HTMLElement",
    localName: "samp",
    tagName: "SAMP",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  section: {
    className: "HTMLElement",
    localName: "section",
    tagName: "SECTION",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  select: {
    className: "HTMLSelectElement",
    localName: "select",
    tagName: "SELECT",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  small: {
    className: "HTMLElement",
    localName: "small",
    tagName: "SMALL",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  source: {
    className: "HTMLElement",
    localName: "source",
    tagName: "SOURCE",
    contentModel: HTMLElementConfigContentModelEnum_default.noDescendants
  },
  span: {
    className: "HTMLElement",
    localName: "span",
    tagName: "SPAN",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  strong: {
    className: "HTMLElement",
    localName: "strong",
    tagName: "STRONG",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  sub: {
    className: "HTMLElement",
    localName: "sub",
    tagName: "SUB",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  summary: {
    className: "HTMLElement",
    localName: "summary",
    tagName: "SUMMARY",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  sup: {
    className: "HTMLElement",
    localName: "sup",
    tagName: "SUP",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  table: {
    className: "HTMLElement",
    localName: "table",
    tagName: "TABLE",
    contentModel: HTMLElementConfigContentModelEnum_default.noFirstLevelSelfDescendants
  },
  tbody: {
    className: "HTMLElement",
    localName: "tbody",
    tagName: "TBODY",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  td: {
    className: "HTMLElement",
    localName: "td",
    tagName: "TD",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  tfoot: {
    className: "HTMLElement",
    localName: "tfoot",
    tagName: "TFOOT",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  th: {
    className: "HTMLElement",
    localName: "th",
    tagName: "TH",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  thead: {
    className: "HTMLElement",
    localName: "thead",
    tagName: "THEAD",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  time: {
    className: "HTMLTimeElement",
    localName: "time",
    tagName: "TIME",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  title: {
    className: "HTMLElement",
    localName: "title",
    tagName: "TITLE",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  tr: {
    className: "HTMLElement",
    localName: "tr",
    tagName: "TR",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  track: {
    className: "HTMLElement",
    localName: "track",
    tagName: "TRACK",
    contentModel: HTMLElementConfigContentModelEnum_default.noDescendants
  },
  u: {
    className: "HTMLElement",
    localName: "u",
    tagName: "U",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  ul: {
    className: "HTMLElement",
    localName: "ul",
    tagName: "UL",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  var: {
    className: "HTMLElement",
    localName: "var",
    tagName: "VAR",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  video: {
    className: "HTMLVideoElement",
    localName: "video",
    tagName: "VIDEO",
    contentModel: HTMLElementConfigContentModelEnum_default.anyDescendants
  },
  wbr: {
    className: "HTMLElement",
    localName: "wbr",
    tagName: "WBR",
    contentModel: HTMLElementConfigContentModelEnum_default.noDescendants
  }
};

// node_modules/entities/lib/esm/generated/decode-data-html.js
var decode_data_html_default = new Uint16Array('\u1D41<\xD5\u0131\u028A\u049D\u057B\u05D0\u0675\u06DE\u07A2\u07D6\u080F\u0A4A\u0A91\u0DA1\u0E6D\u0F09\u0F26\u10CA\u1228\u12E1\u1415\u149D\u14C3\u14DF\u1525\0\0\0\0\0\0\u156B\u16CD\u198D\u1C12\u1DDD\u1F7E\u2060\u21B0\u228D\u23C0\u23FB\u2442\u2824\u2912\u2D08\u2E48\u2FCE\u3016\u32BA\u3639\u37AC\u38FE\u3A28\u3A71\u3AE0\u3B2E\u0800EMabcfglmnoprstu\\bfms\x7F\x84\x8B\x90\x95\x98\xA6\xB3\xB9\xC8\xCFlig\u803B\xC6\u40C6P\u803B&\u4026cute\u803B\xC1\u40C1reve;\u4102\u0100iyx}rc\u803B\xC2\u40C2;\u4410r;\uC000\uD835\uDD04rave\u803B\xC0\u40C0pha;\u4391acr;\u4100d;\u6A53\u0100gp\x9D\xA1on;\u4104f;\uC000\uD835\uDD38plyFunction;\u6061ing\u803B\xC5\u40C5\u0100cs\xBE\xC3r;\uC000\uD835\uDC9Cign;\u6254ilde\u803B\xC3\u40C3ml\u803B\xC4\u40C4\u0400aceforsu\xE5\xFB\xFE\u0117\u011C\u0122\u0127\u012A\u0100cr\xEA\xF2kslash;\u6216\u0176\xF6\xF8;\u6AE7ed;\u6306y;\u4411\u0180crt\u0105\u010B\u0114ause;\u6235noullis;\u612Ca;\u4392r;\uC000\uD835\uDD05pf;\uC000\uD835\uDD39eve;\u42D8c\xF2\u0113mpeq;\u624E\u0700HOacdefhilorsu\u014D\u0151\u0156\u0180\u019E\u01A2\u01B5\u01B7\u01BA\u01DC\u0215\u0273\u0278\u027Ecy;\u4427PY\u803B\xA9\u40A9\u0180cpy\u015D\u0162\u017Aute;\u4106\u0100;i\u0167\u0168\u62D2talDifferentialD;\u6145leys;\u612D\u0200aeio\u0189\u018E\u0194\u0198ron;\u410Cdil\u803B\xC7\u40C7rc;\u4108nint;\u6230ot;\u410A\u0100dn\u01A7\u01ADilla;\u40B8terDot;\u40B7\xF2\u017Fi;\u43A7rcle\u0200DMPT\u01C7\u01CB\u01D1\u01D6ot;\u6299inus;\u6296lus;\u6295imes;\u6297o\u0100cs\u01E2\u01F8kwiseContourIntegral;\u6232eCurly\u0100DQ\u0203\u020FoubleQuote;\u601Duote;\u6019\u0200lnpu\u021E\u0228\u0247\u0255on\u0100;e\u0225\u0226\u6237;\u6A74\u0180git\u022F\u0236\u023Aruent;\u6261nt;\u622FourIntegral;\u622E\u0100fr\u024C\u024E;\u6102oduct;\u6210nterClockwiseContourIntegral;\u6233oss;\u6A2Fcr;\uC000\uD835\uDC9Ep\u0100;C\u0284\u0285\u62D3ap;\u624D\u0580DJSZacefios\u02A0\u02AC\u02B0\u02B4\u02B8\u02CB\u02D7\u02E1\u02E6\u0333\u048D\u0100;o\u0179\u02A5trahd;\u6911cy;\u4402cy;\u4405cy;\u440F\u0180grs\u02BF\u02C4\u02C7ger;\u6021r;\u61A1hv;\u6AE4\u0100ay\u02D0\u02D5ron;\u410E;\u4414l\u0100;t\u02DD\u02DE\u6207a;\u4394r;\uC000\uD835\uDD07\u0100af\u02EB\u0327\u0100cm\u02F0\u0322ritical\u0200ADGT\u0300\u0306\u0316\u031Ccute;\u40B4o\u0174\u030B\u030D;\u42D9bleAcute;\u42DDrave;\u4060ilde;\u42DCond;\u62C4ferentialD;\u6146\u0470\u033D\0\0\0\u0342\u0354\0\u0405f;\uC000\uD835\uDD3B\u0180;DE\u0348\u0349\u034D\u40A8ot;\u60DCqual;\u6250ble\u0300CDLRUV\u0363\u0372\u0382\u03CF\u03E2\u03F8ontourIntegra\xEC\u0239o\u0274\u0379\0\0\u037B\xBB\u0349nArrow;\u61D3\u0100eo\u0387\u03A4ft\u0180ART\u0390\u0396\u03A1rrow;\u61D0ightArrow;\u61D4e\xE5\u02CAng\u0100LR\u03AB\u03C4eft\u0100AR\u03B3\u03B9rrow;\u67F8ightArrow;\u67FAightArrow;\u67F9ight\u0100AT\u03D8\u03DErrow;\u61D2ee;\u62A8p\u0241\u03E9\0\0\u03EFrrow;\u61D1ownArrow;\u61D5erticalBar;\u6225n\u0300ABLRTa\u0412\u042A\u0430\u045E\u047F\u037Crrow\u0180;BU\u041D\u041E\u0422\u6193ar;\u6913pArrow;\u61F5reve;\u4311eft\u02D2\u043A\0\u0446\0\u0450ightVector;\u6950eeVector;\u695Eector\u0100;B\u0459\u045A\u61BDar;\u6956ight\u01D4\u0467\0\u0471eeVector;\u695Fector\u0100;B\u047A\u047B\u61C1ar;\u6957ee\u0100;A\u0486\u0487\u62A4rrow;\u61A7\u0100ct\u0492\u0497r;\uC000\uD835\uDC9Frok;\u4110\u0800NTacdfglmopqstux\u04BD\u04C0\u04C4\u04CB\u04DE\u04E2\u04E7\u04EE\u04F5\u0521\u052F\u0536\u0552\u055D\u0560\u0565G;\u414AH\u803B\xD0\u40D0cute\u803B\xC9\u40C9\u0180aiy\u04D2\u04D7\u04DCron;\u411Arc\u803B\xCA\u40CA;\u442Dot;\u4116r;\uC000\uD835\uDD08rave\u803B\xC8\u40C8ement;\u6208\u0100ap\u04FA\u04FEcr;\u4112ty\u0253\u0506\0\0\u0512mallSquare;\u65FBerySmallSquare;\u65AB\u0100gp\u0526\u052Aon;\u4118f;\uC000\uD835\uDD3Csilon;\u4395u\u0100ai\u053C\u0549l\u0100;T\u0542\u0543\u6A75ilde;\u6242librium;\u61CC\u0100ci\u0557\u055Ar;\u6130m;\u6A73a;\u4397ml\u803B\xCB\u40CB\u0100ip\u056A\u056Fsts;\u6203onentialE;\u6147\u0280cfios\u0585\u0588\u058D\u05B2\u05CCy;\u4424r;\uC000\uD835\uDD09lled\u0253\u0597\0\0\u05A3mallSquare;\u65FCerySmallSquare;\u65AA\u0370\u05BA\0\u05BF\0\0\u05C4f;\uC000\uD835\uDD3DAll;\u6200riertrf;\u6131c\xF2\u05CB\u0600JTabcdfgorst\u05E8\u05EC\u05EF\u05FA\u0600\u0612\u0616\u061B\u061D\u0623\u066C\u0672cy;\u4403\u803B>\u403Emma\u0100;d\u05F7\u05F8\u4393;\u43DCreve;\u411E\u0180eiy\u0607\u060C\u0610dil;\u4122rc;\u411C;\u4413ot;\u4120r;\uC000\uD835\uDD0A;\u62D9pf;\uC000\uD835\uDD3Eeater\u0300EFGLST\u0635\u0644\u064E\u0656\u065B\u0666qual\u0100;L\u063E\u063F\u6265ess;\u62DBullEqual;\u6267reater;\u6AA2ess;\u6277lantEqual;\u6A7Eilde;\u6273cr;\uC000\uD835\uDCA2;\u626B\u0400Aacfiosu\u0685\u068B\u0696\u069B\u069E\u06AA\u06BE\u06CARDcy;\u442A\u0100ct\u0690\u0694ek;\u42C7;\u405Eirc;\u4124r;\u610ClbertSpace;\u610B\u01F0\u06AF\0\u06B2f;\u610DizontalLine;\u6500\u0100ct\u06C3\u06C5\xF2\u06A9rok;\u4126mp\u0144\u06D0\u06D8ownHum\xF0\u012Fqual;\u624F\u0700EJOacdfgmnostu\u06FA\u06FE\u0703\u0707\u070E\u071A\u071E\u0721\u0728\u0744\u0778\u078B\u078F\u0795cy;\u4415lig;\u4132cy;\u4401cute\u803B\xCD\u40CD\u0100iy\u0713\u0718rc\u803B\xCE\u40CE;\u4418ot;\u4130r;\u6111rave\u803B\xCC\u40CC\u0180;ap\u0720\u072F\u073F\u0100cg\u0734\u0737r;\u412AinaryI;\u6148lie\xF3\u03DD\u01F4\u0749\0\u0762\u0100;e\u074D\u074E\u622C\u0100gr\u0753\u0758ral;\u622Bsection;\u62C2isible\u0100CT\u076C\u0772omma;\u6063imes;\u6062\u0180gpt\u077F\u0783\u0788on;\u412Ef;\uC000\uD835\uDD40a;\u4399cr;\u6110ilde;\u4128\u01EB\u079A\0\u079Ecy;\u4406l\u803B\xCF\u40CF\u0280cfosu\u07AC\u07B7\u07BC\u07C2\u07D0\u0100iy\u07B1\u07B5rc;\u4134;\u4419r;\uC000\uD835\uDD0Dpf;\uC000\uD835\uDD41\u01E3\u07C7\0\u07CCr;\uC000\uD835\uDCA5rcy;\u4408kcy;\u4404\u0380HJacfos\u07E4\u07E8\u07EC\u07F1\u07FD\u0802\u0808cy;\u4425cy;\u440Cppa;\u439A\u0100ey\u07F6\u07FBdil;\u4136;\u441Ar;\uC000\uD835\uDD0Epf;\uC000\uD835\uDD42cr;\uC000\uD835\uDCA6\u0580JTaceflmost\u0825\u0829\u082C\u0850\u0863\u09B3\u09B8\u09C7\u09CD\u0A37\u0A47cy;\u4409\u803B<\u403C\u0280cmnpr\u0837\u083C\u0841\u0844\u084Dute;\u4139bda;\u439Bg;\u67EAlacetrf;\u6112r;\u619E\u0180aey\u0857\u085C\u0861ron;\u413Ddil;\u413B;\u441B\u0100fs\u0868\u0970t\u0500ACDFRTUVar\u087E\u08A9\u08B1\u08E0\u08E6\u08FC\u092F\u095B\u0390\u096A\u0100nr\u0883\u088FgleBracket;\u67E8row\u0180;BR\u0899\u089A\u089E\u6190ar;\u61E4ightArrow;\u61C6eiling;\u6308o\u01F5\u08B7\0\u08C3bleBracket;\u67E6n\u01D4\u08C8\0\u08D2eeVector;\u6961ector\u0100;B\u08DB\u08DC\u61C3ar;\u6959loor;\u630Aight\u0100AV\u08EF\u08F5rrow;\u6194ector;\u694E\u0100er\u0901\u0917e\u0180;AV\u0909\u090A\u0910\u62A3rrow;\u61A4ector;\u695Aiangle\u0180;BE\u0924\u0925\u0929\u62B2ar;\u69CFqual;\u62B4p\u0180DTV\u0937\u0942\u094CownVector;\u6951eeVector;\u6960ector\u0100;B\u0956\u0957\u61BFar;\u6958ector\u0100;B\u0965\u0966\u61BCar;\u6952ight\xE1\u039Cs\u0300EFGLST\u097E\u098B\u0995\u099D\u09A2\u09ADqualGreater;\u62DAullEqual;\u6266reater;\u6276ess;\u6AA1lantEqual;\u6A7Dilde;\u6272r;\uC000\uD835\uDD0F\u0100;e\u09BD\u09BE\u62D8ftarrow;\u61DAidot;\u413F\u0180npw\u09D4\u0A16\u0A1Bg\u0200LRlr\u09DE\u09F7\u0A02\u0A10eft\u0100AR\u09E6\u09ECrrow;\u67F5ightArrow;\u67F7ightArrow;\u67F6eft\u0100ar\u03B3\u0A0Aight\xE1\u03BFight\xE1\u03CAf;\uC000\uD835\uDD43er\u0100LR\u0A22\u0A2CeftArrow;\u6199ightArrow;\u6198\u0180cht\u0A3E\u0A40\u0A42\xF2\u084C;\u61B0rok;\u4141;\u626A\u0400acefiosu\u0A5A\u0A5D\u0A60\u0A77\u0A7C\u0A85\u0A8B\u0A8Ep;\u6905y;\u441C\u0100dl\u0A65\u0A6FiumSpace;\u605Flintrf;\u6133r;\uC000\uD835\uDD10nusPlus;\u6213pf;\uC000\uD835\uDD44c\xF2\u0A76;\u439C\u0480Jacefostu\u0AA3\u0AA7\u0AAD\u0AC0\u0B14\u0B19\u0D91\u0D97\u0D9Ecy;\u440Acute;\u4143\u0180aey\u0AB4\u0AB9\u0ABEron;\u4147dil;\u4145;\u441D\u0180gsw\u0AC7\u0AF0\u0B0Eative\u0180MTV\u0AD3\u0ADF\u0AE8ediumSpace;\u600Bhi\u0100cn\u0AE6\u0AD8\xEB\u0AD9eryThi\xEE\u0AD9ted\u0100GL\u0AF8\u0B06reaterGreate\xF2\u0673essLes\xF3\u0A48Line;\u400Ar;\uC000\uD835\uDD11\u0200Bnpt\u0B22\u0B28\u0B37\u0B3Areak;\u6060BreakingSpace;\u40A0f;\u6115\u0680;CDEGHLNPRSTV\u0B55\u0B56\u0B6A\u0B7C\u0BA1\u0BEB\u0C04\u0C5E\u0C84\u0CA6\u0CD8\u0D61\u0D85\u6AEC\u0100ou\u0B5B\u0B64ngruent;\u6262pCap;\u626DoubleVerticalBar;\u6226\u0180lqx\u0B83\u0B8A\u0B9Bement;\u6209ual\u0100;T\u0B92\u0B93\u6260ilde;\uC000\u2242\u0338ists;\u6204reater\u0380;EFGLST\u0BB6\u0BB7\u0BBD\u0BC9\u0BD3\u0BD8\u0BE5\u626Fqual;\u6271ullEqual;\uC000\u2267\u0338reater;\uC000\u226B\u0338ess;\u6279lantEqual;\uC000\u2A7E\u0338ilde;\u6275ump\u0144\u0BF2\u0BFDownHump;\uC000\u224E\u0338qual;\uC000\u224F\u0338e\u0100fs\u0C0A\u0C27tTriangle\u0180;BE\u0C1A\u0C1B\u0C21\u62EAar;\uC000\u29CF\u0338qual;\u62ECs\u0300;EGLST\u0C35\u0C36\u0C3C\u0C44\u0C4B\u0C58\u626Equal;\u6270reater;\u6278ess;\uC000\u226A\u0338lantEqual;\uC000\u2A7D\u0338ilde;\u6274ested\u0100GL\u0C68\u0C79reaterGreater;\uC000\u2AA2\u0338essLess;\uC000\u2AA1\u0338recedes\u0180;ES\u0C92\u0C93\u0C9B\u6280qual;\uC000\u2AAF\u0338lantEqual;\u62E0\u0100ei\u0CAB\u0CB9verseElement;\u620CghtTriangle\u0180;BE\u0CCB\u0CCC\u0CD2\u62EBar;\uC000\u29D0\u0338qual;\u62ED\u0100qu\u0CDD\u0D0CuareSu\u0100bp\u0CE8\u0CF9set\u0100;E\u0CF0\u0CF3\uC000\u228F\u0338qual;\u62E2erset\u0100;E\u0D03\u0D06\uC000\u2290\u0338qual;\u62E3\u0180bcp\u0D13\u0D24\u0D4Eset\u0100;E\u0D1B\u0D1E\uC000\u2282\u20D2qual;\u6288ceeds\u0200;EST\u0D32\u0D33\u0D3B\u0D46\u6281qual;\uC000\u2AB0\u0338lantEqual;\u62E1ilde;\uC000\u227F\u0338erset\u0100;E\u0D58\u0D5B\uC000\u2283\u20D2qual;\u6289ilde\u0200;EFT\u0D6E\u0D6F\u0D75\u0D7F\u6241qual;\u6244ullEqual;\u6247ilde;\u6249erticalBar;\u6224cr;\uC000\uD835\uDCA9ilde\u803B\xD1\u40D1;\u439D\u0700Eacdfgmoprstuv\u0DBD\u0DC2\u0DC9\u0DD5\u0DDB\u0DE0\u0DE7\u0DFC\u0E02\u0E20\u0E22\u0E32\u0E3F\u0E44lig;\u4152cute\u803B\xD3\u40D3\u0100iy\u0DCE\u0DD3rc\u803B\xD4\u40D4;\u441Eblac;\u4150r;\uC000\uD835\uDD12rave\u803B\xD2\u40D2\u0180aei\u0DEE\u0DF2\u0DF6cr;\u414Cga;\u43A9cron;\u439Fpf;\uC000\uD835\uDD46enCurly\u0100DQ\u0E0E\u0E1AoubleQuote;\u601Cuote;\u6018;\u6A54\u0100cl\u0E27\u0E2Cr;\uC000\uD835\uDCAAash\u803B\xD8\u40D8i\u016C\u0E37\u0E3Cde\u803B\xD5\u40D5es;\u6A37ml\u803B\xD6\u40D6er\u0100BP\u0E4B\u0E60\u0100ar\u0E50\u0E53r;\u603Eac\u0100ek\u0E5A\u0E5C;\u63DEet;\u63B4arenthesis;\u63DC\u0480acfhilors\u0E7F\u0E87\u0E8A\u0E8F\u0E92\u0E94\u0E9D\u0EB0\u0EFCrtialD;\u6202y;\u441Fr;\uC000\uD835\uDD13i;\u43A6;\u43A0usMinus;\u40B1\u0100ip\u0EA2\u0EADncareplan\xE5\u069Df;\u6119\u0200;eio\u0EB9\u0EBA\u0EE0\u0EE4\u6ABBcedes\u0200;EST\u0EC8\u0EC9\u0ECF\u0EDA\u627Aqual;\u6AAFlantEqual;\u627Cilde;\u627Eme;\u6033\u0100dp\u0EE9\u0EEEuct;\u620Fortion\u0100;a\u0225\u0EF9l;\u621D\u0100ci\u0F01\u0F06r;\uC000\uD835\uDCAB;\u43A8\u0200Ufos\u0F11\u0F16\u0F1B\u0F1FOT\u803B"\u4022r;\uC000\uD835\uDD14pf;\u611Acr;\uC000\uD835\uDCAC\u0600BEacefhiorsu\u0F3E\u0F43\u0F47\u0F60\u0F73\u0FA7\u0FAA\u0FAD\u1096\u10A9\u10B4\u10BEarr;\u6910G\u803B\xAE\u40AE\u0180cnr\u0F4E\u0F53\u0F56ute;\u4154g;\u67EBr\u0100;t\u0F5C\u0F5D\u61A0l;\u6916\u0180aey\u0F67\u0F6C\u0F71ron;\u4158dil;\u4156;\u4420\u0100;v\u0F78\u0F79\u611Cerse\u0100EU\u0F82\u0F99\u0100lq\u0F87\u0F8Eement;\u620Builibrium;\u61CBpEquilibrium;\u696Fr\xBB\u0F79o;\u43A1ght\u0400ACDFTUVa\u0FC1\u0FEB\u0FF3\u1022\u1028\u105B\u1087\u03D8\u0100nr\u0FC6\u0FD2gleBracket;\u67E9row\u0180;BL\u0FDC\u0FDD\u0FE1\u6192ar;\u61E5eftArrow;\u61C4eiling;\u6309o\u01F5\u0FF9\0\u1005bleBracket;\u67E7n\u01D4\u100A\0\u1014eeVector;\u695Dector\u0100;B\u101D\u101E\u61C2ar;\u6955loor;\u630B\u0100er\u102D\u1043e\u0180;AV\u1035\u1036\u103C\u62A2rrow;\u61A6ector;\u695Biangle\u0180;BE\u1050\u1051\u1055\u62B3ar;\u69D0qual;\u62B5p\u0180DTV\u1063\u106E\u1078ownVector;\u694FeeVector;\u695Cector\u0100;B\u1082\u1083\u61BEar;\u6954ector\u0100;B\u1091\u1092\u61C0ar;\u6953\u0100pu\u109B\u109Ef;\u611DndImplies;\u6970ightarrow;\u61DB\u0100ch\u10B9\u10BCr;\u611B;\u61B1leDelayed;\u69F4\u0680HOacfhimoqstu\u10E4\u10F1\u10F7\u10FD\u1119\u111E\u1151\u1156\u1161\u1167\u11B5\u11BB\u11BF\u0100Cc\u10E9\u10EEHcy;\u4429y;\u4428FTcy;\u442Ccute;\u415A\u0280;aeiy\u1108\u1109\u110E\u1113\u1117\u6ABCron;\u4160dil;\u415Erc;\u415C;\u4421r;\uC000\uD835\uDD16ort\u0200DLRU\u112A\u1134\u113E\u1149ownArrow\xBB\u041EeftArrow\xBB\u089AightArrow\xBB\u0FDDpArrow;\u6191gma;\u43A3allCircle;\u6218pf;\uC000\uD835\uDD4A\u0272\u116D\0\0\u1170t;\u621Aare\u0200;ISU\u117B\u117C\u1189\u11AF\u65A1ntersection;\u6293u\u0100bp\u118F\u119Eset\u0100;E\u1197\u1198\u628Fqual;\u6291erset\u0100;E\u11A8\u11A9\u6290qual;\u6292nion;\u6294cr;\uC000\uD835\uDCAEar;\u62C6\u0200bcmp\u11C8\u11DB\u1209\u120B\u0100;s\u11CD\u11CE\u62D0et\u0100;E\u11CD\u11D5qual;\u6286\u0100ch\u11E0\u1205eeds\u0200;EST\u11ED\u11EE\u11F4\u11FF\u627Bqual;\u6AB0lantEqual;\u627Dilde;\u627FTh\xE1\u0F8C;\u6211\u0180;es\u1212\u1213\u1223\u62D1rset\u0100;E\u121C\u121D\u6283qual;\u6287et\xBB\u1213\u0580HRSacfhiors\u123E\u1244\u1249\u1255\u125E\u1271\u1276\u129F\u12C2\u12C8\u12D1ORN\u803B\xDE\u40DEADE;\u6122\u0100Hc\u124E\u1252cy;\u440By;\u4426\u0100bu\u125A\u125C;\u4009;\u43A4\u0180aey\u1265\u126A\u126Fron;\u4164dil;\u4162;\u4422r;\uC000\uD835\uDD17\u0100ei\u127B\u1289\u01F2\u1280\0\u1287efore;\u6234a;\u4398\u0100cn\u128E\u1298kSpace;\uC000\u205F\u200ASpace;\u6009lde\u0200;EFT\u12AB\u12AC\u12B2\u12BC\u623Cqual;\u6243ullEqual;\u6245ilde;\u6248pf;\uC000\uD835\uDD4BipleDot;\u60DB\u0100ct\u12D6\u12DBr;\uC000\uD835\uDCAFrok;\u4166\u0AE1\u12F7\u130E\u131A\u1326\0\u132C\u1331\0\0\0\0\0\u1338\u133D\u1377\u1385\0\u13FF\u1404\u140A\u1410\u0100cr\u12FB\u1301ute\u803B\xDA\u40DAr\u0100;o\u1307\u1308\u619Fcir;\u6949r\u01E3\u1313\0\u1316y;\u440Eve;\u416C\u0100iy\u131E\u1323rc\u803B\xDB\u40DB;\u4423blac;\u4170r;\uC000\uD835\uDD18rave\u803B\xD9\u40D9acr;\u416A\u0100di\u1341\u1369er\u0100BP\u1348\u135D\u0100ar\u134D\u1350r;\u405Fac\u0100ek\u1357\u1359;\u63DFet;\u63B5arenthesis;\u63DDon\u0100;P\u1370\u1371\u62C3lus;\u628E\u0100gp\u137B\u137Fon;\u4172f;\uC000\uD835\uDD4C\u0400ADETadps\u1395\u13AE\u13B8\u13C4\u03E8\u13D2\u13D7\u13F3rrow\u0180;BD\u1150\u13A0\u13A4ar;\u6912ownArrow;\u61C5ownArrow;\u6195quilibrium;\u696Eee\u0100;A\u13CB\u13CC\u62A5rrow;\u61A5own\xE1\u03F3er\u0100LR\u13DE\u13E8eftArrow;\u6196ightArrow;\u6197i\u0100;l\u13F9\u13FA\u43D2on;\u43A5ing;\u416Ecr;\uC000\uD835\uDCB0ilde;\u4168ml\u803B\xDC\u40DC\u0480Dbcdefosv\u1427\u142C\u1430\u1433\u143E\u1485\u148A\u1490\u1496ash;\u62ABar;\u6AEBy;\u4412ash\u0100;l\u143B\u143C\u62A9;\u6AE6\u0100er\u1443\u1445;\u62C1\u0180bty\u144C\u1450\u147Aar;\u6016\u0100;i\u144F\u1455cal\u0200BLST\u1461\u1465\u146A\u1474ar;\u6223ine;\u407Ceparator;\u6758ilde;\u6240ThinSpace;\u600Ar;\uC000\uD835\uDD19pf;\uC000\uD835\uDD4Dcr;\uC000\uD835\uDCB1dash;\u62AA\u0280cefos\u14A7\u14AC\u14B1\u14B6\u14BCirc;\u4174dge;\u62C0r;\uC000\uD835\uDD1Apf;\uC000\uD835\uDD4Ecr;\uC000\uD835\uDCB2\u0200fios\u14CB\u14D0\u14D2\u14D8r;\uC000\uD835\uDD1B;\u439Epf;\uC000\uD835\uDD4Fcr;\uC000\uD835\uDCB3\u0480AIUacfosu\u14F1\u14F5\u14F9\u14FD\u1504\u150F\u1514\u151A\u1520cy;\u442Fcy;\u4407cy;\u442Ecute\u803B\xDD\u40DD\u0100iy\u1509\u150Drc;\u4176;\u442Br;\uC000\uD835\uDD1Cpf;\uC000\uD835\uDD50cr;\uC000\uD835\uDCB4ml;\u4178\u0400Hacdefos\u1535\u1539\u153F\u154B\u154F\u155D\u1560\u1564cy;\u4416cute;\u4179\u0100ay\u1544\u1549ron;\u417D;\u4417ot;\u417B\u01F2\u1554\0\u155BoWidt\xE8\u0AD9a;\u4396r;\u6128pf;\u6124cr;\uC000\uD835\uDCB5\u0BE1\u1583\u158A\u1590\0\u15B0\u15B6\u15BF\0\0\0\0\u15C6\u15DB\u15EB\u165F\u166D\0\u1695\u169B\u16B2\u16B9\0\u16BEcute\u803B\xE1\u40E1reve;\u4103\u0300;Ediuy\u159C\u159D\u15A1\u15A3\u15A8\u15AD\u623E;\uC000\u223E\u0333;\u623Frc\u803B\xE2\u40E2te\u80BB\xB4\u0306;\u4430lig\u803B\xE6\u40E6\u0100;r\xB2\u15BA;\uC000\uD835\uDD1Erave\u803B\xE0\u40E0\u0100ep\u15CA\u15D6\u0100fp\u15CF\u15D4sym;\u6135\xE8\u15D3ha;\u43B1\u0100ap\u15DFc\u0100cl\u15E4\u15E7r;\u4101g;\u6A3F\u0264\u15F0\0\0\u160A\u0280;adsv\u15FA\u15FB\u15FF\u1601\u1607\u6227nd;\u6A55;\u6A5Clope;\u6A58;\u6A5A\u0380;elmrsz\u1618\u1619\u161B\u161E\u163F\u164F\u1659\u6220;\u69A4e\xBB\u1619sd\u0100;a\u1625\u1626\u6221\u0461\u1630\u1632\u1634\u1636\u1638\u163A\u163C\u163E;\u69A8;\u69A9;\u69AA;\u69AB;\u69AC;\u69AD;\u69AE;\u69AFt\u0100;v\u1645\u1646\u621Fb\u0100;d\u164C\u164D\u62BE;\u699D\u0100pt\u1654\u1657h;\u6222\xBB\xB9arr;\u637C\u0100gp\u1663\u1667on;\u4105f;\uC000\uD835\uDD52\u0380;Eaeiop\u12C1\u167B\u167D\u1682\u1684\u1687\u168A;\u6A70cir;\u6A6F;\u624Ad;\u624Bs;\u4027rox\u0100;e\u12C1\u1692\xF1\u1683ing\u803B\xE5\u40E5\u0180cty\u16A1\u16A6\u16A8r;\uC000\uD835\uDCB6;\u402Amp\u0100;e\u12C1\u16AF\xF1\u0288ilde\u803B\xE3\u40E3ml\u803B\xE4\u40E4\u0100ci\u16C2\u16C8onin\xF4\u0272nt;\u6A11\u0800Nabcdefiklnoprsu\u16ED\u16F1\u1730\u173C\u1743\u1748\u1778\u177D\u17E0\u17E6\u1839\u1850\u170D\u193D\u1948\u1970ot;\u6AED\u0100cr\u16F6\u171Ek\u0200ceps\u1700\u1705\u170D\u1713ong;\u624Cpsilon;\u43F6rime;\u6035im\u0100;e\u171A\u171B\u623Dq;\u62CD\u0176\u1722\u1726ee;\u62BDed\u0100;g\u172C\u172D\u6305e\xBB\u172Drk\u0100;t\u135C\u1737brk;\u63B6\u0100oy\u1701\u1741;\u4431quo;\u601E\u0280cmprt\u1753\u175B\u1761\u1764\u1768aus\u0100;e\u010A\u0109ptyv;\u69B0s\xE9\u170Cno\xF5\u0113\u0180ahw\u176F\u1771\u1773;\u43B2;\u6136een;\u626Cr;\uC000\uD835\uDD1Fg\u0380costuvw\u178D\u179D\u17B3\u17C1\u17D5\u17DB\u17DE\u0180aiu\u1794\u1796\u179A\xF0\u0760rc;\u65EFp\xBB\u1371\u0180dpt\u17A4\u17A8\u17ADot;\u6A00lus;\u6A01imes;\u6A02\u0271\u17B9\0\0\u17BEcup;\u6A06ar;\u6605riangle\u0100du\u17CD\u17D2own;\u65BDp;\u65B3plus;\u6A04e\xE5\u1444\xE5\u14ADarow;\u690D\u0180ako\u17ED\u1826\u1835\u0100cn\u17F2\u1823k\u0180lst\u17FA\u05AB\u1802ozenge;\u69EBriangle\u0200;dlr\u1812\u1813\u1818\u181D\u65B4own;\u65BEeft;\u65C2ight;\u65B8k;\u6423\u01B1\u182B\0\u1833\u01B2\u182F\0\u1831;\u6592;\u65914;\u6593ck;\u6588\u0100eo\u183E\u184D\u0100;q\u1843\u1846\uC000=\u20E5uiv;\uC000\u2261\u20E5t;\u6310\u0200ptwx\u1859\u185E\u1867\u186Cf;\uC000\uD835\uDD53\u0100;t\u13CB\u1863om\xBB\u13CCtie;\u62C8\u0600DHUVbdhmptuv\u1885\u1896\u18AA\u18BB\u18D7\u18DB\u18EC\u18FF\u1905\u190A\u1910\u1921\u0200LRlr\u188E\u1890\u1892\u1894;\u6557;\u6554;\u6556;\u6553\u0280;DUdu\u18A1\u18A2\u18A4\u18A6\u18A8\u6550;\u6566;\u6569;\u6564;\u6567\u0200LRlr\u18B3\u18B5\u18B7\u18B9;\u655D;\u655A;\u655C;\u6559\u0380;HLRhlr\u18CA\u18CB\u18CD\u18CF\u18D1\u18D3\u18D5\u6551;\u656C;\u6563;\u6560;\u656B;\u6562;\u655Fox;\u69C9\u0200LRlr\u18E4\u18E6\u18E8\u18EA;\u6555;\u6552;\u6510;\u650C\u0280;DUdu\u06BD\u18F7\u18F9\u18FB\u18FD;\u6565;\u6568;\u652C;\u6534inus;\u629Flus;\u629Eimes;\u62A0\u0200LRlr\u1919\u191B\u191D\u191F;\u655B;\u6558;\u6518;\u6514\u0380;HLRhlr\u1930\u1931\u1933\u1935\u1937\u1939\u193B\u6502;\u656A;\u6561;\u655E;\u653C;\u6524;\u651C\u0100ev\u0123\u1942bar\u803B\xA6\u40A6\u0200ceio\u1951\u1956\u195A\u1960r;\uC000\uD835\uDCB7mi;\u604Fm\u0100;e\u171A\u171Cl\u0180;bh\u1968\u1969\u196B\u405C;\u69C5sub;\u67C8\u016C\u1974\u197El\u0100;e\u1979\u197A\u6022t\xBB\u197Ap\u0180;Ee\u012F\u1985\u1987;\u6AAE\u0100;q\u06DC\u06DB\u0CE1\u19A7\0\u19E8\u1A11\u1A15\u1A32\0\u1A37\u1A50\0\0\u1AB4\0\0\u1AC1\0\0\u1B21\u1B2E\u1B4D\u1B52\0\u1BFD\0\u1C0C\u0180cpr\u19AD\u19B2\u19DDute;\u4107\u0300;abcds\u19BF\u19C0\u19C4\u19CA\u19D5\u19D9\u6229nd;\u6A44rcup;\u6A49\u0100au\u19CF\u19D2p;\u6A4Bp;\u6A47ot;\u6A40;\uC000\u2229\uFE00\u0100eo\u19E2\u19E5t;\u6041\xEE\u0693\u0200aeiu\u19F0\u19FB\u1A01\u1A05\u01F0\u19F5\0\u19F8s;\u6A4Don;\u410Ddil\u803B\xE7\u40E7rc;\u4109ps\u0100;s\u1A0C\u1A0D\u6A4Cm;\u6A50ot;\u410B\u0180dmn\u1A1B\u1A20\u1A26il\u80BB\xB8\u01ADptyv;\u69B2t\u8100\xA2;e\u1A2D\u1A2E\u40A2r\xE4\u01B2r;\uC000\uD835\uDD20\u0180cei\u1A3D\u1A40\u1A4Dy;\u4447ck\u0100;m\u1A47\u1A48\u6713ark\xBB\u1A48;\u43C7r\u0380;Ecefms\u1A5F\u1A60\u1A62\u1A6B\u1AA4\u1AAA\u1AAE\u65CB;\u69C3\u0180;el\u1A69\u1A6A\u1A6D\u42C6q;\u6257e\u0261\u1A74\0\0\u1A88rrow\u0100lr\u1A7C\u1A81eft;\u61BAight;\u61BB\u0280RSacd\u1A92\u1A94\u1A96\u1A9A\u1A9F\xBB\u0F47;\u64C8st;\u629Birc;\u629Aash;\u629Dnint;\u6A10id;\u6AEFcir;\u69C2ubs\u0100;u\u1ABB\u1ABC\u6663it\xBB\u1ABC\u02EC\u1AC7\u1AD4\u1AFA\0\u1B0Aon\u0100;e\u1ACD\u1ACE\u403A\u0100;q\xC7\xC6\u026D\u1AD9\0\0\u1AE2a\u0100;t\u1ADE\u1ADF\u402C;\u4040\u0180;fl\u1AE8\u1AE9\u1AEB\u6201\xEE\u1160e\u0100mx\u1AF1\u1AF6ent\xBB\u1AE9e\xF3\u024D\u01E7\u1AFE\0\u1B07\u0100;d\u12BB\u1B02ot;\u6A6Dn\xF4\u0246\u0180fry\u1B10\u1B14\u1B17;\uC000\uD835\uDD54o\xE4\u0254\u8100\xA9;s\u0155\u1B1Dr;\u6117\u0100ao\u1B25\u1B29rr;\u61B5ss;\u6717\u0100cu\u1B32\u1B37r;\uC000\uD835\uDCB8\u0100bp\u1B3C\u1B44\u0100;e\u1B41\u1B42\u6ACF;\u6AD1\u0100;e\u1B49\u1B4A\u6AD0;\u6AD2dot;\u62EF\u0380delprvw\u1B60\u1B6C\u1B77\u1B82\u1BAC\u1BD4\u1BF9arr\u0100lr\u1B68\u1B6A;\u6938;\u6935\u0270\u1B72\0\0\u1B75r;\u62DEc;\u62DFarr\u0100;p\u1B7F\u1B80\u61B6;\u693D\u0300;bcdos\u1B8F\u1B90\u1B96\u1BA1\u1BA5\u1BA8\u622Arcap;\u6A48\u0100au\u1B9B\u1B9Ep;\u6A46p;\u6A4Aot;\u628Dr;\u6A45;\uC000\u222A\uFE00\u0200alrv\u1BB5\u1BBF\u1BDE\u1BE3rr\u0100;m\u1BBC\u1BBD\u61B7;\u693Cy\u0180evw\u1BC7\u1BD4\u1BD8q\u0270\u1BCE\0\0\u1BD2re\xE3\u1B73u\xE3\u1B75ee;\u62CEedge;\u62CFen\u803B\xA4\u40A4earrow\u0100lr\u1BEE\u1BF3eft\xBB\u1B80ight\xBB\u1BBDe\xE4\u1BDD\u0100ci\u1C01\u1C07onin\xF4\u01F7nt;\u6231lcty;\u632D\u0980AHabcdefhijlorstuwz\u1C38\u1C3B\u1C3F\u1C5D\u1C69\u1C75\u1C8A\u1C9E\u1CAC\u1CB7\u1CFB\u1CFF\u1D0D\u1D7B\u1D91\u1DAB\u1DBB\u1DC6\u1DCDr\xF2\u0381ar;\u6965\u0200glrs\u1C48\u1C4D\u1C52\u1C54ger;\u6020eth;\u6138\xF2\u1133h\u0100;v\u1C5A\u1C5B\u6010\xBB\u090A\u016B\u1C61\u1C67arow;\u690Fa\xE3\u0315\u0100ay\u1C6E\u1C73ron;\u410F;\u4434\u0180;ao\u0332\u1C7C\u1C84\u0100gr\u02BF\u1C81r;\u61CAtseq;\u6A77\u0180glm\u1C91\u1C94\u1C98\u803B\xB0\u40B0ta;\u43B4ptyv;\u69B1\u0100ir\u1CA3\u1CA8sht;\u697F;\uC000\uD835\uDD21ar\u0100lr\u1CB3\u1CB5\xBB\u08DC\xBB\u101E\u0280aegsv\u1CC2\u0378\u1CD6\u1CDC\u1CE0m\u0180;os\u0326\u1CCA\u1CD4nd\u0100;s\u0326\u1CD1uit;\u6666amma;\u43DDin;\u62F2\u0180;io\u1CE7\u1CE8\u1CF8\u40F7de\u8100\xF7;o\u1CE7\u1CF0ntimes;\u62C7n\xF8\u1CF7cy;\u4452c\u026F\u1D06\0\0\u1D0Arn;\u631Eop;\u630D\u0280lptuw\u1D18\u1D1D\u1D22\u1D49\u1D55lar;\u4024f;\uC000\uD835\uDD55\u0280;emps\u030B\u1D2D\u1D37\u1D3D\u1D42q\u0100;d\u0352\u1D33ot;\u6251inus;\u6238lus;\u6214quare;\u62A1blebarwedg\xE5\xFAn\u0180adh\u112E\u1D5D\u1D67ownarrow\xF3\u1C83arpoon\u0100lr\u1D72\u1D76ef\xF4\u1CB4igh\xF4\u1CB6\u0162\u1D7F\u1D85karo\xF7\u0F42\u026F\u1D8A\0\0\u1D8Ern;\u631Fop;\u630C\u0180cot\u1D98\u1DA3\u1DA6\u0100ry\u1D9D\u1DA1;\uC000\uD835\uDCB9;\u4455l;\u69F6rok;\u4111\u0100dr\u1DB0\u1DB4ot;\u62F1i\u0100;f\u1DBA\u1816\u65BF\u0100ah\u1DC0\u1DC3r\xF2\u0429a\xF2\u0FA6angle;\u69A6\u0100ci\u1DD2\u1DD5y;\u445Fgrarr;\u67FF\u0900Dacdefglmnopqrstux\u1E01\u1E09\u1E19\u1E38\u0578\u1E3C\u1E49\u1E61\u1E7E\u1EA5\u1EAF\u1EBD\u1EE1\u1F2A\u1F37\u1F44\u1F4E\u1F5A\u0100Do\u1E06\u1D34o\xF4\u1C89\u0100cs\u1E0E\u1E14ute\u803B\xE9\u40E9ter;\u6A6E\u0200aioy\u1E22\u1E27\u1E31\u1E36ron;\u411Br\u0100;c\u1E2D\u1E2E\u6256\u803B\xEA\u40EAlon;\u6255;\u444Dot;\u4117\u0100Dr\u1E41\u1E45ot;\u6252;\uC000\uD835\uDD22\u0180;rs\u1E50\u1E51\u1E57\u6A9Aave\u803B\xE8\u40E8\u0100;d\u1E5C\u1E5D\u6A96ot;\u6A98\u0200;ils\u1E6A\u1E6B\u1E72\u1E74\u6A99nters;\u63E7;\u6113\u0100;d\u1E79\u1E7A\u6A95ot;\u6A97\u0180aps\u1E85\u1E89\u1E97cr;\u4113ty\u0180;sv\u1E92\u1E93\u1E95\u6205et\xBB\u1E93p\u01001;\u1E9D\u1EA4\u0133\u1EA1\u1EA3;\u6004;\u6005\u6003\u0100gs\u1EAA\u1EAC;\u414Bp;\u6002\u0100gp\u1EB4\u1EB8on;\u4119f;\uC000\uD835\uDD56\u0180als\u1EC4\u1ECE\u1ED2r\u0100;s\u1ECA\u1ECB\u62D5l;\u69E3us;\u6A71i\u0180;lv\u1EDA\u1EDB\u1EDF\u43B5on\xBB\u1EDB;\u43F5\u0200csuv\u1EEA\u1EF3\u1F0B\u1F23\u0100io\u1EEF\u1E31rc\xBB\u1E2E\u0269\u1EF9\0\0\u1EFB\xED\u0548ant\u0100gl\u1F02\u1F06tr\xBB\u1E5Dess\xBB\u1E7A\u0180aei\u1F12\u1F16\u1F1Als;\u403Dst;\u625Fv\u0100;D\u0235\u1F20D;\u6A78parsl;\u69E5\u0100Da\u1F2F\u1F33ot;\u6253rr;\u6971\u0180cdi\u1F3E\u1F41\u1EF8r;\u612Fo\xF4\u0352\u0100ah\u1F49\u1F4B;\u43B7\u803B\xF0\u40F0\u0100mr\u1F53\u1F57l\u803B\xEB\u40EBo;\u60AC\u0180cip\u1F61\u1F64\u1F67l;\u4021s\xF4\u056E\u0100eo\u1F6C\u1F74ctatio\xEE\u0559nential\xE5\u0579\u09E1\u1F92\0\u1F9E\0\u1FA1\u1FA7\0\0\u1FC6\u1FCC\0\u1FD3\0\u1FE6\u1FEA\u2000\0\u2008\u205Allingdotse\xF1\u1E44y;\u4444male;\u6640\u0180ilr\u1FAD\u1FB3\u1FC1lig;\u8000\uFB03\u0269\u1FB9\0\0\u1FBDg;\u8000\uFB00ig;\u8000\uFB04;\uC000\uD835\uDD23lig;\u8000\uFB01lig;\uC000fj\u0180alt\u1FD9\u1FDC\u1FE1t;\u666Dig;\u8000\uFB02ns;\u65B1of;\u4192\u01F0\u1FEE\0\u1FF3f;\uC000\uD835\uDD57\u0100ak\u05BF\u1FF7\u0100;v\u1FFC\u1FFD\u62D4;\u6AD9artint;\u6A0D\u0100ao\u200C\u2055\u0100cs\u2011\u2052\u03B1\u201A\u2030\u2038\u2045\u2048\0\u2050\u03B2\u2022\u2025\u2027\u202A\u202C\0\u202E\u803B\xBD\u40BD;\u6153\u803B\xBC\u40BC;\u6155;\u6159;\u615B\u01B3\u2034\0\u2036;\u6154;\u6156\u02B4\u203E\u2041\0\0\u2043\u803B\xBE\u40BE;\u6157;\u615C5;\u6158\u01B6\u204C\0\u204E;\u615A;\u615D8;\u615El;\u6044wn;\u6322cr;\uC000\uD835\uDCBB\u0880Eabcdefgijlnorstv\u2082\u2089\u209F\u20A5\u20B0\u20B4\u20F0\u20F5\u20FA\u20FF\u2103\u2112\u2138\u0317\u213E\u2152\u219E\u0100;l\u064D\u2087;\u6A8C\u0180cmp\u2090\u2095\u209Dute;\u41F5ma\u0100;d\u209C\u1CDA\u43B3;\u6A86reve;\u411F\u0100iy\u20AA\u20AErc;\u411D;\u4433ot;\u4121\u0200;lqs\u063E\u0642\u20BD\u20C9\u0180;qs\u063E\u064C\u20C4lan\xF4\u0665\u0200;cdl\u0665\u20D2\u20D5\u20E5c;\u6AA9ot\u0100;o\u20DC\u20DD\u6A80\u0100;l\u20E2\u20E3\u6A82;\u6A84\u0100;e\u20EA\u20ED\uC000\u22DB\uFE00s;\u6A94r;\uC000\uD835\uDD24\u0100;g\u0673\u061Bmel;\u6137cy;\u4453\u0200;Eaj\u065A\u210C\u210E\u2110;\u6A92;\u6AA5;\u6AA4\u0200Eaes\u211B\u211D\u2129\u2134;\u6269p\u0100;p\u2123\u2124\u6A8Arox\xBB\u2124\u0100;q\u212E\u212F\u6A88\u0100;q\u212E\u211Bim;\u62E7pf;\uC000\uD835\uDD58\u0100ci\u2143\u2146r;\u610Am\u0180;el\u066B\u214E\u2150;\u6A8E;\u6A90\u8300>;cdlqr\u05EE\u2160\u216A\u216E\u2173\u2179\u0100ci\u2165\u2167;\u6AA7r;\u6A7Aot;\u62D7Par;\u6995uest;\u6A7C\u0280adels\u2184\u216A\u2190\u0656\u219B\u01F0\u2189\0\u218Epro\xF8\u209Er;\u6978q\u0100lq\u063F\u2196les\xF3\u2088i\xED\u066B\u0100en\u21A3\u21ADrtneqq;\uC000\u2269\uFE00\xC5\u21AA\u0500Aabcefkosy\u21C4\u21C7\u21F1\u21F5\u21FA\u2218\u221D\u222F\u2268\u227Dr\xF2\u03A0\u0200ilmr\u21D0\u21D4\u21D7\u21DBrs\xF0\u1484f\xBB\u2024il\xF4\u06A9\u0100dr\u21E0\u21E4cy;\u444A\u0180;cw\u08F4\u21EB\u21EFir;\u6948;\u61ADar;\u610Firc;\u4125\u0180alr\u2201\u220E\u2213rts\u0100;u\u2209\u220A\u6665it\xBB\u220Alip;\u6026con;\u62B9r;\uC000\uD835\uDD25s\u0100ew\u2223\u2229arow;\u6925arow;\u6926\u0280amopr\u223A\u223E\u2243\u225E\u2263rr;\u61FFtht;\u623Bk\u0100lr\u2249\u2253eftarrow;\u61A9ightarrow;\u61AAf;\uC000\uD835\uDD59bar;\u6015\u0180clt\u226F\u2274\u2278r;\uC000\uD835\uDCBDas\xE8\u21F4rok;\u4127\u0100bp\u2282\u2287ull;\u6043hen\xBB\u1C5B\u0AE1\u22A3\0\u22AA\0\u22B8\u22C5\u22CE\0\u22D5\u22F3\0\0\u22F8\u2322\u2367\u2362\u237F\0\u2386\u23AA\u23B4cute\u803B\xED\u40ED\u0180;iy\u0771\u22B0\u22B5rc\u803B\xEE\u40EE;\u4438\u0100cx\u22BC\u22BFy;\u4435cl\u803B\xA1\u40A1\u0100fr\u039F\u22C9;\uC000\uD835\uDD26rave\u803B\xEC\u40EC\u0200;ino\u073E\u22DD\u22E9\u22EE\u0100in\u22E2\u22E6nt;\u6A0Ct;\u622Dfin;\u69DCta;\u6129lig;\u4133\u0180aop\u22FE\u231A\u231D\u0180cgt\u2305\u2308\u2317r;\u412B\u0180elp\u071F\u230F\u2313in\xE5\u078Ear\xF4\u0720h;\u4131f;\u62B7ed;\u41B5\u0280;cfot\u04F4\u232C\u2331\u233D\u2341are;\u6105in\u0100;t\u2338\u2339\u621Eie;\u69DDdo\xF4\u2319\u0280;celp\u0757\u234C\u2350\u235B\u2361al;\u62BA\u0100gr\u2355\u2359er\xF3\u1563\xE3\u234Darhk;\u6A17rod;\u6A3C\u0200cgpt\u236F\u2372\u2376\u237By;\u4451on;\u412Ff;\uC000\uD835\uDD5Aa;\u43B9uest\u803B\xBF\u40BF\u0100ci\u238A\u238Fr;\uC000\uD835\uDCBEn\u0280;Edsv\u04F4\u239B\u239D\u23A1\u04F3;\u62F9ot;\u62F5\u0100;v\u23A6\u23A7\u62F4;\u62F3\u0100;i\u0777\u23AElde;\u4129\u01EB\u23B8\0\u23BCcy;\u4456l\u803B\xEF\u40EF\u0300cfmosu\u23CC\u23D7\u23DC\u23E1\u23E7\u23F5\u0100iy\u23D1\u23D5rc;\u4135;\u4439r;\uC000\uD835\uDD27ath;\u4237pf;\uC000\uD835\uDD5B\u01E3\u23EC\0\u23F1r;\uC000\uD835\uDCBFrcy;\u4458kcy;\u4454\u0400acfghjos\u240B\u2416\u2422\u2427\u242D\u2431\u2435\u243Bppa\u0100;v\u2413\u2414\u43BA;\u43F0\u0100ey\u241B\u2420dil;\u4137;\u443Ar;\uC000\uD835\uDD28reen;\u4138cy;\u4445cy;\u445Cpf;\uC000\uD835\uDD5Ccr;\uC000\uD835\uDCC0\u0B80ABEHabcdefghjlmnoprstuv\u2470\u2481\u2486\u248D\u2491\u250E\u253D\u255A\u2580\u264E\u265E\u2665\u2679\u267D\u269A\u26B2\u26D8\u275D\u2768\u278B\u27C0\u2801\u2812\u0180art\u2477\u247A\u247Cr\xF2\u09C6\xF2\u0395ail;\u691Barr;\u690E\u0100;g\u0994\u248B;\u6A8Bar;\u6962\u0963\u24A5\0\u24AA\0\u24B1\0\0\0\0\0\u24B5\u24BA\0\u24C6\u24C8\u24CD\0\u24F9ute;\u413Amptyv;\u69B4ra\xEE\u084Cbda;\u43BBg\u0180;dl\u088E\u24C1\u24C3;\u6991\xE5\u088E;\u6A85uo\u803B\xAB\u40ABr\u0400;bfhlpst\u0899\u24DE\u24E6\u24E9\u24EB\u24EE\u24F1\u24F5\u0100;f\u089D\u24E3s;\u691Fs;\u691D\xEB\u2252p;\u61ABl;\u6939im;\u6973l;\u61A2\u0180;ae\u24FF\u2500\u2504\u6AABil;\u6919\u0100;s\u2509\u250A\u6AAD;\uC000\u2AAD\uFE00\u0180abr\u2515\u2519\u251Drr;\u690Crk;\u6772\u0100ak\u2522\u252Cc\u0100ek\u2528\u252A;\u407B;\u405B\u0100es\u2531\u2533;\u698Bl\u0100du\u2539\u253B;\u698F;\u698D\u0200aeuy\u2546\u254B\u2556\u2558ron;\u413E\u0100di\u2550\u2554il;\u413C\xEC\u08B0\xE2\u2529;\u443B\u0200cqrs\u2563\u2566\u256D\u257Da;\u6936uo\u0100;r\u0E19\u1746\u0100du\u2572\u2577har;\u6967shar;\u694Bh;\u61B2\u0280;fgqs\u258B\u258C\u0989\u25F3\u25FF\u6264t\u0280ahlrt\u2598\u25A4\u25B7\u25C2\u25E8rrow\u0100;t\u0899\u25A1a\xE9\u24F6arpoon\u0100du\u25AF\u25B4own\xBB\u045Ap\xBB\u0966eftarrows;\u61C7ight\u0180ahs\u25CD\u25D6\u25DErrow\u0100;s\u08F4\u08A7arpoon\xF3\u0F98quigarro\xF7\u21F0hreetimes;\u62CB\u0180;qs\u258B\u0993\u25FAlan\xF4\u09AC\u0280;cdgs\u09AC\u260A\u260D\u261D\u2628c;\u6AA8ot\u0100;o\u2614\u2615\u6A7F\u0100;r\u261A\u261B\u6A81;\u6A83\u0100;e\u2622\u2625\uC000\u22DA\uFE00s;\u6A93\u0280adegs\u2633\u2639\u263D\u2649\u264Bppro\xF8\u24C6ot;\u62D6q\u0100gq\u2643\u2645\xF4\u0989gt\xF2\u248C\xF4\u099Bi\xED\u09B2\u0180ilr\u2655\u08E1\u265Asht;\u697C;\uC000\uD835\uDD29\u0100;E\u099C\u2663;\u6A91\u0161\u2669\u2676r\u0100du\u25B2\u266E\u0100;l\u0965\u2673;\u696Alk;\u6584cy;\u4459\u0280;acht\u0A48\u2688\u268B\u2691\u2696r\xF2\u25C1orne\xF2\u1D08ard;\u696Bri;\u65FA\u0100io\u269F\u26A4dot;\u4140ust\u0100;a\u26AC\u26AD\u63B0che\xBB\u26AD\u0200Eaes\u26BB\u26BD\u26C9\u26D4;\u6268p\u0100;p\u26C3\u26C4\u6A89rox\xBB\u26C4\u0100;q\u26CE\u26CF\u6A87\u0100;q\u26CE\u26BBim;\u62E6\u0400abnoptwz\u26E9\u26F4\u26F7\u271A\u272F\u2741\u2747\u2750\u0100nr\u26EE\u26F1g;\u67ECr;\u61FDr\xEB\u08C1g\u0180lmr\u26FF\u270D\u2714eft\u0100ar\u09E6\u2707ight\xE1\u09F2apsto;\u67FCight\xE1\u09FDparrow\u0100lr\u2725\u2729ef\xF4\u24EDight;\u61AC\u0180afl\u2736\u2739\u273Dr;\u6985;\uC000\uD835\uDD5Dus;\u6A2Dimes;\u6A34\u0161\u274B\u274Fst;\u6217\xE1\u134E\u0180;ef\u2757\u2758\u1800\u65CAnge\xBB\u2758ar\u0100;l\u2764\u2765\u4028t;\u6993\u0280achmt\u2773\u2776\u277C\u2785\u2787r\xF2\u08A8orne\xF2\u1D8Car\u0100;d\u0F98\u2783;\u696D;\u600Eri;\u62BF\u0300achiqt\u2798\u279D\u0A40\u27A2\u27AE\u27BBquo;\u6039r;\uC000\uD835\uDCC1m\u0180;eg\u09B2\u27AA\u27AC;\u6A8D;\u6A8F\u0100bu\u252A\u27B3o\u0100;r\u0E1F\u27B9;\u601Arok;\u4142\u8400<;cdhilqr\u082B\u27D2\u2639\u27DC\u27E0\u27E5\u27EA\u27F0\u0100ci\u27D7\u27D9;\u6AA6r;\u6A79re\xE5\u25F2mes;\u62C9arr;\u6976uest;\u6A7B\u0100Pi\u27F5\u27F9ar;\u6996\u0180;ef\u2800\u092D\u181B\u65C3r\u0100du\u2807\u280Dshar;\u694Ahar;\u6966\u0100en\u2817\u2821rtneqq;\uC000\u2268\uFE00\xC5\u281E\u0700Dacdefhilnopsu\u2840\u2845\u2882\u288E\u2893\u28A0\u28A5\u28A8\u28DA\u28E2\u28E4\u0A83\u28F3\u2902Dot;\u623A\u0200clpr\u284E\u2852\u2863\u287Dr\u803B\xAF\u40AF\u0100et\u2857\u2859;\u6642\u0100;e\u285E\u285F\u6720se\xBB\u285F\u0100;s\u103B\u2868to\u0200;dlu\u103B\u2873\u2877\u287Bow\xEE\u048Cef\xF4\u090F\xF0\u13D1ker;\u65AE\u0100oy\u2887\u288Cmma;\u6A29;\u443Cash;\u6014asuredangle\xBB\u1626r;\uC000\uD835\uDD2Ao;\u6127\u0180cdn\u28AF\u28B4\u28C9ro\u803B\xB5\u40B5\u0200;acd\u1464\u28BD\u28C0\u28C4s\xF4\u16A7ir;\u6AF0ot\u80BB\xB7\u01B5us\u0180;bd\u28D2\u1903\u28D3\u6212\u0100;u\u1D3C\u28D8;\u6A2A\u0163\u28DE\u28E1p;\u6ADB\xF2\u2212\xF0\u0A81\u0100dp\u28E9\u28EEels;\u62A7f;\uC000\uD835\uDD5E\u0100ct\u28F8\u28FDr;\uC000\uD835\uDCC2pos\xBB\u159D\u0180;lm\u2909\u290A\u290D\u43BCtimap;\u62B8\u0C00GLRVabcdefghijlmoprstuvw\u2942\u2953\u297E\u2989\u2998\u29DA\u29E9\u2A15\u2A1A\u2A58\u2A5D\u2A83\u2A95\u2AA4\u2AA8\u2B04\u2B07\u2B44\u2B7F\u2BAE\u2C34\u2C67\u2C7C\u2CE9\u0100gt\u2947\u294B;\uC000\u22D9\u0338\u0100;v\u2950\u0BCF\uC000\u226B\u20D2\u0180elt\u295A\u2972\u2976ft\u0100ar\u2961\u2967rrow;\u61CDightarrow;\u61CE;\uC000\u22D8\u0338\u0100;v\u297B\u0C47\uC000\u226A\u20D2ightarrow;\u61CF\u0100Dd\u298E\u2993ash;\u62AFash;\u62AE\u0280bcnpt\u29A3\u29A7\u29AC\u29B1\u29CCla\xBB\u02DEute;\u4144g;\uC000\u2220\u20D2\u0280;Eiop\u0D84\u29BC\u29C0\u29C5\u29C8;\uC000\u2A70\u0338d;\uC000\u224B\u0338s;\u4149ro\xF8\u0D84ur\u0100;a\u29D3\u29D4\u666El\u0100;s\u29D3\u0B38\u01F3\u29DF\0\u29E3p\u80BB\xA0\u0B37mp\u0100;e\u0BF9\u0C00\u0280aeouy\u29F4\u29FE\u2A03\u2A10\u2A13\u01F0\u29F9\0\u29FB;\u6A43on;\u4148dil;\u4146ng\u0100;d\u0D7E\u2A0Aot;\uC000\u2A6D\u0338p;\u6A42;\u443Dash;\u6013\u0380;Aadqsx\u0B92\u2A29\u2A2D\u2A3B\u2A41\u2A45\u2A50rr;\u61D7r\u0100hr\u2A33\u2A36k;\u6924\u0100;o\u13F2\u13F0ot;\uC000\u2250\u0338ui\xF6\u0B63\u0100ei\u2A4A\u2A4Ear;\u6928\xED\u0B98ist\u0100;s\u0BA0\u0B9Fr;\uC000\uD835\uDD2B\u0200Eest\u0BC5\u2A66\u2A79\u2A7C\u0180;qs\u0BBC\u2A6D\u0BE1\u0180;qs\u0BBC\u0BC5\u2A74lan\xF4\u0BE2i\xED\u0BEA\u0100;r\u0BB6\u2A81\xBB\u0BB7\u0180Aap\u2A8A\u2A8D\u2A91r\xF2\u2971rr;\u61AEar;\u6AF2\u0180;sv\u0F8D\u2A9C\u0F8C\u0100;d\u2AA1\u2AA2\u62FC;\u62FAcy;\u445A\u0380AEadest\u2AB7\u2ABA\u2ABE\u2AC2\u2AC5\u2AF6\u2AF9r\xF2\u2966;\uC000\u2266\u0338rr;\u619Ar;\u6025\u0200;fqs\u0C3B\u2ACE\u2AE3\u2AEFt\u0100ar\u2AD4\u2AD9rro\xF7\u2AC1ightarro\xF7\u2A90\u0180;qs\u0C3B\u2ABA\u2AEAlan\xF4\u0C55\u0100;s\u0C55\u2AF4\xBB\u0C36i\xED\u0C5D\u0100;r\u0C35\u2AFEi\u0100;e\u0C1A\u0C25i\xE4\u0D90\u0100pt\u2B0C\u2B11f;\uC000\uD835\uDD5F\u8180\xAC;in\u2B19\u2B1A\u2B36\u40ACn\u0200;Edv\u0B89\u2B24\u2B28\u2B2E;\uC000\u22F9\u0338ot;\uC000\u22F5\u0338\u01E1\u0B89\u2B33\u2B35;\u62F7;\u62F6i\u0100;v\u0CB8\u2B3C\u01E1\u0CB8\u2B41\u2B43;\u62FE;\u62FD\u0180aor\u2B4B\u2B63\u2B69r\u0200;ast\u0B7B\u2B55\u2B5A\u2B5Flle\xEC\u0B7Bl;\uC000\u2AFD\u20E5;\uC000\u2202\u0338lint;\u6A14\u0180;ce\u0C92\u2B70\u2B73u\xE5\u0CA5\u0100;c\u0C98\u2B78\u0100;e\u0C92\u2B7D\xF1\u0C98\u0200Aait\u2B88\u2B8B\u2B9D\u2BA7r\xF2\u2988rr\u0180;cw\u2B94\u2B95\u2B99\u619B;\uC000\u2933\u0338;\uC000\u219D\u0338ghtarrow\xBB\u2B95ri\u0100;e\u0CCB\u0CD6\u0380chimpqu\u2BBD\u2BCD\u2BD9\u2B04\u0B78\u2BE4\u2BEF\u0200;cer\u0D32\u2BC6\u0D37\u2BC9u\xE5\u0D45;\uC000\uD835\uDCC3ort\u026D\u2B05\0\0\u2BD6ar\xE1\u2B56m\u0100;e\u0D6E\u2BDF\u0100;q\u0D74\u0D73su\u0100bp\u2BEB\u2BED\xE5\u0CF8\xE5\u0D0B\u0180bcp\u2BF6\u2C11\u2C19\u0200;Ees\u2BFF\u2C00\u0D22\u2C04\u6284;\uC000\u2AC5\u0338et\u0100;e\u0D1B\u2C0Bq\u0100;q\u0D23\u2C00c\u0100;e\u0D32\u2C17\xF1\u0D38\u0200;Ees\u2C22\u2C23\u0D5F\u2C27\u6285;\uC000\u2AC6\u0338et\u0100;e\u0D58\u2C2Eq\u0100;q\u0D60\u2C23\u0200gilr\u2C3D\u2C3F\u2C45\u2C47\xEC\u0BD7lde\u803B\xF1\u40F1\xE7\u0C43iangle\u0100lr\u2C52\u2C5Ceft\u0100;e\u0C1A\u2C5A\xF1\u0C26ight\u0100;e\u0CCB\u2C65\xF1\u0CD7\u0100;m\u2C6C\u2C6D\u43BD\u0180;es\u2C74\u2C75\u2C79\u4023ro;\u6116p;\u6007\u0480DHadgilrs\u2C8F\u2C94\u2C99\u2C9E\u2CA3\u2CB0\u2CB6\u2CD3\u2CE3ash;\u62ADarr;\u6904p;\uC000\u224D\u20D2ash;\u62AC\u0100et\u2CA8\u2CAC;\uC000\u2265\u20D2;\uC000>\u20D2nfin;\u69DE\u0180Aet\u2CBD\u2CC1\u2CC5rr;\u6902;\uC000\u2264\u20D2\u0100;r\u2CCA\u2CCD\uC000<\u20D2ie;\uC000\u22B4\u20D2\u0100At\u2CD8\u2CDCrr;\u6903rie;\uC000\u22B5\u20D2im;\uC000\u223C\u20D2\u0180Aan\u2CF0\u2CF4\u2D02rr;\u61D6r\u0100hr\u2CFA\u2CFDk;\u6923\u0100;o\u13E7\u13E5ear;\u6927\u1253\u1A95\0\0\0\0\0\0\0\0\0\0\0\0\0\u2D2D\0\u2D38\u2D48\u2D60\u2D65\u2D72\u2D84\u1B07\0\0\u2D8D\u2DAB\0\u2DC8\u2DCE\0\u2DDC\u2E19\u2E2B\u2E3E\u2E43\u0100cs\u2D31\u1A97ute\u803B\xF3\u40F3\u0100iy\u2D3C\u2D45r\u0100;c\u1A9E\u2D42\u803B\xF4\u40F4;\u443E\u0280abios\u1AA0\u2D52\u2D57\u01C8\u2D5Alac;\u4151v;\u6A38old;\u69BClig;\u4153\u0100cr\u2D69\u2D6Dir;\u69BF;\uC000\uD835\uDD2C\u036F\u2D79\0\0\u2D7C\0\u2D82n;\u42DBave\u803B\xF2\u40F2;\u69C1\u0100bm\u2D88\u0DF4ar;\u69B5\u0200acit\u2D95\u2D98\u2DA5\u2DA8r\xF2\u1A80\u0100ir\u2D9D\u2DA0r;\u69BEoss;\u69BBn\xE5\u0E52;\u69C0\u0180aei\u2DB1\u2DB5\u2DB9cr;\u414Dga;\u43C9\u0180cdn\u2DC0\u2DC5\u01CDron;\u43BF;\u69B6pf;\uC000\uD835\uDD60\u0180ael\u2DD4\u2DD7\u01D2r;\u69B7rp;\u69B9\u0380;adiosv\u2DEA\u2DEB\u2DEE\u2E08\u2E0D\u2E10\u2E16\u6228r\xF2\u1A86\u0200;efm\u2DF7\u2DF8\u2E02\u2E05\u6A5Dr\u0100;o\u2DFE\u2DFF\u6134f\xBB\u2DFF\u803B\xAA\u40AA\u803B\xBA\u40BAgof;\u62B6r;\u6A56lope;\u6A57;\u6A5B\u0180clo\u2E1F\u2E21\u2E27\xF2\u2E01ash\u803B\xF8\u40F8l;\u6298i\u016C\u2E2F\u2E34de\u803B\xF5\u40F5es\u0100;a\u01DB\u2E3As;\u6A36ml\u803B\xF6\u40F6bar;\u633D\u0AE1\u2E5E\0\u2E7D\0\u2E80\u2E9D\0\u2EA2\u2EB9\0\0\u2ECB\u0E9C\0\u2F13\0\0\u2F2B\u2FBC\0\u2FC8r\u0200;ast\u0403\u2E67\u2E72\u0E85\u8100\xB6;l\u2E6D\u2E6E\u40B6le\xEC\u0403\u0269\u2E78\0\0\u2E7Bm;\u6AF3;\u6AFDy;\u443Fr\u0280cimpt\u2E8B\u2E8F\u2E93\u1865\u2E97nt;\u4025od;\u402Eil;\u6030enk;\u6031r;\uC000\uD835\uDD2D\u0180imo\u2EA8\u2EB0\u2EB4\u0100;v\u2EAD\u2EAE\u43C6;\u43D5ma\xF4\u0A76ne;\u660E\u0180;tv\u2EBF\u2EC0\u2EC8\u43C0chfork\xBB\u1FFD;\u43D6\u0100au\u2ECF\u2EDFn\u0100ck\u2ED5\u2EDDk\u0100;h\u21F4\u2EDB;\u610E\xF6\u21F4s\u0480;abcdemst\u2EF3\u2EF4\u1908\u2EF9\u2EFD\u2F04\u2F06\u2F0A\u2F0E\u402Bcir;\u6A23ir;\u6A22\u0100ou\u1D40\u2F02;\u6A25;\u6A72n\u80BB\xB1\u0E9Dim;\u6A26wo;\u6A27\u0180ipu\u2F19\u2F20\u2F25ntint;\u6A15f;\uC000\uD835\uDD61nd\u803B\xA3\u40A3\u0500;Eaceinosu\u0EC8\u2F3F\u2F41\u2F44\u2F47\u2F81\u2F89\u2F92\u2F7E\u2FB6;\u6AB3p;\u6AB7u\xE5\u0ED9\u0100;c\u0ECE\u2F4C\u0300;acens\u0EC8\u2F59\u2F5F\u2F66\u2F68\u2F7Eppro\xF8\u2F43urlye\xF1\u0ED9\xF1\u0ECE\u0180aes\u2F6F\u2F76\u2F7Approx;\u6AB9qq;\u6AB5im;\u62E8i\xED\u0EDFme\u0100;s\u2F88\u0EAE\u6032\u0180Eas\u2F78\u2F90\u2F7A\xF0\u2F75\u0180dfp\u0EEC\u2F99\u2FAF\u0180als\u2FA0\u2FA5\u2FAAlar;\u632Eine;\u6312urf;\u6313\u0100;t\u0EFB\u2FB4\xEF\u0EFBrel;\u62B0\u0100ci\u2FC0\u2FC5r;\uC000\uD835\uDCC5;\u43C8ncsp;\u6008\u0300fiopsu\u2FDA\u22E2\u2FDF\u2FE5\u2FEB\u2FF1r;\uC000\uD835\uDD2Epf;\uC000\uD835\uDD62rime;\u6057cr;\uC000\uD835\uDCC6\u0180aeo\u2FF8\u3009\u3013t\u0100ei\u2FFE\u3005rnion\xF3\u06B0nt;\u6A16st\u0100;e\u3010\u3011\u403F\xF1\u1F19\xF4\u0F14\u0A80ABHabcdefhilmnoprstux\u3040\u3051\u3055\u3059\u30E0\u310E\u312B\u3147\u3162\u3172\u318E\u3206\u3215\u3224\u3229\u3258\u326E\u3272\u3290\u32B0\u32B7\u0180art\u3047\u304A\u304Cr\xF2\u10B3\xF2\u03DDail;\u691Car\xF2\u1C65ar;\u6964\u0380cdenqrt\u3068\u3075\u3078\u307F\u308F\u3094\u30CC\u0100eu\u306D\u3071;\uC000\u223D\u0331te;\u4155i\xE3\u116Emptyv;\u69B3g\u0200;del\u0FD1\u3089\u308B\u308D;\u6992;\u69A5\xE5\u0FD1uo\u803B\xBB\u40BBr\u0580;abcfhlpstw\u0FDC\u30AC\u30AF\u30B7\u30B9\u30BC\u30BE\u30C0\u30C3\u30C7\u30CAp;\u6975\u0100;f\u0FE0\u30B4s;\u6920;\u6933s;\u691E\xEB\u225D\xF0\u272El;\u6945im;\u6974l;\u61A3;\u619D\u0100ai\u30D1\u30D5il;\u691Ao\u0100;n\u30DB\u30DC\u6236al\xF3\u0F1E\u0180abr\u30E7\u30EA\u30EEr\xF2\u17E5rk;\u6773\u0100ak\u30F3\u30FDc\u0100ek\u30F9\u30FB;\u407D;\u405D\u0100es\u3102\u3104;\u698Cl\u0100du\u310A\u310C;\u698E;\u6990\u0200aeuy\u3117\u311C\u3127\u3129ron;\u4159\u0100di\u3121\u3125il;\u4157\xEC\u0FF2\xE2\u30FA;\u4440\u0200clqs\u3134\u3137\u313D\u3144a;\u6937dhar;\u6969uo\u0100;r\u020E\u020Dh;\u61B3\u0180acg\u314E\u315F\u0F44l\u0200;ips\u0F78\u3158\u315B\u109Cn\xE5\u10BBar\xF4\u0FA9t;\u65AD\u0180ilr\u3169\u1023\u316Esht;\u697D;\uC000\uD835\uDD2F\u0100ao\u3177\u3186r\u0100du\u317D\u317F\xBB\u047B\u0100;l\u1091\u3184;\u696C\u0100;v\u318B\u318C\u43C1;\u43F1\u0180gns\u3195\u31F9\u31FCht\u0300ahlrst\u31A4\u31B0\u31C2\u31D8\u31E4\u31EErrow\u0100;t\u0FDC\u31ADa\xE9\u30C8arpoon\u0100du\u31BB\u31BFow\xEE\u317Ep\xBB\u1092eft\u0100ah\u31CA\u31D0rrow\xF3\u0FEAarpoon\xF3\u0551ightarrows;\u61C9quigarro\xF7\u30CBhreetimes;\u62CCg;\u42DAingdotse\xF1\u1F32\u0180ahm\u320D\u3210\u3213r\xF2\u0FEAa\xF2\u0551;\u600Foust\u0100;a\u321E\u321F\u63B1che\xBB\u321Fmid;\u6AEE\u0200abpt\u3232\u323D\u3240\u3252\u0100nr\u3237\u323Ag;\u67EDr;\u61FEr\xEB\u1003\u0180afl\u3247\u324A\u324Er;\u6986;\uC000\uD835\uDD63us;\u6A2Eimes;\u6A35\u0100ap\u325D\u3267r\u0100;g\u3263\u3264\u4029t;\u6994olint;\u6A12ar\xF2\u31E3\u0200achq\u327B\u3280\u10BC\u3285quo;\u603Ar;\uC000\uD835\uDCC7\u0100bu\u30FB\u328Ao\u0100;r\u0214\u0213\u0180hir\u3297\u329B\u32A0re\xE5\u31F8mes;\u62CAi\u0200;efl\u32AA\u1059\u1821\u32AB\u65B9tri;\u69CEluhar;\u6968;\u611E\u0D61\u32D5\u32DB\u32DF\u332C\u3338\u3371\0\u337A\u33A4\0\0\u33EC\u33F0\0\u3428\u3448\u345A\u34AD\u34B1\u34CA\u34F1\0\u3616\0\0\u3633cute;\u415Bqu\xEF\u27BA\u0500;Eaceinpsy\u11ED\u32F3\u32F5\u32FF\u3302\u330B\u330F\u331F\u3326\u3329;\u6AB4\u01F0\u32FA\0\u32FC;\u6AB8on;\u4161u\xE5\u11FE\u0100;d\u11F3\u3307il;\u415Frc;\u415D\u0180Eas\u3316\u3318\u331B;\u6AB6p;\u6ABAim;\u62E9olint;\u6A13i\xED\u1204;\u4441ot\u0180;be\u3334\u1D47\u3335\u62C5;\u6A66\u0380Aacmstx\u3346\u334A\u3357\u335B\u335E\u3363\u336Drr;\u61D8r\u0100hr\u3350\u3352\xEB\u2228\u0100;o\u0A36\u0A34t\u803B\xA7\u40A7i;\u403Bwar;\u6929m\u0100in\u3369\xF0nu\xF3\xF1t;\u6736r\u0100;o\u3376\u2055\uC000\uD835\uDD30\u0200acoy\u3382\u3386\u3391\u33A0rp;\u666F\u0100hy\u338B\u338Fcy;\u4449;\u4448rt\u026D\u3399\0\0\u339Ci\xE4\u1464ara\xEC\u2E6F\u803B\xAD\u40AD\u0100gm\u33A8\u33B4ma\u0180;fv\u33B1\u33B2\u33B2\u43C3;\u43C2\u0400;deglnpr\u12AB\u33C5\u33C9\u33CE\u33D6\u33DE\u33E1\u33E6ot;\u6A6A\u0100;q\u12B1\u12B0\u0100;E\u33D3\u33D4\u6A9E;\u6AA0\u0100;E\u33DB\u33DC\u6A9D;\u6A9Fe;\u6246lus;\u6A24arr;\u6972ar\xF2\u113D\u0200aeit\u33F8\u3408\u340F\u3417\u0100ls\u33FD\u3404lsetm\xE9\u336Ahp;\u6A33parsl;\u69E4\u0100dl\u1463\u3414e;\u6323\u0100;e\u341C\u341D\u6AAA\u0100;s\u3422\u3423\u6AAC;\uC000\u2AAC\uFE00\u0180flp\u342E\u3433\u3442tcy;\u444C\u0100;b\u3438\u3439\u402F\u0100;a\u343E\u343F\u69C4r;\u633Ff;\uC000\uD835\uDD64a\u0100dr\u344D\u0402es\u0100;u\u3454\u3455\u6660it\xBB\u3455\u0180csu\u3460\u3479\u349F\u0100au\u3465\u346Fp\u0100;s\u1188\u346B;\uC000\u2293\uFE00p\u0100;s\u11B4\u3475;\uC000\u2294\uFE00u\u0100bp\u347F\u348F\u0180;es\u1197\u119C\u3486et\u0100;e\u1197\u348D\xF1\u119D\u0180;es\u11A8\u11AD\u3496et\u0100;e\u11A8\u349D\xF1\u11AE\u0180;af\u117B\u34A6\u05B0r\u0165\u34AB\u05B1\xBB\u117Car\xF2\u1148\u0200cemt\u34B9\u34BE\u34C2\u34C5r;\uC000\uD835\uDCC8tm\xEE\xF1i\xEC\u3415ar\xE6\u11BE\u0100ar\u34CE\u34D5r\u0100;f\u34D4\u17BF\u6606\u0100an\u34DA\u34EDight\u0100ep\u34E3\u34EApsilo\xEE\u1EE0h\xE9\u2EAFs\xBB\u2852\u0280bcmnp\u34FB\u355E\u1209\u358B\u358E\u0480;Edemnprs\u350E\u350F\u3511\u3515\u351E\u3523\u352C\u3531\u3536\u6282;\u6AC5ot;\u6ABD\u0100;d\u11DA\u351Aot;\u6AC3ult;\u6AC1\u0100Ee\u3528\u352A;\u6ACB;\u628Alus;\u6ABFarr;\u6979\u0180eiu\u353D\u3552\u3555t\u0180;en\u350E\u3545\u354Bq\u0100;q\u11DA\u350Feq\u0100;q\u352B\u3528m;\u6AC7\u0100bp\u355A\u355C;\u6AD5;\u6AD3c\u0300;acens\u11ED\u356C\u3572\u3579\u357B\u3326ppro\xF8\u32FAurlye\xF1\u11FE\xF1\u11F3\u0180aes\u3582\u3588\u331Bppro\xF8\u331Aq\xF1\u3317g;\u666A\u0680123;Edehlmnps\u35A9\u35AC\u35AF\u121C\u35B2\u35B4\u35C0\u35C9\u35D5\u35DA\u35DF\u35E8\u35ED\u803B\xB9\u40B9\u803B\xB2\u40B2\u803B\xB3\u40B3;\u6AC6\u0100os\u35B9\u35BCt;\u6ABEub;\u6AD8\u0100;d\u1222\u35C5ot;\u6AC4s\u0100ou\u35CF\u35D2l;\u67C9b;\u6AD7arr;\u697Bult;\u6AC2\u0100Ee\u35E4\u35E6;\u6ACC;\u628Blus;\u6AC0\u0180eiu\u35F4\u3609\u360Ct\u0180;en\u121C\u35FC\u3602q\u0100;q\u1222\u35B2eq\u0100;q\u35E7\u35E4m;\u6AC8\u0100bp\u3611\u3613;\u6AD4;\u6AD6\u0180Aan\u361C\u3620\u362Drr;\u61D9r\u0100hr\u3626\u3628\xEB\u222E\u0100;o\u0A2B\u0A29war;\u692Alig\u803B\xDF\u40DF\u0BE1\u3651\u365D\u3660\u12CE\u3673\u3679\0\u367E\u36C2\0\0\0\0\0\u36DB\u3703\0\u3709\u376C\0\0\0\u3787\u0272\u3656\0\0\u365Bget;\u6316;\u43C4r\xEB\u0E5F\u0180aey\u3666\u366B\u3670ron;\u4165dil;\u4163;\u4442lrec;\u6315r;\uC000\uD835\uDD31\u0200eiko\u3686\u369D\u36B5\u36BC\u01F2\u368B\0\u3691e\u01004f\u1284\u1281a\u0180;sv\u3698\u3699\u369B\u43B8ym;\u43D1\u0100cn\u36A2\u36B2k\u0100as\u36A8\u36AEppro\xF8\u12C1im\xBB\u12ACs\xF0\u129E\u0100as\u36BA\u36AE\xF0\u12C1rn\u803B\xFE\u40FE\u01EC\u031F\u36C6\u22E7es\u8180\xD7;bd\u36CF\u36D0\u36D8\u40D7\u0100;a\u190F\u36D5r;\u6A31;\u6A30\u0180eps\u36E1\u36E3\u3700\xE1\u2A4D\u0200;bcf\u0486\u36EC\u36F0\u36F4ot;\u6336ir;\u6AF1\u0100;o\u36F9\u36FC\uC000\uD835\uDD65rk;\u6ADA\xE1\u3362rime;\u6034\u0180aip\u370F\u3712\u3764d\xE5\u1248\u0380adempst\u3721\u374D\u3740\u3751\u3757\u375C\u375Fngle\u0280;dlqr\u3730\u3731\u3736\u3740\u3742\u65B5own\xBB\u1DBBeft\u0100;e\u2800\u373E\xF1\u092E;\u625Cight\u0100;e\u32AA\u374B\xF1\u105Aot;\u65ECinus;\u6A3Alus;\u6A39b;\u69CDime;\u6A3Bezium;\u63E2\u0180cht\u3772\u377D\u3781\u0100ry\u3777\u377B;\uC000\uD835\uDCC9;\u4446cy;\u445Brok;\u4167\u0100io\u378B\u378Ex\xF4\u1777head\u0100lr\u3797\u37A0eftarro\xF7\u084Fightarrow\xBB\u0F5D\u0900AHabcdfghlmoprstuw\u37D0\u37D3\u37D7\u37E4\u37F0\u37FC\u380E\u381C\u3823\u3834\u3851\u385D\u386B\u38A9\u38CC\u38D2\u38EA\u38F6r\xF2\u03EDar;\u6963\u0100cr\u37DC\u37E2ute\u803B\xFA\u40FA\xF2\u1150r\u01E3\u37EA\0\u37EDy;\u445Eve;\u416D\u0100iy\u37F5\u37FArc\u803B\xFB\u40FB;\u4443\u0180abh\u3803\u3806\u380Br\xF2\u13ADlac;\u4171a\xF2\u13C3\u0100ir\u3813\u3818sht;\u697E;\uC000\uD835\uDD32rave\u803B\xF9\u40F9\u0161\u3827\u3831r\u0100lr\u382C\u382E\xBB\u0957\xBB\u1083lk;\u6580\u0100ct\u3839\u384D\u026F\u383F\0\0\u384Arn\u0100;e\u3845\u3846\u631Cr\xBB\u3846op;\u630Fri;\u65F8\u0100al\u3856\u385Acr;\u416B\u80BB\xA8\u0349\u0100gp\u3862\u3866on;\u4173f;\uC000\uD835\uDD66\u0300adhlsu\u114B\u3878\u387D\u1372\u3891\u38A0own\xE1\u13B3arpoon\u0100lr\u3888\u388Cef\xF4\u382Digh\xF4\u382Fi\u0180;hl\u3899\u389A\u389C\u43C5\xBB\u13FAon\xBB\u389Aparrows;\u61C8\u0180cit\u38B0\u38C4\u38C8\u026F\u38B6\0\0\u38C1rn\u0100;e\u38BC\u38BD\u631Dr\xBB\u38BDop;\u630Eng;\u416Fri;\u65F9cr;\uC000\uD835\uDCCA\u0180dir\u38D9\u38DD\u38E2ot;\u62F0lde;\u4169i\u0100;f\u3730\u38E8\xBB\u1813\u0100am\u38EF\u38F2r\xF2\u38A8l\u803B\xFC\u40FCangle;\u69A7\u0780ABDacdeflnoprsz\u391C\u391F\u3929\u392D\u39B5\u39B8\u39BD\u39DF\u39E4\u39E8\u39F3\u39F9\u39FD\u3A01\u3A20r\xF2\u03F7ar\u0100;v\u3926\u3927\u6AE8;\u6AE9as\xE8\u03E1\u0100nr\u3932\u3937grt;\u699C\u0380eknprst\u34E3\u3946\u394B\u3952\u395D\u3964\u3996app\xE1\u2415othin\xE7\u1E96\u0180hir\u34EB\u2EC8\u3959op\xF4\u2FB5\u0100;h\u13B7\u3962\xEF\u318D\u0100iu\u3969\u396Dgm\xE1\u33B3\u0100bp\u3972\u3984setneq\u0100;q\u397D\u3980\uC000\u228A\uFE00;\uC000\u2ACB\uFE00setneq\u0100;q\u398F\u3992\uC000\u228B\uFE00;\uC000\u2ACC\uFE00\u0100hr\u399B\u399Fet\xE1\u369Ciangle\u0100lr\u39AA\u39AFeft\xBB\u0925ight\xBB\u1051y;\u4432ash\xBB\u1036\u0180elr\u39C4\u39D2\u39D7\u0180;be\u2DEA\u39CB\u39CFar;\u62BBq;\u625Alip;\u62EE\u0100bt\u39DC\u1468a\xF2\u1469r;\uC000\uD835\uDD33tr\xE9\u39AEsu\u0100bp\u39EF\u39F1\xBB\u0D1C\xBB\u0D59pf;\uC000\uD835\uDD67ro\xF0\u0EFBtr\xE9\u39B4\u0100cu\u3A06\u3A0Br;\uC000\uD835\uDCCB\u0100bp\u3A10\u3A18n\u0100Ee\u3980\u3A16\xBB\u397En\u0100Ee\u3992\u3A1E\xBB\u3990igzag;\u699A\u0380cefoprs\u3A36\u3A3B\u3A56\u3A5B\u3A54\u3A61\u3A6Airc;\u4175\u0100di\u3A40\u3A51\u0100bg\u3A45\u3A49ar;\u6A5Fe\u0100;q\u15FA\u3A4F;\u6259erp;\u6118r;\uC000\uD835\uDD34pf;\uC000\uD835\uDD68\u0100;e\u1479\u3A66at\xE8\u1479cr;\uC000\uD835\uDCCC\u0AE3\u178E\u3A87\0\u3A8B\0\u3A90\u3A9B\0\0\u3A9D\u3AA8\u3AAB\u3AAF\0\0\u3AC3\u3ACE\0\u3AD8\u17DC\u17DFtr\xE9\u17D1r;\uC000\uD835\uDD35\u0100Aa\u3A94\u3A97r\xF2\u03C3r\xF2\u09F6;\u43BE\u0100Aa\u3AA1\u3AA4r\xF2\u03B8r\xF2\u09EBa\xF0\u2713is;\u62FB\u0180dpt\u17A4\u3AB5\u3ABE\u0100fl\u3ABA\u17A9;\uC000\uD835\uDD69im\xE5\u17B2\u0100Aa\u3AC7\u3ACAr\xF2\u03CEr\xF2\u0A01\u0100cq\u3AD2\u17B8r;\uC000\uD835\uDCCD\u0100pt\u17D6\u3ADCr\xE9\u17D4\u0400acefiosu\u3AF0\u3AFD\u3B08\u3B0C\u3B11\u3B15\u3B1B\u3B21c\u0100uy\u3AF6\u3AFBte\u803B\xFD\u40FD;\u444F\u0100iy\u3B02\u3B06rc;\u4177;\u444Bn\u803B\xA5\u40A5r;\uC000\uD835\uDD36cy;\u4457pf;\uC000\uD835\uDD6Acr;\uC000\uD835\uDCCE\u0100cm\u3B26\u3B29y;\u444El\u803B\xFF\u40FF\u0500acdefhiosw\u3B42\u3B48\u3B54\u3B58\u3B64\u3B69\u3B6D\u3B74\u3B7A\u3B80cute;\u417A\u0100ay\u3B4D\u3B52ron;\u417E;\u4437ot;\u417C\u0100et\u3B5D\u3B61tr\xE6\u155Fa;\u43B6r;\uC000\uD835\uDD37cy;\u4436grarr;\u61DDpf;\uC000\uD835\uDD6Bcr;\uC000\uD835\uDCCF\u0100jn\u3B85\u3B87;\u600Dj;\u600C'.split("").map((c) => c.charCodeAt(0)));

// node_modules/entities/lib/esm/generated/decode-data-xml.js
var decode_data_xml_default = new Uint16Array("\u0200aglq\t\x15\x18\x1B\u026D\x0F\0\0\x12p;\u4026os;\u4027t;\u403Et;\u403Cuot;\u4022".split("").map((c) => c.charCodeAt(0)));

// node_modules/entities/lib/esm/decode_codepoint.js
function replaceCodePoint(codePoint) {
  var _a7;
  if (codePoint >= 55296 && codePoint <= 57343 || codePoint > 1114111) {
    return 65533;
  }
  return (_a7 = decodeMap.get(codePoint)) !== null && _a7 !== undefined ? _a7 : codePoint;
}
var _a7;
var decodeMap = new Map([
  [0, 65533],
  [128, 8364],
  [130, 8218],
  [131, 402],
  [132, 8222],
  [133, 8230],
  [134, 8224],
  [135, 8225],
  [136, 710],
  [137, 8240],
  [138, 352],
  [139, 8249],
  [140, 338],
  [142, 381],
  [145, 8216],
  [146, 8217],
  [147, 8220],
  [148, 8221],
  [149, 8226],
  [150, 8211],
  [151, 8212],
  [152, 732],
  [153, 8482],
  [154, 353],
  [155, 8250],
  [156, 339],
  [158, 382],
  [159, 376]
]);
var fromCodePoint = (_a7 = String.fromCodePoint) !== null && _a7 !== undefined ? _a7 : function(codePoint) {
  let output = "";
  if (codePoint > 65535) {
    codePoint -= 65536;
    output += String.fromCharCode(codePoint >>> 10 & 1023 | 55296);
    codePoint = 56320 | codePoint & 1023;
  }
  output += String.fromCharCode(codePoint);
  return output;
};

// node_modules/entities/lib/esm/decode.js
var isNumber3 = function(code2) {
  return code2 >= CharCodes.ZERO && code2 <= CharCodes.NINE;
};
var isHexadecimalCharacter = function(code2) {
  return code2 >= CharCodes.UPPER_A && code2 <= CharCodes.UPPER_F || code2 >= CharCodes.LOWER_A && code2 <= CharCodes.LOWER_F;
};
var isAsciiAlphaNumeric = function(code2) {
  return code2 >= CharCodes.UPPER_A && code2 <= CharCodes.UPPER_Z || code2 >= CharCodes.LOWER_A && code2 <= CharCodes.LOWER_Z || isNumber3(code2);
};
var isEntityInAttributeInvalidEnd = function(code2) {
  return code2 === CharCodes.EQUALS || isAsciiAlphaNumeric(code2);
};
var getDecoder = function(decodeTree) {
  let ret = "";
  const decoder = new EntityDecoder(decodeTree, (str) => ret += fromCodePoint(str));
  return function decodeWithTrie(str, decodeMode) {
    let lastIndex = 0;
    let offset3 = 0;
    while ((offset3 = str.indexOf("&", offset3)) >= 0) {
      ret += str.slice(lastIndex, offset3);
      decoder.startEntity(decodeMode);
      const len = decoder.write(str, offset3 + 1);
      if (len < 0) {
        lastIndex = offset3 + decoder.end();
        break;
      }
      lastIndex = offset3 + len;
      offset3 = len === 0 ? lastIndex + 1 : lastIndex;
    }
    const result = ret + str.slice(lastIndex);
    ret = "";
    return result;
  };
};
function determineBranch(decodeTree, current, nodeIdx, char) {
  const branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;
  const jumpOffset = current & BinTrieFlags.JUMP_TABLE;
  if (branchCount === 0) {
    return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;
  }
  if (jumpOffset) {
    const value2 = char - jumpOffset;
    return value2 < 0 || value2 >= branchCount ? -1 : decodeTree[nodeIdx + value2] - 1;
  }
  let lo = nodeIdx;
  let hi = lo + branchCount - 1;
  while (lo <= hi) {
    const mid = lo + hi >>> 1;
    const midVal = decodeTree[mid];
    if (midVal < char) {
      lo = mid + 1;
    } else if (midVal > char) {
      hi = mid - 1;
    } else {
      return decodeTree[mid + branchCount];
    }
  }
  return -1;
}
function decodeHTML(str, mode2 = DecodingMode.Legacy) {
  return htmlDecoder(str, mode2);
}
function decodeHTMLAttribute(str) {
  return htmlDecoder(str, DecodingMode.Attribute);
}
var CharCodes;
(function(CharCodes2) {
  CharCodes2[CharCodes2["NUM"] = 35] = "NUM";
  CharCodes2[CharCodes2["SEMI"] = 59] = "SEMI";
  CharCodes2[CharCodes2["EQUALS"] = 61] = "EQUALS";
  CharCodes2[CharCodes2["ZERO"] = 48] = "ZERO";
  CharCodes2[CharCodes2["NINE"] = 57] = "NINE";
  CharCodes2[CharCodes2["LOWER_A"] = 97] = "LOWER_A";
  CharCodes2[CharCodes2["LOWER_F"] = 102] = "LOWER_F";
  CharCodes2[CharCodes2["LOWER_X"] = 120] = "LOWER_X";
  CharCodes2[CharCodes2["LOWER_Z"] = 122] = "LOWER_Z";
  CharCodes2[CharCodes2["UPPER_A"] = 65] = "UPPER_A";
  CharCodes2[CharCodes2["UPPER_F"] = 70] = "UPPER_F";
  CharCodes2[CharCodes2["UPPER_Z"] = 90] = "UPPER_Z";
})(CharCodes || (CharCodes = {}));
var TO_LOWER_BIT = 32;
var BinTrieFlags;
(function(BinTrieFlags2) {
  BinTrieFlags2[BinTrieFlags2["VALUE_LENGTH"] = 49152] = "VALUE_LENGTH";
  BinTrieFlags2[BinTrieFlags2["BRANCH_LENGTH"] = 16256] = "BRANCH_LENGTH";
  BinTrieFlags2[BinTrieFlags2["JUMP_TABLE"] = 127] = "JUMP_TABLE";
})(BinTrieFlags || (BinTrieFlags = {}));
var EntityDecoderState;
(function(EntityDecoderState2) {
  EntityDecoderState2[EntityDecoderState2["EntityStart"] = 0] = "EntityStart";
  EntityDecoderState2[EntityDecoderState2["NumericStart"] = 1] = "NumericStart";
  EntityDecoderState2[EntityDecoderState2["NumericDecimal"] = 2] = "NumericDecimal";
  EntityDecoderState2[EntityDecoderState2["NumericHex"] = 3] = "NumericHex";
  EntityDecoderState2[EntityDecoderState2["NamedEntity"] = 4] = "NamedEntity";
})(EntityDecoderState || (EntityDecoderState = {}));
var DecodingMode;
(function(DecodingMode2) {
  DecodingMode2[DecodingMode2["Legacy"] = 0] = "Legacy";
  DecodingMode2[DecodingMode2["Strict"] = 1] = "Strict";
  DecodingMode2[DecodingMode2["Attribute"] = 2] = "Attribute";
})(DecodingMode || (DecodingMode = {}));

class EntityDecoder {
  constructor(decodeTree, emitCodePoint, errors) {
    this.decodeTree = decodeTree;
    this.emitCodePoint = emitCodePoint;
    this.errors = errors;
    this.state = EntityDecoderState.EntityStart;
    this.consumed = 1;
    this.result = 0;
    this.treeIndex = 0;
    this.excess = 1;
    this.decodeMode = DecodingMode.Strict;
  }
  startEntity(decodeMode) {
    this.decodeMode = decodeMode;
    this.state = EntityDecoderState.EntityStart;
    this.result = 0;
    this.treeIndex = 0;
    this.excess = 1;
    this.consumed = 1;
  }
  write(str, offset3) {
    switch (this.state) {
      case EntityDecoderState.EntityStart: {
        if (str.charCodeAt(offset3) === CharCodes.NUM) {
          this.state = EntityDecoderState.NumericStart;
          this.consumed += 1;
          return this.stateNumericStart(str, offset3 + 1);
        }
        this.state = EntityDecoderState.NamedEntity;
        return this.stateNamedEntity(str, offset3);
      }
      case EntityDecoderState.NumericStart: {
        return this.stateNumericStart(str, offset3);
      }
      case EntityDecoderState.NumericDecimal: {
        return this.stateNumericDecimal(str, offset3);
      }
      case EntityDecoderState.NumericHex: {
        return this.stateNumericHex(str, offset3);
      }
      case EntityDecoderState.NamedEntity: {
        return this.stateNamedEntity(str, offset3);
      }
    }
  }
  stateNumericStart(str, offset3) {
    if (offset3 >= str.length) {
      return -1;
    }
    if ((str.charCodeAt(offset3) | TO_LOWER_BIT) === CharCodes.LOWER_X) {
      this.state = EntityDecoderState.NumericHex;
      this.consumed += 1;
      return this.stateNumericHex(str, offset3 + 1);
    }
    this.state = EntityDecoderState.NumericDecimal;
    return this.stateNumericDecimal(str, offset3);
  }
  addToNumericResult(str, start3, end3, base) {
    if (start3 !== end3) {
      const digitCount = end3 - start3;
      this.result = this.result * Math.pow(base, digitCount) + parseInt(str.substr(start3, digitCount), base);
      this.consumed += digitCount;
    }
  }
  stateNumericHex(str, offset3) {
    const startIdx = offset3;
    while (offset3 < str.length) {
      const char = str.charCodeAt(offset3);
      if (isNumber3(char) || isHexadecimalCharacter(char)) {
        offset3 += 1;
      } else {
        this.addToNumericResult(str, startIdx, offset3, 16);
        return this.emitNumericEntity(char, 3);
      }
    }
    this.addToNumericResult(str, startIdx, offset3, 16);
    return -1;
  }
  stateNumericDecimal(str, offset3) {
    const startIdx = offset3;
    while (offset3 < str.length) {
      const char = str.charCodeAt(offset3);
      if (isNumber3(char)) {
        offset3 += 1;
      } else {
        this.addToNumericResult(str, startIdx, offset3, 10);
        return this.emitNumericEntity(char, 2);
      }
    }
    this.addToNumericResult(str, startIdx, offset3, 10);
    return -1;
  }
  emitNumericEntity(lastCp, expectedLength) {
    var _a8;
    if (this.consumed <= expectedLength) {
      (_a8 = this.errors) === null || _a8 === undefined || _a8.absenceOfDigitsInNumericCharacterReference(this.consumed);
      return 0;
    }
    if (lastCp === CharCodes.SEMI) {
      this.consumed += 1;
    } else if (this.decodeMode === DecodingMode.Strict) {
      return 0;
    }
    this.emitCodePoint(replaceCodePoint(this.result), this.consumed);
    if (this.errors) {
      if (lastCp !== CharCodes.SEMI) {
        this.errors.missingSemicolonAfterCharacterReference();
      }
      this.errors.validateNumericCharacterReference(this.result);
    }
    return this.consumed;
  }
  stateNamedEntity(str, offset3) {
    const { decodeTree } = this;
    let current = decodeTree[this.treeIndex];
    let valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;
    for (;offset3 < str.length; offset3++, this.excess++) {
      const char = str.charCodeAt(offset3);
      this.treeIndex = determineBranch(decodeTree, current, this.treeIndex + Math.max(1, valueLength), char);
      if (this.treeIndex < 0) {
        return this.result === 0 || this.decodeMode === DecodingMode.Attribute && (valueLength === 0 || isEntityInAttributeInvalidEnd(char)) ? 0 : this.emitNotTerminatedNamedEntity();
      }
      current = decodeTree[this.treeIndex];
      valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;
      if (valueLength !== 0) {
        if (char === CharCodes.SEMI) {
          return this.emitNamedEntityData(this.treeIndex, valueLength, this.consumed + this.excess);
        }
        if (this.decodeMode !== DecodingMode.Strict) {
          this.result = this.treeIndex;
          this.consumed += this.excess;
          this.excess = 0;
        }
      }
    }
    return -1;
  }
  emitNotTerminatedNamedEntity() {
    var _a8;
    const { result, decodeTree } = this;
    const valueLength = (decodeTree[result] & BinTrieFlags.VALUE_LENGTH) >> 14;
    this.emitNamedEntityData(result, valueLength, this.consumed);
    (_a8 = this.errors) === null || _a8 === undefined || _a8.missingSemicolonAfterCharacterReference();
    return this.consumed;
  }
  emitNamedEntityData(result, valueLength, consumed) {
    const { decodeTree } = this;
    this.emitCodePoint(valueLength === 1 ? decodeTree[result] & ~BinTrieFlags.VALUE_LENGTH : decodeTree[result + 1], consumed);
    if (valueLength === 3) {
      this.emitCodePoint(decodeTree[result + 2], consumed);
    }
    return consumed;
  }
  end() {
    var _a8;
    switch (this.state) {
      case EntityDecoderState.NamedEntity: {
        return this.result !== 0 && (this.decodeMode !== DecodingMode.Attribute || this.result === this.treeIndex) ? this.emitNotTerminatedNamedEntity() : 0;
      }
      case EntityDecoderState.NumericDecimal: {
        return this.emitNumericEntity(0, 2);
      }
      case EntityDecoderState.NumericHex: {
        return this.emitNumericEntity(0, 3);
      }
      case EntityDecoderState.NumericStart: {
        (_a8 = this.errors) === null || _a8 === undefined || _a8.absenceOfDigitsInNumericCharacterReference(this.consumed);
        return 0;
      }
      case EntityDecoderState.EntityStart: {
        return 0;
      }
    }
  }
}
var htmlDecoder = getDecoder(decode_data_html_default);
var xmlDecoder = getDecoder(decode_data_xml_default);

// node_modules/entities/lib/esm/escape.js
var getEscaper = function(regex, map) {
  return function escape(data2) {
    let match;
    let lastIdx = 0;
    let result = "";
    while (match = regex.exec(data2)) {
      if (lastIdx !== match.index) {
        result += data2.substring(lastIdx, match.index);
      }
      result += map.get(match[0].charCodeAt(0));
      lastIdx = match.index + 1;
    }
    return result + data2.substring(lastIdx);
  };
};
var xmlCodeMap = new Map([
  [34, "&quot;"],
  [38, "&amp;"],
  [39, "&apos;"],
  [60, "&lt;"],
  [62, "&gt;"]
]);
var getCodePoint = String.prototype.codePointAt != null ? (str, index) => str.codePointAt(index) : (c, index) => (c.charCodeAt(index) & 64512) === 55296 ? (c.charCodeAt(index) - 55296) * 1024 + c.charCodeAt(index + 1) - 56320 + 65536 : c.charCodeAt(index);
var escapeUTF8 = getEscaper(/[&<>'"]/g, xmlCodeMap);
var escapeAttribute = getEscaper(/["&\u00A0]/g, new Map([
  [34, "&quot;"],
  [38, "&amp;"],
  [160, "&nbsp;"]
]));
var escapeText = getEscaper(/[&<>\u00A0]/g, new Map([
  [38, "&amp;"],
  [60, "&lt;"],
  [62, "&gt;"],
  [160, "&nbsp;"]
]));
// node_modules/entities/lib/esm/index.js
var EntityLevel;
(function(EntityLevel2) {
  EntityLevel2[EntityLevel2["XML"] = 0] = "XML";
  EntityLevel2[EntityLevel2["HTML"] = 1] = "HTML";
})(EntityLevel || (EntityLevel = {}));
var EncodingMode;
(function(EncodingMode2) {
  EncodingMode2[EncodingMode2["UTF8"] = 0] = "UTF8";
  EncodingMode2[EncodingMode2["ASCII"] = 1] = "ASCII";
  EncodingMode2[EncodingMode2["Extensive"] = 2] = "Extensive";
  EncodingMode2[EncodingMode2["Attribute"] = 3] = "Attribute";
  EncodingMode2[EncodingMode2["Text"] = 4] = "Text";
})(EncodingMode || (EncodingMode = {}));

// node_modules/happy-dom-without-node/lib/xml-parser/XMLParser.js
var MARKUP_REGEXP = /<([a-zA-Z0-9-]+)|<\/([a-zA-Z0-9-]+)\s*>|<!--([^-]+)-->|<!--([^>]+)>|<!([^>]*)>|<\?([^>]+)>|(\/>)|(>)/gm;
var ATTRIBUTE_REGEXP = /\s*([a-zA-Z0-9-_:.$@?]+) *= *([a-zA-Z0-9-_:.$@?{}/]+)|\s*([a-zA-Z0-9-_:.$@?]+) *= *"([^"]*)("{0,1})|\s*([a-zA-Z0-9-_:.$@?]+) *= *'([^']*)('{0,1})|\s*([a-zA-Z0-9-_:.$@?]+)/gm;
var MarkupReadStateEnum;
(function(MarkupReadStateEnum2) {
  MarkupReadStateEnum2["startOrEndTag"] = "startOrEndTag";
  MarkupReadStateEnum2["insideStartTag"] = "insideStartTag";
  MarkupReadStateEnum2["plainTextContent"] = "plainTextContent";
})(MarkupReadStateEnum || (MarkupReadStateEnum = {}));
var DOCUMENT_TYPE_ATTRIBUTE_REGEXP = /"([^"]+)"/gm;

class XMLParser {
  static parse(document2, xml, options3) {
    const root = options3 && options3.rootNode ? options3.rootNode : document2.createDocumentFragment();
    const stack = [root];
    const stackTagNames = [];
    const markupRegexp = new RegExp(MARKUP_REGEXP, "gm");
    const { evaluateScripts = false } = options3 || {};
    let currentNode = root;
    let match;
    let readState = MarkupReadStateEnum.startOrEndTag;
    let startTagIndex = 0;
    let lastIndex = 0;
    if (xml !== null && xml !== undefined) {
      xml = String(xml);
      while (match = markupRegexp.exec(xml)) {
        switch (readState) {
          case MarkupReadStateEnum.startOrEndTag:
            if (match.index !== lastIndex && (match[1] || match[2] || match[3] || match[4] || match[5] !== undefined || match[6])) {
              currentNode.appendChild(document2.createTextNode(decodeHTML(xml.substring(lastIndex, match.index))));
            }
            if (match[1]) {
              const tagName5 = match[1].toUpperCase();
              const localName2 = tagName5 === "SVG" ? "svg" : match[1];
              const config = HTMLElementConfig_default[localName2];
              if (config?.contentModel === HTMLElementConfigContentModelEnum_default.noFirstLevelSelfDescendants && stackTagNames[stackTagNames.length - 1] === tagName5) {
                stack.pop();
                stackTagNames.pop();
                currentNode = stack[stack.length - 1] || root;
              } else if (config?.contentModel === HTMLElementConfigContentModelEnum_default.noSelfDescendants && stackTagNames.includes(tagName5)) {
                while (currentNode !== root) {
                  if (currentNode[tagName3].toUpperCase() === tagName5) {
                    stack.pop();
                    stackTagNames.pop();
                    currentNode = stack[stack.length - 1] || root;
                    break;
                  }
                  stack.pop();
                  stackTagNames.pop();
                  currentNode = stack[stack.length - 1] || root;
                }
              }
              const namespaceURI2 = tagName5 === "SVG" ? NamespaceURI_default.svg : currentNode[namespaceURI] || NamespaceURI_default.html;
              const newElement = document2.createElementNS(namespaceURI2, localName2);
              currentNode.appendChild(newElement);
              currentNode = newElement;
              stack.push(currentNode);
              stackTagNames.push(tagName5);
              readState = MarkupReadStateEnum.insideStartTag;
              startTagIndex = markupRegexp.lastIndex;
            } else if (match[2]) {
              if (match[2].toUpperCase() === currentNode[tagName3]?.toUpperCase()) {
                stack.pop();
                stackTagNames.pop();
                currentNode = stack[stack.length - 1] || root;
              }
            } else if (match[3] || match[4] || match[6] && currentNode[namespaceURI] === NamespaceURI_default.html) {
              let comment2;
              if (match[3]) {
                comment2 = match[3];
              } else if (match[4]) {
                comment2 = match[4].endsWith("--") ? match[4].slice(0, -2) : match[4];
              } else {
                comment2 = "?" + match[6];
              }
              currentNode.appendChild(document2.createComment(decodeHTML(comment2)));
            } else if (match[5] !== undefined) {
              const exclamationComment = decodeHTML(match[5]);
              currentNode.appendChild(this.getDocumentTypeNode(document2, exclamationComment) || document2.createComment(exclamationComment));
            } else if (match[6]) {
            } else {
              currentNode.appendChild(document2.createTextNode(decodeHTML(xml.substring(lastIndex, markupRegexp.lastIndex))));
            }
            break;
          case MarkupReadStateEnum.insideStartTag:
            if (match[7] || match[8]) {
              const attributeString = xml.substring(startTagIndex, match.index);
              let hasAttributeStringEnded = true;
              if (!!attributeString) {
                const attributeRegexp = new RegExp(ATTRIBUTE_REGEXP, "gm");
                let attributeMatch;
                while (attributeMatch = attributeRegexp.exec(attributeString)) {
                  if (attributeMatch[1] && attributeMatch[2] || attributeMatch[3] && attributeMatch[5] === '"' || attributeMatch[6] && attributeMatch[8] === "'" || attributeMatch[9]) {
                    const name2 = attributeMatch[1] || attributeMatch[3] || attributeMatch[6] || attributeMatch[9] || "";
                    const rawValue = attributeMatch[2] || attributeMatch[4] || attributeMatch[7] || "";
                    const value2 = rawValue ? decodeHTMLAttribute(rawValue) : "";
                    const namespaceURI2 = currentNode[namespaceURI] === NamespaceURI_default.svg && name2 === "xmlns" ? NamespaceURI_default.xmlns : null;
                    currentNode.setAttributeNS(namespaceURI2, name2, value2);
                    startTagIndex += attributeMatch[0].length;
                  } else if (!attributeMatch[1] && (attributeMatch[3] && !attributeMatch[5] || attributeMatch[6] && !attributeMatch[8])) {
                    hasAttributeStringEnded = false;
                    break;
                  }
                }
              }
              if (hasAttributeStringEnded) {
                const config = HTMLElementConfig_default[currentNode[localName]];
                if (config?.contentModel === HTMLElementConfigContentModelEnum_default.noDescendants || match[7] && currentNode[namespaceURI] === NamespaceURI_default.svg) {
                  stack.pop();
                  stackTagNames.pop();
                  currentNode = stack[stack.length - 1] || root;
                  readState = MarkupReadStateEnum.startOrEndTag;
                } else {
                  readState = config?.contentModel === HTMLElementConfigContentModelEnum_default.rawText ? MarkupReadStateEnum.plainTextContent : MarkupReadStateEnum.startOrEndTag;
                }
                startTagIndex = markupRegexp.lastIndex;
              }
            }
            break;
          case MarkupReadStateEnum.plainTextContent:
            const tagName4 = currentNode[tagName3];
            if (tagName4 && match[2] && match[2].toUpperCase() === tagName4) {
              if (tagName4 === "SCRIPT") {
                currentNode[evaluateScript] = evaluateScripts;
              } else if (tagName4 === "LINK") {
                currentNode[evaluateCSS] = evaluateScripts;
              }
              currentNode.appendChild(document2.createTextNode(decodeHTML(xml.substring(startTagIndex, match.index))));
              stack.pop();
              stackTagNames.pop();
              currentNode = stack[stack.length - 1] || root;
              readState = MarkupReadStateEnum.startOrEndTag;
            }
            break;
        }
        lastIndex = markupRegexp.lastIndex;
      }
      if (lastIndex !== xml.length) {
        currentNode.appendChild(document2.createTextNode(decodeHTML(xml.substring(lastIndex))));
      }
    }
    return root;
  }
  static getDocumentTypeNode(document2, value2) {
    if (!value2.toUpperCase().startsWith("DOCTYPE")) {
      return null;
    }
    const docTypeSplit = value2.split(" ");
    if (docTypeSplit.length <= 1) {
      return null;
    }
    const docTypeString = docTypeSplit.slice(1).join(" ");
    const attributes2 = [];
    const attributeRegExp = new RegExp(DOCUMENT_TYPE_ATTRIBUTE_REGEXP, "gm");
    const isPublic = docTypeString.toUpperCase().includes("PUBLIC");
    let attributeMatch;
    while (attributeMatch = attributeRegExp.exec(docTypeString)) {
      attributes2.push(attributeMatch[1]);
    }
    const publicId2 = isPublic ? attributes2[0] || "" : "";
    const systemId2 = isPublic ? attributes2[1] || "" : attributes2[0] || "";
    return document2.implementation.createDocumentType(docTypeSplit[1].toLowerCase(), publicId2, systemId2);
  }
}

// node_modules/happy-dom-without-node/lib/xml-serializer/XMLSerializer.js
class XMLSerializer {
  constructor(options3) {
    this.options = {
      includeShadowRoots: false,
      escapeEntities: true
    };
    if (options3) {
      if (options3.includeShadowRoots !== undefined) {
        this.options.includeShadowRoots = options3.includeShadowRoots;
      }
      if (options3.escapeEntities !== undefined) {
        this.options.escapeEntities = options3.escapeEntities;
      }
    }
  }
  serializeToString(root) {
    switch (root[nodeType]) {
      case NodeTypeEnum_default.elementNode:
        const element = root;
        const localName2 = element[localName];
        const config = HTMLElementConfig_default[element[localName]];
        if (config?.contentModel === HTMLElementConfigContentModelEnum_default.noDescendants) {
          return `<${localName2}${this.getAttributes(element)}>`;
        }
        const childNodes2 = localName2 === "template" ? root.content[childNodes] : root[childNodes];
        let innerHTML = "";
        for (const node2 of childNodes2) {
          innerHTML += this.serializeToString(node2);
        }
        if (this.options.includeShadowRoots && element.shadowRoot) {
          innerHTML += `<template shadowrootmode="${element.shadowRoot[mode]}">`;
          for (const node2 of element.shadowRoot[childNodes]) {
            innerHTML += this.serializeToString(node2);
          }
          innerHTML += "</template>";
        }
        return `<${localName2}${this.getAttributes(element)}>${innerHTML}</${localName2}>`;
      case Node_default.DOCUMENT_FRAGMENT_NODE:
      case Node_default.DOCUMENT_NODE:
        let html = "";
        for (const node2 of root[childNodes]) {
          html += this.serializeToString(node2);
        }
        return html;
      case NodeTypeEnum_default.commentNode:
        return `<!--${root.textContent}-->`;
      case NodeTypeEnum_default.processingInstructionNode:
        return `<!--?${root.target} ${root.textContent}?-->`;
      case NodeTypeEnum_default.textNode:
        return this.options.escapeEntities ? escapeText(root.textContent) : root.textContent;
      case NodeTypeEnum_default.documentTypeNode:
        const doctype = root;
        const identifier = doctype.publicId ? " PUBLIC" : doctype.systemId ? " SYSTEM" : "";
        const publicId2 = doctype.publicId ? ` "${doctype.publicId}"` : "";
        const systemId2 = doctype.systemId ? ` "${doctype.systemId}"` : "";
        return `<!DOCTYPE ${doctype.name}${identifier}${publicId2}${systemId2}>`;
    }
    return "";
  }
  getAttributes(element) {
    let attributeString = "";
    if (!element[attributes].getNamedItem("is") && element[isValue]) {
      attributeString += ' is="' + element[isValue] + '"';
    }
    for (let i = 0, max3 = element[attributes].length;i < max3; i++) {
      const attribute = element[attributes][i];
      if (attribute[value] !== null) {
        const escapedValue = this.options.escapeEntities ? escapeText(attribute[value]) : attribute[value];
        attributeString += " " + attribute[name] + '="' + escapedValue + '"';
      }
    }
    return attributeString;
  }
}

// node_modules/happy-dom-without-node/lib/nodes/child-node/ChildNodeUtility.js
class ChildNodeUtility {
  static remove(childNode) {
    if (childNode[parentNode]) {
      childNode[parentNode].removeChild(childNode);
    }
  }
  static replaceWith(childNode, ...nodes) {
    const parent = childNode[parentNode];
    if (!parent) {
      throw new DOMException("This element has no parent node.");
    }
    for (const node2 of nodes) {
      if (typeof node2 === "string") {
        const newChildNodes = XMLParser.parse(childNode[ownerDocument], node2)[childNodes].slice();
        for (const newChildNode of newChildNodes) {
          parent.insertBefore(newChildNode, childNode);
        }
      } else {
        parent.insertBefore(node2, childNode);
      }
    }
    parent.removeChild(childNode);
  }
  static before(childNode, ...nodes) {
    const parent = childNode[parentNode];
    if (!parent) {
      return;
    }
    for (const node2 of nodes) {
      if (typeof node2 === "string") {
        const newChildNodes = XMLParser.parse(childNode[ownerDocument], node2)[childNodes].slice();
        for (const newChildNode of newChildNodes) {
          parent.insertBefore(newChildNode, childNode);
        }
      } else {
        parent.insertBefore(node2, childNode);
      }
    }
  }
  static after(childNode, ...nodes) {
    const parent = childNode[parentNode];
    if (!parent) {
      return;
    }
    const nextSibling = childNode.nextSibling;
    for (const node2 of nodes) {
      if (typeof node2 === "string") {
        const newChildNodes = XMLParser.parse(childNode[ownerDocument], node2)[childNodes].slice();
        for (const newChildNode of newChildNodes) {
          if (!nextSibling) {
            parent.appendChild(newChildNode);
          } else {
            parent.insertBefore(newChildNode, nextSibling);
          }
        }
      } else if (!nextSibling) {
        parent.appendChild(node2);
      } else {
        parent.insertBefore(node2, nextSibling);
      }
    }
  }
}

// node_modules/happy-dom-without-node/lib/nodes/element/HTMLCollection.js
var _a8;

class HTMLCollection extends Array {
  constructor() {
    super(...arguments);
    this[_a8] = {};
  }
  item(index) {
    return index >= 0 && this[index] ? this[index] : null;
  }
  namedItem(name2) {
    return this[namedItems][name2] && this[namedItems][name2].length ? this[namedItems][name2][0] : null;
  }
  [(_a8 = namedItems, appendNamedItem)](node2, name2) {
    if (name2) {
      this[namedItems][name2] = this[namedItems][name2] || [];
      if (!this[namedItems][name2].includes(node2)) {
        this[namedItems][name2].push(node2);
      }
      if (!this.hasOwnProperty(name2) && this[isValidPropertyName](name2)) {
        this[name2] = this[namedItems][name2][0];
      }
    }
  }
  [removeNamedItem](node2, name2) {
    if (name2 && this[namedItems][name2]) {
      const index = this[namedItems][name2].indexOf(node2);
      if (index > -1) {
        this[namedItems][name2].splice(index, 1);
        if (this[namedItems][name2].length === 0) {
          delete this[namedItems][name2];
          if (this.hasOwnProperty(name2) && this[isValidPropertyName](name2)) {
            delete this[name2];
          }
        } else if (this[isValidPropertyName](name2)) {
          this[name2] = this[namedItems][name2][0];
        }
      }
    }
  }
  [isValidPropertyName](name2) {
    return !!name2 && !this.constructor.prototype.hasOwnProperty(name2) && !Array.prototype.hasOwnProperty(name2) && (isNaN(Number(name2)) || name2.includes("."));
  }
}

// node_modules/happy-dom-without-node/lib/nodes/parent-node/ParentNodeUtility.js
class ParentNodeUtility {
  static append(parentNode2, ...nodes) {
    for (const node2 of nodes) {
      if (typeof node2 === "string") {
        XMLParser.parse(parentNode2[ownerDocument], node2, {
          rootNode: parentNode2
        });
      } else {
        parentNode2.appendChild(node2);
      }
    }
  }
  static prepend(parentNode2, ...nodes) {
    const firstChild = parentNode2.firstChild;
    for (const node2 of nodes) {
      if (typeof node2 === "string") {
        const newChildNodes = XMLParser.parse(parentNode2[ownerDocument], node2)[childNodes].slice();
        for (const newChildNode of newChildNodes) {
          parentNode2.insertBefore(newChildNode, firstChild);
        }
      } else {
        parentNode2.insertBefore(node2, firstChild);
      }
    }
  }
  static replaceChildren(parentNode2, ...nodes) {
    for (const node2 of parentNode2[childNodes].slice()) {
      parentNode2.removeChild(node2);
    }
    this.append(parentNode2, ...nodes);
  }
  static getElementsByClassName(parentNode2, className) {
    let matches = new HTMLCollection;
    for (const child of parentNode2[children]) {
      if (child.className.split(" ").includes(className)) {
        matches.push(child);
      }
      matches = matches.concat(this.getElementsByClassName(child, className));
    }
    return matches;
  }
  static getElementsByTagName(parentNode2, tagName4) {
    const upperTagName = tagName4.toUpperCase();
    const includeAll = tagName4 === "*";
    let matches = new HTMLCollection;
    for (const child of parentNode2[children]) {
      if (includeAll || child[tagName3].toUpperCase() === upperTagName) {
        matches.push(child);
      }
      matches = matches.concat(this.getElementsByTagName(child, tagName4));
    }
    return matches;
  }
  static getElementsByTagNameNS(parentNode2, namespaceURI2, tagName4) {
    const formattedTagName = namespaceURI2 === NamespaceURI_default.html ? tagName4.toUpperCase() : tagName4;
    const includeAll = tagName4 === "*";
    let matches = new HTMLCollection;
    for (const child of parentNode2[children]) {
      if ((includeAll || child[tagName3] === formattedTagName) && child[namespaceURI] === namespaceURI2) {
        matches.push(child);
      }
      matches = matches.concat(this.getElementsByTagNameNS(child, namespaceURI2, tagName4));
    }
    return matches;
  }
  static getElementByTagName(parentNode2, tagName4) {
    const upperTagName = tagName4.toUpperCase();
    for (const child of parentNode2[children]) {
      if (child[tagName3] === upperTagName) {
        return child;
      }
      const match = this.getElementByTagName(child, tagName4);
      if (match) {
        return match;
      }
    }
    return null;
  }
  static getElementById(parentNode2, id) {
    id = String(id);
    for (const child of parentNode2[children]) {
      if (child.id === id) {
        return child;
      }
      const match = this.getElementById(child, id);
      if (match) {
        return match;
      }
    }
    return null;
  }
}

// node_modules/happy-dom-without-node/lib/nodes/child-node/NonDocumentChildNodeUtility.js
class NonDocumentChildNodeUtility {
  static previousElementSibling(childNode) {
    let sibling = childNode.previousSibling;
    while (sibling && sibling[nodeType] !== NodeTypeEnum_default.elementNode) {
      sibling = sibling.previousSibling;
    }
    return sibling;
  }
  static nextElementSibling(childNode) {
    let sibling = childNode.nextSibling;
    while (sibling && sibling[nodeType] !== NodeTypeEnum_default.elementNode) {
      sibling = sibling.nextSibling;
    }
    return sibling;
  }
}

// node_modules/happy-dom-without-node/lib/nodes/element/DOMRectList.js
class DOMRectList extends Array {
  item(index) {
    return this[index] ?? null;
  }
}

// node_modules/happy-dom-without-node/lib/nodes/element/ElementUtility.js
var NAMED_ITEM_ATTRIBUTES = ["id", "name"];

class ElementUtility {
  static appendChild(ancestorNode, node2, options3) {
    if (node2[nodeType] === NodeTypeEnum_default.elementNode && node2 !== ancestorNode) {
      if (!options3?.disableAncestorValidation && NodeUtility.isInclusiveAncestor(node2, ancestorNode)) {
        throw new DOMException("Failed to execute 'appendChild' on 'Node': The new node is a parent of the node to insert to.", DOMExceptionNameEnum_default.domException);
      }
      if (node2[parentNode]) {
        const parentNodeChildren = node2[parentNode][children];
        if (parentNodeChildren) {
          const index = parentNodeChildren.indexOf(node2);
          if (index !== -1) {
            for (const attributeName of NAMED_ITEM_ATTRIBUTES) {
              const attribute = node2[attributes].getNamedItem(attributeName);
              if (attribute) {
                parentNodeChildren[removeNamedItem](node2, attribute[value]);
              }
            }
            parentNodeChildren.splice(index, 1);
          }
        }
      }
      const ancestorNodeChildren = ancestorNode[children];
      for (const attributeName of NAMED_ITEM_ATTRIBUTES) {
        const attribute = node2[attributes].getNamedItem(attributeName);
        if (attribute) {
          ancestorNodeChildren[appendNamedItem](node2, attribute[value]);
        }
      }
      ancestorNodeChildren.push(node2);
      NodeUtility.appendChild(ancestorNode, node2, { disableAncestorValidation: true });
    } else {
      NodeUtility.appendChild(ancestorNode, node2, options3);
    }
    return node2;
  }
  static removeChild(ancestorNode, node2) {
    if (node2[nodeType] === NodeTypeEnum_default.elementNode) {
      const ancestorNodeChildren = ancestorNode[children];
      const index = ancestorNodeChildren.indexOf(node2);
      if (index !== -1) {
        for (const attributeName of NAMED_ITEM_ATTRIBUTES) {
          const attribute = node2[attributes].getNamedItem(attributeName);
          if (attribute) {
            ancestorNodeChildren[removeNamedItem](node2, attribute[value]);
          }
        }
        ancestorNodeChildren.splice(index, 1);
      }
    }
    NodeUtility.removeChild(ancestorNode, node2);
    return node2;
  }
  static insertBefore(ancestorNode, newNode, referenceNode, options3) {
    if (newNode === referenceNode) {
      return newNode;
    }
    if (newNode[nodeType] === NodeTypeEnum_default.elementNode && referenceNode) {
      if (!options3?.disableAncestorValidation && NodeUtility.isInclusiveAncestor(newNode, ancestorNode)) {
        throw new DOMException("Failed to execute 'insertBefore' on 'Node': The new node is a parent of the node to insert to.", DOMExceptionNameEnum_default.domException);
      }
      if (newNode[parentNode]) {
        const parentNodeChildren = newNode[parentNode][children];
        if (parentNodeChildren) {
          const index = parentNodeChildren.indexOf(newNode);
          if (index !== -1) {
            for (const attributeName of NAMED_ITEM_ATTRIBUTES) {
              const attribute = newNode[attributes].getNamedItem(attributeName);
              if (attribute) {
                parentNodeChildren[removeNamedItem](newNode, attribute[value]);
              }
            }
            parentNodeChildren.splice(index, 1);
          }
        }
        const parentChildNodes = ancestorNode[childNodes];
        if (parentChildNodes) {
          const index = parentChildNodes.indexOf(newNode);
          if (index !== -1) {
            parentChildNodes.splice(index, 1);
          }
        }
      }
      const ancestorNodeChildren = ancestorNode[children];
      if (referenceNode[nodeType] === NodeTypeEnum_default.elementNode) {
        const index = ancestorNodeChildren.indexOf(referenceNode);
        if (index !== -1) {
          ancestorNodeChildren.splice(index, 0, newNode);
        }
      } else {
        ancestorNodeChildren.length = 0;
        for (const node2 of ancestorNode[childNodes]) {
          if (node2 === referenceNode) {
            ancestorNodeChildren.push(newNode);
          }
          if (node2[nodeType] === NodeTypeEnum_default.elementNode) {
            ancestorNodeChildren.push(node2);
          }
        }
      }
      for (const attributeName of NAMED_ITEM_ATTRIBUTES) {
        const attribute = newNode[attributes].getNamedItem(attributeName);
        if (attribute) {
          ancestorNodeChildren[appendNamedItem](newNode, attribute[value]);
        }
      }
      NodeUtility.insertBefore(ancestorNode, newNode, referenceNode, {
        disableAncestorValidation: true
      });
    } else {
      NodeUtility.insertBefore(ancestorNode, newNode, referenceNode, options3);
    }
    return newNode;
  }
}

// node_modules/happy-dom-without-node/lib/named-node-map/NamedNodeMap.js
var _a9;

class NamedNodeMap {
  constructor() {
    this.length = 0;
    this[_a9] = {};
  }
  get [(_a9 = namedItems, Symbol.toStringTag)]() {
    return "NamedNodeMap";
  }
  *[Symbol.iterator]() {
    for (let i = 0, max3 = this.length;i < max3; i++) {
      yield this[i];
    }
  }
  item(index) {
    return index >= 0 && this[index] ? this[index] : null;
  }
  getNamedItem(name2) {
    return this[namedItems][name2] || null;
  }
  getNamedItemNS(namespace, localName2) {
    const attribute = this.getNamedItem(localName2);
    if (attribute && attribute[namespaceURI] === namespace && attribute.localName === localName2) {
      return attribute;
    }
    for (let i = 0, max3 = this.length;i < max3; i++) {
      if (this[i][namespaceURI] === namespace && this[i].localName === localName2) {
        return this[i];
      }
    }
    return null;
  }
  setNamedItem(item2) {
    return this[setNamedItemWithoutConsequences](item2);
  }
  setNamedItemNS(item2) {
    return this.setNamedItem(item2);
  }
  removeNamedItem(name2) {
    const item2 = this[removeNamedItem](name2);
    if (!item2) {
      throw new DOMException(`Failed to execute 'removeNamedItem' on 'NamedNodeMap': No item with name '${name2}' was found.`, DOMExceptionNameEnum_default.notFoundError);
    }
    return item2;
  }
  removeNamedItemNS(namespace, localName2) {
    const attribute = this.getNamedItemNS(namespace, localName2);
    if (attribute) {
      return this.removeNamedItem(attribute[name]);
    }
    return null;
  }
  [setNamedItemWithoutConsequences](item2) {
    if (item2[name]) {
      const replacedItem = this[namedItems][item2[name]] || null;
      this[namedItems][item2[name]] = item2;
      if (replacedItem) {
        this[removeNamedItemIndex](replacedItem);
      }
      this[this.length] = item2;
      this.length++;
      if (this[isValidPropertyName](item2[name])) {
        this[item2[name]] = item2;
      }
      return replacedItem;
    }
    return null;
  }
  [removeNamedItem](name2) {
    return this[removeNamedItemWithoutConsequences](name2);
  }
  [removeNamedItemWithoutConsequences](name2) {
    const removedItem = this[namedItems][name2] || null;
    if (!removedItem) {
      return null;
    }
    this[removeNamedItemIndex](removedItem);
    if (this[name2] === removedItem) {
      delete this[name2];
    }
    delete this[namedItems][name2];
    return removedItem;
  }
  [removeNamedItemIndex](item2) {
    for (let i = 0;i < this.length; i++) {
      if (this[i] === item2) {
        for (let b = i;b < this.length; b++) {
          if (b < this.length - 1) {
            this[b] = this[b + 1];
          } else {
            delete this[b];
          }
        }
        this.length--;
        break;
      }
    }
  }
  [isValidPropertyName](name2) {
    return !!name2 && !this.constructor.prototype.hasOwnProperty(name2) && (isNaN(Number(name2)) || name2.includes("."));
  }
}

// node_modules/happy-dom-without-node/lib/nodes/element/ElementNamedNodeMap.js
class ElementNamedNodeMap extends NamedNodeMap {
  constructor(ownerElement2) {
    super();
    this[ownerElement] = ownerElement2;
  }
  getNamedItem(name2) {
    return this[namedItems][this[getAttributeName](name2)] || null;
  }
  getNamedItemNS(namespace, localName2) {
    return super.getNamedItemNS(namespace, this[getAttributeName](localName2));
  }
  setNamedItem(item2) {
    if (!item2[name]) {
      return null;
    }
    item2[name] = this[getAttributeName](item2[name]);
    item2[ownerElement] = this[ownerElement];
    const replacedItem = super.setNamedItem(item2);
    const oldValue = replacedItem ? replacedItem[value] : null;
    if (this[ownerElement][isConnected]) {
      this[ownerElement].ownerDocument[cacheID]++;
    }
    if (item2[name] === "class" && this[ownerElement][classList]) {
      this[ownerElement][classList][updateIndices]();
    }
    if (item2[name] === "id" || item2[name] === "name") {
      if (this[ownerElement][parentNode] && this[ownerElement][parentNode][children] && item2[value] !== oldValue) {
        if (oldValue) {
          this[ownerElement][parentNode][children][removeNamedItem](this[ownerElement], oldValue);
        }
        if (item2[value]) {
          this[ownerElement][parentNode][children][appendNamedItem](this[ownerElement], item2[value]);
        }
      }
    }
    if (this[ownerElement].attributeChangedCallback && this[ownerElement].constructor[observedAttributes] && this[ownerElement].constructor[observedAttributes].includes(item2[name])) {
      this[ownerElement].attributeChangedCallback(item2[name], oldValue, item2[value]);
    }
    if (this[ownerElement][observers].length > 0) {
      for (const observer of this[ownerElement][observers]) {
        if (observer.options?.attributes && (!observer.options.attributeFilter || observer.options.attributeFilter.includes(item2[name]))) {
          observer.report(new MutationRecord({
            target: this[ownerElement],
            type: MutationTypeEnum_default.attributes,
            attributeName: item2[name],
            oldValue: observer.options.attributeOldValue ? oldValue : null
          }));
        }
      }
    }
    return replacedItem || null;
  }
  [(ownerElement, removeNamedItem)](name2) {
    const removedItem = super[removeNamedItem](this[getAttributeName](name2));
    if (!removedItem) {
      return null;
    }
    if (this[ownerElement][isConnected]) {
      this[ownerElement].ownerDocument[cacheID]++;
    }
    if (removedItem[name] === "class" && this[ownerElement][classList]) {
      this[ownerElement][classList][updateIndices]();
    }
    if (removedItem[name] === "id" || removedItem[name] === "name") {
      if (this[ownerElement][parentNode] && this[ownerElement][parentNode][children] && removedItem[value]) {
        this[ownerElement][parentNode][children][removeNamedItem](this[ownerElement], removedItem[value]);
      }
    }
    if (this[ownerElement].attributeChangedCallback && this[ownerElement].constructor[observedAttributes] && this[ownerElement].constructor[observedAttributes].includes(removedItem[name])) {
      this[ownerElement].attributeChangedCallback(removedItem[name], removedItem[value], null);
    }
    if (this[ownerElement][observers].length > 0) {
      for (const observer of this[ownerElement][observers]) {
        if (observer.options?.attributes && (!observer.options.attributeFilter || observer.options.attributeFilter.includes(removedItem[name]))) {
          observer.report(new MutationRecord({
            target: this[ownerElement],
            type: MutationTypeEnum_default.attributes,
            attributeName: removedItem[name],
            oldValue: observer.options.attributeOldValue ? removedItem[value] : null
          }));
        }
      }
    }
    return removedItem;
  }
  removeNamedItemNS(namespace, localName2) {
    return super.removeNamedItemNS(namespace, this[getAttributeName](localName2));
  }
  [getAttributeName](name2) {
    if (this[ownerElement][namespaceURI] === NamespaceURI_default.svg) {
      return name2;
    }
    return name2.toLowerCase();
  }
}

// node_modules/happy-dom-without-node/lib/nodes/element/Element.js
var _a10;
var _b6;
var _c5;
var _d4;
var _e3;
var _f2;
var _g2;
var _h2;
var _j2;
var _k;
var _l;
var _m;
var _o;
var _p;
var _q;
var _r;
var _s;
var _t;

class Element2 extends Node_default {
  constructor() {
    super(...arguments);
    this.oncancel = null;
    this.onerror = null;
    this.onscroll = null;
    this.onselect = null;
    this.onwheel = null;
    this.oncopy = null;
    this.oncut = null;
    this.onpaste = null;
    this.oncompositionend = null;
    this.oncompositionstart = null;
    this.oncompositionupdate = null;
    this.onblur = null;
    this.onfocus = null;
    this.onfocusin = null;
    this.onfocusout = null;
    this.onfullscreenchange = null;
    this.onfullscreenerror = null;
    this.onkeydown = null;
    this.onkeyup = null;
    this.onauxclick = null;
    this.onclick = null;
    this.oncontextmenu = null;
    this.ondblclick = null;
    this.onmousedown = null;
    this.onmouseenter = null;
    this.onmouseleave = null;
    this.onmousemove = null;
    this.onmouseout = null;
    this.onmouseover = null;
    this.onmouseup = null;
    this.ontouchcancel = null;
    this.ontouchend = null;
    this.ontouchmove = null;
    this.ontouchstart = null;
    this[_d4] = new HTMLCollection;
    this[_e3] = null;
    this[_f2] = null;
    this[_g2] = null;
    this[_h2] = NodeTypeEnum_default.elementNode;
    this[_j2] = this.constructor[tagName3] || null;
    this[_k] = this.constructor[localName] || null;
    this[_l] = null;
    this[_m] = null;
    this[_o] = 0;
    this[_p] = 0;
    this[_q] = 0;
    this[_r] = 0;
    this[_s] = new ElementNamedNodeMap(this);
    this[_t] = this.constructor[namespaceURI] || null;
  }
  get tagName() {
    return this[tagName3];
  }
  get prefix() {
    return this[prefix];
  }
  get shadowRoot() {
    const shadowRoot2 = this[shadowRoot];
    return shadowRoot2 && shadowRoot2[mode] === "open" ? shadowRoot2 : null;
  }
  get scrollHeight() {
    return this[scrollHeight];
  }
  get scrollWidth() {
    return this[scrollWidth];
  }
  get scrollTop() {
    return this[scrollTop];
  }
  set scrollTop(value2) {
    this[scrollTop] = value2;
  }
  get scrollLeft() {
    return this[scrollLeft];
  }
  set scrollLeft(value2) {
    this[scrollLeft] = value2;
  }
  get attributes() {
    return this[attributes];
  }
  get namespaceURI() {
    return this[namespaceURI];
  }
  get children() {
    return this[children];
  }
  get classList() {
    if (!this[classList]) {
      this[classList] = new DOMTokenList_default(this, "class");
    }
    return this[classList];
  }
  get id() {
    return this.getAttribute("id") || "";
  }
  set id(id) {
    this.setAttribute("id", id);
  }
  get className() {
    return this.getAttribute("class") || "";
  }
  set className(className) {
    this.setAttribute("class", className);
  }
  get nodeName() {
    return this[tagName3];
  }
  get localName() {
    return this[localName];
  }
  get role() {
    return this.getAttribute("role") || "";
  }
  set role(role) {
    this.setAttribute("role", role);
  }
  get previousElementSibling() {
    return NonDocumentChildNodeUtility.previousElementSibling(this);
  }
  get nextElementSibling() {
    return NonDocumentChildNodeUtility.nextElementSibling(this);
  }
  get textContent() {
    let result = "";
    for (const childNode of this[childNodes]) {
      if (childNode[nodeType] === NodeTypeEnum_default.elementNode || childNode[nodeType] === NodeTypeEnum_default.textNode) {
        result += childNode.textContent;
      }
    }
    return result;
  }
  set textContent(textContent) {
    for (const child of this[childNodes].slice()) {
      this.removeChild(child);
    }
    if (textContent) {
      this.appendChild(this[ownerDocument].createTextNode(textContent));
    }
  }
  get innerHTML() {
    return this.getInnerHTML();
  }
  set innerHTML(html) {
    for (const child of this[childNodes].slice()) {
      this.removeChild(child);
    }
    XMLParser.parse(this[ownerDocument], html, { rootNode: this });
  }
  get outerHTML() {
    return new XMLSerializer({ escapeEntities: false }).serializeToString(this);
  }
  set outerHTML(html) {
    this.replaceWith(html);
  }
  get firstElementChild() {
    return this[children][0] ?? null;
  }
  get lastElementChild() {
    return this[children][this[children].length - 1] ?? null;
  }
  get childElementCount() {
    return this[children].length;
  }
  get slot() {
    return this.getAttributeNS(null, "slot") || "";
  }
  set slot(title) {
    this.setAttribute("slot", title);
  }
  getInnerHTML(options3) {
    const xmlSerializer = new XMLSerializer({
      includeShadowRoots: options3 && options3.includeShadowRoots,
      escapeEntities: false
    });
    let xml = "";
    for (const node2 of this[childNodes]) {
      xml += xmlSerializer.serializeToString(node2);
    }
    return xml;
  }
  [(observedAttributes, _a10 = tagName3, _b6 = localName, _c5 = namespaceURI, _d4 = children, _e3 = classList, _f2 = isValue, _g2 = computedStyle, _h2 = nodeType, _j2 = tagName3, _k = localName, _l = prefix, _m = shadowRoot, _o = scrollHeight, _p = scrollWidth, _q = scrollTop, _r = scrollLeft, _s = attributes, _t = namespaceURI, cloneNode)](deep = false) {
    const clone = super[cloneNode](deep);
    clone[tagName3] = this[tagName3];
    clone[localName] = this[localName];
    clone[namespaceURI] = this[namespaceURI];
    for (let i = 0, max3 = this[attributes].length;i < max3; i++) {
      const attribute = this[attributes][i];
      clone[attributes].setNamedItem(Object.assign(this[ownerDocument].createAttributeNS(attribute[namespaceURI], attribute[name]), attribute));
    }
    if (deep) {
      for (const node2 of clone[childNodes]) {
        if (node2[nodeType] === NodeTypeEnum_default.elementNode) {
          clone[children].push(node2);
        }
      }
    }
    return clone;
  }
  [appendChild](node2) {
    return ElementUtility.appendChild(this, node2);
  }
  [removeChild](node2) {
    return ElementUtility.removeChild(this, node2);
  }
  [insertBefore](newNode, referenceNode) {
    return ElementUtility.insertBefore(this, newNode, referenceNode);
  }
  remove() {
    ChildNodeUtility.remove(this);
  }
  replaceWith(...nodes) {
    ChildNodeUtility.replaceWith(this, ...nodes);
  }
  before(...nodes) {
    ChildNodeUtility.before(this, ...nodes);
  }
  after(...nodes) {
    ChildNodeUtility.after(this, ...nodes);
  }
  append(...nodes) {
    ParentNodeUtility.append(this, ...nodes);
  }
  prepend(...nodes) {
    ParentNodeUtility.prepend(this, ...nodes);
  }
  replaceChildren(...nodes) {
    ParentNodeUtility.replaceChildren(this, ...nodes);
  }
  insertAdjacentElement(position, element) {
    if (position === "beforebegin") {
      if (!this.parentElement) {
        return null;
      }
      this.parentElement.insertBefore(element, this);
    } else if (position === "afterbegin") {
      this.insertBefore(element, this.firstChild);
    } else if (position === "beforeend") {
      this.appendChild(element);
    } else if (position === "afterend") {
      if (!this.parentElement) {
        return null;
      }
      this.parentElement.insertBefore(element, this.nextSibling);
    }
    return element;
  }
  insertAdjacentHTML(position, text2) {
    for (const node2 of XMLParser.parse(this[ownerDocument], text2)[childNodes].slice()) {
      this.insertAdjacentElement(position, node2);
    }
  }
  insertAdjacentText(position, text2) {
    if (!text2) {
      return;
    }
    const textNode = this[ownerDocument].createTextNode(text2);
    this.insertAdjacentElement(position, textNode);
  }
  setAttribute(name2, value2) {
    const attribute = this[ownerDocument].createAttributeNS(null, name2);
    attribute[value] = String(value2);
    this.setAttributeNode(attribute);
  }
  setAttributeNS(namespaceURI2, name2, value2) {
    const attribute = this[ownerDocument].createAttributeNS(namespaceURI2, name2);
    attribute[value] = String(value2);
    this.setAttributeNode(attribute);
  }
  getAttributeNames() {
    const attributeNames = [];
    for (let i = 0, max3 = this[attributes].length;i < max3; i++) {
      attributeNames.push(this[attributes][i][name]);
    }
    return attributeNames;
  }
  getAttribute(name2) {
    const attribute = this.getAttributeNode(name2);
    if (attribute) {
      return attribute[value];
    }
    return null;
  }
  toggleAttribute(name2, force) {
    name2 = name2.toLowerCase();
    const attribute = this.getAttributeNode(name2);
    if (attribute) {
      if (force === true) {
        return true;
      }
      this.removeAttributeNode(attribute);
      return false;
    }
    if (force === false) {
      return false;
    }
    this.setAttribute(name2, "");
    return true;
  }
  getAttributeNS(namespace, localName2) {
    const attribute = this.getAttributeNodeNS(namespace, localName2);
    if (attribute) {
      return attribute[value];
    }
    return null;
  }
  hasAttribute(name2) {
    return !!this.getAttributeNode(name2);
  }
  hasAttributeNS(namespace, localName2) {
    return this[attributes].getNamedItemNS(namespace, localName2) !== null;
  }
  hasAttributes() {
    return this[attributes].length > 0;
  }
  removeAttribute(name2) {
    try {
      this[attributes].removeNamedItem(name2);
    } catch (error4) {
    }
  }
  removeAttributeNS(namespace, localName2) {
    this[attributes].removeNamedItemNS(namespace, localName2);
  }
  attachShadow(init) {
    if (this[shadowRoot]) {
      throw new DOMException("Shadow root has already been attached.");
    }
    const shadowRoot2 = NodeFactory_default.createNode(this[ownerDocument], this[ownerDocument][ownerWindow].ShadowRoot);
    this[shadowRoot] = shadowRoot2;
    shadowRoot2[host] = this;
    shadowRoot2[mode] = init.mode;
    shadowRoot2[connectToNode](this);
    return this[shadowRoot];
  }
  toString() {
    return this.outerHTML;
  }
  getBoundingClientRect() {
    return new DOMRect;
  }
  getClientRects() {
    const domRectList = new DOMRectList;
    domRectList.push(this.getBoundingClientRect());
    return domRectList;
  }
  matches(selector) {
    return !!QuerySelector.matches(this, selector);
  }
  closest(selector) {
    let parent = this;
    while (parent) {
      if (QuerySelector.matches(parent, selector)) {
        return parent;
      }
      parent = parent.parentElement;
    }
    return null;
  }
  querySelectorAll(selector) {
    return QuerySelector.querySelectorAll(this, selector);
  }
  querySelector(selector) {
    return QuerySelector.querySelector(this, selector);
  }
  getElementsByClassName(className) {
    return ParentNodeUtility.getElementsByClassName(this, className);
  }
  getElementsByTagName(tagName4) {
    return ParentNodeUtility.getElementsByTagName(this, tagName4);
  }
  getElementsByTagNameNS(namespaceURI2, tagName4) {
    return ParentNodeUtility.getElementsByTagNameNS(this, namespaceURI2, tagName4);
  }
  setAttributeNode(attribute) {
    return this[attributes].setNamedItem(attribute);
  }
  setAttributeNodeNS(attribute) {
    return this[attributes].setNamedItemNS(attribute);
  }
  getAttributeNode(name2) {
    return this[attributes].getNamedItem(name2);
  }
  getAttributeNodeNS(namespace, localName2) {
    return this[attributes].getNamedItemNS(namespace, localName2);
  }
  removeAttributeNode(attribute) {
    return this[attributes].removeNamedItem(attribute[name]);
  }
  removeAttributeNodeNS(attribute) {
    return this[attributes].removeNamedItemNS(attribute[namespaceURI], attribute.localName);
  }
  scroll(x2, y2) {
    if (typeof x2 === "object") {
      if (x2.behavior === "smooth") {
        this[ownerDocument][ownerWindow].setTimeout(() => {
          if (x2.top !== undefined) {
            this.scrollTop = x2.top;
          }
          if (x2.left !== undefined) {
            this.scrollLeft = x2.left;
          }
        });
      } else {
        if (x2.top !== undefined) {
          this.scrollTop = x2.top;
        }
        if (x2.left !== undefined) {
          this.scrollLeft = x2.left;
        }
      }
    } else if (x2 !== undefined && y2 !== undefined) {
      this.scrollLeft = x2;
      this.scrollTop = y2;
    }
  }
  scrollTo(x2, y2) {
    this.scroll(x2, y2);
  }
  scrollIntoView(_options) {
  }
  dispatchEvent(event) {
    const returnValue2 = super.dispatchEvent(event);
    const browserSettings = WindowBrowserSettingsReader_default.getSettings(this[ownerDocument][ownerWindow]);
    if (browserSettings && !browserSettings.disableJavaScriptEvaluation && (event.eventPhase === EventPhaseEnum_default.atTarget || event.eventPhase === EventPhaseEnum_default.bubbling) && !event[immediatePropagationStopped]) {
      const attribute = this.getAttribute("on" + event.type);
      if (attribute && !event[immediatePropagationStopped]) {
        const code2 = `//# sourceURL=${this[ownerDocument][ownerWindow].location.href}\n${attribute}`;
        if (browserSettings.disableErrorCapturing || browserSettings.errorCapture !== BrowserErrorCaptureEnum_default.tryAndCatch) {
          this[ownerDocument][ownerWindow].eval(code2);
        } else {
          WindowErrorUtility.captureError(this[ownerDocument][ownerWindow], () => this[ownerDocument][ownerWindow].eval(code2));
        }
      }
    }
    return returnValue2;
  }
}
Element2[_a10] = null;
Element2[_b6] = null;
Element2[_c5] = null;
var Element_default = Element2;

// node_modules/happy-dom-without-node/lib/tree-walker/NodeFilter.js
var NodeFilter_default = {
  FILTER_ACCEPT: 1,
  FILTER_REJECT: 2,
  FILTER_SKIP: 3,
  SHOW_ALL: -1,
  SHOW_ELEMENT: 1,
  SHOW_ATTRIBUTE: 2,
  SHOW_TEXT: 4,
  SHOW_CDATA_SECTION: 8,
  SHOW_ENTITY_REFERENCE: 16,
  SHOW_ENTITY: 32,
  SHOW_PROCESSING_INSTRUCTION: 64,
  SHOW_COMMENT: 128,
  SHOW_DOCUMENT: 256,
  SHOW_DOCUMENT_TYPE: 512,
  SHOW_DOCUMENT_FRAGMENT: 1024,
  SHOW_NOTATION: 2048
};

// node_modules/happy-dom-without-node/lib/tree-walker/NodeFilterMask.js
var NodeFilterMask_default = {
  1: NodeFilter_default.SHOW_ELEMENT,
  2: NodeFilter_default.SHOW_ATTRIBUTE,
  3: NodeFilter_default.SHOW_TEXT,
  4: NodeFilter_default.SHOW_CDATA_SECTION,
  5: NodeFilter_default.SHOW_ENTITY_REFERENCE,
  6: NodeFilter_default.SHOW_PROCESSING_INSTRUCTION,
  7: NodeFilter_default.SHOW_PROCESSING_INSTRUCTION,
  8: NodeFilter_default.SHOW_COMMENT,
  9: NodeFilter_default.SHOW_DOCUMENT,
  10: NodeFilter_default.SHOW_DOCUMENT_TYPE,
  11: NodeFilter_default.SHOW_DOCUMENT_FRAGMENT,
  12: NodeFilter_default.SHOW_NOTATION
};

// node_modules/happy-dom-without-node/lib/tree-walker/TreeWalker.js
class TreeWalker {
  constructor(root, whatToShow = -1, filter = null) {
    this.root = null;
    this.whatToShow = -1;
    this.filter = null;
    this.currentNode = null;
    if (!(root instanceof Node_default)) {
      throw new DOMException("Parameter 1 was not of type Node.");
    }
    this.root = root;
    this.whatToShow = whatToShow;
    this.filter = filter;
    this.currentNode = root;
  }
  nextNode() {
    if (!this.firstChild()) {
      while (!this.nextSibling() && this.parentNode()) {
      }
      this.currentNode = this.currentNode === this.root ? null : this.currentNode || null;
    }
    return this.currentNode;
  }
  previousNode() {
    while (!this.previousSibling() && this.parentNode()) {
    }
    this.currentNode = this.currentNode === this.root ? null : this.currentNode || null;
    return this.currentNode;
  }
  parentNode() {
    if (this.currentNode !== this.root && this.currentNode && this.currentNode[parentNode]) {
      this.currentNode = this.currentNode[parentNode];
      if (this.filterNode(this.currentNode) === NodeFilter_default.FILTER_ACCEPT) {
        return this.currentNode;
      }
      this.parentNode();
    }
    this.currentNode = null;
    return null;
  }
  firstChild() {
    const childNodes2 = this.currentNode ? this.currentNode[childNodes] : [];
    if (childNodes2.length > 0) {
      this.currentNode = childNodes2[0];
      if (this.filterNode(this.currentNode) === NodeFilter_default.FILTER_ACCEPT) {
        return this.currentNode;
      }
      return this.nextSibling();
    }
    return null;
  }
  lastChild() {
    const childNodes2 = this.currentNode ? this.currentNode[childNodes] : [];
    if (childNodes2.length > 0) {
      this.currentNode = childNodes2[childNodes2.length - 1];
      if (this.filterNode(this.currentNode) === NodeFilter_default.FILTER_ACCEPT) {
        return this.currentNode;
      }
      return this.previousSibling();
    }
    return null;
  }
  previousSibling() {
    if (this.currentNode !== this.root && this.currentNode && this.currentNode[parentNode]) {
      const siblings = this.currentNode[parentNode][childNodes];
      const index = siblings.indexOf(this.currentNode);
      if (index > 0) {
        this.currentNode = siblings[index - 1];
        if (this.filterNode(this.currentNode) === NodeFilter_default.FILTER_ACCEPT) {
          return this.currentNode;
        }
        return this.previousSibling();
      }
    }
    return null;
  }
  nextSibling() {
    if (this.currentNode !== this.root && this.currentNode && this.currentNode[parentNode]) {
      const siblings = this.currentNode[parentNode][childNodes];
      const index = siblings.indexOf(this.currentNode);
      if (index + 1 < siblings.length) {
        this.currentNode = siblings[index + 1];
        if (this.filterNode(this.currentNode) === NodeFilter_default.FILTER_ACCEPT) {
          return this.currentNode;
        }
        return this.nextSibling();
      }
    }
    return null;
  }
  filterNode(node2) {
    const mask = NodeFilterMask_default[node2.nodeType];
    if (mask && (this.whatToShow & mask) == 0) {
      return NodeFilter_default.FILTER_SKIP;
    }
    if (typeof this.filter === "function") {
      return this.filter(node2);
    }
    if (this.filter) {
      return this.filter.acceptNode(node2);
    }
    return NodeFilter_default.FILTER_ACCEPT;
  }
}

// node_modules/happy-dom-without-node/lib/tree-walker/NodeIterator.js
var __classPrivateFieldSet4 = function(receiver, state, value2, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
};
var __classPrivateFieldGet7 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _NodeIterator_walker;

class NodeIterator {
  constructor(root, whatToShow = -1, filter = null) {
    this.root = null;
    this.whatToShow = -1;
    this.filter = null;
    _NodeIterator_walker.set(this, undefined);
    this.root = root;
    this.whatToShow = whatToShow;
    this.filter = filter;
    __classPrivateFieldSet4(this, _NodeIterator_walker, new TreeWalker(root, whatToShow, filter), "f");
  }
  nextNode() {
    return __classPrivateFieldGet7(this, _NodeIterator_walker, "f").nextNode();
  }
  previousNode() {
    return __classPrivateFieldGet7(this, _NodeIterator_walker, "f").previousNode();
  }
}
_NodeIterator_walker = new WeakMap;
var NodeIterator_default = NodeIterator;

// node_modules/happy-dom-without-node/lib/dom-implementation/DOMImplementation.js
var __classPrivateFieldSet5 = function(receiver, state, value2, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
};
var __classPrivateFieldGet8 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _DOMImplementation_document;

class DOMImplementation {
  constructor(window3) {
    _DOMImplementation_document.set(this, undefined);
    __classPrivateFieldSet5(this, _DOMImplementation_document, window3, "f");
  }
  createDocument() {
    return new (__classPrivateFieldGet8(this, _DOMImplementation_document, "f"))[ownerWindow].HTMLDocument;
  }
  createHTMLDocument() {
    return new (__classPrivateFieldGet8(this, _DOMImplementation_document, "f"))[ownerWindow].HTMLDocument;
  }
  createDocumentType(qualifiedName, publicId2, systemId2) {
    const documentType = NodeFactory_default.createNode(__classPrivateFieldGet8(this, _DOMImplementation_document, "f"), __classPrivateFieldGet8(this, _DOMImplementation_document, "f")[ownerWindow].DocumentType);
    documentType[name] = qualifiedName;
    documentType[publicId] = publicId2;
    documentType[systemId] = systemId2;
    return documentType;
  }
}
_DOMImplementation_document = new WeakMap;
var DOMImplementation_default = DOMImplementation;

// node_modules/happy-dom-without-node/lib/nodes/document-type/DocumentType.js
var _a11;
var _b7;
var _c6;
var _d5;

class DocumentType extends Node_default {
  constructor() {
    super(...arguments);
    this[_a11] = NodeTypeEnum_default.documentTypeNode;
    this[_b7] = "";
    this[_c6] = "";
    this[_d5] = "";
  }
  get name() {
    return this[name];
  }
  get publicId() {
    return this[publicId];
  }
  get systemId() {
    return this[systemId];
  }
  get nodeName() {
    return this.name;
  }
  toString() {
    return "[object DocumentType]";
  }
  [(_a11 = nodeType, _b7 = name, _c6 = publicId, _d5 = systemId, cloneNode)](deep = false) {
    const clone = super[cloneNode](deep);
    clone[name] = this[name];
    clone[publicId] = this[publicId];
    clone[systemId] = this[systemId];
    return clone;
  }
}

// node_modules/happy-dom-without-node/lib/nodes/document/DocumentReadyStateEnum.js
var DocumentReadyStateEnum;
(function(DocumentReadyStateEnum2) {
  DocumentReadyStateEnum2["loading"] = "loading";
  DocumentReadyStateEnum2["interactive"] = "interactive";
  DocumentReadyStateEnum2["complete"] = "complete";
})(DocumentReadyStateEnum || (DocumentReadyStateEnum = {}));
var DocumentReadyStateEnum_default = DocumentReadyStateEnum;

// node_modules/happy-dom-without-node/lib/range/RangeUtility.js
class RangeUtility {
  static compareBoundaryPointsPosition(pointA, pointB) {
    if (pointA.node === pointB.node) {
      if (pointA.offset === pointB.offset) {
        return 0;
      } else if (pointA.offset < pointB.offset) {
        return -1;
      }
      return 1;
    }
    if (NodeUtility.isFollowing(pointA.node, pointB.node)) {
      return this.compareBoundaryPointsPosition(pointB, pointA) === -1 ? 1 : -1;
    }
    if (NodeUtility.isInclusiveAncestor(pointA.node, pointB.node)) {
      let child = pointB.node;
      while (child[parentNode] !== pointA.node) {
        child = child[parentNode];
      }
      if (child[parentNode][childNodes].indexOf(child) < pointA.offset) {
        return 1;
      }
    }
    return -1;
  }
  static validateBoundaryPoint(point) {
    if (point.node[nodeType] === NodeTypeEnum_default.documentTypeNode) {
      throw new DOMException(`DocumentType Node can't be used as boundary point.`, DOMExceptionNameEnum_default.invalidNodeTypeError);
    }
    if (point.offset > NodeUtility.getNodeLength(point.node)) {
      throw new DOMException(`Offset out of bound.`, DOMExceptionNameEnum_default.indexSizeError);
    }
  }
  static isContained(node2, range) {
    return this.compareBoundaryPointsPosition({ node: node2, offset: 0 }, { node: range.startContainer, offset: range.startOffset }) === 1 && this.compareBoundaryPointsPosition({ node: node2, offset: NodeUtility.getNodeLength(node2) }, { node: range.endContainer, offset: range.endOffset }) === -1;
  }
  static isPartiallyContained(node2, range) {
    return NodeUtility.isInclusiveAncestor(node2, range.startContainer) && !NodeUtility.isInclusiveAncestor(node2, range.endContainer) || !NodeUtility.isInclusiveAncestor(node2, range.startContainer) && NodeUtility.isInclusiveAncestor(node2, range.endContainer);
  }
}

// node_modules/happy-dom-without-node/lib/selection/SelectionDirectionEnum.js
var SelectionDirectionEnum;
(function(SelectionDirectionEnum2) {
  SelectionDirectionEnum2[SelectionDirectionEnum2["forwards"] = 1] = "forwards";
  SelectionDirectionEnum2[SelectionDirectionEnum2["backwards"] = -1] = "backwards";
  SelectionDirectionEnum2[SelectionDirectionEnum2["directionless"] = 0] = "directionless";
})(SelectionDirectionEnum || (SelectionDirectionEnum = {}));
var SelectionDirectionEnum_default = SelectionDirectionEnum;

// node_modules/happy-dom-without-node/lib/selection/Selection.js
var __classPrivateFieldSet6 = function(receiver, state, value2, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
};
var __classPrivateFieldGet9 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Selection_instances;
var _Selection_ownerDocument;
var _Selection_range;
var _Selection_direction;
var _Selection_associateRange;

class Selection {
  constructor(ownerDocument2) {
    _Selection_instances.add(this);
    _Selection_ownerDocument.set(this, null);
    _Selection_range.set(this, null);
    _Selection_direction.set(this, SelectionDirectionEnum_default.directionless);
    __classPrivateFieldSet6(this, _Selection_ownerDocument, ownerDocument2, "f");
  }
  get rangeCount() {
    return __classPrivateFieldGet9(this, _Selection_range, "f") ? 1 : 0;
  }
  get isCollapsed() {
    return __classPrivateFieldGet9(this, _Selection_range, "f") === null || __classPrivateFieldGet9(this, _Selection_range, "f").collapsed;
  }
  get type() {
    if (!__classPrivateFieldGet9(this, _Selection_range, "f")) {
      return "None";
    } else if (__classPrivateFieldGet9(this, _Selection_range, "f").collapsed) {
      return "Caret";
    }
    return "Range";
  }
  get anchorNode() {
    if (!__classPrivateFieldGet9(this, _Selection_range, "f")) {
      return null;
    }
    return __classPrivateFieldGet9(this, _Selection_direction, "f") === SelectionDirectionEnum_default.forwards ? __classPrivateFieldGet9(this, _Selection_range, "f").startContainer : __classPrivateFieldGet9(this, _Selection_range, "f").endContainer;
  }
  get anchorOffset() {
    if (!__classPrivateFieldGet9(this, _Selection_range, "f")) {
      return 0;
    }
    return __classPrivateFieldGet9(this, _Selection_direction, "f") === SelectionDirectionEnum_default.forwards ? __classPrivateFieldGet9(this, _Selection_range, "f").startOffset : __classPrivateFieldGet9(this, _Selection_range, "f").endOffset;
  }
  get baseNode() {
    return this.anchorNode;
  }
  get baseOffset() {
    return this.anchorOffset;
  }
  get focusNode() {
    return this.anchorNode;
  }
  get focusOffset() {
    return this.anchorOffset;
  }
  get extentNode() {
    return this.focusNode;
  }
  get extentOffset() {
    return this.focusOffset;
  }
  addRange(newRange) {
    if (!newRange) {
      throw new Error("Failed to execute addRange on Selection. Parameter 1 is not of type Range.");
    }
    if (!__classPrivateFieldGet9(this, _Selection_range, "f") && newRange[ownerDocument] === __classPrivateFieldGet9(this, _Selection_ownerDocument, "f")) {
      __classPrivateFieldGet9(this, _Selection_instances, "m", _Selection_associateRange).call(this, newRange);
    }
  }
  getRangeAt(index) {
    if (!__classPrivateFieldGet9(this, _Selection_range, "f") || index !== 0) {
      throw new DOMException("Invalid range index.", DOMExceptionNameEnum_default.indexSizeError);
    }
    return __classPrivateFieldGet9(this, _Selection_range, "f");
  }
  removeRange(range) {
    if (__classPrivateFieldGet9(this, _Selection_range, "f") !== range) {
      throw new DOMException("Invalid range.", DOMExceptionNameEnum_default.notFoundError);
    }
    __classPrivateFieldGet9(this, _Selection_instances, "m", _Selection_associateRange).call(this, null);
  }
  removeAllRanges() {
    __classPrivateFieldGet9(this, _Selection_instances, "m", _Selection_associateRange).call(this, null);
  }
  empty() {
    this.removeAllRanges();
  }
  collapse(node2, offset3) {
    if (node2 === null) {
      this.removeAllRanges();
      return;
    }
    if (node2[nodeType] === NodeTypeEnum_default.documentTypeNode) {
      throw new DOMException("DocumentType Node can't be used as boundary point.", DOMExceptionNameEnum_default.invalidNodeTypeError);
    }
    if (offset3 > NodeUtility.getNodeLength(node2)) {
      throw new DOMException("Invalid range index.", DOMExceptionNameEnum_default.indexSizeError);
    }
    if (node2[ownerDocument] !== __classPrivateFieldGet9(this, _Selection_ownerDocument, "f")) {
      return;
    }
    const newRange = new (__classPrivateFieldGet9(this, _Selection_ownerDocument, "f"))[ownerWindow].Range;
    newRange[start2].node = node2;
    newRange[start2].offset = offset3;
    newRange[end2].node = node2;
    newRange[end2].offset = offset3;
    __classPrivateFieldGet9(this, _Selection_instances, "m", _Selection_associateRange).call(this, newRange);
  }
  setPosition(node2, offset3) {
    this.collapse(node2, offset3);
  }
  collapseToEnd() {
    if (__classPrivateFieldGet9(this, _Selection_range, "f") === null) {
      throw new DOMException("There is no selection to collapse.", DOMExceptionNameEnum_default.invalidStateError);
    }
    const { node: node2, offset: offset3 } = __classPrivateFieldGet9(this, _Selection_range, "f")[end2];
    const newRange = new (__classPrivateFieldGet9(this, _Selection_ownerDocument, "f"))[ownerWindow].Range;
    newRange[start2].node = node2;
    newRange[start2].offset = offset3;
    newRange[end2].node = node2;
    newRange[end2].offset = offset3;
    __classPrivateFieldGet9(this, _Selection_instances, "m", _Selection_associateRange).call(this, newRange);
  }
  collapseToStart() {
    if (!__classPrivateFieldGet9(this, _Selection_range, "f")) {
      throw new DOMException("There is no selection to collapse.", DOMExceptionNameEnum_default.invalidStateError);
    }
    const { node: node2, offset: offset3 } = __classPrivateFieldGet9(this, _Selection_range, "f")[start2];
    const newRange = new (__classPrivateFieldGet9(this, _Selection_ownerDocument, "f"))[ownerWindow].Range;
    newRange[start2].node = node2;
    newRange[start2].offset = offset3;
    newRange[end2].node = node2;
    newRange[end2].offset = offset3;
    __classPrivateFieldGet9(this, _Selection_instances, "m", _Selection_associateRange).call(this, newRange);
  }
  containsNode(node2, allowPartialContainment = false) {
    if (!__classPrivateFieldGet9(this, _Selection_range, "f") || node2[ownerDocument] !== __classPrivateFieldGet9(this, _Selection_ownerDocument, "f")) {
      return false;
    }
    const startIsBeforeNode = RangeUtility.compareBoundaryPointsPosition(__classPrivateFieldGet9(this, _Selection_range, "f")[start2], {
      node: node2,
      offset: 0
    }) === -1;
    const endIsAfterNode = RangeUtility.compareBoundaryPointsPosition(__classPrivateFieldGet9(this, _Selection_range, "f")[end2], {
      node: node2,
      offset: NodeUtility.getNodeLength(node2)
    }) === 1;
    return allowPartialContainment ? startIsBeforeNode || endIsAfterNode : startIsBeforeNode && endIsAfterNode;
  }
  deleteFromDocument() {
    if (__classPrivateFieldGet9(this, _Selection_range, "f")) {
      __classPrivateFieldGet9(this, _Selection_range, "f").deleteContents();
    }
  }
  extend(node2, offset3) {
    if (node2[ownerDocument] !== __classPrivateFieldGet9(this, _Selection_ownerDocument, "f")) {
      return;
    }
    if (!__classPrivateFieldGet9(this, _Selection_range, "f")) {
      throw new DOMException("There is no selection to extend.", DOMExceptionNameEnum_default.invalidStateError);
    }
    const anchorNode = this.anchorNode;
    const anchorOffset = this.anchorOffset;
    const newRange = new (__classPrivateFieldGet9(this, _Selection_ownerDocument, "f"))[ownerWindow].Range;
    newRange[start2].node = node2;
    newRange[start2].offset = 0;
    newRange[end2].node = node2;
    newRange[end2].offset = 0;
    if (node2[ownerDocument] !== __classPrivateFieldGet9(this, _Selection_range, "f")[ownerDocument]) {
      newRange[start2].offset = offset3;
      newRange[end2].offset = offset3;
    } else if (RangeUtility.compareBoundaryPointsPosition({ node: anchorNode, offset: anchorOffset }, { node: node2, offset: offset3 }) <= 0) {
      newRange[start2].node = anchorNode;
      newRange[start2].offset = anchorOffset;
      newRange[end2].node = node2;
      newRange[end2].offset = offset3;
    } else {
      newRange[start2].node = node2;
      newRange[start2].offset = offset3;
      newRange[end2].node = anchorNode;
      newRange[end2].offset = anchorOffset;
    }
    __classPrivateFieldGet9(this, _Selection_instances, "m", _Selection_associateRange).call(this, newRange);
    __classPrivateFieldSet6(this, _Selection_direction, RangeUtility.compareBoundaryPointsPosition({ node: node2, offset: offset3 }, { node: anchorNode, offset: anchorOffset }) === -1 ? SelectionDirectionEnum_default.backwards : SelectionDirectionEnum_default.forwards, "f");
  }
  selectAllChildren(node2) {
    if (node2[nodeType] === NodeTypeEnum_default.documentTypeNode) {
      throw new DOMException("DocumentType Node can't be used as boundary point.", DOMExceptionNameEnum_default.invalidNodeTypeError);
    }
    if (node2[ownerDocument] !== __classPrivateFieldGet9(this, _Selection_ownerDocument, "f")) {
      return;
    }
    const length2 = node2.childNodes.length;
    const newRange = new (__classPrivateFieldGet9(this, _Selection_ownerDocument, "f"))[ownerWindow].Range;
    newRange[start2].node = node2;
    newRange[start2].offset = 0;
    newRange[end2].node = node2;
    newRange[end2].offset = length2;
    __classPrivateFieldGet9(this, _Selection_instances, "m", _Selection_associateRange).call(this, newRange);
  }
  setBaseAndExtent(anchorNode, anchorOffset, focusNode, focusOffset) {
    if (anchorOffset > NodeUtility.getNodeLength(anchorNode) || focusOffset > NodeUtility.getNodeLength(focusNode)) {
      throw new DOMException("Invalid anchor or focus offset.", DOMExceptionNameEnum_default.indexSizeError);
    }
    if (anchorNode[ownerDocument] !== __classPrivateFieldGet9(this, _Selection_ownerDocument, "f") || focusNode[ownerDocument] !== __classPrivateFieldGet9(this, _Selection_ownerDocument, "f")) {
      return;
    }
    const anchor = { node: anchorNode, offset: anchorOffset };
    const focus = { node: focusNode, offset: focusOffset };
    const newRange = new (__classPrivateFieldGet9(this, _Selection_ownerDocument, "f"))[ownerWindow].Range;
    if (RangeUtility.compareBoundaryPointsPosition(anchor, focus) === -1) {
      newRange[start2] = anchor;
      newRange[end2] = focus;
    } else {
      newRange[start2] = focus;
      newRange[end2] = anchor;
    }
    __classPrivateFieldGet9(this, _Selection_instances, "m", _Selection_associateRange).call(this, newRange);
    __classPrivateFieldSet6(this, _Selection_direction, RangeUtility.compareBoundaryPointsPosition(focus, anchor) === -1 ? SelectionDirectionEnum_default.backwards : SelectionDirectionEnum_default.forwards, "f");
  }
  toString() {
    return __classPrivateFieldGet9(this, _Selection_range, "f") ? __classPrivateFieldGet9(this, _Selection_range, "f").toString() : "";
  }
}
_Selection_ownerDocument = new WeakMap, _Selection_range = new WeakMap, _Selection_direction = new WeakMap, _Selection_instances = new WeakSet, _Selection_associateRange = function _Selection_associateRange2(range) {
  const oldRange = __classPrivateFieldGet9(this, _Selection_range, "f");
  __classPrivateFieldSet6(this, _Selection_range, range, "f");
  __classPrivateFieldSet6(this, _Selection_direction, range === null ? SelectionDirectionEnum_default.directionless : SelectionDirectionEnum_default.forwards, "f");
  if (oldRange !== __classPrivateFieldGet9(this, _Selection_range, "f")) {
    __classPrivateFieldGet9(this, _Selection_ownerDocument, "f").dispatchEvent(new Event_default("selectionchange"));
  }
};
var Selection_default = Selection;

// node_modules/happy-dom-without-node/lib/nodes/document/VisibilityStateEnum.js
var VisibilityStateEnum;
(function(VisibilityStateEnum2) {
  VisibilityStateEnum2["hidden"] = "hidden";
  VisibilityStateEnum2["visible"] = "visible";
  VisibilityStateEnum2["prerender"] = "prerender";
})(VisibilityStateEnum || (VisibilityStateEnum = {}));
var VisibilityStateEnum_default = VisibilityStateEnum;

// node_modules/happy-dom-without-node/lib/cookie/urilities/CookieStringUtility.js
class CookieStringUtility {
  static stringToCookie(originURL, cookieString) {
    const parts = cookieString.split(";");
    const [key, value2] = parts.shift().split("=");
    const cookie = {
      key: key.trim(),
      value: value2 ?? null,
      originURL,
      domain: "",
      path: "",
      expires: null,
      httpOnly: false,
      secure: false,
      sameSite: CookieSameSiteEnum_default.lax
    };
    if (!cookie.key) {
      return null;
    }
    for (const part of parts) {
      const keyAndValue = part.split("=");
      const key2 = keyAndValue[0].trim().toLowerCase();
      const value3 = keyAndValue[1];
      switch (key2) {
        case "expires":
          cookie.expires = new Date(value3);
          break;
        case "max-age":
          cookie.expires = new Date(parseInt(value3, 10) * 1000 + Date.now());
          break;
        case "domain":
          cookie.domain = value3;
          break;
        case "path":
          cookie.path = value3.startsWith("/") ? value3 : `/${value3}`;
          break;
        case "httponly":
          cookie.httpOnly = true;
          break;
        case "secure":
          cookie.secure = true;
          break;
        case "samesite":
          switch (value3.toLowerCase()) {
            case "strict":
              cookie.sameSite = CookieSameSiteEnum_default.strict;
              break;
            case "lax":
              cookie.sameSite = CookieSameSiteEnum_default.lax;
              break;
            case "none":
              cookie.sameSite = CookieSameSiteEnum_default.none;
          }
          break;
      }
    }
    const lowerKey = cookie.key.toLowerCase();
    if (lowerKey.startsWith("__secure-") && !cookie.secure) {
      return null;
    }
    if (lowerKey.startsWith("__host-") && (!cookie.secure || cookie.path !== "/" || cookie.domain)) {
      return null;
    }
    return cookie;
  }
  static cookiesToString(cookies) {
    const cookieString = [];
    for (const cookie of cookies) {
      if (cookie.value !== null) {
        cookieString.push(`${cookie.key}=${cookie.value}`);
      } else {
        cookieString.push(cookie.key);
      }
    }
    return cookieString.join("; ");
  }
}

// node_modules/happy-dom-without-node/lib/nodes/document/Document.js
var __classPrivateFieldSet7 = function(receiver, state, value2, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
};
var __classPrivateFieldGet10 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Document_instances;
var _Document_selection;
var _Document_browserFrame;
var _Document_importNode;
var _a12;
var _b8;
var _c7;
var _d6;
var _e4;
var _f3;
var _g3;
var _h3;
var _j3;
var _k2;
var _l2;
var _m2;
var _o2;
var _p2;
var _q2;
var PROCESSING_INSTRUCTION_TARGET_REGEXP = /^[a-z][a-z0-9-]+$/;

class Document extends Node_default {
  constructor(injected) {
    super();
    _Document_instances.add(this);
    this[_a12] = new HTMLCollection;
    this[_b8] = null;
    this[_c7] = null;
    this[_d6] = null;
    this[_e4] = this;
    this[_f3] = 0;
    this[_g3] = true;
    this[_h3] = false;
    this[_j3] = NodeTypeEnum_default.documentNode;
    this[_k2] = true;
    this[_l2] = [];
    this[_m2] = new DOMImplementation_default(this);
    this[_o2] = DocumentReadyStateEnum_default.interactive;
    this[_p2] = "";
    this[_q2] = null;
    _Document_selection.set(this, null);
    _Document_browserFrame.set(this, undefined);
    this.onreadystatechange = null;
    this.onpointerlockchange = null;
    this.onpointerlockerror = null;
    this.onbeforecopy = null;
    this.onbeforecut = null;
    this.onbeforepaste = null;
    this.onfreeze = null;
    this.onresume = null;
    this.onsearch = null;
    this.onvisibilitychange = null;
    this.onfullscreenchange = null;
    this.onfullscreenerror = null;
    this.onwebkitfullscreenchange = null;
    this.onwebkitfullscreenerror = null;
    this.onbeforexrselect = null;
    this.onabort = null;
    this.onbeforeinput = null;
    this.onblur = null;
    this.oncancel = null;
    this.oncanplay = null;
    this.oncanplaythrough = null;
    this.onchange = null;
    this.onclick = null;
    this.onclose = null;
    this.oncontextlost = null;
    this.oncontextmenu = null;
    this.oncontextrestored = null;
    this.oncuechange = null;
    this.ondblclick = null;
    this.ondrag = null;
    this.ondragend = null;
    this.ondragenter = null;
    this.ondragleave = null;
    this.ondragover = null;
    this.ondragstart = null;
    this.ondrop = null;
    this.ondurationchange = null;
    this.onemptied = null;
    this.onended = null;
    this.onerror = null;
    this.onfocus = null;
    this.onformdata = null;
    this.oninput = null;
    this.oninvalid = null;
    this.onkeydown = null;
    this.onkeypress = null;
    this.onkeyup = null;
    this.onload = null;
    this.onloadeddata = null;
    this.onloadedmetadata = null;
    this.onloadstart = null;
    this.onmousedown = null;
    this.onmouseenter = null;
    this.onmouseleave = null;
    this.onmousemove = null;
    this.onmouseout = null;
    this.onmouseover = null;
    this.onmouseup = null;
    this.onmousewheel = null;
    this.onpause = null;
    this.onplay = null;
    this.onplaying = null;
    this.onprogress = null;
    this.onratechange = null;
    this.onreset = null;
    this.onresize = null;
    this.onscroll = null;
    this.onsecuritypolicyviolation = null;
    this.onseeked = null;
    this.onseeking = null;
    this.onselect = null;
    this.onslotchange = null;
    this.onstalled = null;
    this.onsubmit = null;
    this.onsuspend = null;
    this.ontimeupdate = null;
    this.ontoggle = null;
    this.onvolumechange = null;
    this.onwaiting = null;
    this.onwebkitanimationend = null;
    this.onwebkitanimationiteration = null;
    this.onwebkitanimationstart = null;
    this.onwebkittransitionend = null;
    this.onwheel = null;
    this.onauxclick = null;
    this.ongotpointercapture = null;
    this.onlostpointercapture = null;
    this.onpointerdown = null;
    this.onpointermove = null;
    this.onpointerrawupdate = null;
    this.onpointerup = null;
    this.onpointercancel = null;
    this.onpointerover = null;
    this.onpointerout = null;
    this.onpointerenter = null;
    this.onpointerleave = null;
    this.onselectstart = null;
    this.onselectionchange = null;
    this.onanimationend = null;
    this.onanimationiteration = null;
    this.onanimationstart = null;
    this.ontransitionrun = null;
    this.ontransitionstart = null;
    this.ontransitionend = null;
    this.ontransitioncancel = null;
    this.oncopy = null;
    this.oncut = null;
    this.onpaste = null;
    this.onbeforematch = null;
    __classPrivateFieldSet7(this, _Document_browserFrame, injected.browserFrame, "f");
    this[ownerWindow] = injected.window;
  }
  get adoptedStyleSheets() {
    return this[adoptedStyleSheets];
  }
  set adoptedStyleSheets(value2) {
    this[adoptedStyleSheets] = value2;
  }
  get implementation() {
    return this[implementation];
  }
  get readyState() {
    return this[readyState];
  }
  get referrer() {
    return this[referrer];
  }
  get defaultView() {
    return this[defaultView];
  }
  get children() {
    return this[children];
  }
  get charset() {
    return this.characterSet;
  }
  get characterSet() {
    const charset = this.querySelector("meta[charset]")?.getAttributeNS(null, "charset");
    return charset ? charset : "UTF-8";
  }
  get title() {
    const element = ParentNodeUtility.getElementByTagName(this, "title");
    if (element) {
      return element.textContent;
    }
    return "";
  }
  set title(title) {
    const element = ParentNodeUtility.getElementByTagName(this, "title");
    if (element) {
      element.textContent = title;
    } else {
      const newElement = this.createElement("title");
      newElement.textContent = title;
      this.head.appendChild(newElement);
    }
  }
  get links() {
    return this.querySelectorAll("a[href],area[href]");
  }
  get forms() {
    return this.getElementsByTagName("form");
  }
  get childElementCount() {
    return this[children].length;
  }
  get firstElementChild() {
    return this[children][0] ?? null;
  }
  get lastElementChild() {
    return this[children][this[children].length - 1] ?? null;
  }
  get cookie() {
    return CookieStringUtility.cookiesToString(__classPrivateFieldGet10(this, _Document_browserFrame, "f").page.context.cookieContainer.getCookies(new $URL(this[ownerWindow].location.href), true));
  }
  set cookie(cookie) {
    __classPrivateFieldGet10(this, _Document_browserFrame, "f").page.context.cookieContainer.addCookies([
      CookieStringUtility.stringToCookie(new $URL(this[ownerWindow].location.href), cookie)
    ]);
  }
  get nodeName() {
    return "#document";
  }
  get documentElement() {
    return ParentNodeUtility.getElementByTagName(this, "html");
  }
  get doctype() {
    for (const node2 of this[childNodes]) {
      if (node2 instanceof DocumentType) {
        return node2;
      }
    }
    return null;
  }
  get body() {
    return ParentNodeUtility.getElementByTagName(this, "body");
  }
  get head() {
    return ParentNodeUtility.getElementByTagName(this, "head");
  }
  get styleSheets() {
    const styles = this.querySelectorAll('link[rel="stylesheet"][href],style');
    const styleSheets = [];
    for (const style3 of styles) {
      const sheet2 = style3.sheet;
      if (sheet2) {
        styleSheets.push(sheet2);
      }
    }
    return styleSheets;
  }
  get activeElement() {
    if (this[activeElement] && !this[activeElement][isConnected]) {
      this[activeElement] = null;
    }
    if (this[activeElement] && this[activeElement] instanceof Element_default) {
      let rootNode2 = this[activeElement].getRootNode();
      let activeElement2 = this[activeElement];
      while (rootNode2 !== this) {
        activeElement2 = rootNode2.host;
        rootNode2 = activeElement2 ? activeElement2.getRootNode() : this;
      }
      return activeElement2;
    }
    return this[activeElement] || this.body || this.documentElement || null;
  }
  get scrollingElement() {
    return this.documentElement;
  }
  get location() {
    return this[ownerWindow].location;
  }
  get scripts() {
    return this.getElementsByTagName("script");
  }
  get baseURI() {
    const element = ParentNodeUtility.getElementByTagName(this, "base");
    if (element) {
      return element.href;
    }
    return this[ownerWindow].location.href;
  }
  get URL() {
    return this[ownerWindow].location.href;
  }
  get documentURI() {
    return this.URL;
  }
  get visibilityState() {
    if (this.defaultView) {
      return VisibilityStateEnum_default.visible;
    }
    return VisibilityStateEnum_default.hidden;
  }
  get hidden() {
    if (this.defaultView) {
      return false;
    }
    return true;
  }
  get currentScript() {
    return this[currentScript];
  }
  append(...nodes) {
    ParentNodeUtility.append(this, ...nodes);
  }
  prepend(...nodes) {
    ParentNodeUtility.prepend(this, ...nodes);
  }
  replaceChildren(...nodes) {
    ParentNodeUtility.replaceChildren(this, ...nodes);
  }
  querySelectorAll(selector) {
    return QuerySelector.querySelectorAll(this, selector);
  }
  querySelector(selector) {
    return QuerySelector.querySelector(this, selector);
  }
  queryCommandSupported(_) {
    if (!arguments.length) {
      throw new TypeError("Failed to execute 'queryCommandSupported' on 'Document': 1 argument required, but only 0 present.");
    }
    return true;
  }
  getElementsByClassName(className) {
    return ParentNodeUtility.getElementsByClassName(this, className);
  }
  getElementsByTagName(tagName4) {
    return ParentNodeUtility.getElementsByTagName(this, tagName4);
  }
  getElementsByTagNameNS(namespaceURI2, tagName4) {
    return ParentNodeUtility.getElementsByTagNameNS(this, namespaceURI2, tagName4);
  }
  getElementById(id) {
    return ParentNodeUtility.getElementById(this, id);
  }
  getElementsByName(name2) {
    const getElementsByName = (parentNode2, name3) => {
      const matches = new NodeList;
      for (const child of parentNode2[children]) {
        if (child.getAttributeNS(null, "name") === name3) {
          matches.push(child);
        }
        for (const match of getElementsByName(child, name3)) {
          matches.push(match);
        }
      }
      return matches;
    };
    return getElementsByName(this, name2);
  }
  [(_Document_selection = new WeakMap, _Document_browserFrame = new WeakMap, _Document_instances = new WeakSet, _a12 = children, _b8 = activeElement, _c7 = nextActiveElement, _d6 = currentScript, _e4 = rootNode, _f3 = cacheID, _g3 = isFirstWrite, _h3 = isFirstWriteAfterOpen, _j3 = nodeType, _k2 = isConnected, _l2 = adoptedStyleSheets, _m2 = implementation, _o2 = readyState, _p2 = referrer, _q2 = defaultView, ownerWindow, cloneNode)](deep = false) {
    const clone = super[cloneNode](deep);
    if (deep) {
      for (const node2 of clone[childNodes]) {
        if (node2[nodeType] === NodeTypeEnum_default.elementNode) {
          clone[children].push(node2);
        }
      }
    }
    return clone;
  }
  [appendChild](node2) {
    return ElementUtility.appendChild(this, node2);
  }
  [removeChild](node2) {
    return ElementUtility.removeChild(this, node2);
  }
  [insertBefore](newNode, referenceNode) {
    return ElementUtility.insertBefore(this, newNode, referenceNode);
  }
  write(html) {
    const root = XMLParser.parse(this, html, { evaluateScripts: true });
    if (this[isFirstWrite] || this[isFirstWriteAfterOpen]) {
      if (this[isFirstWrite]) {
        if (!this[isFirstWriteAfterOpen]) {
          this.open();
        }
        this[isFirstWrite] = false;
      }
      this[isFirstWriteAfterOpen] = false;
      let documentElement = null;
      let documentTypeNode = null;
      for (const node2 of root[childNodes]) {
        if (node2["tagName"] === "HTML") {
          documentElement = node2;
        } else if (node2[nodeType] === NodeTypeEnum_default.documentTypeNode) {
          documentTypeNode = node2;
        }
        if (documentElement && documentTypeNode) {
          break;
        }
      }
      if (documentElement) {
        if (!this.documentElement) {
          if (documentTypeNode) {
            this.appendChild(documentTypeNode);
          }
          this.appendChild(documentElement);
          const head = ParentNodeUtility.getElementByTagName(this, "head");
          let body2 = ParentNodeUtility.getElementByTagName(this, "body");
          if (!body2) {
            body2 = this.createElement("body");
            documentElement.appendChild(this.createElement("body"));
          }
          if (!head) {
            documentElement.insertBefore(this.createElement("head"), body2);
          }
        } else {
          const rootBody = ParentNodeUtility.getElementByTagName(root, "body");
          const body2 = ParentNodeUtility.getElementByTagName(this, "body");
          if (rootBody && body2) {
            for (const child of rootBody[childNodes].slice()) {
              body2.appendChild(child);
            }
          }
        }
        const body = ParentNodeUtility.getElementByTagName(this, "body");
        if (body) {
          for (const child of root[childNodes].slice()) {
            if (child["tagName"] !== "HTML" && child[nodeType] !== NodeTypeEnum_default.documentTypeNode) {
              body.appendChild(child);
            }
          }
        }
      } else {
        const documentElement2 = this.createElement("html");
        const bodyElement = this.createElement("body");
        const headElement = this.createElement("head");
        for (const child of root[childNodes].slice()) {
          bodyElement.appendChild(child);
        }
        documentElement2.appendChild(headElement);
        documentElement2.appendChild(bodyElement);
        this.appendChild(documentElement2);
      }
    } else {
      const bodyNode = ParentNodeUtility.getElementByTagName(root, "body");
      const body = ParentNodeUtility.getElementByTagName(this, "body");
      for (const child of (bodyNode || root)[childNodes].slice()) {
        body.appendChild(child);
      }
    }
  }
  open() {
    this[isFirstWriteAfterOpen] = true;
    for (const eventType of Object.keys(this[listeners])) {
      const listeners2 = this[listeners][eventType];
      if (listeners2) {
        for (const listener of listeners2) {
          this.removeEventListener(eventType, listener);
        }
      }
    }
    for (const child of this[childNodes].slice()) {
      this.removeChild(child);
    }
    return this;
  }
  close() {
  }
  createElement(qualifiedName, options3) {
    return this.createElementNS(NamespaceURI_default.html, qualifiedName, options3);
  }
  createElementNS(namespaceURI2, qualifiedName, options3) {
    qualifiedName = String(qualifiedName);
    if (!qualifiedName) {
      throw new DOMException("Failed to execute 'createElementNS' on 'Document': The qualified name provided is empty.");
    }
    if (namespaceURI2 === NamespaceURI_default.svg) {
      const element2 = NodeFactory_default.createNode(this, qualifiedName === "svg" ? this[ownerWindow].SVGSVGElement : this[ownerWindow].SVGElement);
      element2[tagName3] = qualifiedName;
      element2[localName] = qualifiedName;
      element2[namespaceURI] = namespaceURI2;
      element2[isValue] = options3 && options3.is ? String(options3.is) : null;
      return element2;
    }
    const customElement = this[ownerWindow].customElements[registry]?.[options3 && options3.is ? String(options3.is) : qualifiedName];
    if (customElement) {
      const element2 = new customElement.elementClass;
      element2[tagName3] = qualifiedName.toUpperCase();
      element2[localName] = qualifiedName;
      element2[namespaceURI] = namespaceURI2;
      element2[isValue] = options3 && options3.is ? String(options3.is) : null;
      return element2;
    }
    const localName2 = qualifiedName.toLowerCase();
    const elementClass = HTMLElementConfig_default[localName2] ? this[ownerWindow][HTMLElementConfig_default[localName2].className] : null;
    if (elementClass) {
      const element2 = NodeFactory_default.createNode(this, elementClass);
      element2[tagName3] = qualifiedName.toUpperCase();
      element2[localName] = localName2;
      element2[namespaceURI] = namespaceURI2;
      element2[isValue] = options3 && options3.is ? String(options3.is) : null;
      return element2;
    }
    const element = NodeFactory_default.createNode(this, localName2.includes("-") ? this[ownerWindow].HTMLElement : this[ownerWindow].HTMLUnknownElement);
    element[tagName3] = qualifiedName.toUpperCase();
    element[localName] = localName2;
    element[namespaceURI] = namespaceURI2;
    element[isValue] = options3 && options3.is ? String(options3.is) : null;
    return element;
  }
  createTextNode(data2) {
    if (arguments.length < 1) {
      throw new TypeError(`Failed to execute 'createTextNode' on 'Document': 1 argument required, but only ${arguments.length} present.`);
    }
    return NodeFactory_default.createNode(this, this[ownerWindow].Text, String(data2));
  }
  createComment(data2) {
    return NodeFactory_default.createNode(this, this[ownerWindow].Comment, data2);
  }
  createDocumentFragment() {
    return new this[ownerWindow].DocumentFragment;
  }
  createNodeIterator(root, whatToShow = -1, filter = null) {
    return new NodeIterator_default(root, whatToShow, filter);
  }
  createTreeWalker(root, whatToShow = -1, filter = null) {
    return new TreeWalker(root, whatToShow, filter);
  }
  createEvent(type) {
    if (typeof this[ownerWindow][type] === "function") {
      return new this[ownerWindow][type]("init");
    }
    return new Event_default("init");
  }
  createAttribute(qualifiedName) {
    return this.createAttributeNS(null, qualifiedName.toLowerCase());
  }
  createAttributeNS(namespaceURI2, qualifiedName) {
    const attribute = NodeFactory_default.createNode(this, this[ownerWindow].Attr);
    attribute[namespaceURI] = namespaceURI2;
    attribute[name] = qualifiedName;
    return attribute;
  }
  importNode(node2, deep = false) {
    if (!(node2 instanceof Node_default)) {
      throw new DOMException("Parameter 1 was not of type Node.");
    }
    const clone = node2.cloneNode(deep);
    __classPrivateFieldGet10(this, _Document_instances, "m", _Document_importNode).call(this, clone);
    return clone;
  }
  createRange() {
    return new this[ownerWindow].Range;
  }
  adoptNode(node2) {
    if (!(node2 instanceof Node_default)) {
      throw new DOMException("Parameter 1 was not of type Node.");
    }
    const adopted = node2[parentNode] ? node2[parentNode].removeChild(node2) : node2;
    const document2 = this;
    Object.defineProperty(adopted, "ownerDocument", { value: document2 });
    return adopted;
  }
  getSelection() {
    if (!__classPrivateFieldGet10(this, _Document_selection, "f")) {
      __classPrivateFieldSet7(this, _Document_selection, new Selection_default(this), "f");
    }
    return __classPrivateFieldGet10(this, _Document_selection, "f");
  }
  hasFocus() {
    return !!this.activeElement;
  }
  createProcessingInstruction(target2, data2) {
    if (!target2 || !PROCESSING_INSTRUCTION_TARGET_REGEXP.test(target2)) {
      throw new DOMException(`Failed to execute 'createProcessingInstruction' on 'Document': The target provided ('${target2}') is not a valid name.`);
    }
    if (data2.includes("?>")) {
      throw new DOMException(`Failed to execute 'createProcessingInstruction' on 'Document': The data provided ('?>') contains '?>'`);
    }
    const processingInstruction = NodeFactory_default.createNode(this, this[ownerWindow].ProcessingInstruction, data2);
    processingInstruction[target] = target2;
    return processingInstruction;
  }
  elementFromPoint(_x, _y) {
    return null;
  }
}
_Document_importNode = function _Document_importNode2(node2) {
  node2[ownerDocument] = this;
  for (const child of node2[childNodes]) {
    __classPrivateFieldGet10(this, _Document_instances, "m", _Document_importNode2).call(this, child);
  }
};
var Document_default = Document;

// node_modules/happy-dom-without-node/lib/nodes/html-document/HTMLDocument.js
class HTMLDocument extends Document_default {
  constructor(injected) {
    super(injected);
    const doctype = this[implementation].createDocumentType("html", "", "");
    const documentElement = this.createElement("html");
    const bodyElement = this.createElement("body");
    const headElement = this.createElement("head");
    this.appendChild(doctype);
    this.appendChild(documentElement);
    documentElement.appendChild(headElement);
    documentElement.appendChild(bodyElement);
  }
}

// node_modules/happy-dom-without-node/lib/nodes/xml-document/XMLDocument.js
class XMLDocument extends Document_default {
}

// node_modules/happy-dom-without-node/lib/nodes/svg-document/SVGDocument.js
class SVGDocument extends Document_default {
}

// node_modules/happy-dom-without-node/lib/nodes/document-fragment/DocumentFragment.js
var _a13;
var _b9;
var _c8;

class DocumentFragment extends Node_default {
  constructor() {
    super(...arguments);
    this[_a13] = new HTMLCollection;
    this[_b9] = this;
    this[_c8] = NodeTypeEnum_default.documentFragmentNode;
  }
  get children() {
    return this[children];
  }
  get childElementCount() {
    return this[children].length;
  }
  get firstElementChild() {
    return this[children][0] ?? null;
  }
  get lastElementChild() {
    return this[children][this[children].length - 1] ?? null;
  }
  get textContent() {
    let result = "";
    for (const childNode of this[childNodes]) {
      if (childNode[nodeType] === NodeTypeEnum_default.elementNode || childNode[nodeType] === NodeTypeEnum_default.textNode) {
        result += childNode.textContent;
      }
    }
    return result;
  }
  set textContent(textContent) {
    for (const child of this[childNodes].slice()) {
      this.removeChild(child);
    }
    if (textContent) {
      this.appendChild(this[ownerDocument].createTextNode(textContent));
    }
  }
  append(...nodes) {
    ParentNodeUtility.append(this, ...nodes);
  }
  prepend(...nodes) {
    ParentNodeUtility.prepend(this, ...nodes);
  }
  replaceChildren(...nodes) {
    ParentNodeUtility.replaceChildren(this, ...nodes);
  }
  querySelectorAll(selector) {
    return QuerySelector.querySelectorAll(this, selector);
  }
  querySelector(selector) {
    return QuerySelector.querySelector(this, selector);
  }
  getElementById(id) {
    return ParentNodeUtility.getElementById(this, id);
  }
  [(_a13 = children, _b9 = rootNode, _c8 = nodeType, cloneNode)](deep = false) {
    const clone = super[cloneNode](deep);
    if (deep) {
      for (const node2 of clone[childNodes]) {
        if (node2[nodeType] === NodeTypeEnum_default.elementNode) {
          clone[children].push(node2);
        }
      }
    }
    return clone;
  }
  [appendChild](node2) {
    return ElementUtility.appendChild(this, node2);
  }
  [removeChild](node2) {
    return ElementUtility.removeChild(this, node2);
  }
  [insertBefore](newNode, referenceNode) {
    return ElementUtility.insertBefore(this, newNode, referenceNode);
  }
}

// node_modules/happy-dom-without-node/lib/nodes/shadow-root/ShadowRoot.js
var _a14;
var _b10;
var _c9;

class ShadowRoot2 extends DocumentFragment {
  constructor() {
    super(...arguments);
    this.onslotchange = null;
    this[_a14] = [];
    this[_b10] = "open";
    this[_c9] = null;
  }
  get mode() {
    return this[mode];
  }
  get host() {
    return this[host];
  }
  get innerHTML() {
    const xmlSerializer = new XMLSerializer({
      escapeEntities: false
    });
    let xml = "";
    for (const node2 of this[childNodes]) {
      xml += xmlSerializer.serializeToString(node2);
    }
    return xml;
  }
  set innerHTML(html) {
    for (const child of this[childNodes].slice()) {
      this.removeChild(child);
    }
    XMLParser.parse(this[ownerDocument], html, { rootNode: this });
  }
  get adoptedStyleSheets() {
    return this[adoptedStyleSheets];
  }
  set adoptedStyleSheets(value2) {
    this[adoptedStyleSheets] = value2;
  }
  get activeElement() {
    const activeElement2 = this[ownerDocument][activeElement];
    if (activeElement2 && activeElement2[isConnected] && activeElement2.getRootNode() === this) {
      return activeElement2;
    }
    return null;
  }
  toString() {
    return this.innerHTML;
  }
  [(_a14 = adoptedStyleSheets, _b10 = mode, _c9 = host, cloneNode)](deep = false) {
    const clone = super[cloneNode](deep);
    clone[mode] = this.mode;
    return clone;
  }
}

// node_modules/happy-dom-without-node/lib/css/declaration/property-manager/CSSStyleDeclarationValueParser.js
var COLOR_REGEXP = /^#([0-9a-fA-F]{3,4}){1,2}$|^rgb\(([^)]*)\)$|^rgba\(([^)]*)\)$|^hsla?\(\s*(-?\d+|-?\d*.\d+)\s*,\s*(-?\d+|-?\d*.\d+)%\s*,\s*(-?\d+|-?\d*.\d+)%\s*(,\s*(-?\d+|-?\d*.\d+)\s*)?\)/;
var LENGTH_REGEXP = /^(0|[-+]?[0-9]*\.?[0-9]+(in|cm|em|mm|pt|pc|px|ex|rem|vh|vw|ch|vw|vh|vmin|vmax|Q))$/;
var PERCENTAGE_REGEXP = /^[-+]?[0-9]*\.?[0-9]+%$/;
var DEGREE_REGEXP = /^[0-9]+deg$/;
var URL_REGEXP = /^url\(\s*([^)]*)\s*\)$/;
var INTEGER_REGEXP = /^[0-9]+$/;
var FLOAT_REGEXP = /^[0-9.]+$/;
var CALC_REGEXP = /^calc\([^^)]+\)$/;
var CSS_VARIABLE_REGEXP = /^var\( *(--[^) ]+)\)$/;
var FIT_CONTENT_REGEXP = /^fit-content\([^^)]+\)$/;
var GRADIENT_REGEXP = /^(repeating-linear|linear|radial|repeating-radial|conic|repeating-conic)-gradient\([^)]+\)$/;
var GLOBALS = ["inherit", "initial", "unset", "revert"];
var COLORS = [
  "none",
  "currentcolor",
  "transparent",
  "silver",
  "gray",
  "white",
  "maroon",
  "red",
  "purple",
  "fuchsia",
  "green",
  "lime",
  "olive",
  "yellow",
  "navy",
  "blue",
  "teal",
  "aliceblue",
  "aqua",
  "antiquewhite",
  "aquamarine",
  "azure",
  "beige",
  "bisque",
  "black",
  "blanchedalmond",
  "blueviolet",
  "brown",
  "burlywood",
  "cadetblue",
  "chartreuse",
  "chocolate",
  "coral",
  "cornflowerblue",
  "cornsilk",
  "crimson",
  "cyan",
  "darkblue",
  "darkcyan",
  "darkgoldenrod",
  "darkgray",
  "darkgreen",
  "darkgrey",
  "darkkhaki",
  "darkmagenta",
  "darkolivegreen",
  "darkorange",
  "darkorchid",
  "darkred",
  "darksalmon",
  "darkseagreen",
  "darkslateblue",
  "darkslategray",
  "darkslategrey",
  "darkturquoise",
  "darkviolet",
  "deeppink",
  "deepskyblue",
  "dimgray",
  "dimgrey",
  "dodgerblue",
  "firebrick",
  "floralwhite",
  "forestgreen",
  "gainsboro",
  "ghostwhite",
  "gold",
  "goldenrod",
  "greenyellow",
  "grey",
  "honeydew",
  "hotpink",
  "indianred",
  "indigo",
  "ivory",
  "khaki",
  "lavender",
  "lavenderblush",
  "lawngreen",
  "lemonchiffon",
  "lightblue",
  "lightcoral",
  "lightcyan",
  "lightgoldenrodyellow",
  "lightgray",
  "lightgreen",
  "lightgrey",
  "lightpink",
  "lightsalmon",
  "lightseagreen",
  "lightskyblue",
  "lightslategray",
  "lightslategrey",
  "lightsteelblue",
  "lightyellow",
  "limegreen",
  "linen",
  "magenta",
  "mediumaquamarine",
  "mediumblue",
  "mediumorchid",
  "mediumpurple",
  "mediumseagreen",
  "mediumslateblue",
  "mediumspringgreen",
  "mediumturquoise",
  "mediumvioletred",
  "midnightblue",
  "mintcream",
  "mistyrose",
  "moccasin",
  "navajowhite",
  "oldlace",
  "olivedrab",
  "orange",
  "orangered",
  "orchid",
  "palegoldenrod",
  "palegreen",
  "paleturquoise",
  "palevioletred",
  "papayawhip",
  "peachpuff",
  "peru",
  "pink",
  "plum",
  "powderblue",
  "rebeccapurple",
  "rosybrown",
  "royalblue",
  "saddlebrown",
  "salmon",
  "sandybrown",
  "seagreen",
  "seashell",
  "sienna",
  "skyblue",
  "slateblue",
  "slategray",
  "slategrey",
  "snow",
  "springgreen",
  "steelblue",
  "tan",
  "thistle",
  "tomato",
  "turquoise",
  "violet",
  "wheat",
  "whitesmoke",
  "yellowgreen"
];

class CSSStyleDeclarationValueParser {
  static getLength(value2) {
    if (value2 === "0") {
      return "0px";
    }
    if (LENGTH_REGEXP.test(value2)) {
      return value2;
    }
    return null;
  }
  static getPercentage(value2) {
    if (value2 === "0") {
      return "0%";
    }
    if (PERCENTAGE_REGEXP.test(value2)) {
      return value2;
    }
    return null;
  }
  static getDegree(value2) {
    if (value2 === "0") {
      return "0deg";
    }
    if (DEGREE_REGEXP.test(value2)) {
      return value2;
    }
    return null;
  }
  static getCalc(value2) {
    if (CALC_REGEXP.test(value2)) {
      return value2;
    }
    return null;
  }
  static getFitContent(value2) {
    const lowerValue = value2.toLowerCase();
    if (lowerValue === "auto" || lowerValue === "max-content" || lowerValue === "min-content" || lowerValue === "fit-content") {
      return lowerValue;
    }
    if (FIT_CONTENT_REGEXP.test(lowerValue)) {
      return lowerValue;
    }
    return null;
  }
  static getMeasurement(value2) {
    return this.getLength(value2) || this.getPercentage(value2) || this.getCalc(value2);
  }
  static getContentMeasurement(value2) {
    return this.getFitContent(value2) || this.getMeasurement(value2);
  }
  static getAutoMeasurement(value2) {
    if (value2.toLocaleLowerCase() === "auto") {
      return "auto";
    }
    return this.getMeasurement(value2);
  }
  static getInteger(value2) {
    if (INTEGER_REGEXP.test(value2)) {
      return value2;
    }
    return null;
  }
  static getFloat(value2) {
    if (FLOAT_REGEXP.test(value2)) {
      return value2;
    }
    return null;
  }
  static getGradient(value2) {
    if (GRADIENT_REGEXP.test(value2)) {
      return value2;
    }
    return null;
  }
  static getColor(value2) {
    const lowerValue = value2.toLowerCase();
    if (COLORS.includes(lowerValue)) {
      return lowerValue;
    }
    if (COLOR_REGEXP.test(value2)) {
      return value2.replace(/,([^ ])/g, ", $1");
    }
    return null;
  }
  static getURL(value2) {
    if (!value2) {
      return null;
    }
    if (value2.toLowerCase() === "none") {
      return "none";
    }
    const result = URL_REGEXP.exec(value2);
    if (!result) {
      return null;
    }
    let url3 = result[1];
    if ((url3[0] === '"' || url3[0] === "'") && url3[0] !== url3[url3.length - 1]) {
      return null;
    }
    if (url3[0] === '"' || url3[0] === "'") {
      url3 = url3.substring(1, url3.length - 1);
    }
    for (let i = 0;i < url3.length; i++) {
      switch (url3[i]) {
        case "(":
        case ")":
        case " ":
        case "\t":
        case "\n":
        case "'":
        case '"':
          return null;
        case "\\":
          i++;
          break;
      }
    }
    return `url("${url3}")`;
  }
  static getInitial(value2) {
    return value2.toLowerCase() === "initial" ? "initial" : null;
  }
  static getVariable(value2) {
    const cssVariableMatch = value2.match(CSS_VARIABLE_REGEXP);
    if (cssVariableMatch) {
      return `var(${cssVariableMatch[1]})`;
    }
    return null;
  }
  static getGlobal(value2) {
    const lowerValue = value2.toLowerCase();
    return GLOBALS.includes(lowerValue) ? lowerValue : null;
  }
  static getGlobalExceptInitial(value2) {
    const lowerValue = value2.toLowerCase();
    return lowerValue !== "initial" && GLOBALS.includes(lowerValue) ? lowerValue : null;
  }
}

// node_modules/happy-dom-without-node/lib/css/declaration/property-manager/CSSStyleDeclarationPropertySetParser.js
var RECT_REGEXP = /^rect\((.*)\)$/i;
var SPLIT_PARTS_REGEXP = /,(?=(?:(?:(?!\))[\s\S])*\()|[^\(\)]*$)/;
var BORDER_STYLE = [
  "none",
  "hidden",
  "dotted",
  "dashed",
  "solid",
  "double",
  "groove",
  "ridge",
  "inset",
  "outset"
];
var BORDER_WIDTH = ["thin", "medium", "thick"];
var BORDER_COLLAPSE = ["separate", "collapse"];
var BACKGROUND_REPEAT = ["repeat", "repeat-x", "repeat-y", "no-repeat"];
var BACKGROUND_ORIGIN = ["border-box", "padding-box", "content-box"];
var BACKGROUND_CLIP = ["border-box", "padding-box", "content-box"];
var BACKGROUND_ATTACHMENT = ["scroll", "fixed"];
var FLEX_BASIS = ["auto", "fill", "content"];
var CLEAR = ["none", "left", "right", "both"];
var FLOAT = ["none", "left", "right", "inline-start", "inline-end"];
var SYSTEM_FONT = ["caption", "icon", "menu", "message-box", "small-caption", "status-bar"];
var FONT_WEIGHT = ["normal", "bold", "bolder", "lighter"];
var FONT_STYLE = ["normal", "italic", "oblique"];
var FONT_SIZE = [
  "xx-small",
  "x-small",
  "small",
  "medium",
  "large",
  "x-large",
  "xx-large",
  "xxx-large",
  "smaller",
  "larger"
];
var FONT_STRETCH = [
  "ultra-condensed",
  "extra-condensed",
  "condensed",
  "semi-condensed",
  "normal",
  "semi-expanded",
  "expanded",
  "extra-expanded",
  "ultra-expanded"
];
var DISPLAY = [
  "block",
  "inline",
  "inline-block",
  "flex",
  "inline-flex",
  "grid",
  "inline-grid",
  "flow-root",
  "none",
  "contents",
  "block flow",
  "inline flow",
  "inline flow-root",
  "block flex",
  "inline flex",
  "block grid",
  "inline grid",
  "block flow-root",
  "table",
  "table-row",
  "list-item"
];
var BORDER_IMAGE_REPEAT = ["stretch", "repeat", "round", "space"];
var TEXT_TRANSFORM = [
  "capitalize",
  "uppercase",
  "lowercase",
  "none",
  "full-width",
  "full-size-kana"
];
var VISIBILITY = ["visible", "hidden", "collapse"];

class CSSStyleDeclarationPropertySetParser {
  static getBorderCollapse(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "border-collapse": { value: variable, important } };
    }
    const lowerValue = value2.toLowerCase();
    if (CSSStyleDeclarationValueParser.getGlobal(lowerValue) || BORDER_COLLAPSE.includes(lowerValue)) {
      return { "border-collapse": { value: lowerValue, important } };
    }
    return null;
  }
  static getDisplay(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { display: { value: variable, important } };
    }
    const lowerValue = value2.toLowerCase();
    if (CSSStyleDeclarationValueParser.getGlobal(lowerValue) || DISPLAY.includes(lowerValue)) {
      return { display: { value: lowerValue, important } };
    }
    return null;
  }
  static getDirection(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { direction: { value: variable, important } };
    }
    const lowerValue = value2.toLowerCase();
    if (CSSStyleDeclarationValueParser.getGlobal(lowerValue) || lowerValue === "ltr" || lowerValue === "rtl") {
      return { direction: { value: lowerValue, important } };
    }
    return null;
  }
  static getLetterSpacing(value2, important) {
    const parsedValue = CSSStyleDeclarationValueParser.getVariable(value2) || CSSStyleDeclarationValueParser.getGlobal(value2) || CSSStyleDeclarationValueParser.getContentMeasurement(value2);
    return parsedValue ? { "letter-spacing": { value: parsedValue, important } } : null;
  }
  static getWordSpacing(value2, important) {
    const parsedValue = CSSStyleDeclarationValueParser.getVariable(value2) || CSSStyleDeclarationValueParser.getGlobal(value2) || CSSStyleDeclarationValueParser.getContentMeasurement(value2);
    return parsedValue ? { "word-spacing": { value: parsedValue, important } } : null;
  }
  static getTextIndent(value2, important) {
    const parsedValue = CSSStyleDeclarationValueParser.getVariable(value2) || CSSStyleDeclarationValueParser.getGlobal(value2) || CSSStyleDeclarationValueParser.getContentMeasurement(value2);
    return parsedValue ? { "text-indent": { value: parsedValue, important } } : null;
  }
  static getWidth(value2, important) {
    const parsedValue = CSSStyleDeclarationValueParser.getVariable(value2) || CSSStyleDeclarationValueParser.getGlobal(value2) || CSSStyleDeclarationValueParser.getContentMeasurement(value2);
    return parsedValue ? { width: { value: parsedValue, important } } : null;
  }
  static getHeight(value2, important) {
    const parsedValue = CSSStyleDeclarationValueParser.getVariable(value2) || CSSStyleDeclarationValueParser.getGlobal(value2) || CSSStyleDeclarationValueParser.getContentMeasurement(value2);
    return parsedValue ? { height: { value: parsedValue, important } } : null;
  }
  static getTop(value2, important) {
    const parsedValue = CSSStyleDeclarationValueParser.getVariable(value2) || CSSStyleDeclarationValueParser.getGlobal(value2) || CSSStyleDeclarationValueParser.getContentMeasurement(value2);
    return parsedValue ? { top: { value: parsedValue, important } } : null;
  }
  static getRight(value2, important) {
    const parsedValue = CSSStyleDeclarationValueParser.getVariable(value2) || CSSStyleDeclarationValueParser.getGlobal(value2) || CSSStyleDeclarationValueParser.getContentMeasurement(value2);
    return parsedValue ? { right: { value: parsedValue, important } } : null;
  }
  static getBottom(value2, important) {
    const parsedValue = CSSStyleDeclarationValueParser.getVariable(value2) || CSSStyleDeclarationValueParser.getGlobal(value2) || CSSStyleDeclarationValueParser.getContentMeasurement(value2);
    return parsedValue ? { bottom: { value: parsedValue, important } } : null;
  }
  static getLeft(value2, important) {
    const parsedValue = CSSStyleDeclarationValueParser.getVariable(value2) || CSSStyleDeclarationValueParser.getGlobal(value2) || CSSStyleDeclarationValueParser.getContentMeasurement(value2);
    return parsedValue ? { left: { value: parsedValue, important } } : null;
  }
  static getClear(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { clear: { value: variable, important } };
    }
    const lowerValue = value2.toLowerCase();
    if (CSSStyleDeclarationValueParser.getGlobal(lowerValue) || CLEAR.includes(lowerValue)) {
      return { clear: { value: lowerValue, important } };
    }
    return null;
  }
  static getClip(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { clip: { value: variable, important } };
    }
    const lowerValue = value2.toLowerCase();
    if (CSSStyleDeclarationValueParser.getGlobal(lowerValue) || lowerValue === "auto") {
      return { clip: { value: lowerValue, important } };
    }
    const matches = lowerValue.match(RECT_REGEXP);
    if (!matches) {
      return null;
    }
    const parts = matches[1].split(/\s*,\s*/);
    if (parts.length !== 4) {
      return null;
    }
    for (const part of parts) {
      if (!CSSStyleDeclarationValueParser.getMeasurement(part)) {
        return null;
      }
    }
    return { clip: { value: value2, important } };
  }
  static getFloat(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { float: { value: variable, important } };
    }
    const lowerValue = value2.toLowerCase();
    if (CSSStyleDeclarationValueParser.getGlobal(lowerValue) || FLOAT.includes(lowerValue)) {
      return { float: { value: lowerValue, important } };
    }
    return null;
  }
  static getCSSFloat(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "css-float": { value: variable, important } };
    }
    const float = this.getFloat(value2, important);
    return float ? { "css-float": float["float"] } : null;
  }
  static getOutline(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { outline: { value: variable, important } };
    }
    const globalValue = CSSStyleDeclarationValueParser.getGlobal(value2);
    if (globalValue) {
      return {
        ...this.getOutlineColor(globalValue, important),
        ...this.getOutlineStyle(globalValue, important),
        ...this.getOutlineWidth(globalValue, important)
      };
    }
    const properties = {
      ...this.getOutlineColor("initial", important),
      ...this.getOutlineStyle("initial", important),
      ...this.getOutlineWidth("initial", important)
    };
    const parts = value2.split(/ +/);
    for (const part of parts) {
      const width2 = this.getOutlineWidth(part, important);
      const style3 = this.getOutlineStyle(part, important);
      const color = this.getOutlineColor(part, important);
      if (width2 === null && style3 === null && color === null) {
        return null;
      }
      Object.assign(properties, width2, style3, color);
    }
    return properties;
  }
  static getOutlineColor(value2, important) {
    const color = CSSStyleDeclarationValueParser.getVariable(value2) || CSSStyleDeclarationValueParser.getGlobal(value2) || CSSStyleDeclarationValueParser.getColor(value2);
    return color ? {
      "outline-color": { value: color, important }
    } : null;
  }
  static getOutlineOffset(value2, important) {
    const parsedValue = CSSStyleDeclarationValueParser.getVariable(value2) || CSSStyleDeclarationValueParser.getLength(value2);
    return parsedValue ? { "outline-offset": { value: parsedValue, important } } : null;
  }
  static getOutlineStyle(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "outline-style": { value: variable, important } };
    }
    const lowerValue = value2.toLowerCase();
    if (CSSStyleDeclarationValueParser.getGlobal(lowerValue) || BORDER_STYLE.includes(lowerValue)) {
      return {
        "outline-style": { value: lowerValue, important }
      };
    }
    return null;
  }
  static getOutlineWidth(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "outline-width": { value: variable, important } };
    }
    const lowerValue = value2.toLowerCase();
    const parsedValue = BORDER_WIDTH.includes(lowerValue) || CSSStyleDeclarationValueParser.getGlobal(lowerValue) ? lowerValue : CSSStyleDeclarationValueParser.getLength(value2);
    if (parsedValue) {
      return {
        "outline-width": { value: parsedValue, important }
      };
    }
    return null;
  }
  static getBorder(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { border: { value: variable, important } };
    }
    const globalValue = CSSStyleDeclarationValueParser.getGlobal(value2);
    if (globalValue) {
      return {
        ...this.getBorderWidth(globalValue, important),
        ...this.getBorderStyle(globalValue, important),
        ...this.getBorderColor(globalValue, important),
        ...this.getBorderImage(globalValue, important)
      };
    }
    const properties = {
      ...this.getBorderWidth("initial", important),
      ...this.getBorderStyle("initial", important),
      ...this.getBorderColor("initial", important),
      ...this.getBorderImage("initial", important)
    };
    const parts = value2.replace(/ *, */g, ",").split(/ +/);
    for (const part of parts) {
      const width2 = this.getBorderWidth(part, important);
      const style3 = this.getBorderStyle(part, important);
      const color = this.getBorderColor(part, important);
      if (width2 === null && style3 === null && color === null) {
        return null;
      }
      Object.assign(properties, width2, style3, color);
    }
    return properties;
  }
  static getBorderWidth(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "border-width": { value: variable, important } };
    }
    const globalValue = CSSStyleDeclarationValueParser.getGlobal(value2);
    if (globalValue) {
      return {
        ...this.getBorderTopWidth(globalValue, important),
        ...this.getBorderRightWidth(globalValue, important),
        ...this.getBorderBottomWidth(globalValue, important),
        ...this.getBorderLeftWidth(globalValue, important)
      };
    }
    const parts = value2.split(/ +/);
    const top2 = this.getBorderTopWidth(parts[0], important);
    const right2 = this.getBorderRightWidth(parts[1] || parts[0], important);
    const bottom2 = this.getBorderBottomWidth(parts[2] || parts[0], important);
    const left2 = this.getBorderLeftWidth(parts[3] || parts[1] || parts[0], important);
    if (!top2 || !right2 || !bottom2 || !left2) {
      return null;
    }
    return {
      ...top2,
      ...right2,
      ...bottom2,
      ...left2
    };
  }
  static getBorderStyle(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "border-style": { value: variable, important } };
    }
    const globalValue = CSSStyleDeclarationValueParser.getGlobal(value2);
    if (globalValue) {
      return {
        ...this.getBorderTopStyle(globalValue, important),
        ...this.getBorderRightStyle(globalValue, important),
        ...this.getBorderBottomStyle(globalValue, important),
        ...this.getBorderLeftStyle(globalValue, important)
      };
    }
    const parts = value2.split(/ +/);
    const top2 = this.getBorderTopStyle(parts[0], important);
    const right2 = this.getBorderRightStyle(parts[1] || parts[0], important);
    const bottom2 = this.getBorderBottomStyle(parts[2] || parts[0], important);
    const left2 = this.getBorderLeftStyle(parts[3] || parts[1] || parts[0], important);
    if (!top2 || !right2 || !bottom2 || !left2) {
      return null;
    }
    return {
      ...top2,
      ...right2,
      ...bottom2,
      ...left2
    };
  }
  static getBorderColor(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "border-color": { value: variable, important } };
    }
    const globalValue = CSSStyleDeclarationValueParser.getGlobal(value2);
    if (globalValue) {
      return {
        ...this.getBorderTopColor(globalValue, important),
        ...this.getBorderRightColor(globalValue, important),
        ...this.getBorderBottomColor(globalValue, important),
        ...this.getBorderLeftColor(globalValue, important)
      };
    }
    const parts = value2.split(/ +/);
    const top2 = this.getBorderTopColor(parts[0], important);
    const right2 = this.getBorderRightColor(parts[1] || parts[0], important);
    const bottom2 = this.getBorderBottomColor(parts[2] || parts[0], important);
    const left2 = this.getBorderLeftColor(parts[3] || parts[1] || parts[0], important);
    if (!top2 || !right2 || !bottom2 || !left2) {
      return null;
    }
    return {
      ...top2,
      ...right2,
      ...bottom2,
      ...left2
    };
  }
  static getBorderImage(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "border-image": { value: variable, important } };
    }
    const globalValue = CSSStyleDeclarationValueParser.getGlobal(value2);
    if (globalValue) {
      return {
        ...this.getBorderImageSource(globalValue, important),
        ...this.getBorderImageSlice(globalValue, important),
        ...this.getBorderImageWidth(globalValue, important),
        ...this.getBorderImageOutset(globalValue, important),
        ...this.getBorderImageRepeat(globalValue, important)
      };
    }
    let parsedValue = value2.replace(/[ ]*\/[ ]*/g, "/");
    const sourceMatch = parsedValue.match(/ *([a-zA-Z-]+\([^)]*\)) */);
    if (sourceMatch) {
      parsedValue = parsedValue.replace(sourceMatch[0], "");
    }
    const parts = parsedValue.split(/ +/);
    if (sourceMatch) {
      parts.push(sourceMatch[1]);
    }
    const properties = {
      ...this.getBorderImageSource("none", important),
      ...this.getBorderImageSlice("100%", important),
      ...this.getBorderImageWidth("1", important),
      ...this.getBorderImageOutset("0", important),
      ...this.getBorderImageRepeat("stretch", important)
    };
    for (let i = 0, max3 = parts.length;i < max3; i++) {
      const part = parts[i];
      const previousPart = i > 0 ? parts[i - 1] : "";
      if (!part.startsWith("url") && part.includes("/")) {
        const [slice, width2, outset] = part.split("/");
        const borderImageSlice = this.getBorderImageSlice(`${previousPart} ${slice}`, important) || this.getBorderImageSlice(slice, important);
        const borderImageWidth = this.getBorderImageWidth(width2, important);
        const borderImageOutset = outset && this.getBorderImageOutset(outset, important);
        if (!borderImageSlice || !borderImageWidth || borderImageOutset === null) {
          return null;
        }
        Object.assign(properties, borderImageSlice, borderImageWidth, borderImageOutset);
      } else {
        const slice = this.getBorderImageSlice(`${previousPart} ${part}`, important) || this.getBorderImageSlice(part, important);
        const source = this.getBorderImageSource(part, important);
        const repeat = this.getBorderImageRepeat(part, important);
        if (!slice && !source && !repeat) {
          return null;
        }
        Object.assign(properties, slice, source, repeat);
      }
    }
    return properties;
  }
  static getBorderImageSource(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "border-image-source": { value: variable, important } };
    }
    const lowerValue = value2.toLowerCase();
    if (CSSStyleDeclarationValueParser.getGlobal(lowerValue) || lowerValue === "none") {
      return {
        "border-image-source": {
          important,
          value: lowerValue
        }
      };
    }
    const parsedValue = CSSStyleDeclarationValueParser.getURL(value2) || CSSStyleDeclarationValueParser.getGradient(value2);
    if (!parsedValue) {
      return null;
    }
    return {
      "border-image-source": {
        important,
        value: parsedValue
      }
    };
  }
  static getBorderImageSlice(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "border-image-slice": { value: variable, important } };
    }
    const lowerValue = value2.toLowerCase();
    if (CSSStyleDeclarationValueParser.getGlobal(lowerValue)) {
      return {
        "border-image-slice": {
          important,
          value: lowerValue
        }
      };
    }
    if (lowerValue !== lowerValue.trim()) {
      return null;
    }
    const regexp = /(fill)|(calc\([^^)]+\))|([0-9]+%)|([0-9]+)/g;
    const values = [];
    let match;
    while (match = regexp.exec(lowerValue)) {
      const previousCharacter = lowerValue[match.index - 1];
      const nextCharacter = lowerValue[match.index + match[0].length];
      if (previousCharacter && previousCharacter !== " " || nextCharacter && nextCharacter !== " ") {
        return null;
      }
      const fill = match[1] && "fill";
      const calc = match[2] && CSSStyleDeclarationValueParser.getCalc(match[2]);
      const percentage = match[3] && CSSStyleDeclarationValueParser.getPercentage(match[3]);
      const integer = match[4] && CSSStyleDeclarationValueParser.getInteger(match[4]);
      if (!fill && !calc && !percentage && !integer) {
        return null;
      }
      values.push(fill || calc || percentage || integer);
    }
    if (!values.length || values.length > 4) {
      return null;
    }
    return {
      "border-image-slice": {
        important,
        value: values.join(" ")
      }
    };
  }
  static getBorderImageWidth(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "border-image-width": { value: variable, important } };
    }
    const lowerValue = value2.toLowerCase();
    if (CSSStyleDeclarationValueParser.getGlobal(lowerValue)) {
      return {
        "border-image-width": {
          important,
          value: lowerValue
        }
      };
    }
    const parts = lowerValue.split(/ +/);
    if (parts.length > 4) {
      return null;
    }
    for (const part of parts) {
      if (!CSSStyleDeclarationValueParser.getInteger(part) && !CSSStyleDeclarationValueParser.getAutoMeasurement(part)) {
        return null;
      }
    }
    return {
      "border-image-width": {
        important,
        value: value2
      }
    };
  }
  static getBorderImageOutset(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "border-image-outset": { value: variable, important } };
    }
    const lowerValue = value2.toLowerCase();
    if (CSSStyleDeclarationValueParser.getGlobal(lowerValue)) {
      return {
        "border-image-outset": {
          important,
          value: lowerValue
        }
      };
    }
    const parts = value2.split(/ +/);
    if (parts.length > 4) {
      return null;
    }
    for (const part of parts) {
      if (!CSSStyleDeclarationValueParser.getLength(part) && !CSSStyleDeclarationValueParser.getFloat(part)) {
        return null;
      }
    }
    return {
      "border-image-outset": {
        important,
        value: value2
      }
    };
  }
  static getBorderImageRepeat(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "border-image-repeat": { value: variable, important } };
    }
    const lowerValue = value2.toLowerCase();
    if (CSSStyleDeclarationValueParser.getGlobal(lowerValue)) {
      return {
        "border-image-repeat": {
          important,
          value: lowerValue
        }
      };
    }
    const parts = lowerValue.split(/ +/);
    if (parts.length > 2) {
      return null;
    }
    for (const part of parts) {
      if (!BORDER_IMAGE_REPEAT.includes(part)) {
        return null;
      }
    }
    return {
      "border-image-repeat": {
        important,
        value: value2
      }
    };
  }
  static getBorderTopWidth(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "border-top-width": { value: variable, important } };
    }
    const lowerValue = value2.toLowerCase();
    const parsedValue = BORDER_WIDTH.includes(lowerValue) || CSSStyleDeclarationValueParser.getGlobal(lowerValue) ? lowerValue : CSSStyleDeclarationValueParser.getLength(value2);
    if (parsedValue) {
      return {
        "border-top-width": { value: parsedValue, important }
      };
    }
    return null;
  }
  static getBorderRightWidth(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "border-right-width": { value: variable, important } };
    }
    const lowerValue = value2.toLowerCase();
    const parsedValue = BORDER_WIDTH.includes(lowerValue) || CSSStyleDeclarationValueParser.getGlobal(lowerValue) ? lowerValue : CSSStyleDeclarationValueParser.getLength(value2);
    if (parsedValue) {
      return {
        "border-right-width": { value: parsedValue, important }
      };
    }
    return null;
  }
  static getBorderBottomWidth(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "border-bottom-width": { value: variable, important } };
    }
    const lowerValue = value2.toLowerCase();
    const parsedValue = BORDER_WIDTH.includes(lowerValue) || CSSStyleDeclarationValueParser.getGlobal(lowerValue) ? lowerValue : CSSStyleDeclarationValueParser.getLength(value2);
    if (parsedValue) {
      return {
        "border-bottom-width": { value: parsedValue, important }
      };
    }
    return null;
  }
  static getBorderLeftWidth(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "border-left-width": { value: variable, important } };
    }
    const lowerValue = value2.toLowerCase();
    const parsedValue = BORDER_WIDTH.includes(lowerValue) || CSSStyleDeclarationValueParser.getGlobal(lowerValue) ? lowerValue : CSSStyleDeclarationValueParser.getLength(value2);
    if (parsedValue) {
      return {
        "border-left-width": { value: parsedValue, important }
      };
    }
    return null;
  }
  static getBorderTopStyle(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "border-top-style": { value: variable, important } };
    }
    const lowerValue = value2.toLowerCase();
    if (CSSStyleDeclarationValueParser.getGlobal(lowerValue) || BORDER_STYLE.includes(lowerValue)) {
      return {
        "border-top-style": { value: lowerValue, important }
      };
    }
    return null;
  }
  static getBorderRightStyle(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "border-right-style": { value: variable, important } };
    }
    const lowerValue = value2.toLowerCase();
    if (CSSStyleDeclarationValueParser.getGlobal(lowerValue) || BORDER_STYLE.includes(lowerValue)) {
      return {
        "border-right-style": { value: lowerValue, important }
      };
    }
    return null;
  }
  static getBorderBottomStyle(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "border-bottom-style": { value: variable, important } };
    }
    const lowerValue = value2.toLowerCase();
    if (CSSStyleDeclarationValueParser.getGlobal(lowerValue) || BORDER_STYLE.includes(lowerValue)) {
      return {
        "border-bottom-style": { value: lowerValue, important }
      };
    }
    return null;
  }
  static getBorderLeftStyle(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "border-left-style": { value: variable, important } };
    }
    const lowerValue = value2.toLowerCase();
    if (CSSStyleDeclarationValueParser.getGlobal(lowerValue) || BORDER_STYLE.includes(lowerValue)) {
      return {
        "border-left-style": { value: lowerValue, important }
      };
    }
    return null;
  }
  static getBorderTopColor(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "border-top-color": { value: variable, important } };
    }
    const color = CSSStyleDeclarationValueParser.getGlobal(value2) || CSSStyleDeclarationValueParser.getColor(value2);
    return color ? {
      "border-top-color": { value: color, important }
    } : null;
  }
  static getBorderRightColor(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "border-right-color": { value: variable, important } };
    }
    const color = CSSStyleDeclarationValueParser.getGlobal(value2) || CSSStyleDeclarationValueParser.getColor(value2);
    return color ? {
      "border-right-color": { value: color, important }
    } : null;
  }
  static getBorderBottomColor(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "border-bottom-color": { value: variable, important } };
    }
    const color = CSSStyleDeclarationValueParser.getGlobal(value2) || CSSStyleDeclarationValueParser.getColor(value2);
    return color ? {
      "border-bottom-color": { value: color, important }
    } : null;
  }
  static getBorderLeftColor(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "border-left-color": { value: variable, important } };
    }
    const color = CSSStyleDeclarationValueParser.getGlobal(value2) || CSSStyleDeclarationValueParser.getColor(value2);
    return color ? {
      "border-left-color": { value: color, important }
    } : null;
  }
  static getBorderRadius(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "border-radius": { value: variable, important } };
    }
    const globalValue = CSSStyleDeclarationValueParser.getGlobal(value2);
    if (globalValue) {
      return {
        ...this.getBorderTopLeftRadius(globalValue, important),
        ...this.getBorderTopRightRadius(globalValue, important),
        ...this.getBorderBottomRightRadius(globalValue, important),
        ...this.getBorderBottomLeftRadius(globalValue, important)
      };
    }
    const parts = value2.split(/ +/);
    const topLeft = this.getBorderTopLeftRadius(parts[0], important);
    const topRight = this.getBorderTopRightRadius(parts[1] || parts[0], important);
    const bottomRight = this.getBorderBottomRightRadius(parts[2] || parts[0], important);
    const bottomLeft = this.getBorderBottomLeftRadius(parts[3] || parts[1] || parts[0], important);
    if (!topLeft || !topRight || !bottomRight || !bottomLeft) {
      return null;
    }
    return {
      ...topLeft,
      ...topRight,
      ...bottomRight,
      ...bottomLeft
    };
  }
  static getBorderTopLeftRadius(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "border-top-left-radius": { value: variable, important } };
    }
    const radius = CSSStyleDeclarationValueParser.getGlobal(value2) || CSSStyleDeclarationValueParser.getMeasurement(value2);
    return radius ? { "border-top-left-radius": { important, value: radius } } : null;
  }
  static getBorderTopRightRadius(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "border-top-right-radius": { value: variable, important } };
    }
    const radius = CSSStyleDeclarationValueParser.getGlobal(value2) || CSSStyleDeclarationValueParser.getMeasurement(value2);
    return radius ? { "border-top-right-radius": { important, value: radius } } : null;
  }
  static getBorderBottomRightRadius(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "border-bottom-right-radius": { value: variable, important } };
    }
    const radius = CSSStyleDeclarationValueParser.getGlobal(value2) || CSSStyleDeclarationValueParser.getMeasurement(value2);
    return radius ? { "border-bottom-right-radius": { important, value: radius } } : null;
  }
  static getBorderBottomLeftRadius(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "border-bottom-left-radius": { value: variable, important } };
    }
    const radius = CSSStyleDeclarationValueParser.getGlobal(value2) || CSSStyleDeclarationValueParser.getMeasurement(value2);
    return radius ? { "border-bottom-left-radius": { important, value: radius } } : null;
  }
  static getBorderTop(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "border-top": { value: variable, important } };
    }
    const globalValue = CSSStyleDeclarationValueParser.getGlobal(value2);
    if (globalValue) {
      return {
        ...this.getBorderTopWidth(globalValue, important),
        ...this.getBorderTopStyle(globalValue, important),
        ...this.getBorderTopColor(globalValue, important)
      };
    }
    const properties = {
      ...this.getBorderTopWidth("initial", important),
      ...this.getBorderTopStyle("initial", important),
      ...this.getBorderTopColor("initial", important)
    };
    const parts = value2.split(/ +/);
    for (const part of parts) {
      const width2 = this.getBorderTopWidth(part, important);
      const style3 = this.getBorderTopStyle(part, important);
      const color = this.getBorderTopColor(part, important);
      if (width2 === null && style3 === null && color === null) {
        return null;
      }
      Object.assign(properties, width2, style3, color);
    }
    return properties;
  }
  static getBorderRight(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "border-right": { value: variable, important } };
    }
    const globalValue = CSSStyleDeclarationValueParser.getGlobal(value2);
    if (globalValue) {
      return {
        ...this.getBorderRightWidth(globalValue, important),
        ...this.getBorderRightStyle(globalValue, important),
        ...this.getBorderRightColor(globalValue, important)
      };
    }
    const properties = {
      ...this.getBorderRightWidth("initial", important),
      ...this.getBorderRightStyle("initial", important),
      ...this.getBorderRightColor("initial", important)
    };
    const parts = value2.split(/ +/);
    for (const part of parts) {
      const width2 = this.getBorderRightWidth(part, important);
      const style3 = this.getBorderRightStyle(part, important);
      const color = this.getBorderRightColor(part, important);
      if (width2 === null && style3 === null && color === null) {
        return null;
      }
      Object.assign(properties, width2, style3, color);
    }
    return properties;
  }
  static getBorderBottom(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "border-bottom": { value: variable, important } };
    }
    const globalValue = CSSStyleDeclarationValueParser.getGlobal(value2);
    if (globalValue) {
      return {
        ...this.getBorderBottomWidth(globalValue, important),
        ...this.getBorderBottomStyle(globalValue, important),
        ...this.getBorderBottomColor(globalValue, important)
      };
    }
    const properties = {
      ...this.getBorderBottomWidth("initial", important),
      ...this.getBorderBottomStyle("initial", important),
      ...this.getBorderBottomColor("initial", important)
    };
    const parts = value2.split(/ +/);
    for (const part of parts) {
      const width2 = this.getBorderBottomWidth(part, important);
      const style3 = this.getBorderBottomStyle(part, important);
      const color = this.getBorderBottomColor(part, important);
      if (width2 === null && style3 === null && color === null) {
        return null;
      }
      Object.assign(properties, width2, style3, color);
    }
    return properties;
  }
  static getBorderLeft(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "border-left": { value: variable, important } };
    }
    const globalValue = CSSStyleDeclarationValueParser.getGlobal(value2);
    if (globalValue) {
      return {
        ...this.getBorderLeftWidth(globalValue, important),
        ...this.getBorderLeftStyle(globalValue, important),
        ...this.getBorderLeftColor(globalValue, important)
      };
    }
    const properties = {
      ...this.getBorderLeftWidth("initial", important),
      ...this.getBorderLeftStyle("initial", important),
      ...this.getBorderLeftColor("initial", important)
    };
    const parts = value2.split(/ +/);
    for (const part of parts) {
      const width2 = this.getBorderLeftWidth(part, important);
      const style3 = this.getBorderLeftStyle(part, important);
      const color = this.getBorderLeftColor(part, important);
      if (width2 === null && style3 === null && color === null) {
        return null;
      }
      Object.assign(properties, width2, style3, color);
    }
    return properties;
  }
  static getPadding(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { padding: { value: variable, important } };
    }
    const globalValue = CSSStyleDeclarationValueParser.getGlobal(value2);
    if (globalValue) {
      return {
        ...this.getPaddingTop(globalValue, important),
        ...this.getPaddingRight(globalValue, important),
        ...this.getPaddingBottom(globalValue, important),
        ...this.getPaddingLeft(globalValue, important)
      };
    }
    const parts = value2.split(/ +/);
    const top2 = this.getPaddingTop(parts[0], important);
    const right2 = this.getPaddingRight(parts[1] || parts[0], important);
    const bottom2 = this.getPaddingBottom(parts[2] || parts[0], important);
    const left2 = this.getPaddingLeft(parts[3] || parts[1] || parts[0], important);
    if (!top2 || !right2 || !bottom2 || !left2) {
      return null;
    }
    return {
      ...top2,
      ...right2,
      ...bottom2,
      ...left2
    };
  }
  static getPaddingTop(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "padding-top": { value: variable, important } };
    }
    const padding = CSSStyleDeclarationValueParser.getGlobal(value2) || CSSStyleDeclarationValueParser.getMeasurement(value2);
    return padding ? { "padding-top": { value: padding, important } } : null;
  }
  static getPaddingRight(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "padding-right": { value: variable, important } };
    }
    const padding = CSSStyleDeclarationValueParser.getGlobal(value2) || CSSStyleDeclarationValueParser.getMeasurement(value2);
    return padding ? { "padding-right": { value: padding, important } } : null;
  }
  static getPaddingBottom(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "padding-bottom": { value: variable, important } };
    }
    const padding = CSSStyleDeclarationValueParser.getGlobal(value2) || CSSStyleDeclarationValueParser.getMeasurement(value2);
    return padding ? { "padding-bottom": { value: padding, important } } : null;
  }
  static getPaddingLeft(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "padding-left": { value: variable, important } };
    }
    const padding = CSSStyleDeclarationValueParser.getGlobal(value2) || CSSStyleDeclarationValueParser.getMeasurement(value2);
    return padding ? { "padding-left": { value: padding, important } } : null;
  }
  static getMargin(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { margin: { value: variable, important } };
    }
    const globalValue = CSSStyleDeclarationValueParser.getGlobal(value2);
    if (globalValue) {
      return {
        ...this.getMarginTop(globalValue, important),
        ...this.getMarginRight(globalValue, important),
        ...this.getMarginBottom(globalValue, important),
        ...this.getMarginLeft(globalValue, important)
      };
    }
    const parts = value2.split(/ +/);
    const top2 = this.getMarginTop(parts[0], important);
    const right2 = this.getMarginRight(parts[1] || parts[0], important);
    const bottom2 = this.getMarginBottom(parts[2] || parts[0], important);
    const left2 = this.getMarginLeft(parts[3] || parts[1] || parts[0], important);
    if (!top2 || !right2 || !bottom2 || !left2) {
      return null;
    }
    return {
      ...top2,
      ...right2,
      ...bottom2,
      ...left2
    };
  }
  static getMarginTop(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "margin-top": { value: variable, important } };
    }
    const margin = CSSStyleDeclarationValueParser.getGlobal(value2) || CSSStyleDeclarationValueParser.getAutoMeasurement(value2);
    return margin ? { "margin-top": { value: margin, important } } : null;
  }
  static getMarginRight(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "margin-right": { value: variable, important } };
    }
    const margin = CSSStyleDeclarationValueParser.getGlobal(value2) || CSSStyleDeclarationValueParser.getAutoMeasurement(value2);
    return margin ? { "margin-right": { value: margin, important } } : null;
  }
  static getMarginBottom(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "margin-bottom": { value: variable, important } };
    }
    const margin = CSSStyleDeclarationValueParser.getGlobal(value2) || CSSStyleDeclarationValueParser.getAutoMeasurement(value2);
    return margin ? { "margin-bottom": { value: margin, important } } : null;
  }
  static getMarginLeft(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "margin-left": { value: variable, important } };
    }
    const margin = CSSStyleDeclarationValueParser.getGlobal(value2) || CSSStyleDeclarationValueParser.getAutoMeasurement(value2);
    return margin ? { "margin-left": { value: margin, important } } : null;
  }
  static getFlex(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { flex: { value: variable, important } };
    }
    const lowerValue = value2.trim().toLowerCase();
    const globalValue = CSSStyleDeclarationValueParser.getGlobal(value2);
    if (globalValue) {
      return {
        ...this.getFlexGrow(globalValue, important),
        ...this.getFlexShrink(globalValue, important),
        ...this.getFlexBasis(globalValue, important)
      };
    }
    switch (lowerValue) {
      case "none":
        return {
          ...this.getFlexGrow("0", important),
          ...this.getFlexShrink("0", important),
          ...this.getFlexBasis("auto", important)
        };
      case "auto":
        return {
          ...this.getFlexGrow("1", important),
          ...this.getFlexShrink("1", important),
          ...this.getFlexBasis("auto", important)
        };
    }
    const measurement = CSSStyleDeclarationValueParser.getContentMeasurement(lowerValue);
    if (measurement) {
      return {
        ...this.getFlexGrow("1", important),
        ...this.getFlexShrink("1", important),
        ...this.getFlexBasis(measurement, important)
      };
    }
    const parts = value2.split(/ +/);
    const flexGrow = this.getFlexGrow(parts[0], important);
    const flexShrink = this.getFlexShrink(parts[1] || "1", important);
    const flexBasis = this.getFlexBasis(parts[2] || "0%", important);
    if (!flexGrow || !flexShrink || !flexBasis) {
      return null;
    }
    return {
      ...flexGrow,
      ...flexShrink,
      ...flexBasis
    };
  }
  static getFlexBasis(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "flex-basis": { value: variable, important } };
    }
    const lowerValue = value2.toLowerCase();
    if (CSSStyleDeclarationValueParser.getGlobal(lowerValue) || FLEX_BASIS.includes(lowerValue)) {
      return { "flex-basis": { value: lowerValue, important } };
    }
    const measurement = CSSStyleDeclarationValueParser.getContentMeasurement(lowerValue);
    return measurement ? { "flex-basis": { value: measurement, important } } : null;
  }
  static getFlexShrink(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "flex-shrink": { value: variable, important } };
    }
    const parsedValue = CSSStyleDeclarationValueParser.getGlobal(value2) || CSSStyleDeclarationValueParser.getFloat(value2);
    return parsedValue ? { "flex-shrink": { value: parsedValue, important } } : null;
  }
  static getFlexGrow(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "flex-grow": { value: variable, important } };
    }
    const parsedValue = CSSStyleDeclarationValueParser.getGlobal(value2) || CSSStyleDeclarationValueParser.getFloat(value2);
    return parsedValue ? { "flex-grow": { value: parsedValue, important } } : null;
  }
  static getBackground(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { background: { value: variable, important } };
    }
    const globalValue = CSSStyleDeclarationValueParser.getGlobal(value2);
    if (globalValue) {
      return {
        ...this.getBackgroundImage(globalValue, important),
        ...this.getBackgroundPosition(globalValue, important),
        ...this.getBackgroundSize(globalValue, important),
        ...this.getBackgroundRepeat(globalValue, important),
        ...this.getBackgroundAttachment(globalValue, important),
        ...this.getBackgroundOrigin(globalValue, important),
        ...this.getBackgroundClip(globalValue, important),
        ...this.getBackgroundColor(globalValue, important)
      };
    }
    const properties = {
      ...this.getBackgroundImage("initial", important),
      ...this.getBackgroundPosition("initial", important),
      ...this.getBackgroundSize("initial", important),
      ...this.getBackgroundRepeat("initial", important),
      ...this.getBackgroundAttachment("initial", important),
      ...this.getBackgroundOrigin("initial", important),
      ...this.getBackgroundClip("initial", important),
      ...this.getBackgroundColor("initial", important)
    };
    const parts = value2.replace(/[ ]*,[ ]*/g, ",").replace(/[ ]*\/[ ]*/g, "/").split(/ +/);
    const backgroundPositions = [];
    for (const part of parts) {
      if (!part.startsWith("url") && part.includes("/")) {
        const [position, size] = part.split("/");
        const backgroundPositionX = this.getBackgroundPositionX(position, important);
        const backgroundPositionY = this.getBackgroundPositionY(position, important);
        const backgroundSize = this.getBackgroundSize(size, important);
        if (!backgroundPositionX && !backgroundPositionY || !backgroundSize) {
          return null;
        }
        if (backgroundPositionY) {
          backgroundPositions.push(backgroundPositionY["background-position-y"].value);
        } else if (backgroundPositionX) {
          backgroundPositions.push(backgroundPositionX["background-position-x"].value);
        }
        Object.assign(properties, backgroundSize);
      } else {
        const backgroundImage = this.getBackgroundImage(part, important);
        const backgroundRepeat = this.getBackgroundRepeat(part, important);
        const backgroundAttachment = this.getBackgroundAttachment(part, important);
        const backgroundPositionX = this.getBackgroundPositionX(part, important);
        const backgroundPositionY = this.getBackgroundPositionY(part, important);
        const backgroundColor = this.getBackgroundColor(part, important);
        const backgroundOrigin = this.getBackgroundOrigin(part, important);
        const backgroundClip = this.getBackgroundClip(part, important);
        if (!backgroundImage && !backgroundRepeat && !backgroundAttachment && !backgroundPositionX && !backgroundPositionY && !backgroundColor && !backgroundOrigin && !backgroundClip) {
          return null;
        }
        if (backgroundPositionX) {
          backgroundPositions.push(backgroundPositionX["background-position-x"].value);
        } else if (backgroundPositionY) {
          backgroundPositions.push(backgroundPositionY["background-position-y"].value);
        }
        Object.assign(properties, backgroundImage, backgroundRepeat, backgroundAttachment, backgroundColor, backgroundOrigin, backgroundClip);
      }
    }
    if (backgroundPositions.length) {
      Object.assign(properties, this.getBackgroundPosition(backgroundPositions.join(" "), important));
    }
    return properties;
  }
  static getBackgroundSize(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "background-size": { value: variable, important } };
    }
    const lowerValue = value2.toLowerCase();
    if (CSSStyleDeclarationValueParser.getGlobal(lowerValue)) {
      return { "background-size": { value: lowerValue, important } };
    }
    const imageParts = lowerValue.split(SPLIT_PARTS_REGEXP);
    const parsed = [];
    for (const imagePart of imageParts) {
      const parts = imagePart.trim().split(" ");
      if (parts.length !== 1 && parts.length !== 2) {
        return null;
      }
      if (parts.length === 1) {
        if (parts[0] !== "cover" && parts[0] !== "contain" && !CSSStyleDeclarationValueParser.getAutoMeasurement(parts[0])) {
          return null;
        }
        parsed.push(parts[0]);
      } else {
        if (!CSSStyleDeclarationValueParser.getAutoMeasurement(parts[0]) || !CSSStyleDeclarationValueParser.getAutoMeasurement(parts[1])) {
          return null;
        }
        parsed.push(`${parts[0]} ${parts[1]}`);
      }
    }
    if (parsed.length === 1) {
      return { "background-size": { value: parsed.join(", "), important } };
    }
    return null;
  }
  static getBackgroundOrigin(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "background-origin": { value: variable, important } };
    }
    const lowerValue = value2.toLowerCase();
    if (CSSStyleDeclarationValueParser.getGlobal(lowerValue) || BACKGROUND_ORIGIN.includes(lowerValue)) {
      return { "background-origin": { value: lowerValue, important } };
    }
    return null;
  }
  static getBackgroundClip(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "background-clip": { value: variable, important } };
    }
    const lowerValue = value2.toLowerCase();
    if (CSSStyleDeclarationValueParser.getGlobal(lowerValue) || BACKGROUND_CLIP.includes(lowerValue)) {
      return { "background-clip": { value: lowerValue, important } };
    }
    return null;
  }
  static getBackgroundRepeat(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "background-repeat": { value: variable, important } };
    }
    const lowerValue = value2.toLowerCase();
    if (CSSStyleDeclarationValueParser.getGlobal(lowerValue) || BACKGROUND_REPEAT.includes(lowerValue)) {
      return { "background-repeat": { value: lowerValue, important } };
    }
    return null;
  }
  static getBackgroundAttachment(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "background-attachment": { value: variable, important } };
    }
    const lowerValue = value2.toLowerCase();
    if (CSSStyleDeclarationValueParser.getGlobal(lowerValue) || BACKGROUND_ATTACHMENT.includes(lowerValue)) {
      return { "background-attachment": { value: lowerValue, important } };
    }
    return null;
  }
  static getBackgroundPosition(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "background-position": { value: variable, important } };
    }
    const globalValue = CSSStyleDeclarationValueParser.getGlobal(value2);
    if (globalValue) {
      return {
        ...this.getBackgroundPositionX(globalValue, important),
        ...this.getBackgroundPositionY(globalValue, important)
      };
    }
    const imageParts = value2.split(SPLIT_PARTS_REGEXP);
    let x2 = "";
    let y2 = "";
    for (const imagePart of imageParts) {
      const parts = imagePart.trim().split(/ +/);
      if (x2) {
        x2 += ",";
        y2 += ",";
      }
      switch (parts.length) {
        case 1:
          if (parts[0] === "top" || parts[0] === "bottom") {
            x2 += "center";
            y2 += parts[0];
          } else if (parts[0] === "left" || parts[0] === "right") {
            x2 += parts[0];
            y2 += "center";
          } else if (parts[0] === "center") {
            x2 += "center";
            y2 += "center";
          }
          break;
        case 2:
          x2 += parts[0] === "top" || parts[0] === "bottom" ? parts[1] : parts[0];
          y2 += parts[0] === "top" || parts[0] === "bottom" ? parts[0] : parts[1];
          break;
        case 3:
          if (parts[0] === "top" || parts[0] === "bottom" || parts[1] === "left" || parts[1] === "right" || parts[2] === "left" || parts[2] === "right") {
            if (CSSStyleDeclarationValueParser.getMeasurement(parts[1])) {
              x2 += parts[2];
              y2 += `${parts[0]} ${parts[1]}`;
            } else {
              x2 += `${parts[1]} ${parts[2]}`;
              y2 += parts[0];
            }
          } else {
            if (CSSStyleDeclarationValueParser.getMeasurement(parts[1])) {
              x2 += `${parts[0]} ${parts[1]}`;
              y2 += parts[2];
            } else {
              x2 += parts[0];
              y2 += `${parts[1]} ${parts[2]}`;
            }
          }
          break;
        case 4:
          x2 += parts[0] === "top" || parts[0] === "bottom" || parts[1] === "top" || parts[1] === "bottom" ? `${parts[2]} ${parts[3]}` : `${parts[0]} ${parts[1]}`;
          y2 += parts[0] === "top" || parts[0] === "bottom" || parts[1] === "top" || parts[1] === "bottom" ? `${parts[0]} ${parts[1]}` : `${parts[2]} ${parts[3]}`;
          break;
        default:
          return null;
      }
    }
    const xValue = this.getBackgroundPositionX(x2, important);
    const yValue = this.getBackgroundPositionY(y2, important);
    if (xValue && yValue) {
      return {
        ...xValue,
        ...yValue
      };
    }
    return null;
  }
  static getBackgroundPositionX(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "background-position-x": { value: variable, important } };
    }
    const lowerValue = value2.toLowerCase();
    if (CSSStyleDeclarationValueParser.getGlobal(lowerValue)) {
      return { "background-position-x": { value: lowerValue, important } };
    }
    const imageParts = lowerValue.split(SPLIT_PARTS_REGEXP);
    let parsedValue = "";
    for (const imagePart of imageParts) {
      const parts = imagePart.trim().split(/ +/);
      if (parsedValue) {
        parsedValue += ",";
      }
      for (const part of parts) {
        const measurement = CSSStyleDeclarationValueParser.getMeasurement(part);
        if (!measurement && part !== "left" && part !== "right" && part !== "center") {
          return null;
        }
        if (parsedValue) {
          parsedValue += " ";
        }
        parsedValue += measurement || part;
      }
    }
    return { "background-position-x": { value: parsedValue, important } };
  }
  static getBackgroundPositionY(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "background-position-y": { value: variable, important } };
    }
    const lowerValue = value2.toLowerCase();
    if (CSSStyleDeclarationValueParser.getGlobal(lowerValue)) {
      return { "background-position-y": { value: lowerValue, important } };
    }
    const imageParts = lowerValue.split(SPLIT_PARTS_REGEXP);
    let parsedValue = "";
    for (const imagePart of imageParts) {
      const parts = imagePart.trim().split(/ +/);
      if (parsedValue) {
        parsedValue += ",";
      }
      for (const part of parts) {
        const measurement = CSSStyleDeclarationValueParser.getMeasurement(part);
        if (!measurement && part !== "top" && part !== "bottom" && part !== "center") {
          return null;
        }
        if (parsedValue) {
          parsedValue += " ";
        }
        parsedValue += measurement || part;
      }
    }
    return { "background-position-y": { value: parsedValue, important } };
  }
  static getBackgroundColor(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "background-color": { value: variable, important } };
    }
    const color = CSSStyleDeclarationValueParser.getGlobal(value2) || CSSStyleDeclarationValueParser.getColor(value2);
    return color ? {
      ["background-color"]: { important, value: color }
    } : null;
  }
  static getBackgroundImage(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "background-image": { value: variable, important } };
    }
    const lowerValue = value2.toLowerCase();
    if (CSSStyleDeclarationValueParser.getGlobal(lowerValue) || lowerValue === "none") {
      return { "background-image": { value: lowerValue, important } };
    }
    const parts = value2.split(SPLIT_PARTS_REGEXP);
    const parsed = [];
    for (const part of parts) {
      const url3 = CSSStyleDeclarationValueParser.getURL(part.trim());
      if (!url3) {
        return null;
      }
      parsed.push(url3);
    }
    if (parsed.length) {
      return { "background-image": { value: parsed.join(", "), important } };
    }
    return null;
  }
  static getColor(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { color: { value: variable, important } };
    }
    const color = CSSStyleDeclarationValueParser.getGlobal(value2) || CSSStyleDeclarationValueParser.getColor(value2);
    return color ? { color: { important, value: color } } : null;
  }
  static getFloodColor(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "flood-color": { value: variable, important } };
    }
    const color = CSSStyleDeclarationValueParser.getGlobal(value2) || CSSStyleDeclarationValueParser.getColor(value2);
    return color ? { "flood-color": { important, value: color } } : null;
  }
  static getFont(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { font: { value: variable, important } };
    }
    const lowerValue = value2.toLowerCase();
    if (CSSStyleDeclarationValueParser.getGlobal(lowerValue)) {
      return {
        ...this.getFontStyle(lowerValue, important),
        ...this.getFontVariant(lowerValue, important),
        ...this.getFontWeight(lowerValue, important),
        ...this.getFontStretch(lowerValue, important),
        ...this.getFontSize(lowerValue, important),
        ...this.getLineHeight(lowerValue, important),
        ...this.getFontFamily(lowerValue, important)
      };
    }
    if (SYSTEM_FONT.includes(lowerValue)) {
      return { font: { value: lowerValue, important } };
    }
    const properties = {
      ...this.getFontStyle("normal", important),
      ...this.getFontVariant("normal", important),
      ...this.getFontWeight("normal", important),
      ...this.getFontStretch("normal", important),
      ...this.getLineHeight("normal", important)
    };
    const parts = value2.replace(/ *\/ */g, "/").split(/ +/);
    for (let i = 0, max3 = parts.length;i < max3; i++) {
      const part = parts[i];
      if (part.includes("/")) {
        const [size, height2] = part.split("/");
        const fontSize = this.getFontSize(size, important);
        const lineHeight = this.getLineHeight(height2, important);
        if (!fontSize || !lineHeight) {
          return null;
        }
        Object.assign(properties, fontSize, lineHeight);
      } else {
        const fontStyle = this.getFontStyle(part, important);
        const fontVariant = this.getFontVariant(part, important);
        const fontWeight = this.getFontWeight(part, important);
        const fontSize = this.getFontSize(part, important);
        const fontStretch = this.getFontStretch(part, important);
        if (fontStyle) {
          Object.assign(properties, fontStyle);
        } else if (fontVariant) {
          Object.assign(properties, fontVariant);
        } else if (fontWeight) {
          Object.assign(properties, fontWeight);
        } else if (fontSize) {
          Object.assign(properties, fontSize);
        } else if (fontStretch) {
          Object.assign(properties, fontStretch);
        } else {
          const fontFamilyValue = parts.slice(i).join(" ");
          const fontFamily = this.getFontFamily(fontFamilyValue, important);
          if (!fontFamily) {
            return null;
          }
          Object.assign(properties, fontFamily);
          break;
        }
      }
    }
    return properties;
  }
  static getFontStyle(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "font-style": { value: variable, important } };
    }
    const lowerValue = value2.toLowerCase();
    if (CSSStyleDeclarationValueParser.getGlobal(lowerValue) || FONT_STYLE.includes(lowerValue)) {
      return { "font-style": { value: lowerValue, important } };
    }
    const parts = value2.split(/ +/);
    if (parts.length === 2 && parts[0] === "oblique") {
      const degree = CSSStyleDeclarationValueParser.getDegree(parts[1]);
      return degree ? { "font-style": { value: lowerValue, important } } : null;
    }
    return null;
  }
  static getFontVariant(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "font-variant": { value: variable, important } };
    }
    const lowerValue = value2.toLowerCase();
    return CSSStyleDeclarationValueParser.getGlobal(lowerValue) || lowerValue === "normal" || lowerValue === "small-caps" ? { "font-variant": { value: lowerValue, important } } : null;
  }
  static getFontStretch(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "font-stretch": { value: variable, important } };
    }
    const lowerValue = value2.toLowerCase();
    if (CSSStyleDeclarationValueParser.getGlobal(lowerValue) || FONT_STRETCH.includes(lowerValue)) {
      return { "font-stretch": { value: lowerValue, important } };
    }
    const percentage = CSSStyleDeclarationValueParser.getPercentage(value2);
    return percentage ? { "font-stretch": { value: percentage, important } } : null;
  }
  static getFontWeight(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "font-weight": { value: variable, important } };
    }
    const lowerValue = value2.toLowerCase();
    if (CSSStyleDeclarationValueParser.getGlobal(lowerValue) || FONT_WEIGHT.includes(lowerValue)) {
      return { "font-weight": { value: lowerValue, important } };
    }
    const integer = CSSStyleDeclarationValueParser.getInteger(value2);
    return integer ? { "font-weight": { value: integer, important } } : null;
  }
  static getFontSize(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "font-size": { value: variable, important } };
    }
    const lowerValue = value2.toLowerCase();
    if (CSSStyleDeclarationValueParser.getGlobal(lowerValue) || FONT_SIZE.includes(lowerValue)) {
      return { "font-size": { value: lowerValue, important } };
    }
    const measurement = CSSStyleDeclarationValueParser.getMeasurement(value2);
    return measurement ? { "font-size": { value: measurement, important } } : null;
  }
  static getLineHeight(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "line-height": { value: variable, important } };
    }
    const lowerValue = value2.toLowerCase();
    if (CSSStyleDeclarationValueParser.getGlobal(lowerValue) || lowerValue === "normal") {
      return { "line-height": { value: lowerValue, important } };
    }
    const lineHeight = CSSStyleDeclarationValueParser.getFloat(value2) || CSSStyleDeclarationValueParser.getMeasurement(value2);
    return lineHeight ? { "line-height": { value: lineHeight, important } } : null;
  }
  static getFontFamily(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "font-family": { value: variable, important } };
    }
    const globalValue = CSSStyleDeclarationValueParser.getGlobal(value2);
    if (globalValue) {
      return { "font-family": { value: globalValue, important } };
    }
    const parts = value2.split(",");
    let parsedValue = "";
    let endWithApostroph = false;
    for (let i = 0, max3 = parts.length;i < max3; i++) {
      let trimmedPart = parts[i].trim().replace(/'/g, '"');
      if (!trimmedPart) {
        return null;
      }
      if (trimmedPart.includes(" ")) {
        const apostrophCount = (trimmedPart.match(/"/g) || []).length;
        if ((trimmedPart[0] !== '"' || i !== 0) && apostrophCount !== 2 && apostrophCount !== 0) {
          return null;
        }
        if (trimmedPart[0] === '"' && trimmedPart[trimmedPart.length - 1] !== '"') {
          endWithApostroph = true;
        } else if (trimmedPart[0] !== '"' && trimmedPart[trimmedPart.length - 1] !== '"') {
          trimmedPart = `"${trimmedPart}"`;
        }
      }
      if (i > 0) {
        parsedValue += ", ";
      }
      parsedValue += trimmedPart;
    }
    if (endWithApostroph) {
      parsedValue += '"';
    }
    if (!parsedValue) {
      return null;
    }
    return {
      "font-family": {
        important,
        value: parsedValue
      }
    };
  }
  static getTextTransform(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { "text-transform": { value: variable, important } };
    }
    const lowerValue = value2.toLowerCase();
    const parsedValue = CSSStyleDeclarationValueParser.getGlobal(lowerValue) || TEXT_TRANSFORM.includes(lowerValue) && lowerValue;
    if (parsedValue) {
      return {
        "text-transform": { value: parsedValue, important }
      };
    }
    return null;
  }
  static getVisibility(value2, important) {
    const variable = CSSStyleDeclarationValueParser.getVariable(value2);
    if (variable) {
      return { visibility: { value: variable, important } };
    }
    const lowerValue = value2.toLowerCase();
    const parsedValue = CSSStyleDeclarationValueParser.getGlobal(lowerValue) || VISIBILITY.includes(lowerValue) && lowerValue;
    if (parsedValue) {
      return {
        visibility: { value: parsedValue, important }
      };
    }
    return null;
  }
}

// node_modules/happy-dom-without-node/lib/css/declaration/property-manager/CSSStyleDeclarationPropertyGetParser.js
class CSSStyleDeclarationPropertyGetParser {
  static getMargin(properties) {
    return this.getPaddingLikeProperty(["margin-top", "margin-right", "margin-bottom", "margin-left"], properties);
  }
  static getPadding(properties) {
    return this.getPaddingLikeProperty(["padding-top", "padding-right", "padding-bottom", "padding-left"], properties);
  }
  static getOutline(properties) {
    if (!properties["outline-color"]?.value || !properties["outline-style"]?.value || !properties["outline-width"]?.value) {
      return null;
    }
    const important = properties["outline-color"].important && properties["outline-style"].important && properties["outline-width"].important;
    if (CSSStyleDeclarationValueParser.getGlobalExceptInitial(properties["outline-width"].value) && properties["outline-width"].value === properties["outline-style"].value && properties["outline-width"].value === properties["outline-color"].value) {
      return {
        important,
        value: properties["outline-width"].value
      };
    }
    const values = [];
    if (!CSSStyleDeclarationValueParser.getInitial(properties["outline-color"]?.value)) {
      values.push(properties["outline-color"].value);
    }
    if (!CSSStyleDeclarationValueParser.getInitial(properties["outline-style"]?.value)) {
      values.push(properties["outline-style"].value);
    }
    if (!CSSStyleDeclarationValueParser.getInitial(properties["outline-width"].value)) {
      values.push(properties["outline-width"].value);
    }
    return {
      important,
      value: values.join(" ")
    };
  }
  static getBorder(properties) {
    if (!properties["border-top-width"]?.value || properties["border-top-width"]?.value !== properties["border-right-width"]?.value || properties["border-top-width"]?.value !== properties["border-bottom-width"]?.value || properties["border-top-width"]?.value !== properties["border-left-width"]?.value || !properties["border-top-style"]?.value || properties["border-top-style"]?.value !== properties["border-right-style"]?.value || properties["border-top-style"]?.value !== properties["border-bottom-style"]?.value || properties["border-top-style"]?.value !== properties["border-left-style"]?.value || !properties["border-top-color"]?.value || properties["border-top-color"]?.value !== properties["border-right-color"]?.value || properties["border-top-color"]?.value !== properties["border-bottom-color"]?.value || properties["border-top-color"]?.value !== properties["border-left-color"]?.value || !properties["border-image-source"]?.value || !properties["border-image-slice"]?.value || !properties["border-image-width"]?.value || !properties["border-image-outset"]?.value || !properties["border-image-repeat"]?.value) {
      return null;
    }
    const important = properties["border-top-width"].important && properties["border-right-width"].important && properties["border-bottom-width"].important && properties["border-left-width"].important && properties["border-top-style"].important && properties["border-right-style"].important && properties["border-bottom-style"].important && properties["border-left-style"].important && properties["border-top-color"].important && properties["border-right-color"].important && properties["border-bottom-color"].important && properties["border-left-color"].important && properties["border-image-source"].important && properties["border-image-slice"].important && properties["border-image-width"].important && properties["border-image-outset"].important && properties["border-image-repeat"].important;
    if (CSSStyleDeclarationValueParser.getGlobalExceptInitial(properties["border-top-width"].value) || CSSStyleDeclarationValueParser.getGlobalExceptInitial(properties["border-top-style"].value) || CSSStyleDeclarationValueParser.getGlobalExceptInitial(properties["border-top-color"].value) || CSSStyleDeclarationValueParser.getGlobalExceptInitial(properties["border-image-source"].value) || CSSStyleDeclarationValueParser.getGlobalExceptInitial(properties["border-image-slice"].value) || CSSStyleDeclarationValueParser.getGlobalExceptInitial(properties["border-image-width"].value) || CSSStyleDeclarationValueParser.getGlobalExceptInitial(properties["border-image-outset"].value) || CSSStyleDeclarationValueParser.getGlobalExceptInitial(properties["border-image-repeat"].value)) {
      if (properties["border-top-width"].value !== properties["border-top-style"].value || properties["border-top-width"].value !== properties["border-top-color"].value || properties["border-top-width"].value !== properties["border-image-source"].value || properties["border-top-width"].value !== properties["border-image-slice"].value || properties["border-top-width"].value !== properties["border-image-width"].value || properties["border-top-width"].value !== properties["border-image-outset"].value || properties["border-top-width"].value !== properties["border-image-repeat"].value) {
        return null;
      }
      return {
        important,
        value: properties["border-top-width"].value
      };
    }
    const values = [];
    if (!CSSStyleDeclarationValueParser.getInitial(properties["border-top-width"].value)) {
      values.push(properties["border-top-width"].value);
    }
    if (!CSSStyleDeclarationValueParser.getInitial(properties["border-top-style"].value)) {
      values.push(properties["border-top-style"].value);
    }
    if (!CSSStyleDeclarationValueParser.getInitial(properties["border-top-color"].value)) {
      values.push(properties["border-top-color"].value);
    }
    return {
      important,
      value: values.join(" ")
    };
  }
  static getBorderTop(properties) {
    return this.getBorderTopRightBottomLeft("top", properties);
  }
  static getBorderRight(properties) {
    return this.getBorderTopRightBottomLeft("right", properties);
  }
  static getBorderBottom(properties) {
    return this.getBorderTopRightBottomLeft("bottom", properties);
  }
  static getBorderLeft(properties) {
    return this.getBorderTopRightBottomLeft("left", properties);
  }
  static getBorderColor(properties) {
    return this.getPaddingLikeProperty(["border-top-color", "border-right-color", "border-bottom-color", "border-left-color"], properties);
  }
  static getBorderWidth(properties) {
    return this.getPaddingLikeProperty(["border-top-width", "border-right-width", "border-bottom-width", "border-left-width"], properties);
  }
  static getBorderStyle(properties) {
    return this.getPaddingLikeProperty(["border-top-style", "border-right-style", "border-bottom-style", "border-left-style"], properties);
  }
  static getBorderRadius(properties) {
    return this.getPaddingLikeProperty([
      "border-top-left-radius",
      "border-top-right-radius",
      "border-bottom-right-radius",
      "border-bottom-left-radius"
    ], properties);
  }
  static getBorderImage(properties) {
    if (!properties["border-image-source"]?.value || !properties["border-image-slice"]?.value || !properties["border-image-width"]?.value || !properties["border-image-outset"]?.value || !properties["border-image-repeat"]?.value) {
      return null;
    }
    const important = properties["border-image-source"].important && properties["border-image-slice"].important && properties["border-image-width"].important && properties["border-image-outset"].important && properties["border-image-repeat"].important;
    if (CSSStyleDeclarationValueParser.getGlobal(properties["border-image-source"].value) || CSSStyleDeclarationValueParser.getGlobal(properties["border-image-slice"].value) || CSSStyleDeclarationValueParser.getGlobal(properties["border-image-width"].value) || CSSStyleDeclarationValueParser.getGlobal(properties["border-image-outset"].value) || CSSStyleDeclarationValueParser.getGlobal(properties["border-image-repeat"].value)) {
      if (properties["border-image-source"].value !== properties["border-image-slice"].value || properties["border-image-source"].value !== properties["border-image-width"].value || properties["border-image-source"].value !== properties["border-image-outset"].value || properties["border-image-source"].value !== properties["border-image-repeat"].value) {
        return null;
      }
      return {
        important,
        value: properties["border-image-source"].value
      };
    }
    return {
      important,
      value: `${properties["border-image-source"].value} ${properties["border-image-slice"].value} / ${properties["border-image-width"].value} / ${properties["border-image-outset"].value} ${properties["border-image-repeat"].value}`
    };
  }
  static getBackground(properties) {
    if (!properties["background-image"]?.value || !properties["background-repeat"]?.value || !properties["background-attachment"]?.value || !properties["background-position-x"]?.value || !properties["background-position-y"]?.value || !properties["background-color"]?.value || !properties["background-size"]?.value || !properties["background-origin"]?.value || !properties["background-clip"]?.value) {
      return null;
    }
    const important = properties["background-image"].important && properties["background-repeat"].important && properties["background-attachment"].important && properties["background-position-x"].important && properties["background-position-y"].important && properties["background-color"].important && properties["background-size"].important && properties["background-origin"].important && properties["background-clip"].important;
    if (CSSStyleDeclarationValueParser.getGlobalExceptInitial(properties["background-image"].value) || CSSStyleDeclarationValueParser.getGlobalExceptInitial(properties["background-repeat"].value) || CSSStyleDeclarationValueParser.getGlobalExceptInitial(properties["background-attachment"].value) || CSSStyleDeclarationValueParser.getGlobalExceptInitial(properties["background-position-x"].value) || CSSStyleDeclarationValueParser.getGlobalExceptInitial(properties["background-position-y"].value) || CSSStyleDeclarationValueParser.getGlobalExceptInitial(properties["background-color"].value) || CSSStyleDeclarationValueParser.getGlobalExceptInitial(properties["background-size"].value) || CSSStyleDeclarationValueParser.getGlobalExceptInitial(properties["background-origin"].value) || CSSStyleDeclarationValueParser.getGlobalExceptInitial(properties["background-clip"].value)) {
      if (properties["background-image"].value !== properties["background-repeat"].value || properties["background-image"].value !== properties["background-attachment"].value || properties["background-image"].value !== properties["background-position-x"].value || properties["background-image"].value !== properties["background-position-y"].value || properties["background-image"].value !== properties["background-color"].value || properties["background-image"].value !== properties["background-size"].value || properties["background-image"].value !== properties["background-origin"].value || properties["background-image"].value !== properties["background-clip"].value) {
        return null;
      }
      return {
        important,
        value: properties["background-image"].value
      };
    }
    const values = [];
    if (!CSSStyleDeclarationValueParser.getInitial(properties["background-image"].value)) {
      values.push(properties["background-image"].value);
    }
    if (!CSSStyleDeclarationValueParser.getInitial(properties["background-position-x"].value) && !CSSStyleDeclarationValueParser.getInitial(properties["background-position-y"].value) && !CSSStyleDeclarationValueParser.getInitial(properties["background-size"].value)) {
      values.push(`${properties["background-position-x"].value} ${properties["background-position-y"].value} / ${properties["background-size"].value}`);
    } else if (!CSSStyleDeclarationValueParser.getInitial(properties["background-position-x"].value) && !CSSStyleDeclarationValueParser.getInitial(properties["background-position-y"].value)) {
      values.push(`${properties["background-position-x"].value} ${properties["background-position-y"].value}`);
    }
    if (!CSSStyleDeclarationValueParser.getInitial(properties["background-repeat"].value)) {
      values.push(properties["background-repeat"].value);
    }
    if (!CSSStyleDeclarationValueParser.getInitial(properties["background-attachment"].value)) {
      values.push(properties["background-attachment"].value);
    }
    if (!CSSStyleDeclarationValueParser.getInitial(properties["background-origin"].value)) {
      values.push(properties["background-origin"].value);
    }
    if (!CSSStyleDeclarationValueParser.getInitial(properties["background-clip"].value)) {
      values.push(properties["background-clip"].value);
    }
    if (!CSSStyleDeclarationValueParser.getInitial(properties["background-color"].value)) {
      values.push(properties["background-color"].value);
    }
    return {
      important,
      value: values.join(" ")
    };
  }
  static getBackgroundPosition(properties) {
    if (!properties["background-position-x"]?.value || !properties["background-position-y"]?.value) {
      return null;
    }
    const important = properties["background-position-x"].important && properties["background-position-y"].important;
    if (CSSStyleDeclarationValueParser.getGlobal(properties["background-position-x"].value) || CSSStyleDeclarationValueParser.getGlobal(properties["background-position-y"].value)) {
      if (properties["background-position-x"].value !== properties["background-position-y"].value) {
        return null;
      }
      return {
        important,
        value: properties["background-position-x"].value
      };
    }
    const positionX = properties["background-position-x"].value.replace(/ *, */g, ",").split(",");
    const positionY = properties["background-position-y"].value.replace(/ *, */g, ",").split(",");
    const parts = [];
    for (let i = 0;i < positionX.length; i++) {
      parts.push(`${positionX[i]} ${positionY[i]}`);
    }
    return {
      important,
      value: parts.join(", ")
    };
  }
  static getFlex(properties) {
    if (!properties["flex-grow"]?.value || !properties["flex-shrink"]?.value || !properties["flex-basis"]?.value) {
      return null;
    }
    const important = properties["flex-grow"].important && properties["flex-shrink"].important && properties["flex-basis"].important;
    if (CSSStyleDeclarationValueParser.getGlobal(properties["flex-grow"].value) || CSSStyleDeclarationValueParser.getGlobal(properties["flex-shrink"].value) || CSSStyleDeclarationValueParser.getGlobal(properties["flex-basis"].value)) {
      if (properties["flex-grow"].value !== properties["flex-shrink"].value || properties["flex-grow"].value !== properties["flex-basis"].value) {
        return null;
      }
      return {
        important,
        value: properties["flex-grow"].value
      };
    }
    return {
      important,
      value: `${properties["flex-grow"].value} ${properties["flex-shrink"].value} ${properties["flex-basis"].value}`
    };
  }
  static getFont(properties) {
    if (!properties["font-size"]?.value || !properties["font-family"]?.value || !properties["font-weight"]?.value || !properties["font-style"]?.value || !properties["font-variant"]?.value || !properties["font-stretch"]?.value || !properties["line-height"]?.value) {
      return null;
    }
    const important = properties["font-size"].important && properties["font-family"].important && properties["font-weight"].important && properties["font-style"].important && properties["font-variant"].important && properties["font-stretch"].important && properties["line-height"].important;
    if (CSSStyleDeclarationValueParser.getGlobal(properties["font-size"].value) || CSSStyleDeclarationValueParser.getGlobal(properties["font-family"].value) || CSSStyleDeclarationValueParser.getGlobal(properties["font-weight"].value) || CSSStyleDeclarationValueParser.getGlobal(properties["font-style"].value) || CSSStyleDeclarationValueParser.getGlobal(properties["font-variant"].value) || CSSStyleDeclarationValueParser.getGlobal(properties["font-stretch"].value) || CSSStyleDeclarationValueParser.getGlobal(properties["line-height"].value)) {
      if (properties["font-size"].value !== properties["font-family"].value || properties["font-size"].value !== properties["font-weight"].value || properties["font-size"].value !== properties["font-style"].value || properties["font-size"].value !== properties["font-variant"].value || properties["font-size"].value !== properties["font-stretch"].value || properties["font-size"].value !== properties["line-height"].value) {
        return null;
      }
      return {
        important,
        value: properties["font-size"].value
      };
    }
    const values = [];
    if (properties["font-style"].value !== "normal") {
      values.push(properties["font-style"].value);
    }
    if (properties["font-variant"].value !== "normal") {
      values.push(properties["font-variant"].value);
    }
    if (properties["font-weight"].value !== "normal") {
      values.push(properties["font-weight"].value);
    }
    if (properties["font-stretch"].value !== "normal") {
      values.push(properties["font-stretch"].value);
    }
    if (properties["line-height"].value !== "normal") {
      values.push(`${properties["font-size"].value} / ${properties["line-height"].value}`);
    } else {
      values.push(properties["font-size"].value);
    }
    values.push(properties["font-family"].value);
    return {
      important,
      value: values.join(" ")
    };
  }
  static getBorderTopRightBottomLeft(position, properties) {
    if (!properties[`border-${position}-width`]?.value || !properties[`border-${position}-style`]?.value || !properties[`border-${position}-color`]?.value) {
      return null;
    }
    const important = properties[`border-${position}-width`].important && properties[`border-${position}-style`].important && properties[`border-${position}-color`].important;
    if (CSSStyleDeclarationValueParser.getGlobalExceptInitial(properties[`border-${position}-width`].value) && properties[`border-${position}-width`].value === properties[`border-${position}-style`].value && properties[`border-${position}-width`].value === properties[`border-${position}-color`].value) {
      return {
        important,
        value: properties[`border-${position}-width`].value
      };
    }
    const values = [];
    if (!CSSStyleDeclarationValueParser.getInitial(properties[`border-${position}-width`].value)) {
      values.push(properties[`border-${position}-width`].value);
    }
    if (!CSSStyleDeclarationValueParser.getInitial(properties[`border-${position}-style`]?.value)) {
      values.push(properties[`border-${position}-style`].value);
    }
    if (!CSSStyleDeclarationValueParser.getInitial(properties[`border-${position}-color`]?.value)) {
      values.push(properties[`border-${position}-color`].value);
    }
    return {
      important,
      value: values.join(" ")
    };
  }
  static getPaddingLikeProperty(propertyNames, properties) {
    if (!properties[propertyNames[0]]?.value || !properties[propertyNames[1]]?.value || !properties[propertyNames[2]]?.value || !properties[propertyNames[3]]?.value) {
      return null;
    }
    const important = properties[propertyNames[0]].important && properties[propertyNames[1]].important && properties[propertyNames[2]].important && properties[propertyNames[3]].important;
    if (CSSStyleDeclarationValueParser.getGlobal(properties[propertyNames[0]].value) || CSSStyleDeclarationValueParser.getGlobal(properties[propertyNames[1]].value) || CSSStyleDeclarationValueParser.getGlobal(properties[propertyNames[2]].value) || CSSStyleDeclarationValueParser.getGlobal(properties[propertyNames[3]].value)) {
      if (properties[propertyNames[0]].value !== properties[propertyNames[1]].value || properties[propertyNames[0]].value !== properties[propertyNames[2]].value || properties[propertyNames[0]].value !== properties[propertyNames[3]].value) {
        return null;
      }
      return {
        important,
        value: properties[propertyNames[0]].value
      };
    }
    const values = [properties[propertyNames[0]].value];
    if (properties[propertyNames[1]].value !== properties[propertyNames[0]].value || properties[propertyNames[2]].value !== properties[propertyNames[0]].value || properties[propertyNames[3]].value !== properties[propertyNames[1]].value) {
      values.push(properties[propertyNames[1]].value);
    }
    if (properties[propertyNames[2]].value !== properties[propertyNames[0]].value || properties[propertyNames[3]].value !== properties[propertyNames[1]].value) {
      values.push(properties[propertyNames[2]].value);
    }
    if (properties[propertyNames[3]].value !== properties[propertyNames[1]].value) {
      values.push(properties[propertyNames[3]].value);
    }
    return {
      important,
      value: values.join(" ")
    };
  }
}

// node_modules/happy-dom-without-node/lib/css/declaration/css-parser/CSSStyleDeclarationCSSParser.js
var SPLIT_RULES_REGEXP = /\s*([^:;]+?)\s*:\s*((?:[^(;]*?(?:\([^)]*\))?)*?)\s*(!important)?\s*(?:$|;)/g;

class CSSStyleDeclarationCSSParser {
  static parse(cssText2) {
    const properties = {};
    const rules = [];
    const regexp = new RegExp(SPLIT_RULES_REGEXP);
    let match;
    while (match = regexp.exec(cssText2)) {
      const name2 = (match[1] ?? "").trim();
      const value2 = (match[2] ?? "").trim();
      const important = match[3] ? true : false;
      if (name2 && value2) {
        if (name2.startsWith("--")) {
          properties[name2] = value2;
        }
        rules.push({ name: name2, value: value2, important });
      }
    }
    return { rules, properties };
  }
}

// node_modules/happy-dom-without-node/lib/css/declaration/property-manager/CSSStyleDeclarationPropertyManager.js
var TO_STRING_SHORTHAND_PROPERTIES = [
  ["margin"],
  ["padding"],
  ["border", ["border-width", "border-style", "border-color", "border-image"]],
  ["border-radius"],
  ["background", "background-position"],
  ["font"]
];

class CSSStyleDeclarationPropertyManager {
  constructor(options3) {
    this.properties = {};
    this.definedPropertyNames = {};
    if (options3?.cssText) {
      const { rules } = CSSStyleDeclarationCSSParser.parse(options3.cssText);
      for (const rule of rules) {
        if (rule.important || !this.get(rule.name)?.important) {
          this.set(rule.name, rule.value, rule.important);
        }
      }
    }
  }
  get(name2) {
    if (this.properties[name2]) {
      return this.properties[name2];
    }
    switch (name2) {
      case "margin":
        return CSSStyleDeclarationPropertyGetParser.getMargin(this.properties);
      case "padding":
        return CSSStyleDeclarationPropertyGetParser.getPadding(this.properties);
      case "border":
        return CSSStyleDeclarationPropertyGetParser.getBorder(this.properties);
      case "border-top":
        return CSSStyleDeclarationPropertyGetParser.getBorderTop(this.properties);
      case "border-right":
        return CSSStyleDeclarationPropertyGetParser.getBorderRight(this.properties);
      case "border-bottom":
        return CSSStyleDeclarationPropertyGetParser.getBorderBottom(this.properties);
      case "border-left":
        return CSSStyleDeclarationPropertyGetParser.getBorderLeft(this.properties);
      case "border-color":
        return CSSStyleDeclarationPropertyGetParser.getBorderColor(this.properties);
      case "border-style":
        return CSSStyleDeclarationPropertyGetParser.getBorderStyle(this.properties);
      case "border-width":
        return CSSStyleDeclarationPropertyGetParser.getBorderWidth(this.properties);
      case "border-radius":
        return CSSStyleDeclarationPropertyGetParser.getBorderRadius(this.properties);
      case "border-image":
        return CSSStyleDeclarationPropertyGetParser.getBorderImage(this.properties);
      case "outline":
        return CSSStyleDeclarationPropertyGetParser.getOutline(this.properties);
      case "background":
        return CSSStyleDeclarationPropertyGetParser.getBackground(this.properties);
      case "background-position":
        return CSSStyleDeclarationPropertyGetParser.getBackgroundPosition(this.properties);
      case "flex":
        return CSSStyleDeclarationPropertyGetParser.getFlex(this.properties);
      case "font":
        return CSSStyleDeclarationPropertyGetParser.getFont(this.properties);
    }
    return this.properties[name2] || null;
  }
  remove(name2) {
    delete this.properties[name2];
    delete this.definedPropertyNames[name2];
    switch (name2) {
      case "border":
        delete this.properties["border-top-width"];
        delete this.properties["border-right-width"];
        delete this.properties["border-bottom-width"];
        delete this.properties["border-left-width"];
        delete this.properties["border-top-style"];
        delete this.properties["border-right-style"];
        delete this.properties["border-bottom-style"];
        delete this.properties["border-left-style"];
        delete this.properties["border-top-color"];
        delete this.properties["border-right-color"];
        delete this.properties["border-bottom-color"];
        delete this.properties["border-left-color"];
        delete this.properties["border-image-source"];
        delete this.properties["border-image-slice"];
        delete this.properties["border-image-width"];
        delete this.properties["border-image-outset"];
        delete this.properties["border-image-repeat"];
        break;
      case "border-top":
        delete this.properties["border-top-width"];
        delete this.properties["border-top-style"];
        delete this.properties["border-top-color"];
        delete this.properties["border-image-source"];
        delete this.properties["border-image-slice"];
        delete this.properties["border-image-width"];
        delete this.properties["border-image-outset"];
        delete this.properties["border-image-repeat"];
        break;
      case "border-right":
        delete this.properties["border-right-width"];
        delete this.properties["border-right-style"];
        delete this.properties["border-right-color"];
        delete this.properties["border-image-source"];
        delete this.properties["border-image-slice"];
        delete this.properties["border-image-width"];
        delete this.properties["border-image-outset"];
        delete this.properties["border-image-repeat"];
        break;
      case "border-bottom":
        delete this.properties["border-bottom-width"];
        delete this.properties["border-bottom-style"];
        delete this.properties["border-bottom-color"];
        delete this.properties["border-image-source"];
        delete this.properties["border-image-slice"];
        delete this.properties["border-image-width"];
        delete this.properties["border-image-outset"];
        delete this.properties["border-image-repeat"];
        break;
      case "border-left":
        delete this.properties["border-left-width"];
        delete this.properties["border-left-style"];
        delete this.properties["border-left-color"];
        delete this.properties["border-image-source"];
        delete this.properties["border-image-slice"];
        delete this.properties["border-image-width"];
        delete this.properties["border-image-outset"];
        delete this.properties["border-image-repeat"];
        break;
      case "border-width":
        delete this.properties["border-top-width"];
        delete this.properties["border-right-width"];
        delete this.properties["border-bottom-width"];
        delete this.properties["border-left-width"];
        break;
      case "border-style":
        delete this.properties["border-top-style"];
        delete this.properties["border-right-style"];
        delete this.properties["border-bottom-style"];
        delete this.properties["border-left-style"];
        break;
      case "border-color":
        delete this.properties["border-top-color"];
        delete this.properties["border-right-color"];
        delete this.properties["border-bottom-color"];
        delete this.properties["border-left-color"];
        break;
      case "border-image":
        delete this.properties["border-image-source"];
        delete this.properties["border-image-slice"];
        delete this.properties["border-image-width"];
        delete this.properties["border-image-outset"];
        delete this.properties["border-image-repeat"];
        break;
      case "border-radius":
        delete this.properties["border-top-left-radius"];
        delete this.properties["border-top-right-radius"];
        delete this.properties["border-bottom-right-radius"];
        delete this.properties["border-bottom-left-radius"];
        break;
      case "outline":
        delete this.properties["outline-color"];
        delete this.properties["outline-style"];
        delete this.properties["outline-width"];
        break;
      case "background":
        delete this.properties["background-color"];
        delete this.properties["background-image"];
        delete this.properties["background-repeat"];
        delete this.properties["background-attachment"];
        delete this.properties["background-position-x"];
        delete this.properties["background-position-y"];
        delete this.properties["background-size"];
        delete this.properties["background-origin"];
        delete this.properties["background-clip"];
        break;
      case "background-position":
        delete this.properties["background-position-x"];
        delete this.properties["background-position-y"];
        break;
      case "flex":
        delete this.properties["flex-grow"];
        delete this.properties["flex-shrink"];
        delete this.properties["flex-basis"];
        break;
      case "font":
        delete this.properties["font-style"];
        delete this.properties["font-variant"];
        delete this.properties["font-weight"];
        delete this.properties["font-stretch"];
        delete this.properties["font-size"];
        delete this.properties["line-height"];
        delete this.properties["font-family"];
        break;
      case "padding":
        delete this.properties["padding-top"];
        delete this.properties["padding-right"];
        delete this.properties["padding-bottom"];
        delete this.properties["padding-left"];
        break;
      case "margin":
        delete this.properties["margin-top"];
        delete this.properties["margin-right"];
        delete this.properties["margin-bottom"];
        delete this.properties["margin-left"];
        break;
    }
  }
  set(name2, value2, important) {
    if (value2 === null) {
      this.remove(name2);
      return;
    }
    let properties = null;
    switch (name2) {
      case "border":
        properties = CSSStyleDeclarationPropertySetParser.getBorder(value2, important);
        break;
      case "border-top":
        properties = CSSStyleDeclarationPropertySetParser.getBorderTop(value2, important);
        break;
      case "border-right":
        properties = CSSStyleDeclarationPropertySetParser.getBorderRight(value2, important);
        break;
      case "border-bottom":
        properties = CSSStyleDeclarationPropertySetParser.getBorderBottom(value2, important);
        break;
      case "border-left":
        properties = CSSStyleDeclarationPropertySetParser.getBorderLeft(value2, important);
        break;
      case "border-width":
        properties = CSSStyleDeclarationPropertySetParser.getBorderWidth(value2, important);
        break;
      case "border-style":
        properties = CSSStyleDeclarationPropertySetParser.getBorderStyle(value2, important);
        break;
      case "border-color":
        properties = CSSStyleDeclarationPropertySetParser.getBorderColor(value2, important);
        break;
      case "border-image":
        properties = CSSStyleDeclarationPropertySetParser.getBorderImage(value2, important);
        break;
      case "border-image-source":
        properties = CSSStyleDeclarationPropertySetParser.getBorderImageSource(value2, important);
        break;
      case "border-image-slice":
        properties = CSSStyleDeclarationPropertySetParser.getBorderImageSlice(value2, important);
        break;
      case "border-image-width":
        properties = CSSStyleDeclarationPropertySetParser.getBorderImageWidth(value2, important);
        break;
      case "border-image-outset":
        properties = CSSStyleDeclarationPropertySetParser.getBorderImageOutset(value2, important);
        break;
      case "border-image-repeat":
        properties = CSSStyleDeclarationPropertySetParser.getBorderImageRepeat(value2, important);
        break;
      case "border-top-width":
        properties = CSSStyleDeclarationPropertySetParser.getBorderTopWidth(value2, important);
        break;
      case "border-right-width":
        properties = CSSStyleDeclarationPropertySetParser.getBorderRightWidth(value2, important);
        break;
      case "border-bottom-width":
        properties = CSSStyleDeclarationPropertySetParser.getBorderBottomWidth(value2, important);
        break;
      case "border-left-width":
        properties = CSSStyleDeclarationPropertySetParser.getBorderLeftWidth(value2, important);
        break;
      case "border-top-color":
        properties = CSSStyleDeclarationPropertySetParser.getBorderTopColor(value2, important);
        break;
      case "border-right-color":
        properties = CSSStyleDeclarationPropertySetParser.getBorderRightColor(value2, important);
        break;
      case "border-bottom-color":
        properties = CSSStyleDeclarationPropertySetParser.getBorderBottomColor(value2, important);
        break;
      case "border-left-color":
        properties = CSSStyleDeclarationPropertySetParser.getBorderLeftColor(value2, important);
        break;
      case "border-top-style":
        properties = CSSStyleDeclarationPropertySetParser.getBorderTopStyle(value2, important);
        break;
      case "border-right-style":
        properties = CSSStyleDeclarationPropertySetParser.getBorderRightStyle(value2, important);
        break;
      case "border-bottom-style":
        properties = CSSStyleDeclarationPropertySetParser.getBorderBottomStyle(value2, important);
        break;
      case "border-left-style":
        properties = CSSStyleDeclarationPropertySetParser.getBorderLeftStyle(value2, important);
        break;
      case "border-radius":
        properties = CSSStyleDeclarationPropertySetParser.getBorderRadius(value2, important);
        break;
      case "border-top-left-radius":
        properties = CSSStyleDeclarationPropertySetParser.getBorderTopLeftRadius(value2, important);
        break;
      case "border-top-right-radius":
        properties = CSSStyleDeclarationPropertySetParser.getBorderTopRightRadius(value2, important);
        break;
      case "border-bottom-right-radius":
        properties = CSSStyleDeclarationPropertySetParser.getBorderBottomRightRadius(value2, important);
        break;
      case "border-bottom-left-radius":
        properties = CSSStyleDeclarationPropertySetParser.getBorderBottomLeftRadius(value2, important);
        break;
      case "border-collapse":
        properties = CSSStyleDeclarationPropertySetParser.getBorderCollapse(value2, important);
        break;
      case "outline":
        properties = CSSStyleDeclarationPropertySetParser.getOutline(value2, important);
        break;
      case "outline-width":
        properties = CSSStyleDeclarationPropertySetParser.getOutlineWidth(value2, important);
        break;
      case "outline-style":
        properties = CSSStyleDeclarationPropertySetParser.getOutlineStyle(value2, important);
        break;
      case "outline-color":
        properties = CSSStyleDeclarationPropertySetParser.getOutlineColor(value2, important);
        break;
      case "letter-spacing":
        properties = CSSStyleDeclarationPropertySetParser.getLetterSpacing(value2, important);
        break;
      case "word-spacing":
        properties = CSSStyleDeclarationPropertySetParser.getWordSpacing(value2, important);
        break;
      case "clear":
        properties = CSSStyleDeclarationPropertySetParser.getClear(value2, important);
        break;
      case "clip":
        properties = CSSStyleDeclarationPropertySetParser.getClip(value2, important);
        break;
      case "css-float":
        properties = CSSStyleDeclarationPropertySetParser.getCSSFloat(value2, important);
        break;
      case "float":
        properties = CSSStyleDeclarationPropertySetParser.getFloat(value2, important);
        break;
      case "display":
        properties = CSSStyleDeclarationPropertySetParser.getDisplay(value2, important);
        break;
      case "direction":
        properties = CSSStyleDeclarationPropertySetParser.getDirection(value2, important);
        break;
      case "flex":
        properties = CSSStyleDeclarationPropertySetParser.getFlex(value2, important);
        break;
      case "flex-shrink":
        properties = CSSStyleDeclarationPropertySetParser.getFlexShrink(value2, important);
        break;
      case "flex-grow":
        properties = CSSStyleDeclarationPropertySetParser.getFlexGrow(value2, important);
        break;
      case "flex-basis":
        properties = CSSStyleDeclarationPropertySetParser.getFlexBasis(value2, important);
        break;
      case "padding":
        properties = CSSStyleDeclarationPropertySetParser.getPadding(value2, important);
        break;
      case "padding-top":
        properties = CSSStyleDeclarationPropertySetParser.getPaddingTop(value2, important);
        break;
      case "padding-right":
        properties = CSSStyleDeclarationPropertySetParser.getPaddingRight(value2, important);
        break;
      case "padding-bottom":
        properties = CSSStyleDeclarationPropertySetParser.getPaddingBottom(value2, important);
        break;
      case "padding-left":
        properties = CSSStyleDeclarationPropertySetParser.getPaddingLeft(value2, important);
        break;
      case "margin":
        properties = CSSStyleDeclarationPropertySetParser.getMargin(value2, important);
        break;
      case "margin-top":
        properties = CSSStyleDeclarationPropertySetParser.getMarginTop(value2, important);
        break;
      case "margin-right":
        properties = CSSStyleDeclarationPropertySetParser.getMarginRight(value2, important);
        break;
      case "margin-bottom":
        properties = CSSStyleDeclarationPropertySetParser.getMarginBottom(value2, important);
        break;
      case "margin-left":
        properties = CSSStyleDeclarationPropertySetParser.getMarginLeft(value2, important);
        break;
      case "background":
        properties = CSSStyleDeclarationPropertySetParser.getBackground(value2, important);
        break;
      case "background-image":
        properties = CSSStyleDeclarationPropertySetParser.getBackgroundImage(value2, important);
        break;
      case "background-color":
        properties = CSSStyleDeclarationPropertySetParser.getBackgroundColor(value2, important);
        break;
      case "background-repeat":
        properties = CSSStyleDeclarationPropertySetParser.getBackgroundRepeat(value2, important);
        break;
      case "background-attachment":
        properties = CSSStyleDeclarationPropertySetParser.getBackgroundAttachment(value2, important);
        break;
      case "background-position":
        properties = CSSStyleDeclarationPropertySetParser.getBackgroundPosition(value2, important);
        break;
      case "width":
        properties = CSSStyleDeclarationPropertySetParser.getWidth(value2, important);
        break;
      case "height":
        properties = CSSStyleDeclarationPropertySetParser.getHeight(value2, important);
        break;
      case "top":
        properties = CSSStyleDeclarationPropertySetParser.getTop(value2, important);
        break;
      case "right":
        properties = CSSStyleDeclarationPropertySetParser.getRight(value2, important);
        break;
      case "bottom":
        properties = CSSStyleDeclarationPropertySetParser.getBottom(value2, important);
        break;
      case "left":
        properties = CSSStyleDeclarationPropertySetParser.getLeft(value2, important);
        break;
      case "font":
        properties = CSSStyleDeclarationPropertySetParser.getFont(value2, important);
        break;
      case "font-style":
        properties = CSSStyleDeclarationPropertySetParser.getFontStyle(value2, important);
        break;
      case "font-variant":
        properties = CSSStyleDeclarationPropertySetParser.getFontVariant(value2, important);
        break;
      case "font-weight":
        properties = CSSStyleDeclarationPropertySetParser.getFontWeight(value2, important);
        break;
      case "font-stretch":
        properties = CSSStyleDeclarationPropertySetParser.getFontStretch(value2, important);
        break;
      case "font-size":
        properties = CSSStyleDeclarationPropertySetParser.getFontSize(value2, important);
        break;
      case "line-height":
        properties = CSSStyleDeclarationPropertySetParser.getLineHeight(value2, important);
        break;
      case "text-indent":
        properties = CSSStyleDeclarationPropertySetParser.getTextIndent(value2, important);
        break;
      case "font-family":
        properties = CSSStyleDeclarationPropertySetParser.getFontFamily(value2, important);
        break;
      case "color":
        properties = CSSStyleDeclarationPropertySetParser.getColor(value2, important);
        break;
      case "flood-color":
        properties = CSSStyleDeclarationPropertySetParser.getFloodColor(value2, important);
        break;
      case "text-transform":
        properties = CSSStyleDeclarationPropertySetParser.getTextTransform(value2, important);
        break;
      case "visibility":
        properties = CSSStyleDeclarationPropertySetParser.getVisibility(value2, important);
        break;
      default:
        const trimmedValue = value2.trim();
        if (trimmedValue) {
          const globalValue = CSSStyleDeclarationValueParser.getGlobal(trimmedValue);
          properties = {
            [name2]: { value: globalValue || trimmedValue, important }
          };
        }
        break;
    }
    if (properties !== null && Object.keys(properties).length > 0) {
      this.definedPropertyNames[name2] = true;
      Object.assign(this.properties, properties);
    }
  }
  clone() {
    const _class = this.constructor;
    const clone = new _class;
    clone.properties = JSON.parse(JSON.stringify(this.properties));
    clone.definedPropertyNames = Object.assign({}, this.definedPropertyNames);
    return clone;
  }
  size() {
    return Object.keys(this.properties).length;
  }
  item(index) {
    return Object.keys(this.properties)[index] || "";
  }
  toString() {
    const result = [];
    const clone = this.clone();
    const properties = {};
    for (const shorthandPropertyGroup of TO_STRING_SHORTHAND_PROPERTIES) {
      for (const shorthandProperty of shorthandPropertyGroup) {
        if (Array.isArray(shorthandProperty)) {
          let isMatch = false;
          for (const childShorthandProperty of shorthandProperty) {
            const property = clone.get(childShorthandProperty);
            if (property) {
              properties[childShorthandProperty] = property;
              clone.remove(childShorthandProperty);
              isMatch = true;
            }
          }
          if (isMatch) {
            break;
          }
        } else {
          const property = clone.get(shorthandProperty);
          if (property) {
            properties[shorthandProperty] = property;
            clone.remove(shorthandProperty);
            break;
          }
        }
      }
    }
    for (const name2 of Object.keys(clone.properties)) {
      properties[name2] = clone.get(name2);
    }
    for (const definedPropertyName of Object.keys(this.definedPropertyNames)) {
      const property = properties[definedPropertyName];
      if (property) {
        result.push(`${definedPropertyName}: ${property.value}${property.important ? " !important" : ""};`);
        delete properties[definedPropertyName];
      }
    }
    for (const propertyName of Object.keys(properties)) {
      const property = properties[propertyName];
      if (property) {
        result.push(`${propertyName}: ${property.value}${property.important ? " !important" : ""};`);
      }
    }
    return result.join(" ");
  }
}

// node_modules/happy-dom-without-node/lib/css/CSSRuleTypeEnum.js
var CSSRuleTypeEnum;
(function(CSSRuleTypeEnum2) {
  CSSRuleTypeEnum2[CSSRuleTypeEnum2["containerRule"] = 0] = "containerRule";
  CSSRuleTypeEnum2[CSSRuleTypeEnum2["styleRule"] = 1] = "styleRule";
  CSSRuleTypeEnum2[CSSRuleTypeEnum2["importRule"] = 3] = "importRule";
  CSSRuleTypeEnum2[CSSRuleTypeEnum2["mediaRule"] = 4] = "mediaRule";
  CSSRuleTypeEnum2[CSSRuleTypeEnum2["fontFaceRule"] = 5] = "fontFaceRule";
  CSSRuleTypeEnum2[CSSRuleTypeEnum2["pageRule"] = 6] = "pageRule";
  CSSRuleTypeEnum2[CSSRuleTypeEnum2["keyframesRule"] = 7] = "keyframesRule";
  CSSRuleTypeEnum2[CSSRuleTypeEnum2["keyframeRule"] = 8] = "keyframeRule";
  CSSRuleTypeEnum2[CSSRuleTypeEnum2["namespaceRule"] = 10] = "namespaceRule";
  CSSRuleTypeEnum2[CSSRuleTypeEnum2["counterStyleRule"] = 11] = "counterStyleRule";
  CSSRuleTypeEnum2[CSSRuleTypeEnum2["supportsRule"] = 12] = "supportsRule";
  CSSRuleTypeEnum2[CSSRuleTypeEnum2["documentRule"] = 13] = "documentRule";
  CSSRuleTypeEnum2[CSSRuleTypeEnum2["fontFeatureValuesRule"] = 14] = "fontFeatureValuesRule";
  CSSRuleTypeEnum2[CSSRuleTypeEnum2["regionStyleRule"] = 16] = "regionStyleRule";
})(CSSRuleTypeEnum || (CSSRuleTypeEnum = {}));
var CSSRuleTypeEnum_default = CSSRuleTypeEnum;

// node_modules/happy-dom-without-node/lib/css/declaration/element-style/config/CSSStyleDeclarationElementDefaultCSS.js
var CSSStyleDeclarationElementDefaultCSS_default = {
  default: "display: inline;",
  A: "",
  ABBR: "",
  ADDRESS: "display: block;",
  AREA: "",
  ARTICLE: "display: block;",
  ASIDE: "display: block;",
  AUDIO: "display: none;",
  B: "",
  BASE: "display: none;",
  BDI: "",
  BDO: "",
  BLOCKQUAOTE: "",
  BODY: "display: block;",
  TEMPLATE: "display: none;",
  FORM: "display: block;",
  INPUT: "display: inline-block;",
  TEXTAREA: "display: inline-block;",
  SCRIPT: "display: none;",
  IMG: "",
  LINK: "display: none;",
  STYLE: "display: none;",
  LABEL: "",
  SLOT: "display: contents;",
  SVG: "",
  CIRCLE: "",
  ELLIPSE: "",
  LINE: "",
  PATH: "",
  POLYGON: "",
  POLYLINE: "",
  RECT: "",
  STOP: "",
  USE: "",
  META: "display: none;",
  BLOCKQUOTE: "display: block;",
  BR: "",
  BUTTON: "display: inline-block;",
  CANVAS: "",
  CAPTION: "display: table-caption;",
  CITE: "",
  CODE: "",
  COL: "display: table-column;",
  COLGROUP: "display: table-column-group;",
  DATA: "",
  DATALIST: "display: none;",
  DD: "display: block;",
  DEL: "",
  DETAILS: "display: block;",
  DFN: "",
  DIALOG: {
    default: "display: none;",
    open: "display: block;"
  },
  DIV: "display: block;",
  DL: "display: block;",
  DT: "display: block;",
  EM: "",
  EMBED: "",
  FIELDSET: "display: block;",
  FIGCAPTION: "display: block;",
  FIGURE: "display: block;",
  FOOTER: "display: block;",
  H1: "display: block;",
  H2: "display: block;",
  H3: "display: block;",
  H4: "display: block;",
  H5: "display: block;",
  H6: "display: block;",
  HEAD: "display: none;",
  HEADER: "display: block;",
  HGROUP: "display: block;",
  HR: "display: block;",
  HTML: 'display: block;direction: ltr;font: 16px "Times New Roman";',
  I: "",
  IFRAME: "",
  INS: "",
  KBD: "",
  LEGEND: "display: block;",
  LI: "display: list-item;",
  MAIN: "display: block;",
  MAP: "",
  MARK: "",
  MATH: "",
  MENU: "display: block;",
  MENUITEM: "",
  METER: "display: inline-block;",
  NAV: "display: block;",
  NOSCRIPT: "",
  OBJECT: "",
  OL: "display: block;",
  OPTGROUP: "display: block;",
  OPTION: "display: block;",
  OUTPUT: "unicode-bidi: isolate;",
  P: "display: block;",
  PARAM: "display: none;",
  PICTURE: "",
  PRE: "display: block;",
  PROGRESS: "display: inline-block;",
  Q: "",
  RB: "",
  RP: "display: none;",
  RT: "",
  RTC: "",
  RUBY: "",
  S: "",
  SAMP: "",
  SECTION: "display: block;",
  SELECT: "display: inline-block;",
  SMALL: "",
  SOURCE: "",
  SPAN: "",
  STRONG: "",
  SUB: "",
  SUMMARY: "display: block;",
  SUP: "",
  TABLE: "display: table;",
  TBODY: "display: table-row-group;",
  TD: "display: table-cell;",
  TFOOT: "display: table-footer-group;",
  TH: "display: table-cell;",
  THEAD: "display: table-header-group;",
  TIME: "",
  TITLE: "display: none;",
  TR: "display: table-row;",
  TRACK: "",
  U: "",
  UL: "display: block;",
  VAR: "",
  VIDEO: "",
  WBR: ""
};

// node_modules/happy-dom-without-node/lib/css/declaration/element-style/config/CSSStyleDeclarationElementInheritedProperties.js
var CSSStyleDeclarationElementInheritedProperties_default = {
  "border-collapse": true,
  "border-spacing": true,
  "caption-side": true,
  color: true,
  cursor: true,
  direction: true,
  "empty-cells": true,
  "font-family": true,
  "font-size": true,
  "font-style": true,
  "font-variant": true,
  "font-weight": true,
  "font-size-adjust": true,
  "font-stretch": true,
  font: true,
  "letter-spacing": true,
  "line-height": true,
  "list-style-image": true,
  "list-style-position": true,
  "list-style-type": true,
  "list-style": true,
  orphans: true,
  quotes: true,
  "tab-size": true,
  "text-align": true,
  "text-align-last": true,
  "text-decoration-color": true,
  "text-indent": true,
  "text-justify": true,
  "text-shadow": true,
  "text-transform": true,
  visibility: true,
  "white-space": true,
  widows: true,
  "word-break": true,
  "word-spacing": true,
  "word-wrap": true
};

// node_modules/happy-dom-without-node/lib/css/declaration/element-style/config/CSSStyleDeclarationElementMeasurementProperties.js
var CSSStyleDeclarationElementMeasurementProperties_default = [
  "background-position-x",
  "background-position-y",
  "background-size",
  "border-image-outset",
  "border-top-width",
  "border-right-width",
  "border-bottom-width",
  "border-left-width",
  "border-top-left-radius",
  "border-top-right-radius",
  "border-bottom-right-radius",
  "border-bottom-left-radius",
  "border-image-width",
  "clip",
  "font-size",
  "padding-top",
  "padding-right",
  "padding-bottom",
  "padding-left",
  "margin-top",
  "margin-right",
  "margin-bottom",
  "margin-left",
  "width",
  "height",
  "min-width",
  "min-height",
  "max-width",
  "max-height",
  "top",
  "right",
  "bottom",
  "left",
  "outline-width",
  "outline-offset",
  "letter-spacing",
  "word-spacing",
  "text-indent",
  "line-height"
];

// node_modules/happy-dom-without-node/lib/css/declaration/measurement-converter/CSSMeasurementConverter.js
class CSSMeasurementConverter {
  static toPixels(options3) {
    const value2 = parseFloat(options3.value);
    const unit = options3.value.replace(value2.toString(), "");
    if (isNaN(value2)) {
      return null;
    }
    switch (unit) {
      case "px":
        return value2;
      case "rem":
        return this.round(value2 * parseFloat(options3.rootFontSize));
      case "em":
        return this.round(value2 * parseFloat(options3.parentFontSize));
      case "vw":
        return this.round(value2 * options3.ownerWindow.innerWidth / 100);
      case "vh":
        return this.round(value2 * options3.ownerWindow.innerHeight / 100);
      case "%":
        return options3.parentSize !== undefined && options3.parentSize !== null ? this.round(value2 * parseFloat(options3.parentSize) / 100) : null;
      case "vmin":
        return this.round(value2 * Math.min(options3.ownerWindow.innerWidth, options3.ownerWindow.innerHeight) / 100);
      case "vmax":
        return value2 * Math.max(options3.ownerWindow.innerWidth, options3.ownerWindow.innerHeight) / 100;
      case "cm":
        return this.round(value2 * 37.7812);
      case "mm":
        return this.round(value2 * 3.7781);
      case "in":
        return this.round(value2 * 96);
      case "pt":
        return this.round(value2 * 1.3281);
      case "pc":
        return this.round(value2 * 16);
      case "Q":
        return this.round(value2 * 0.945);
      default:
        return null;
    }
  }
  static round(value2) {
    return Math.round(value2 * 1e4) / 1e4;
  }
}

// node_modules/happy-dom-without-node/lib/event/events/MediaQueryListEvent.js
class MediaQueryListEvent extends Event_default {
  constructor(type, eventInit = null) {
    super(type, eventInit);
    this.matches = eventInit?.matches ?? false;
    this.media = eventInit?.media ?? "";
  }
}

// node_modules/happy-dom-without-node/lib/match-media/MediaQueryTypeEnum.js
var MediaQueryTypeEnum;
(function(MediaQueryTypeEnum2) {
  MediaQueryTypeEnum2["all"] = "all";
  MediaQueryTypeEnum2["print"] = "print";
  MediaQueryTypeEnum2["screen"] = "screen";
})(MediaQueryTypeEnum || (MediaQueryTypeEnum = {}));
var MediaQueryTypeEnum_default = MediaQueryTypeEnum;

// node_modules/happy-dom-without-node/lib/match-media/MediaQueryItem.js
class MediaQueryItem {
  constructor(options3) {
    this.rootFontSize = null;
    this.ownerWindow = options3.ownerWindow;
    this.rootFontSize = options3.rootFontSize || null;
    this.mediaTypes = options3.mediaTypes || [];
    this.not = options3.not || false;
    this.rules = options3.rules || [];
    this.ranges = options3.ranges || [];
  }
  toString() {
    return `${this.not ? "not " : ""}${this.mediaTypes.join(", ")}${(this.not || this.mediaTypes.length > 0) && !!this.ranges.length ? " and " : ""}${this.ranges.map((range) => `(${range.before ? `${range.before.value} ${range.before.operator} ` : ""}${range.type}${range.after ? ` ${range.after.operator} ${range.after.value}` : ""})`).join(" and ")}${(this.not || this.mediaTypes.length > 0) && !!this.rules.length ? " and " : ""}${this.rules.map((rule) => rule.value ? `(${rule.name}: ${rule.value})` : `(${rule.name})`).join(" and ")}`;
  }
  matches() {
    return this.not ? !this.matchesAll() : this.matchesAll();
  }
  matchesAll() {
    if (!!this.mediaTypes.length) {
      let isMediaTypeMatch = false;
      for (const mediaType of this.mediaTypes) {
        if (this.matchesMediaType(mediaType)) {
          isMediaTypeMatch = true;
          break;
        }
      }
      if (!isMediaTypeMatch) {
        return false;
      }
    }
    for (const rule of this.rules) {
      if (!this.matchesRule(rule)) {
        return false;
      }
    }
    for (const range of this.ranges) {
      if (!this.matchesRange(range)) {
        return false;
      }
    }
    return true;
  }
  matchesMediaType(mediaType) {
    if (mediaType === MediaQueryTypeEnum_default.all) {
      return true;
    }
    return mediaType === WindowBrowserSettingsReader_default.getSettings(this.ownerWindow).device.mediaType;
  }
  matchesRange(range) {
    const windowSize = range.type === "width" ? this.ownerWindow.innerWidth : this.ownerWindow.innerHeight;
    if (range.before) {
      const beforeValue = this.toPixels(range.before.value);
      if (beforeValue === null) {
        return false;
      }
      switch (range.before.operator) {
        case "<":
          if (beforeValue >= windowSize) {
            return false;
          }
          break;
        case "<=":
          if (beforeValue > windowSize) {
            return false;
          }
          break;
        case ">":
          if (beforeValue <= windowSize) {
            return false;
          }
          break;
        case ">=":
          if (beforeValue < windowSize) {
            return false;
          }
          break;
      }
    }
    if (range.after) {
      const afterValue = this.toPixels(range.after.value);
      if (afterValue === null) {
        return false;
      }
      switch (range.after.operator) {
        case "<":
          if (windowSize >= afterValue) {
            return false;
          }
          break;
        case "<=":
          if (windowSize > afterValue) {
            return false;
          }
          break;
        case ">":
          if (windowSize <= afterValue) {
            return false;
          }
          break;
        case ">=":
          if (windowSize < afterValue) {
            return false;
          }
          break;
      }
    }
    return true;
  }
  matchesRule(rule) {
    if (!rule.value) {
      switch (rule.name) {
        case "min-width":
        case "max-width":
        case "min-height":
        case "max-height":
        case "width":
        case "height":
        case "orientation":
        case "prefers-color-scheme":
        case "hover":
        case "any-hover":
        case "any-pointer":
        case "pointer":
        case "display-mode":
        case "min-aspect-ratio":
        case "max-aspect-ratio":
        case "aspect-ratio":
          return true;
      }
      return false;
    }
    switch (rule.name) {
      case "min-width":
        const minWidth = this.toPixels(rule.value);
        return minWidth !== null && this.ownerWindow.innerWidth >= minWidth;
      case "max-width":
        const maxWidth = this.toPixels(rule.value);
        return maxWidth !== null && this.ownerWindow.innerWidth <= maxWidth;
      case "min-height":
        const minHeight = this.toPixels(rule.value);
        return minHeight !== null && this.ownerWindow.innerHeight >= minHeight;
      case "max-height":
        const maxHeight = this.toPixels(rule.value);
        return maxHeight !== null && this.ownerWindow.innerHeight <= maxHeight;
      case "width":
        const width2 = this.toPixels(rule.value);
        return width2 !== null && this.ownerWindow.innerWidth === width2;
      case "height":
        const height2 = this.toPixels(rule.value);
        return height2 !== null && this.ownerWindow.innerHeight === height2;
      case "orientation":
        return rule.value === "landscape" ? this.ownerWindow.innerWidth > this.ownerWindow.innerHeight : this.ownerWindow.innerWidth < this.ownerWindow.innerHeight;
      case "prefers-color-scheme":
        return rule.value === WindowBrowserSettingsReader_default.getSettings(this.ownerWindow).device.prefersColorScheme;
      case "any-hover":
      case "hover":
        if (rule.value === "none") {
          return this.ownerWindow.navigator.maxTouchPoints > 0;
        }
        if (rule.value === "hover") {
          return this.ownerWindow.navigator.maxTouchPoints === 0;
        }
        return false;
      case "any-pointer":
      case "pointer":
        if (rule.value === "none") {
          return false;
        }
        if (rule.value === "coarse") {
          return this.ownerWindow.navigator.maxTouchPoints > 0;
        }
        if (rule.value === "fine") {
          return this.ownerWindow.navigator.maxTouchPoints === 0;
        }
        return false;
      case "display-mode":
        return rule.value === "browser";
      case "min-aspect-ratio":
      case "max-aspect-ratio":
      case "aspect-ratio":
        const aspectRatio = rule.value.split("/");
        const aspectRatioWidth = parseInt(aspectRatio[0], 10);
        const aspectRatioHeight = parseInt(aspectRatio[1], 10);
        if (isNaN(aspectRatioWidth) || isNaN(aspectRatioHeight)) {
          return false;
        }
        switch (rule.name) {
          case "min-aspect-ratio":
            return aspectRatioWidth / aspectRatioHeight <= this.ownerWindow.innerWidth / this.ownerWindow.innerHeight;
          case "max-aspect-ratio":
            return aspectRatioWidth / aspectRatioHeight >= this.ownerWindow.innerWidth / this.ownerWindow.innerHeight;
          case "aspect-ratio":
            return aspectRatioWidth / aspectRatioHeight === this.ownerWindow.innerWidth / this.ownerWindow.innerHeight;
        }
    }
    return false;
  }
  toPixels(value2) {
    if (!WindowBrowserSettingsReader_default.getSettings(this.ownerWindow).disableComputedStyleRendering && value2.endsWith("em")) {
      this.rootFontSize = this.rootFontSize || parseFloat(this.ownerWindow.getComputedStyle(this.ownerWindow.document.documentElement).fontSize);
      return CSSMeasurementConverter.toPixels({
        ownerWindow: this.ownerWindow,
        value: value2,
        rootFontSize: this.rootFontSize,
        parentFontSize: this.rootFontSize
      });
    }
    return CSSMeasurementConverter.toPixels({
      ownerWindow: this.ownerWindow,
      value: value2,
      rootFontSize: 16,
      parentFontSize: 16
    });
  }
}

// node_modules/happy-dom-without-node/lib/match-media/MediaQueryParser.js
var MEDIA_QUERY_REGEXP = /(not|only|all|screen|print)|\(([^\)]+)(\)){0,1}|(,)| +(or|and) +/g;
var IS_RESOLUTION_REGEXP = /[<>]/;
var RESOLUTION_REGEXP = /(?:([0-9]+[a-z]+) *(<|<=|>|=>)){0,1} *(width|height) *(?:(<|<=|>|=>) *([0-9]+[a-z]+)){0,1}/;

class MediaQueryParser {
  static parse(options3) {
    let currentMediaQueryItem = new MediaQueryItem({
      ownerWindow: options3.ownerWindow,
      rootFontSize: options3.rootFontSize
    });
    const mediaQueryItems = [currentMediaQueryItem];
    const regexp = new RegExp(MEDIA_QUERY_REGEXP);
    let match = null;
    while (match = regexp.exec(options3.mediaQuery.toLowerCase())) {
      if (match[4] === "," || match[5] === "or") {
        currentMediaQueryItem = new MediaQueryItem({
          ownerWindow: options3.ownerWindow,
          rootFontSize: options3.rootFontSize
        });
        mediaQueryItems.push(currentMediaQueryItem);
      } else if (match[1] === "all" || match[1] === "screen" || match[1] === "print") {
        currentMediaQueryItem.mediaTypes.push(match[1]);
      } else if (match[1] === "not") {
        currentMediaQueryItem.not = true;
      } else if (match[2]) {
        const resolutionMatch = IS_RESOLUTION_REGEXP.test(match[2]) ? match[2].match(RESOLUTION_REGEXP) : null;
        if (resolutionMatch && (resolutionMatch[1] || resolutionMatch[5])) {
          currentMediaQueryItem.ranges.push({
            before: resolutionMatch[1] ? {
              value: resolutionMatch[1],
              operator: resolutionMatch[2]
            } : null,
            type: resolutionMatch[3],
            after: resolutionMatch[5] ? {
              value: resolutionMatch[5],
              operator: resolutionMatch[4]
            } : null
          });
        } else {
          const [name2, value2] = match[2].split(":");
          const trimmedValue = value2 ? value2.trim() : null;
          if (!trimmedValue && !match[3]) {
            return [
              new MediaQueryItem({
                ownerWindow: options3.ownerWindow,
                rootFontSize: options3.rootFontSize,
                not: true,
                mediaTypes: [MediaQueryTypeEnum_default.all]
              })
            ];
          }
          currentMediaQueryItem.rules.push({
            name: name2.trim(),
            value: trimmedValue
          });
        }
      }
    }
    return mediaQueryItems;
  }
}

// node_modules/happy-dom-without-node/lib/match-media/MediaQueryList.js
var __classPrivateFieldSet8 = function(receiver, state, value2, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
};
var __classPrivateFieldGet11 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _MediaQueryList_ownerWindow;
var _MediaQueryList_items;
var _MediaQueryList_media;
var _MediaQueryList_rootFontSize;

class MediaQueryList extends EventTarget_default {
  constructor(options3) {
    super();
    this.onchange = null;
    _MediaQueryList_ownerWindow.set(this, undefined);
    _MediaQueryList_items.set(this, null);
    _MediaQueryList_media.set(this, undefined);
    _MediaQueryList_rootFontSize.set(this, null);
    __classPrivateFieldSet8(this, _MediaQueryList_ownerWindow, options3.ownerWindow, "f");
    __classPrivateFieldSet8(this, _MediaQueryList_media, options3.media, "f");
    __classPrivateFieldSet8(this, _MediaQueryList_rootFontSize, options3.rootFontSize || null, "f");
  }
  get media() {
    __classPrivateFieldSet8(this, _MediaQueryList_items, __classPrivateFieldGet11(this, _MediaQueryList_items, "f") || MediaQueryParser.parse({
      ownerWindow: __classPrivateFieldGet11(this, _MediaQueryList_ownerWindow, "f"),
      mediaQuery: __classPrivateFieldGet11(this, _MediaQueryList_media, "f"),
      rootFontSize: __classPrivateFieldGet11(this, _MediaQueryList_rootFontSize, "f")
    }), "f");
    return __classPrivateFieldGet11(this, _MediaQueryList_items, "f").map((item2) => item2.toString()).join(", ");
  }
  get matches() {
    __classPrivateFieldSet8(this, _MediaQueryList_items, __classPrivateFieldGet11(this, _MediaQueryList_items, "f") || MediaQueryParser.parse({
      ownerWindow: __classPrivateFieldGet11(this, _MediaQueryList_ownerWindow, "f"),
      mediaQuery: __classPrivateFieldGet11(this, _MediaQueryList_media, "f"),
      rootFontSize: __classPrivateFieldGet11(this, _MediaQueryList_rootFontSize, "f")
    }), "f");
    for (const item2 of __classPrivateFieldGet11(this, _MediaQueryList_items, "f")) {
      if (!item2.matches()) {
        return false;
      }
    }
    return true;
  }
  addListener(callback) {
    this.addEventListener("change", callback);
  }
  removeListener(callback) {
    this.removeEventListener("change", callback);
  }
  addEventListener(type, listener) {
    super.addEventListener(type, listener);
    if (type === "change") {
      let matchesState = false;
      const resizeListener = () => {
        const matches = this.matches;
        if (matches !== matchesState) {
          matchesState = matches;
          this.dispatchEvent(new MediaQueryListEvent("change", { matches, media: this.media }));
        }
      };
      listener[windowResizeListener] = resizeListener;
      __classPrivateFieldGet11(this, _MediaQueryList_ownerWindow, "f").addEventListener("resize", resizeListener);
    }
  }
  removeEventListener(type, listener) {
    super.removeEventListener(type, listener);
    if (type === "change" && listener[windowResizeListener]) {
      __classPrivateFieldGet11(this, _MediaQueryList_ownerWindow, "f").removeEventListener("resize", listener[windowResizeListener]);
    }
  }
}
_MediaQueryList_ownerWindow = new WeakMap, _MediaQueryList_items = new WeakMap, _MediaQueryList_media = new WeakMap, _MediaQueryList_rootFontSize = new WeakMap;
var MediaQueryList_default = MediaQueryList;

// node_modules/happy-dom-without-node/lib/css/declaration/element-style/CSSStyleDeclarationElementStyle.js
var CSS_MEASUREMENT_REGEXP = /[0-9.]+(px|rem|em|vw|vh|%|vmin|vmax|cm|mm|in|pt|pc|Q)/g;
var CSS_VARIABLE_REGEXP2 = /var\( *(--[^), ]+)\)|var\( *(--[^), ]+), *(.+)\)/;

class CSSStyleDeclarationElementStyle {
  constructor(element, computed = false) {
    this.cache = {
      propertyManager: null,
      cssText: null,
      documentCacheID: null
    };
    this.element = element;
    this.computed = computed;
  }
  getElementStyle() {
    if (this.computed) {
      return this.getComputedElementStyle();
    }
    const cssText2 = this.element[attributes]["style"]?.[value];
    if (cssText2) {
      if (this.cache.propertyManager && this.cache.cssText === cssText2) {
        return this.cache.propertyManager;
      }
      this.cache.cssText = cssText2;
      this.cache.propertyManager = new CSSStyleDeclarationPropertyManager({ cssText: cssText2 });
      return this.cache.propertyManager;
    }
    return new CSSStyleDeclarationPropertyManager;
  }
  getComputedElementStyle() {
    const documentElements = [];
    const parentElements = [];
    let styleAndElement = {
      element: this.element,
      cssTexts: []
    };
    let shadowRootElements = [];
    if (!this.element[isConnected]) {
      return new CSSStyleDeclarationPropertyManager;
    }
    if (this.cache.propertyManager && this.cache.documentCacheID === this.element[ownerDocument][cacheID]) {
      return this.cache.propertyManager;
    }
    this.cache.documentCacheID = this.element[ownerDocument][cacheID];
    while (styleAndElement.element) {
      if (styleAndElement.element[nodeType] === NodeTypeEnum_default.elementNode) {
        const rootNode2 = styleAndElement.element.getRootNode();
        if (rootNode2[nodeType] === NodeTypeEnum_default.documentNode) {
          documentElements.unshift(styleAndElement);
        } else {
          shadowRootElements.unshift(styleAndElement);
        }
        parentElements.unshift(styleAndElement);
      }
      if (styleAndElement.element === this.element[ownerDocument]) {
        const styleSheets = this.element[ownerDocument].querySelectorAll('style,link[rel="stylesheet"]');
        for (const styleSheet of styleSheets) {
          const sheet2 = styleSheet.sheet;
          if (sheet2) {
            this.parseCSSRules({
              elements: documentElements,
              rootElement: documentElements[0].element[tagName3] === "HTML" ? documentElements[0] : null,
              cssRules: sheet2.cssRules
            });
          }
        }
        for (const sheet2 of this.element[ownerDocument].adoptedStyleSheets) {
          this.parseCSSRules({
            elements: documentElements,
            rootElement: documentElements[0].element[tagName3] === "HTML" ? documentElements[0] : null,
            cssRules: sheet2.cssRules
          });
        }
        styleAndElement = { element: null, cssTexts: [] };
      } else if (styleAndElement.element[nodeType] === NodeTypeEnum_default.documentFragmentNode && styleAndElement.element.host) {
        const shadowRoot2 = styleAndElement.element;
        const styleSheets = shadowRoot2.querySelectorAll('style,link[rel="stylesheet"]');
        styleAndElement = {
          element: shadowRoot2.host,
          cssTexts: []
        };
        for (const styleSheet of styleSheets) {
          const sheet2 = styleSheet.sheet;
          if (sheet2) {
            this.parseCSSRules({
              elements: shadowRootElements,
              cssRules: sheet2.cssRules,
              hostElement: styleAndElement
            });
          }
        }
        for (const sheet2 of shadowRoot2.adoptedStyleSheets) {
          this.parseCSSRules({
            elements: shadowRootElements,
            cssRules: sheet2.cssRules,
            hostElement: styleAndElement
          });
        }
        shadowRootElements = [];
      } else {
        styleAndElement = {
          element: styleAndElement.element[parentNode],
          cssTexts: []
        };
      }
    }
    const targetElement = parentElements[parentElements.length - 1];
    const propertyManager = new CSSStyleDeclarationPropertyManager;
    const cssProperties = {};
    let rootFontSize = 16;
    let parentFontSize = 16;
    for (const parentElement of parentElements) {
      parentElement.cssTexts.sort((a, b) => a.priorityWeight - b.priorityWeight);
      let elementCSSText = "";
      if (CSSStyleDeclarationElementDefaultCSS_default[parentElement.element[tagName3]]) {
        if (typeof CSSStyleDeclarationElementDefaultCSS_default[parentElement.element[tagName3]] === "string") {
          elementCSSText += CSSStyleDeclarationElementDefaultCSS_default[parentElement.element[tagName3]];
        } else {
          for (const key of Object.keys(CSSStyleDeclarationElementDefaultCSS_default[parentElement.element[tagName3]])) {
            if (key === "default" || !!parentElement.element[key]) {
              elementCSSText += CSSStyleDeclarationElementDefaultCSS_default[parentElement.element[tagName3]][key];
            }
          }
        }
        elementCSSText += CSSStyleDeclarationElementDefaultCSS_default[parentElement.element[tagName3]];
      }
      for (const cssText2 of parentElement.cssTexts) {
        elementCSSText += cssText2.cssText;
      }
      const elementStyleAttribute = parentElement.element[attributes]["style"];
      if (elementStyleAttribute) {
        elementCSSText += elementStyleAttribute[value];
      }
      const rulesAndProperties = CSSStyleDeclarationCSSParser.parse(elementCSSText);
      const rules = rulesAndProperties.rules;
      Object.assign(cssProperties, rulesAndProperties.properties);
      for (const { name: name2, value: value2, important } of rules) {
        if (CSSStyleDeclarationElementInheritedProperties_default[name2] || parentElement === targetElement) {
          const parsedValue = this.parseCSSVariablesInValue(value2.trim(), cssProperties);
          if (parsedValue && (!propertyManager.get(name2)?.important || important)) {
            propertyManager.set(name2, parsedValue, important);
            if (name2 === "font" || name2 === "font-size") {
              const fontSize = propertyManager.properties["font-size"];
              if (fontSize !== null) {
                const parsedValue2 = this.parseMeasurementsInValue({
                  value: fontSize.value,
                  rootFontSize,
                  parentFontSize,
                  parentSize: parentFontSize
                });
                if (parentElement.element[tagName3] === "HTML") {
                  rootFontSize = parsedValue2;
                } else if (parentElement !== targetElement) {
                  parentFontSize = parsedValue2;
                }
              }
            }
          }
        }
      }
    }
    for (const name2 of CSSStyleDeclarationElementMeasurementProperties_default) {
      const property = propertyManager.properties[name2];
      if (property) {
        property.value = this.parseMeasurementsInValue({
          value: property.value,
          rootFontSize,
          parentFontSize,
          parentSize: name2 === "font-size" ? parentFontSize : null
        });
      }
    }
    this.cache.propertyManager = propertyManager;
    return propertyManager;
  }
  parseCSSRules(options3) {
    if (!options3.elements.length) {
      return;
    }
    const ownerWindow2 = this.element[ownerDocument][ownerWindow];
    for (const rule of options3.cssRules) {
      if (rule.type === CSSRuleTypeEnum_default.styleRule) {
        const selectorText = rule.selectorText;
        if (selectorText) {
          if (selectorText.startsWith(":host")) {
            if (options3.hostElement) {
              options3.hostElement.cssTexts.push({
                cssText: rule[cssText],
                priorityWeight: 0
              });
            }
          } else if (selectorText.startsWith(":root")) {
            if (options3.rootElement) {
              options3.rootElement.cssTexts.push({
                cssText: rule[cssText],
                priorityWeight: 0
              });
            }
          } else {
            for (const element of options3.elements) {
              const match = QuerySelector.matches(element.element, selectorText, {
                ignoreErrors: true
              });
              if (match) {
                element.cssTexts.push({
                  cssText: rule[cssText],
                  priorityWeight: match.priorityWeight
                });
              }
            }
          }
        }
      } else if (rule.type === CSSRuleTypeEnum_default.mediaRule && new MediaQueryList_default({
        ownerWindow: ownerWindow2,
        media: rule.conditionText,
        rootFontSize: this.element[tagName3] === "HTML" ? 16 : null
      }).matches) {
        this.parseCSSRules({
          elements: options3.elements,
          cssRules: rule.cssRules,
          hostElement: options3.hostElement
        });
      }
    }
  }
  parseCSSVariablesInValue(value2, cssVariables) {
    let newValue = value2;
    let match;
    while ((match = newValue.match(CSS_VARIABLE_REGEXP2)) !== null) {
      if (match[2] !== undefined) {
        newValue = newValue.replace(match[0], cssVariables[match[2]] || match[3]);
      } else {
        newValue = newValue.replace(match[0], cssVariables[match[1]] || "");
      }
    }
    return newValue;
  }
  parseMeasurementsInValue(options3) {
    if (WindowBrowserSettingsReader_default.getSettings(this.element[ownerDocument][ownerWindow]).disableComputedStyleRendering) {
      return options3.value;
    }
    const regexp = new RegExp(CSS_MEASUREMENT_REGEXP);
    let newValue = options3.value;
    let match;
    while ((match = regexp.exec(options3.value)) !== null) {
      if (match[1] !== "px") {
        const valueInPixels = CSSMeasurementConverter.toPixels({
          ownerWindow: this.element[ownerDocument][ownerWindow],
          value: match[0],
          rootFontSize: options3.rootFontSize,
          parentFontSize: options3.parentFontSize,
          parentSize: options3.parentSize
        });
        if (valueInPixels !== null) {
          newValue = newValue.replace(match[0], valueInPixels + "px");
        }
      }
    }
    return newValue;
  }
}

// node_modules/happy-dom-without-node/lib/css/declaration/AbstractCSSStyleDeclaration.js
var __classPrivateFieldSet9 = function(receiver, state, value2, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
};
var __classPrivateFieldGet12 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AbstractCSSStyleDeclaration_style;
var _AbstractCSSStyleDeclaration_ownerElement;
var _AbstractCSSStyleDeclaration_computed;
var _AbstractCSSStyleDeclaration_elementStyle;

class AbstractCSSStyleDeclaration {
  constructor(ownerElement2 = null, computed = false) {
    this.parentRule = null;
    _AbstractCSSStyleDeclaration_style.set(this, null);
    _AbstractCSSStyleDeclaration_ownerElement.set(this, undefined);
    _AbstractCSSStyleDeclaration_computed.set(this, undefined);
    _AbstractCSSStyleDeclaration_elementStyle.set(this, null);
    __classPrivateFieldSet9(this, _AbstractCSSStyleDeclaration_style, !ownerElement2 ? new CSSStyleDeclarationPropertyManager : null, "f");
    __classPrivateFieldSet9(this, _AbstractCSSStyleDeclaration_ownerElement, ownerElement2, "f");
    __classPrivateFieldSet9(this, _AbstractCSSStyleDeclaration_computed, ownerElement2 ? computed : false, "f");
    __classPrivateFieldSet9(this, _AbstractCSSStyleDeclaration_elementStyle, ownerElement2 ? new CSSStyleDeclarationElementStyle(ownerElement2, __classPrivateFieldGet12(this, _AbstractCSSStyleDeclaration_computed, "f")) : null, "f");
  }
  get length() {
    if (__classPrivateFieldGet12(this, _AbstractCSSStyleDeclaration_ownerElement, "f")) {
      const style3 = __classPrivateFieldGet12(this, _AbstractCSSStyleDeclaration_elementStyle, "f").getElementStyle();
      return style3.size();
    }
    return __classPrivateFieldGet12(this, _AbstractCSSStyleDeclaration_style, "f").size();
  }
  get cssText() {
    if (__classPrivateFieldGet12(this, _AbstractCSSStyleDeclaration_ownerElement, "f")) {
      if (__classPrivateFieldGet12(this, _AbstractCSSStyleDeclaration_computed, "f")) {
        return "";
      }
      return __classPrivateFieldGet12(this, _AbstractCSSStyleDeclaration_elementStyle, "f").getElementStyle().toString();
    }
    return __classPrivateFieldGet12(this, _AbstractCSSStyleDeclaration_style, "f").toString();
  }
  set cssText(cssText2) {
    if (__classPrivateFieldGet12(this, _AbstractCSSStyleDeclaration_computed, "f")) {
      throw new DOMException(`Failed to execute 'cssText' on 'CSSStyleDeclaration': These styles are computed, and the properties are therefore read-only.`, DOMExceptionNameEnum_default.domException);
    }
    if (__classPrivateFieldGet12(this, _AbstractCSSStyleDeclaration_ownerElement, "f")) {
      const style3 = new CSSStyleDeclarationPropertyManager({ cssText: cssText2 });
      let styleAttribute = __classPrivateFieldGet12(this, _AbstractCSSStyleDeclaration_ownerElement, "f")[attributes]["style"];
      if (!styleAttribute) {
        styleAttribute = __classPrivateFieldGet12(this, _AbstractCSSStyleDeclaration_ownerElement, "f")[ownerDocument].createAttribute("style");
        __classPrivateFieldGet12(this, _AbstractCSSStyleDeclaration_ownerElement, "f")[attributes][setNamedItemWithoutConsequences](styleAttribute);
      }
      if (__classPrivateFieldGet12(this, _AbstractCSSStyleDeclaration_ownerElement, "f")[isConnected]) {
        __classPrivateFieldGet12(this, _AbstractCSSStyleDeclaration_ownerElement, "f")[ownerDocument][cacheID]++;
      }
      styleAttribute[value] = style3.toString();
    } else {
      __classPrivateFieldSet9(this, _AbstractCSSStyleDeclaration_style, new CSSStyleDeclarationPropertyManager({ cssText: cssText2 }), "f");
    }
  }
  item(index) {
    if (__classPrivateFieldGet12(this, _AbstractCSSStyleDeclaration_ownerElement, "f")) {
      return __classPrivateFieldGet12(this, _AbstractCSSStyleDeclaration_elementStyle, "f").getElementStyle().item(index);
    }
    return __classPrivateFieldGet12(this, _AbstractCSSStyleDeclaration_style, "f").item(index);
  }
  setProperty(name2, value2, priority) {
    if (__classPrivateFieldGet12(this, _AbstractCSSStyleDeclaration_computed, "f")) {
      throw new DOMException(`Failed to execute 'setProperty' on 'CSSStyleDeclaration': These styles are computed, and therefore the '${name2}' property is read-only.`, DOMExceptionNameEnum_default.domException);
    }
    if (priority !== "" && priority !== undefined && priority !== "important") {
      return;
    }
    const stringValue = String(value2);
    if (!stringValue) {
      this.removeProperty(name2);
    } else if (__classPrivateFieldGet12(this, _AbstractCSSStyleDeclaration_ownerElement, "f")) {
      let styleAttribute = __classPrivateFieldGet12(this, _AbstractCSSStyleDeclaration_ownerElement, "f")[attributes]["style"];
      if (!styleAttribute) {
        styleAttribute = __classPrivateFieldGet12(this, _AbstractCSSStyleDeclaration_ownerElement, "f")[ownerDocument].createAttribute("style");
        __classPrivateFieldGet12(this, _AbstractCSSStyleDeclaration_ownerElement, "f")[attributes][setNamedItemWithoutConsequences](styleAttribute);
      }
      if (__classPrivateFieldGet12(this, _AbstractCSSStyleDeclaration_ownerElement, "f")[isConnected]) {
        __classPrivateFieldGet12(this, _AbstractCSSStyleDeclaration_ownerElement, "f")[ownerDocument][cacheID]++;
      }
      const style3 = __classPrivateFieldGet12(this, _AbstractCSSStyleDeclaration_elementStyle, "f").getElementStyle();
      style3.set(name2, stringValue, !!priority);
      styleAttribute[value] = style3.toString();
    } else {
      __classPrivateFieldGet12(this, _AbstractCSSStyleDeclaration_style, "f").set(name2, stringValue, !!priority);
    }
  }
  removeProperty(name2) {
    if (__classPrivateFieldGet12(this, _AbstractCSSStyleDeclaration_computed, "f")) {
      throw new DOMException(`Failed to execute 'removeProperty' on 'CSSStyleDeclaration': These styles are computed, and therefore the '${name2}' property is read-only.`, DOMExceptionNameEnum_default.domException);
    }
    if (__classPrivateFieldGet12(this, _AbstractCSSStyleDeclaration_ownerElement, "f")) {
      const style3 = __classPrivateFieldGet12(this, _AbstractCSSStyleDeclaration_elementStyle, "f").getElementStyle();
      style3.remove(name2);
      const newCSSText = style3.toString();
      if (__classPrivateFieldGet12(this, _AbstractCSSStyleDeclaration_ownerElement, "f")[isConnected]) {
        __classPrivateFieldGet12(this, _AbstractCSSStyleDeclaration_ownerElement, "f")[ownerDocument][cacheID]++;
      }
      if (newCSSText) {
        __classPrivateFieldGet12(this, _AbstractCSSStyleDeclaration_ownerElement, "f")[attributes]["style"][value] = newCSSText;
      } else {
        __classPrivateFieldGet12(this, _AbstractCSSStyleDeclaration_ownerElement, "f")[attributes][removeNamedItemWithoutConsequences]("style");
      }
    } else {
      __classPrivateFieldGet12(this, _AbstractCSSStyleDeclaration_style, "f").remove(name2);
    }
  }
  getPropertyValue(name2) {
    if (__classPrivateFieldGet12(this, _AbstractCSSStyleDeclaration_ownerElement, "f")) {
      const style3 = __classPrivateFieldGet12(this, _AbstractCSSStyleDeclaration_elementStyle, "f").getElementStyle();
      return style3.get(name2)?.value || "";
    }
    return __classPrivateFieldGet12(this, _AbstractCSSStyleDeclaration_style, "f").get(name2)?.value || "";
  }
  getPropertyPriority(name2) {
    if (__classPrivateFieldGet12(this, _AbstractCSSStyleDeclaration_ownerElement, "f")) {
      const style3 = __classPrivateFieldGet12(this, _AbstractCSSStyleDeclaration_elementStyle, "f").getElementStyle();
      return style3.get(name2)?.important ? "important" : "";
    }
    return __classPrivateFieldGet12(this, _AbstractCSSStyleDeclaration_style, "f").get(name2)?.important ? "important" : "";
  }
}
_AbstractCSSStyleDeclaration_style = new WeakMap, _AbstractCSSStyleDeclaration_ownerElement = new WeakMap, _AbstractCSSStyleDeclaration_computed = new WeakMap, _AbstractCSSStyleDeclaration_elementStyle = new WeakMap;
var AbstractCSSStyleDeclaration_default = AbstractCSSStyleDeclaration;

// node_modules/happy-dom-without-node/lib/css/declaration/CSSStyleDeclaration.js
class CSSStyleDeclaration extends AbstractCSSStyleDeclaration_default {
  get 0() {
    return this.item(0) || undefined;
  }
  get 1() {
    return this.item(1) || undefined;
  }
  get 2() {
    return this.item(2) || undefined;
  }
  get 3() {
    return this.item(3) || undefined;
  }
  get 4() {
    return this.item(4) || undefined;
  }
  get 5() {
    return this.item(5) || undefined;
  }
  get 6() {
    return this.item(6) || undefined;
  }
  get 7() {
    return this.item(7) || undefined;
  }
  get 8() {
    return this.item(8) || undefined;
  }
  get 9() {
    return this.item(9) || undefined;
  }
  get 10() {
    return this.item(10) || undefined;
  }
  get 11() {
    return this.item(11) || undefined;
  }
  get 12() {
    return this.item(12) || undefined;
  }
  get 13() {
    return this.item(13) || undefined;
  }
  get 14() {
    return this.item(14) || undefined;
  }
  get 15() {
    return this.item(15) || undefined;
  }
  get 16() {
    return this.item(16) || undefined;
  }
  get 17() {
    return this.item(17) || undefined;
  }
  get 18() {
    return this.item(18) || undefined;
  }
  get 19() {
    return this.item(19) || undefined;
  }
  get 20() {
    return this.item(20) || undefined;
  }
  get 21() {
    return this.item(21) || undefined;
  }
  get 22() {
    return this.item(22) || undefined;
  }
  get 23() {
    return this.item(23) || undefined;
  }
  get 24() {
    return this.item(24) || undefined;
  }
  get 25() {
    return this.item(25) || undefined;
  }
  get 26() {
    return this.item(26) || undefined;
  }
  get 27() {
    return this.item(27) || undefined;
  }
  get 28() {
    return this.item(28) || undefined;
  }
  get 29() {
    return this.item(29) || undefined;
  }
  get 30() {
    return this.item(30) || undefined;
  }
  get 31() {
    return this.item(31) || undefined;
  }
  get 32() {
    return this.item(32) || undefined;
  }
  get 33() {
    return this.item(33) || undefined;
  }
  get 34() {
    return this.item(34) || undefined;
  }
  get 35() {
    return this.item(35) || undefined;
  }
  get 36() {
    return this.item(36) || undefined;
  }
  get 37() {
    return this.item(37) || undefined;
  }
  get 38() {
    return this.item(38) || undefined;
  }
  get 39() {
    return this.item(39) || undefined;
  }
  get 40() {
    return this.item(40) || undefined;
  }
  get 41() {
    return this.item(41) || undefined;
  }
  get 42() {
    return this.item(42) || undefined;
  }
  get 43() {
    return this.item(43) || undefined;
  }
  get 44() {
    return this.item(44) || undefined;
  }
  get 45() {
    return this.item(45) || undefined;
  }
  get 46() {
    return this.item(46) || undefined;
  }
  get 47() {
    return this.item(47) || undefined;
  }
  get 48() {
    return this.item(48) || undefined;
  }
  get 49() {
    return this.item(49) || undefined;
  }
  get 50() {
    return this.item(50) || undefined;
  }
  get 51() {
    return this.item(51) || undefined;
  }
  get 52() {
    return this.item(52) || undefined;
  }
  get 53() {
    return this.item(53) || undefined;
  }
  get 54() {
    return this.item(54) || undefined;
  }
  get 55() {
    return this.item(55) || undefined;
  }
  get 56() {
    return this.item(56) || undefined;
  }
  get 57() {
    return this.item(57) || undefined;
  }
  get 58() {
    return this.item(58) || undefined;
  }
  get 59() {
    return this.item(59) || undefined;
  }
  get 60() {
    return this.item(60) || undefined;
  }
  get 61() {
    return this.item(61) || undefined;
  }
  get 62() {
    return this.item(62) || undefined;
  }
  get 63() {
    return this.item(63) || undefined;
  }
  get 64() {
    return this.item(64) || undefined;
  }
  get 65() {
    return this.item(65) || undefined;
  }
  get 66() {
    return this.item(66) || undefined;
  }
  get 67() {
    return this.item(67) || undefined;
  }
  get 68() {
    return this.item(68) || undefined;
  }
  get 69() {
    return this.item(69) || undefined;
  }
  get 70() {
    return this.item(70) || undefined;
  }
  get 71() {
    return this.item(71) || undefined;
  }
  get 72() {
    return this.item(72) || undefined;
  }
  get 73() {
    return this.item(73) || undefined;
  }
  get 74() {
    return this.item(74) || undefined;
  }
  get 75() {
    return this.item(75) || undefined;
  }
  get 76() {
    return this.item(76) || undefined;
  }
  get 77() {
    return this.item(77) || undefined;
  }
  get 78() {
    return this.item(78) || undefined;
  }
  get 79() {
    return this.item(79) || undefined;
  }
  get 80() {
    return this.item(80) || undefined;
  }
  get 81() {
    return this.item(81) || undefined;
  }
  get 82() {
    return this.item(82) || undefined;
  }
  get 83() {
    return this.item(83) || undefined;
  }
  get 84() {
    return this.item(84) || undefined;
  }
  get 85() {
    return this.item(85) || undefined;
  }
  get 86() {
    return this.item(86) || undefined;
  }
  get 87() {
    return this.item(87) || undefined;
  }
  get 88() {
    return this.item(88) || undefined;
  }
  get 89() {
    return this.item(89) || undefined;
  }
  get 90() {
    return this.item(90) || undefined;
  }
  get 91() {
    return this.item(91) || undefined;
  }
  get 92() {
    return this.item(92) || undefined;
  }
  get 93() {
    return this.item(93) || undefined;
  }
  get 94() {
    return this.item(94) || undefined;
  }
  get 95() {
    return this.item(95) || undefined;
  }
  get 96() {
    return this.item(96) || undefined;
  }
  get 97() {
    return this.item(97) || undefined;
  }
  get 98() {
    return this.item(98) || undefined;
  }
  get 99() {
    return this.item(99) || undefined;
  }
  get 100() {
    return this.item(100) || undefined;
  }
  get 101() {
    return this.item(101) || undefined;
  }
  get 102() {
    return this.item(102) || undefined;
  }
  get 103() {
    return this.item(103) || undefined;
  }
  get 104() {
    return this.item(104) || undefined;
  }
  get 105() {
    return this.item(105) || undefined;
  }
  get 106() {
    return this.item(106) || undefined;
  }
  get 107() {
    return this.item(107) || undefined;
  }
  get 108() {
    return this.item(108) || undefined;
  }
  get 109() {
    return this.item(109) || undefined;
  }
  get 110() {
    return this.item(110) || undefined;
  }
  get 111() {
    return this.item(111) || undefined;
  }
  get 112() {
    return this.item(112) || undefined;
  }
  get 113() {
    return this.item(113) || undefined;
  }
  get 114() {
    return this.item(114) || undefined;
  }
  get 115() {
    return this.item(115) || undefined;
  }
  get 116() {
    return this.item(116) || undefined;
  }
  get 117() {
    return this.item(117) || undefined;
  }
  get 118() {
    return this.item(118) || undefined;
  }
  get 119() {
    return this.item(119) || undefined;
  }
  get 120() {
    return this.item(120) || undefined;
  }
  get 121() {
    return this.item(121) || undefined;
  }
  get 122() {
    return this.item(122) || undefined;
  }
  get 123() {
    return this.item(123) || undefined;
  }
  get 124() {
    return this.item(124) || undefined;
  }
  get 125() {
    return this.item(125) || undefined;
  }
  get 126() {
    return this.item(126) || undefined;
  }
  get 127() {
    return this.item(127) || undefined;
  }
  get 128() {
    return this.item(128) || undefined;
  }
  get 129() {
    return this.item(129) || undefined;
  }
  get 130() {
    return this.item(130) || undefined;
  }
  get 131() {
    return this.item(131) || undefined;
  }
  get 132() {
    return this.item(132) || undefined;
  }
  get 133() {
    return this.item(133) || undefined;
  }
  get 134() {
    return this.item(134) || undefined;
  }
  get 135() {
    return this.item(135) || undefined;
  }
  get 136() {
    return this.item(136) || undefined;
  }
  get 137() {
    return this.item(137) || undefined;
  }
  get 138() {
    return this.item(138) || undefined;
  }
  get 139() {
    return this.item(139) || undefined;
  }
  get 140() {
    return this.item(140) || undefined;
  }
  get 141() {
    return this.item(141) || undefined;
  }
  get 142() {
    return this.item(142) || undefined;
  }
  get 143() {
    return this.item(143) || undefined;
  }
  get 144() {
    return this.item(144) || undefined;
  }
  get 145() {
    return this.item(145) || undefined;
  }
  get 146() {
    return this.item(146) || undefined;
  }
  get 147() {
    return this.item(147) || undefined;
  }
  get 148() {
    return this.item(148) || undefined;
  }
  get 149() {
    return this.item(149) || undefined;
  }
  get 150() {
    return this.item(150) || undefined;
  }
  get 151() {
    return this.item(151) || undefined;
  }
  get 152() {
    return this.item(152) || undefined;
  }
  get 153() {
    return this.item(153) || undefined;
  }
  get 154() {
    return this.item(154) || undefined;
  }
  get 155() {
    return this.item(155) || undefined;
  }
  get 156() {
    return this.item(156) || undefined;
  }
  get 157() {
    return this.item(157) || undefined;
  }
  get 158() {
    return this.item(158) || undefined;
  }
  get 159() {
    return this.item(159) || undefined;
  }
  get 160() {
    return this.item(160) || undefined;
  }
  get 161() {
    return this.item(161) || undefined;
  }
  get 162() {
    return this.item(162) || undefined;
  }
  get 163() {
    return this.item(163) || undefined;
  }
  get 164() {
    return this.item(164) || undefined;
  }
  get 165() {
    return this.item(165) || undefined;
  }
  get 166() {
    return this.item(166) || undefined;
  }
  get 167() {
    return this.item(167) || undefined;
  }
  get 168() {
    return this.item(168) || undefined;
  }
  get 169() {
    return this.item(169) || undefined;
  }
  get 170() {
    return this.item(170) || undefined;
  }
  get 171() {
    return this.item(171) || undefined;
  }
  get 172() {
    return this.item(172) || undefined;
  }
  get 173() {
    return this.item(173) || undefined;
  }
  get 174() {
    return this.item(174) || undefined;
  }
  get 175() {
    return this.item(175) || undefined;
  }
  get 176() {
    return this.item(176) || undefined;
  }
  get 177() {
    return this.item(177) || undefined;
  }
  get 178() {
    return this.item(178) || undefined;
  }
  get 179() {
    return this.item(179) || undefined;
  }
  get 180() {
    return this.item(180) || undefined;
  }
  get 181() {
    return this.item(181) || undefined;
  }
  get 182() {
    return this.item(182) || undefined;
  }
  get 183() {
    return this.item(183) || undefined;
  }
  get 184() {
    return this.item(184) || undefined;
  }
  get 185() {
    return this.item(185) || undefined;
  }
  get 186() {
    return this.item(186) || undefined;
  }
  get 187() {
    return this.item(187) || undefined;
  }
  get 188() {
    return this.item(188) || undefined;
  }
  get 189() {
    return this.item(189) || undefined;
  }
  get 190() {
    return this.item(190) || undefined;
  }
  get 191() {
    return this.item(191) || undefined;
  }
  get 192() {
    return this.item(192) || undefined;
  }
  get 193() {
    return this.item(193) || undefined;
  }
  get 194() {
    return this.item(194) || undefined;
  }
  get 195() {
    return this.item(195) || undefined;
  }
  get 196() {
    return this.item(196) || undefined;
  }
  get 197() {
    return this.item(197) || undefined;
  }
  get 198() {
    return this.item(198) || undefined;
  }
  get 199() {
    return this.item(199) || undefined;
  }
  get 200() {
    return this.item(200) || undefined;
  }
  get 201() {
    return this.item(201) || undefined;
  }
  get 202() {
    return this.item(202) || undefined;
  }
  get 203() {
    return this.item(203) || undefined;
  }
  get 204() {
    return this.item(204) || undefined;
  }
  get 205() {
    return this.item(205) || undefined;
  }
  get 206() {
    return this.item(206) || undefined;
  }
  get 207() {
    return this.item(207) || undefined;
  }
  get 208() {
    return this.item(208) || undefined;
  }
  get 209() {
    return this.item(209) || undefined;
  }
  get 210() {
    return this.item(210) || undefined;
  }
  get 211() {
    return this.item(211) || undefined;
  }
  get 212() {
    return this.item(212) || undefined;
  }
  get 213() {
    return this.item(213) || undefined;
  }
  get 214() {
    return this.item(214) || undefined;
  }
  get 215() {
    return this.item(215) || undefined;
  }
  get 216() {
    return this.item(216) || undefined;
  }
  get 217() {
    return this.item(217) || undefined;
  }
  get 218() {
    return this.item(218) || undefined;
  }
  get 219() {
    return this.item(219) || undefined;
  }
  get 220() {
    return this.item(220) || undefined;
  }
  get 221() {
    return this.item(221) || undefined;
  }
  get 222() {
    return this.item(222) || undefined;
  }
  get 223() {
    return this.item(223) || undefined;
  }
  get 224() {
    return this.item(224) || undefined;
  }
  get 225() {
    return this.item(225) || undefined;
  }
  get 226() {
    return this.item(226) || undefined;
  }
  get 227() {
    return this.item(227) || undefined;
  }
  get 228() {
    return this.item(228) || undefined;
  }
  get 229() {
    return this.item(229) || undefined;
  }
  get 230() {
    return this.item(230) || undefined;
  }
  get 231() {
    return this.item(231) || undefined;
  }
  get 232() {
    return this.item(232) || undefined;
  }
  get 233() {
    return this.item(233) || undefined;
  }
  get 234() {
    return this.item(234) || undefined;
  }
  get 235() {
    return this.item(235) || undefined;
  }
  get 236() {
    return this.item(236) || undefined;
  }
  get 237() {
    return this.item(237) || undefined;
  }
  get 238() {
    return this.item(238) || undefined;
  }
  get 239() {
    return this.item(239) || undefined;
  }
  get 240() {
    return this.item(240) || undefined;
  }
  get 241() {
    return this.item(241) || undefined;
  }
  get 242() {
    return this.item(242) || undefined;
  }
  get 243() {
    return this.item(243) || undefined;
  }
  get 244() {
    return this.item(244) || undefined;
  }
  get 245() {
    return this.item(245) || undefined;
  }
  get 246() {
    return this.item(246) || undefined;
  }
  get 247() {
    return this.item(247) || undefined;
  }
  get 248() {
    return this.item(248) || undefined;
  }
  get 249() {
    return this.item(249) || undefined;
  }
  get 250() {
    return this.item(250) || undefined;
  }
  get 251() {
    return this.item(251) || undefined;
  }
  get 252() {
    return this.item(252) || undefined;
  }
  get 253() {
    return this.item(253) || undefined;
  }
  get 254() {
    return this.item(254) || undefined;
  }
  get 255() {
    return this.item(255) || undefined;
  }
  get 256() {
    return this.item(256) || undefined;
  }
  get 257() {
    return this.item(257) || undefined;
  }
  get 258() {
    return this.item(258) || undefined;
  }
  get 259() {
    return this.item(259) || undefined;
  }
  get 260() {
    return this.item(260) || undefined;
  }
  get 261() {
    return this.item(261) || undefined;
  }
  get 262() {
    return this.item(262) || undefined;
  }
  get 263() {
    return this.item(263) || undefined;
  }
  get 264() {
    return this.item(264) || undefined;
  }
  get 265() {
    return this.item(265) || undefined;
  }
  get 266() {
    return this.item(266) || undefined;
  }
  get 267() {
    return this.item(267) || undefined;
  }
  get 268() {
    return this.item(268) || undefined;
  }
  get 269() {
    return this.item(269) || undefined;
  }
  get 270() {
    return this.item(270) || undefined;
  }
  get 271() {
    return this.item(271) || undefined;
  }
  get 272() {
    return this.item(272) || undefined;
  }
  get 273() {
    return this.item(273) || undefined;
  }
  get 274() {
    return this.item(274) || undefined;
  }
  get 275() {
    return this.item(275) || undefined;
  }
  get 276() {
    return this.item(276) || undefined;
  }
  get 277() {
    return this.item(277) || undefined;
  }
  get 278() {
    return this.item(278) || undefined;
  }
  get 279() {
    return this.item(279) || undefined;
  }
  get 280() {
    return this.item(280) || undefined;
  }
  get 281() {
    return this.item(281) || undefined;
  }
  get 282() {
    return this.item(282) || undefined;
  }
  get 283() {
    return this.item(283) || undefined;
  }
  get 284() {
    return this.item(284) || undefined;
  }
  get 285() {
    return this.item(285) || undefined;
  }
  get 286() {
    return this.item(286) || undefined;
  }
  get 287() {
    return this.item(287) || undefined;
  }
  get 288() {
    return this.item(288) || undefined;
  }
  get 289() {
    return this.item(289) || undefined;
  }
  get 290() {
    return this.item(290) || undefined;
  }
  get 291() {
    return this.item(291) || undefined;
  }
  get 292() {
    return this.item(292) || undefined;
  }
  get 293() {
    return this.item(293) || undefined;
  }
  get 294() {
    return this.item(294) || undefined;
  }
  get 295() {
    return this.item(295) || undefined;
  }
  get 296() {
    return this.item(296) || undefined;
  }
  get 297() {
    return this.item(297) || undefined;
  }
  get 298() {
    return this.item(298) || undefined;
  }
  get 299() {
    return this.item(299) || undefined;
  }
  get 300() {
    return this.item(300) || undefined;
  }
  get 301() {
    return this.item(301) || undefined;
  }
  get 302() {
    return this.item(302) || undefined;
  }
  get 303() {
    return this.item(303) || undefined;
  }
  get 304() {
    return this.item(304) || undefined;
  }
  get 305() {
    return this.item(305) || undefined;
  }
  get 306() {
    return this.item(306) || undefined;
  }
  get 307() {
    return this.item(307) || undefined;
  }
  get 308() {
    return this.item(308) || undefined;
  }
  get 309() {
    return this.item(309) || undefined;
  }
  get 310() {
    return this.item(310) || undefined;
  }
  get 311() {
    return this.item(311) || undefined;
  }
  get 312() {
    return this.item(312) || undefined;
  }
  get 313() {
    return this.item(313) || undefined;
  }
  get 314() {
    return this.item(314) || undefined;
  }
  get 315() {
    return this.item(315) || undefined;
  }
  get 316() {
    return this.item(316) || undefined;
  }
  get 317() {
    return this.item(317) || undefined;
  }
  get 318() {
    return this.item(318) || undefined;
  }
  get 319() {
    return this.item(319) || undefined;
  }
  get 320() {
    return this.item(320) || undefined;
  }
  get 321() {
    return this.item(321) || undefined;
  }
  get 322() {
    return this.item(322) || undefined;
  }
  get 323() {
    return this.item(323) || undefined;
  }
  get 324() {
    return this.item(324) || undefined;
  }
  get 325() {
    return this.item(325) || undefined;
  }
  get 326() {
    return this.item(326) || undefined;
  }
  get 327() {
    return this.item(327) || undefined;
  }
  get 328() {
    return this.item(328) || undefined;
  }
  get 329() {
    return this.item(329) || undefined;
  }
  get 330() {
    return this.item(330) || undefined;
  }
  get 331() {
    return this.item(331) || undefined;
  }
  get 332() {
    return this.item(332) || undefined;
  }
  get 333() {
    return this.item(333) || undefined;
  }
  get 334() {
    return this.item(334) || undefined;
  }
  get 335() {
    return this.item(335) || undefined;
  }
  get 336() {
    return this.item(336) || undefined;
  }
  get 337() {
    return this.item(337) || undefined;
  }
  get 338() {
    return this.item(338) || undefined;
  }
  get 339() {
    return this.item(339) || undefined;
  }
  get 340() {
    return this.item(340) || undefined;
  }
  get 341() {
    return this.item(341) || undefined;
  }
  get 342() {
    return this.item(342) || undefined;
  }
  get 343() {
    return this.item(343) || undefined;
  }
  get 344() {
    return this.item(344) || undefined;
  }
  get 345() {
    return this.item(345) || undefined;
  }
  get 346() {
    return this.item(346) || undefined;
  }
  get 347() {
    return this.item(347) || undefined;
  }
  get 348() {
    return this.item(348) || undefined;
  }
  get 349() {
    return this.item(349) || undefined;
  }
  get 350() {
    return this.item(350) || undefined;
  }
  get 351() {
    return this.item(351) || undefined;
  }
  get 352() {
    return this.item(352) || undefined;
  }
  get 353() {
    return this.item(353) || undefined;
  }
  get 354() {
    return this.item(354) || undefined;
  }
  get 355() {
    return this.item(355) || undefined;
  }
  get 356() {
    return this.item(356) || undefined;
  }
  get 357() {
    return this.item(357) || undefined;
  }
  get 358() {
    return this.item(358) || undefined;
  }
  get 359() {
    return this.item(359) || undefined;
  }
  get 360() {
    return this.item(360) || undefined;
  }
  get 361() {
    return this.item(361) || undefined;
  }
  get 362() {
    return this.item(362) || undefined;
  }
  get 363() {
    return this.item(363) || undefined;
  }
  get 364() {
    return this.item(364) || undefined;
  }
  get 365() {
    return this.item(365) || undefined;
  }
  get 366() {
    return this.item(366) || undefined;
  }
  get 367() {
    return this.item(367) || undefined;
  }
  get 368() {
    return this.item(368) || undefined;
  }
  get 369() {
    return this.item(369) || undefined;
  }
  get 370() {
    return this.item(370) || undefined;
  }
  get 371() {
    return this.item(371) || undefined;
  }
  get 372() {
    return this.item(372) || undefined;
  }
  get 373() {
    return this.item(373) || undefined;
  }
  get 374() {
    return this.item(374) || undefined;
  }
  get 375() {
    return this.item(375) || undefined;
  }
  get 376() {
    return this.item(376) || undefined;
  }
  get 377() {
    return this.item(377) || undefined;
  }
  get 378() {
    return this.item(378) || undefined;
  }
  get 379() {
    return this.item(379) || undefined;
  }
  get 380() {
    return this.item(380) || undefined;
  }
  get 381() {
    return this.item(381) || undefined;
  }
  get 382() {
    return this.item(382) || undefined;
  }
  get 383() {
    return this.item(383) || undefined;
  }
  get 384() {
    return this.item(384) || undefined;
  }
  get 385() {
    return this.item(385) || undefined;
  }
  get 386() {
    return this.item(386) || undefined;
  }
  get 387() {
    return this.item(387) || undefined;
  }
  get 388() {
    return this.item(388) || undefined;
  }
  get 389() {
    return this.item(389) || undefined;
  }
  get 390() {
    return this.item(390) || undefined;
  }
  get 391() {
    return this.item(391) || undefined;
  }
  get 392() {
    return this.item(392) || undefined;
  }
  get 393() {
    return this.item(393) || undefined;
  }
  get accentColor() {
    return this.getPropertyValue("accent-color");
  }
  set accentColor(value2) {
    this.setProperty("accent-color", value2);
  }
  get appRegion() {
    return this.getPropertyValue("app-region");
  }
  set appRegion(value2) {
    this.setProperty("app-region", value2);
  }
  get alignContent() {
    return this.getPropertyValue("align-content");
  }
  set alignContent(value2) {
    this.setProperty("align-content", value2);
  }
  get alignItems() {
    return this.getPropertyValue("align-items");
  }
  set alignItems(value2) {
    this.setProperty("align-items", value2);
  }
  get alignSelf() {
    return this.getPropertyValue("align-self");
  }
  set alignSelf(value2) {
    this.setProperty("align-self", value2);
  }
  get alignmentBaseline() {
    return this.getPropertyValue("alignment-baseline");
  }
  set alignmentBaseline(value2) {
    this.setProperty("alignment-baseline", value2);
  }
  get all() {
    return this.getPropertyValue("all");
  }
  set all(value2) {
    this.setProperty("all", value2);
  }
  get animation() {
    return this.getPropertyValue("animation");
  }
  set animation(value2) {
    this.setProperty("animation", value2);
  }
  get animationDelay() {
    return this.getPropertyValue("animation-delay");
  }
  set animationDelay(value2) {
    this.setProperty("animation-delay", value2);
  }
  get animationDirection() {
    return this.getPropertyValue("animation-direction");
  }
  set animationDirection(value2) {
    this.setProperty("animation-direction", value2);
  }
  get animationDuration() {
    return this.getPropertyValue("animation-duration");
  }
  set animationDuration(value2) {
    this.setProperty("animation-duration", value2);
  }
  get animationFillMode() {
    return this.getPropertyValue("animation-fill-mode");
  }
  set animationFillMode(value2) {
    this.setProperty("animation-fill-mode", value2);
  }
  get animationIterationCount() {
    return this.getPropertyValue("animation-iteration-count");
  }
  set animationIterationCount(value2) {
    this.setProperty("animation-iteration-count", value2);
  }
  get animationName() {
    return this.getPropertyValue("animation-name");
  }
  set animationName(value2) {
    this.setProperty("animation-name", value2);
  }
  get animationPlayState() {
    return this.getPropertyValue("animation-play-state");
  }
  set animationPlayState(value2) {
    this.setProperty("animation-play-state", value2);
  }
  get animationTimingFunction() {
    return this.getPropertyValue("animation-timing-function");
  }
  set animationTimingFunction(value2) {
    this.setProperty("animation-timing-function", value2);
  }
  get appearance() {
    return this.getPropertyValue("appearance");
  }
  set appearance(value2) {
    this.setProperty("appearance", value2);
  }
  get backdropFilter() {
    return this.getPropertyValue("backdrop-filter");
  }
  set backdropFilter(value2) {
    this.setProperty("backdrop-filter", value2);
  }
  get backfaceVisibility() {
    return this.getPropertyValue("backface-visibility");
  }
  set backfaceVisibility(value2) {
    this.setProperty("backface-visibility", value2);
  }
  get background() {
    return this.getPropertyValue("background");
  }
  set background(value2) {
    this.setProperty("background", value2);
  }
  get backgroundAttachment() {
    return this.getPropertyValue("background-attachment");
  }
  set backgroundAttachment(value2) {
    this.setProperty("background-attachment", value2);
  }
  get backgroundBlendMode() {
    return this.getPropertyValue("background-blend-mode");
  }
  set backgroundBlendMode(value2) {
    this.setProperty("background-blend-mode", value2);
  }
  get backgroundClip() {
    return this.getPropertyValue("background-clip");
  }
  set backgroundClip(value2) {
    this.setProperty("background-clip", value2);
  }
  get backgroundColor() {
    return this.getPropertyValue("background-color");
  }
  set backgroundColor(value2) {
    this.setProperty("background-color", value2);
  }
  get backgroundImage() {
    return this.getPropertyValue("background-image");
  }
  set backgroundImage(value2) {
    this.setProperty("background-image", value2);
  }
  get backgroundOrigin() {
    return this.getPropertyValue("background-origin");
  }
  set backgroundOrigin(value2) {
    this.setProperty("background-origin", value2);
  }
  get backgroundPosition() {
    return this.getPropertyValue("background-position");
  }
  set backgroundPosition(value2) {
    this.setProperty("background-position", value2);
  }
  get backgroundPositionX() {
    return this.getPropertyValue("background-position-x");
  }
  set backgroundPositionX(value2) {
    this.setProperty("background-position-x", value2);
  }
  get backgroundPositionY() {
    return this.getPropertyValue("background-position-y");
  }
  set backgroundPositionY(value2) {
    this.setProperty("background-position-y", value2);
  }
  get backgroundRepeat() {
    return this.getPropertyValue("background-repeat");
  }
  set backgroundRepeat(value2) {
    this.setProperty("background-repeat", value2);
  }
  get backgroundRepeatX() {
    return this.getPropertyValue("background-repeat-x");
  }
  set backgroundRepeatX(value2) {
    this.setProperty("background-repeat-x", value2);
  }
  get backgroundRepeatY() {
    return this.getPropertyValue("background-repeat-y");
  }
  set backgroundRepeatY(value2) {
    this.setProperty("background-repeat-y", value2);
  }
  get backgroundSize() {
    return this.getPropertyValue("background-size");
  }
  set backgroundSize(value2) {
    this.setProperty("background-size", value2);
  }
  get baselineShift() {
    return this.getPropertyValue("baseline-shift");
  }
  set baselineShift(value2) {
    this.setProperty("baseline-shift", value2);
  }
  get blockSize() {
    return this.getPropertyValue("block-size");
  }
  set blockSize(value2) {
    this.setProperty("block-size", value2);
  }
  get border() {
    return this.getPropertyValue("border");
  }
  set border(value2) {
    this.setProperty("border", value2);
  }
  get borderBlockEnd() {
    return this.getPropertyValue("border-block-end");
  }
  set borderBlockEnd(value2) {
    this.setProperty("border-block-end", value2);
  }
  get borderBlockEndColor() {
    return this.getPropertyValue("border-block-end-color");
  }
  set borderBlockEndColor(value2) {
    this.setProperty("border-block-end-color", value2);
  }
  get borderBlockEndStyle() {
    return this.getPropertyValue("border-block-end-style");
  }
  set borderBlockEndStyle(value2) {
    this.setProperty("border-block-end-style", value2);
  }
  get borderBlockEndWidth() {
    return this.getPropertyValue("border-block-end-width");
  }
  set borderBlockEndWidth(value2) {
    this.setProperty("border-block-end-width", value2);
  }
  get borderBlockStart() {
    return this.getPropertyValue("border-block-start");
  }
  set borderBlockStart(value2) {
    this.setProperty("border-block-start", value2);
  }
  get borderBlockStartColor() {
    return this.getPropertyValue("border-block-start-color");
  }
  set borderBlockStartColor(value2) {
    this.setProperty("border-block-start-color", value2);
  }
  get borderBlockStartStyle() {
    return this.getPropertyValue("border-block-start-style");
  }
  set borderBlockStartStyle(value2) {
    this.setProperty("border-block-start-style", value2);
  }
  get borderBlockStartWidth() {
    return this.getPropertyValue("border-block-start-width");
  }
  set borderBlockStartWidth(value2) {
    this.setProperty("border-block-start-width", value2);
  }
  get borderBottom() {
    return this.getPropertyValue("border-bottom");
  }
  set borderBottom(value2) {
    this.setProperty("border-bottom", value2);
  }
  get borderBottomColor() {
    return this.getPropertyValue("border-bottom-color");
  }
  set borderBottomColor(value2) {
    this.setProperty("border-bottom-color", value2);
  }
  get borderBottomLeftRadius() {
    return this.getPropertyValue("border-bottom-left-radius");
  }
  set borderBottomLeftRadius(value2) {
    this.setProperty("border-bottom-left-radius", value2);
  }
  get borderBottomRightRadius() {
    return this.getPropertyValue("border-bottom-right-radius");
  }
  set borderBottomRightRadius(value2) {
    this.setProperty("border-bottom-right-radius", value2);
  }
  get borderBottomStyle() {
    return this.getPropertyValue("border-bottom-style");
  }
  set borderBottomStyle(value2) {
    this.setProperty("border-bottom-style", value2);
  }
  get borderBottomWidth() {
    return this.getPropertyValue("border-bottom-width");
  }
  set borderBottomWidth(value2) {
    this.setProperty("border-bottom-width", value2);
  }
  get borderCollapse() {
    return this.getPropertyValue("border-collapse");
  }
  set borderCollapse(value2) {
    this.setProperty("border-collapse", value2);
  }
  get borderColor() {
    return this.getPropertyValue("border-color");
  }
  set borderColor(value2) {
    this.setProperty("border-color", value2);
  }
  get borderImage() {
    return this.getPropertyValue("border-image");
  }
  set borderImage(value2) {
    this.setProperty("border-image", value2);
  }
  get borderImageOutset() {
    return this.getPropertyValue("border-image-outset");
  }
  set borderImageOutset(value2) {
    this.setProperty("border-image-outset", value2);
  }
  get borderImageRepeat() {
    return this.getPropertyValue("border-image-repeat");
  }
  set borderImageRepeat(value2) {
    this.setProperty("border-image-repeat", value2);
  }
  get borderImageSlice() {
    return this.getPropertyValue("border-image-slice");
  }
  set borderImageSlice(value2) {
    this.setProperty("border-image-slice", value2);
  }
  get borderImageSource() {
    return this.getPropertyValue("border-image-source");
  }
  set borderImageSource(value2) {
    this.setProperty("border-image-source", value2);
  }
  get borderImageWidth() {
    return this.getPropertyValue("border-image-width");
  }
  set borderImageWidth(value2) {
    this.setProperty("border-image-width", value2);
  }
  get borderInlineEnd() {
    return this.getPropertyValue("border-inline-end");
  }
  set borderInlineEnd(value2) {
    this.setProperty("border-inline-end", value2);
  }
  get borderInlineEndColor() {
    return this.getPropertyValue("border-inline-end-color");
  }
  set borderInlineEndColor(value2) {
    this.setProperty("border-inline-end-color", value2);
  }
  get borderInlineEndStyle() {
    return this.getPropertyValue("border-inline-end-style");
  }
  set borderInlineEndStyle(value2) {
    this.setProperty("border-inline-end-style", value2);
  }
  get borderInlineEndWidth() {
    return this.getPropertyValue("border-inline-end-width");
  }
  set borderInlineEndWidth(value2) {
    this.setProperty("border-inline-end-width", value2);
  }
  get borderInlineStart() {
    return this.getPropertyValue("border-inline-start");
  }
  set borderInlineStart(value2) {
    this.setProperty("border-inline-start", value2);
  }
  get borderInlineStartColor() {
    return this.getPropertyValue("border-inline-start-color");
  }
  set borderInlineStartColor(value2) {
    this.setProperty("border-inline-start-color", value2);
  }
  get borderInlineStartStyle() {
    return this.getPropertyValue("border-inline-start-style");
  }
  set borderInlineStartStyle(value2) {
    this.setProperty("border-inline-start-style", value2);
  }
  get borderInlineStartWidth() {
    return this.getPropertyValue("border-inline-start-width");
  }
  set borderInlineStartWidth(value2) {
    this.setProperty("border-inline-start-width", value2);
  }
  get borderLeft() {
    return this.getPropertyValue("border-left");
  }
  set borderLeft(value2) {
    this.setProperty("border-left", value2);
  }
  get borderLeftColor() {
    return this.getPropertyValue("border-left-color");
  }
  set borderLeftColor(value2) {
    this.setProperty("border-left-color", value2);
  }
  get borderLeftStyle() {
    return this.getPropertyValue("border-left-style");
  }
  set borderLeftStyle(value2) {
    this.setProperty("border-left-style", value2);
  }
  get borderLeftWidth() {
    return this.getPropertyValue("border-left-width");
  }
  set borderLeftWidth(value2) {
    this.setProperty("border-left-width", value2);
  }
  get borderRadius() {
    return this.getPropertyValue("border-radius");
  }
  set borderRadius(value2) {
    this.setProperty("border-radius", value2);
  }
  get borderRight() {
    return this.getPropertyValue("border-right");
  }
  set borderRight(value2) {
    this.setProperty("border-right", value2);
  }
  get borderRightColor() {
    return this.getPropertyValue("border-right-color");
  }
  set borderRightColor(value2) {
    this.setProperty("border-right-color", value2);
  }
  get borderRightStyle() {
    return this.getPropertyValue("border-right-style");
  }
  set borderRightStyle(value2) {
    this.setProperty("border-right-style", value2);
  }
  get borderRightWidth() {
    return this.getPropertyValue("border-right-width");
  }
  set borderRightWidth(value2) {
    this.setProperty("border-right-width", value2);
  }
  get borderSpacing() {
    return this.getPropertyValue("border-spacing");
  }
  set borderSpacing(value2) {
    this.setProperty("border-spacing", value2);
  }
  get borderStyle() {
    return this.getPropertyValue("border-style");
  }
  set borderStyle(value2) {
    this.setProperty("border-style", value2);
  }
  get borderTop() {
    return this.getPropertyValue("border-top");
  }
  set borderTop(value2) {
    this.setProperty("border-top", value2);
  }
  get borderTopColor() {
    return this.getPropertyValue("border-top-color");
  }
  set borderTopColor(value2) {
    this.setProperty("border-top-color", value2);
  }
  get borderTopLeftRadius() {
    return this.getPropertyValue("border-top-left-radius");
  }
  set borderTopLeftRadius(value2) {
    this.setProperty("border-top-left-radius", value2);
  }
  get borderTopRightRadius() {
    return this.getPropertyValue("border-top-right-radius");
  }
  set borderTopRightRadius(value2) {
    this.setProperty("border-top-right-radius", value2);
  }
  get borderTopStyle() {
    return this.getPropertyValue("border-top-style");
  }
  set borderTopStyle(value2) {
    this.setProperty("border-top-style", value2);
  }
  get borderTopWidth() {
    return this.getPropertyValue("border-top-width");
  }
  set borderTopWidth(value2) {
    this.setProperty("border-top-width", value2);
  }
  get borderWidth() {
    return this.getPropertyValue("border-width");
  }
  set borderWidth(value2) {
    this.setProperty("border-width", value2);
  }
  get borderEndEndRadius() {
    return this.getPropertyValue("border-end-end-radius");
  }
  set borderEndEndRadius(value2) {
    this.setProperty("border-end-end-radius", value2);
  }
  get borderEndStartRadius() {
    return this.getPropertyValue("border-end-start-radius");
  }
  set borderEndStartRadius(value2) {
    this.setProperty("border-end-start-radius", value2);
  }
  get borderStartEndRadius() {
    return this.getPropertyValue("border-start-end-radius");
  }
  set borderStartEndRadius(value2) {
    this.setProperty("border-start-end-radius", value2);
  }
  get borderStartStartRadius() {
    return this.getPropertyValue("border-start-start-radius");
  }
  set borderStartStartRadius(value2) {
    this.setProperty("border-start-start-radius", value2);
  }
  get bottom() {
    return this.getPropertyValue("bottom");
  }
  set bottom(value2) {
    this.setProperty("bottom", value2);
  }
  get boxShadow() {
    return this.getPropertyValue("box-shadow");
  }
  set boxShadow(value2) {
    this.setProperty("box-shadow", value2);
  }
  get boxSizing() {
    return this.getPropertyValue("box-sizing");
  }
  set boxSizing(value2) {
    this.setProperty("box-sizing", value2);
  }
  get breakAfter() {
    return this.getPropertyValue("break-after");
  }
  set breakAfter(value2) {
    this.setProperty("break-after", value2);
  }
  get breakBefore() {
    return this.getPropertyValue("break-before");
  }
  set breakBefore(value2) {
    this.setProperty("break-before", value2);
  }
  get breakInside() {
    return this.getPropertyValue("break-inside");
  }
  set breakInside(value2) {
    this.setProperty("break-inside", value2);
  }
  get bufferedRendering() {
    return this.getPropertyValue("buffered-rendering");
  }
  set bufferedRendering(value2) {
    this.setProperty("buffered-rendering", value2);
  }
  get captionSide() {
    return this.getPropertyValue("caption-side");
  }
  set captionSide(value2) {
    this.setProperty("caption-side", value2);
  }
  get caretColor() {
    return this.getPropertyValue("caret-color");
  }
  set caretColor(value2) {
    this.setProperty("caret-color", value2);
  }
  get clear() {
    return this.getPropertyValue("clear");
  }
  set clear(value2) {
    this.setProperty("clear", value2);
  }
  get clip() {
    return this.getPropertyValue("clip");
  }
  set clip(value2) {
    this.setProperty("clip", value2);
  }
  get clipPath() {
    return this.getPropertyValue("clip-path");
  }
  set clipPath(value2) {
    this.setProperty("clip-path", value2);
  }
  get clipRule() {
    return this.getPropertyValue("clip-rule");
  }
  set clipRule(value2) {
    this.setProperty("clip-rule", value2);
  }
  get color() {
    return this.getPropertyValue("color");
  }
  set color(value2) {
    this.setProperty("color", value2);
  }
  get colorInterpolation() {
    return this.getPropertyValue("color-interpolation");
  }
  set colorInterpolation(value2) {
    this.setProperty("color-interpolation", value2);
  }
  get colorInterpolationFilters() {
    return this.getPropertyValue("color-interpolation-filters");
  }
  set colorInterpolationFilters(value2) {
    this.setProperty("color-interpolation-filters", value2);
  }
  get colorRendering() {
    return this.getPropertyValue("color-rendering");
  }
  set colorRendering(value2) {
    this.setProperty("color-rendering", value2);
  }
  get colorScheme() {
    return this.getPropertyValue("color-scheme");
  }
  set colorScheme(value2) {
    this.setProperty("color-scheme", value2);
  }
  get columnCount() {
    return this.getPropertyValue("column-count");
  }
  set columnCount(value2) {
    this.setProperty("column-count", value2);
  }
  get columnFill() {
    return this.getPropertyValue("column-fill");
  }
  set columnFill(value2) {
    this.setProperty("column-fill", value2);
  }
  get columnGap() {
    return this.getPropertyValue("column-gap");
  }
  set columnGap(value2) {
    this.setProperty("column-gap", value2);
  }
  get columnRule() {
    return this.getPropertyValue("column-rule");
  }
  set columnRule(value2) {
    this.setProperty("column-rule", value2);
  }
  get columnRuleColor() {
    return this.getPropertyValue("column-rule-color");
  }
  set columnRuleColor(value2) {
    this.setProperty("column-rule-color", value2);
  }
  get columnRuleStyle() {
    return this.getPropertyValue("column-rule-style");
  }
  set columnRuleStyle(value2) {
    this.setProperty("column-rule-style", value2);
  }
  get columnRuleWidth() {
    return this.getPropertyValue("column-rule-width");
  }
  set columnRuleWidth(value2) {
    this.setProperty("column-rule-width", value2);
  }
  get columnSpan() {
    return this.getPropertyValue("column-span");
  }
  set columnSpan(value2) {
    this.setProperty("column-span", value2);
  }
  get columnWidth() {
    return this.getPropertyValue("column-width");
  }
  set columnWidth(value2) {
    this.setProperty("column-width", value2);
  }
  get columns() {
    return this.getPropertyValue("columns");
  }
  set columns(value2) {
    this.setProperty("columns", value2);
  }
  get contain() {
    return this.getPropertyValue("contain");
  }
  set contain(value2) {
    this.setProperty("contain", value2);
  }
  get containIntrinsicSize() {
    return this.getPropertyValue("contain-intrinsic-size");
  }
  set containIntrinsicSize(value2) {
    this.setProperty("contain-intrinsic-size", value2);
  }
  get content() {
    return this.getPropertyValue("content");
  }
  set content(value2) {
    this.setProperty("content", value2);
  }
  get contentVisibility() {
    return this.getPropertyValue("content-visibility");
  }
  set contentVisibility(value2) {
    this.setProperty("content-visibility", value2);
  }
  get counterIncrement() {
    return this.getPropertyValue("counter-increment");
  }
  set counterIncrement(value2) {
    this.setProperty("counter-increment", value2);
  }
  get counterReset() {
    return this.getPropertyValue("counter-reset");
  }
  set counterReset(value2) {
    this.setProperty("counter-reset", value2);
  }
  get counterSet() {
    return this.getPropertyValue("counter-set");
  }
  set counterSet(value2) {
    this.setProperty("counter-set", value2);
  }
  get containIntrinsicBlockSize() {
    return this.getPropertyValue("contain-intrinsic-block-size");
  }
  set containIntrinsicBlockSize(value2) {
    this.setProperty("contain-intrinsic-block-size", value2);
  }
  get containIntrinsicHeight() {
    return this.getPropertyValue("contain-intrinsic-height");
  }
  set containIntrinsicHeight(value2) {
    this.setProperty("contain-intrinsic-height", value2);
  }
  get containIntrinsicInlineSize() {
    return this.getPropertyValue("contain-intrinsic-inline-size");
  }
  set containIntrinsicInlineSize(value2) {
    this.setProperty("contain-intrinsic-inline-size", value2);
  }
  get containIntrinsicWidth() {
    return this.getPropertyValue("contain-intrinsic-width");
  }
  set containIntrinsicWidth(value2) {
    this.setProperty("contain-intrinsic-width", value2);
  }
  get cssFloat() {
    return this.getPropertyValue("css-float");
  }
  set cssFloat(value2) {
    this.setProperty("css-float", value2);
  }
  get cursor() {
    return this.getPropertyValue("cursor");
  }
  set cursor(value2) {
    this.setProperty("cursor", value2);
  }
  get cx() {
    return this.getPropertyValue("cx");
  }
  set cx(value2) {
    this.setProperty("cx", value2);
  }
  get cy() {
    return this.getPropertyValue("cy");
  }
  set cy(value2) {
    this.setProperty("cy", value2);
  }
  get d() {
    return this.getPropertyValue("d");
  }
  set d(value2) {
    this.setProperty("d", value2);
  }
  get direction() {
    return this.getPropertyValue("direction");
  }
  set direction(value2) {
    this.setProperty("direction", value2);
  }
  get display() {
    return this.getPropertyValue("display");
  }
  set display(value2) {
    this.setProperty("display", value2);
  }
  get dominantBaseline() {
    return this.getPropertyValue("dominant-baseline");
  }
  set dominantBaseline(value2) {
    this.setProperty("dominant-baseline", value2);
  }
  get emptyCells() {
    return this.getPropertyValue("empty-cells");
  }
  set emptyCells(value2) {
    this.setProperty("empty-cells", value2);
  }
  get fill() {
    return this.getPropertyValue("fill");
  }
  set fill(value2) {
    this.setProperty("fill", value2);
  }
  get fillOpacity() {
    return this.getPropertyValue("fill-opacity");
  }
  set fillOpacity(value2) {
    this.setProperty("fill-opacity", value2);
  }
  get fillRule() {
    return this.getPropertyValue("fill-rule");
  }
  set fillRule(value2) {
    this.setProperty("fill-rule", value2);
  }
  get filter() {
    return this.getPropertyValue("filter");
  }
  set filter(value2) {
    this.setProperty("filter", value2);
  }
  get flex() {
    return this.getPropertyValue("flex");
  }
  set flex(value2) {
    this.setProperty("flex", value2);
  }
  get flexBasis() {
    return this.getPropertyValue("flex-basis");
  }
  set flexBasis(value2) {
    this.setProperty("flex-basis", value2);
  }
  get flexDirection() {
    return this.getPropertyValue("flex-direction");
  }
  set flexDirection(value2) {
    this.setProperty("flex-direction", value2);
  }
  get flexFlow() {
    return this.getPropertyValue("flex-flow");
  }
  set flexFlow(value2) {
    this.setProperty("flex-flow", value2);
  }
  get flexGrow() {
    return this.getPropertyValue("flex-grow");
  }
  set flexGrow(value2) {
    this.setProperty("flex-grow", value2);
  }
  get flexShrink() {
    return this.getPropertyValue("flex-shrink");
  }
  set flexShrink(value2) {
    this.setProperty("flex-shrink", value2);
  }
  get flexWrap() {
    return this.getPropertyValue("flex-wrap");
  }
  set flexWrap(value2) {
    this.setProperty("flex-wrap", value2);
  }
  get float() {
    return this.getPropertyValue("float");
  }
  set float(value2) {
    this.setProperty("float", value2);
  }
  get floodColor() {
    return this.getPropertyValue("flood-color");
  }
  set floodColor(value2) {
    this.setProperty("flood-color", value2);
  }
  get floodOpacity() {
    return this.getPropertyValue("flood-opacity");
  }
  set floodOpacity(value2) {
    this.setProperty("flood-opacity", value2);
  }
  get font() {
    return this.getPropertyValue("font");
  }
  set font(value2) {
    this.setProperty("font", value2);
  }
  get fontDisplay() {
    return this.getPropertyValue("font-display");
  }
  set fontDisplay(value2) {
    this.setProperty("font-display", value2);
  }
  get fontFamily() {
    return this.getPropertyValue("font-family");
  }
  set fontFamily(value2) {
    this.setProperty("font-family", value2);
  }
  get fontFeatureSettings() {
    return this.getPropertyValue("font-feature-settings");
  }
  set fontFeatureSettings(value2) {
    this.setProperty("font-feature-settings", value2);
  }
  get fontKerning() {
    return this.getPropertyValue("font-kerning");
  }
  set fontKerning(value2) {
    this.setProperty("font-kerning", value2);
  }
  get fontOpticalSizing() {
    return this.getPropertyValue("font-optical-sizing");
  }
  set fontOpticalSizing(value2) {
    this.setProperty("font-optical-sizing", value2);
  }
  get fontSize() {
    return this.getPropertyValue("font-size");
  }
  set fontSize(value2) {
    this.setProperty("font-size", value2);
  }
  get fontStretch() {
    return this.getPropertyValue("font-stretch");
  }
  set fontStretch(value2) {
    this.setProperty("font-stretch", value2);
  }
  get fontStyle() {
    return this.getPropertyValue("font-style");
  }
  set fontStyle(value2) {
    this.setProperty("font-style", value2);
  }
  get fontVariant() {
    return this.getPropertyValue("font-variant");
  }
  set fontVariant(value2) {
    this.setProperty("font-variant", value2);
  }
  get fontVariantCaps() {
    return this.getPropertyValue("font-variant-caps");
  }
  set fontVariantCaps(value2) {
    this.setProperty("font-variant-caps", value2);
  }
  get fontVariantEastAsian() {
    return this.getPropertyValue("font-variant-east-asian");
  }
  set fontVariantEastAsian(value2) {
    this.setProperty("font-variant-east-asian", value2);
  }
  get fontVariantLigatures() {
    return this.getPropertyValue("font-variant-ligatures");
  }
  set fontVariantLigatures(value2) {
    this.setProperty("font-variant-ligatures", value2);
  }
  get fontVariantNumeric() {
    return this.getPropertyValue("font-variant-numeric");
  }
  set fontVariantNumeric(value2) {
    this.setProperty("font-variant-numeric", value2);
  }
  get fontVariationSettings() {
    return this.getPropertyValue("font-variation-settings");
  }
  set fontVariationSettings(value2) {
    this.setProperty("font-variation-settings", value2);
  }
  get fontPalette() {
    return this.getPropertyValue("font-palette");
  }
  set fontPalette(value2) {
    this.setProperty("font-palette", value2);
  }
  get fontSynthesisSmallCaps() {
    return this.getPropertyValue("font-synthesis-small-caps");
  }
  set fontSynthesisSmallCaps(value2) {
    this.setProperty("font-synthesis-small-caps", value2);
  }
  get fontSynthesisStyle() {
    return this.getPropertyValue("font-synthesis-style");
  }
  set fontSynthesisStyle(value2) {
    this.setProperty("font-synthesis-style", value2);
  }
  get fontSynthesisWeight() {
    return this.getPropertyValue("font-synthesis-weight");
  }
  set fontSynthesisWeight(value2) {
    this.setProperty("font-synthesis-weight", value2);
  }
  get fontWeight() {
    return this.getPropertyValue("font-weight");
  }
  set fontWeight(value2) {
    this.setProperty("font-weight", value2);
  }
  get gap() {
    return this.getPropertyValue("gap");
  }
  set gap(value2) {
    this.setProperty("gap", value2);
  }
  get grid() {
    return this.getPropertyValue("grid");
  }
  set grid(value2) {
    this.setProperty("grid", value2);
  }
  get gridArea() {
    return this.getPropertyValue("grid-area");
  }
  set gridArea(value2) {
    this.setProperty("grid-area", value2);
  }
  get gridAutoColumns() {
    return this.getPropertyValue("grid-auto-columns");
  }
  set gridAutoColumns(value2) {
    this.setProperty("grid-auto-columns", value2);
  }
  get gridAutoFlow() {
    return this.getPropertyValue("grid-auto-flow");
  }
  set gridAutoFlow(value2) {
    this.setProperty("grid-auto-flow", value2);
  }
  get gridAutoRows() {
    return this.getPropertyValue("grid-auto-rows");
  }
  set gridAutoRows(value2) {
    this.setProperty("grid-auto-rows", value2);
  }
  get gridColumn() {
    return this.getPropertyValue("grid-column");
  }
  set gridColumn(value2) {
    this.setProperty("grid-column", value2);
  }
  get gridColumnEnd() {
    return this.getPropertyValue("grid-column-end");
  }
  set gridColumnEnd(value2) {
    this.setProperty("grid-column-end", value2);
  }
  get gridColumnGap() {
    return this.getPropertyValue("grid-column-gap");
  }
  set gridColumnGap(value2) {
    this.setProperty("grid-column-gap", value2);
  }
  get gridColumnStart() {
    return this.getPropertyValue("grid-column-start");
  }
  set gridColumnStart(value2) {
    this.setProperty("grid-column-start", value2);
  }
  get gridGap() {
    return this.getPropertyValue("grid-gap");
  }
  set gridGap(value2) {
    this.setProperty("grid-gap", value2);
  }
  get gridRow() {
    return this.getPropertyValue("grid-row");
  }
  set gridRow(value2) {
    this.setProperty("grid-row", value2);
  }
  get gridRowEnd() {
    return this.getPropertyValue("grid-row-end");
  }
  set gridRowEnd(value2) {
    this.setProperty("grid-row-end", value2);
  }
  get gridRowGap() {
    return this.getPropertyValue("grid-row-gap");
  }
  set gridRowGap(value2) {
    this.setProperty("grid-row-gap", value2);
  }
  get gridRowStart() {
    return this.getPropertyValue("grid-row-start");
  }
  set gridRowStart(value2) {
    this.setProperty("grid-row-start", value2);
  }
  get gridTemplate() {
    return this.getPropertyValue("grid-template");
  }
  set gridTemplate(value2) {
    this.setProperty("grid-template", value2);
  }
  get gridTemplateAreas() {
    return this.getPropertyValue("grid-template-areas");
  }
  set gridTemplateAreas(value2) {
    this.setProperty("grid-template-areas", value2);
  }
  get gridTemplateColumns() {
    return this.getPropertyValue("grid-template-columns");
  }
  set gridTemplateColumns(value2) {
    this.setProperty("grid-template-columns", value2);
  }
  get gridTemplateRows() {
    return this.getPropertyValue("grid-template-rows");
  }
  set gridTemplateRows(value2) {
    this.setProperty("grid-template-rows", value2);
  }
  get height() {
    return this.getPropertyValue("height");
  }
  set height(value2) {
    this.setProperty("height", value2);
  }
  get hyphens() {
    return this.getPropertyValue("hyphens");
  }
  set hyphens(value2) {
    this.setProperty("hyphens", value2);
  }
  get imageOrientation() {
    return this.getPropertyValue("image-orientation");
  }
  set imageOrientation(value2) {
    this.setProperty("image-orientation", value2);
  }
  get imageRendering() {
    return this.getPropertyValue("image-rendering");
  }
  set imageRendering(value2) {
    this.setProperty("image-rendering", value2);
  }
  get inherits() {
    return this.getPropertyValue("inherits");
  }
  set inherits(value2) {
    this.setProperty("inherits", value2);
  }
  get initialValue() {
    return this.getPropertyValue("initial-value");
  }
  set initialValue(value2) {
    this.setProperty("initial-value", value2);
  }
  get inlineSize() {
    return this.getPropertyValue("inline-size");
  }
  set inlineSize(value2) {
    this.setProperty("inline-size", value2);
  }
  get isolation() {
    return this.getPropertyValue("isolation");
  }
  set isolation(value2) {
    this.setProperty("isolation", value2);
  }
  get insetBlockEnd() {
    return this.getPropertyValue("inset-block-end");
  }
  set insetBlockEnd(value2) {
    this.setProperty("inset-block-end", value2);
  }
  get insetBlockStart() {
    return this.getPropertyValue("inset-block-start");
  }
  set insetBlockStart(value2) {
    this.setProperty("inset-block-start", value2);
  }
  get insetInlineEnd() {
    return this.getPropertyValue("inset-inline-end");
  }
  set insetInlineEnd(value2) {
    this.setProperty("inset-inline-end", value2);
  }
  get insetInlineStart() {
    return this.getPropertyValue("inset-inline-start");
  }
  set insetInlineStart(value2) {
    this.setProperty("inset-inline-start", value2);
  }
  get justifyContent() {
    return this.getPropertyValue("justify-content");
  }
  set justifyContent(value2) {
    this.setProperty("justify-content", value2);
  }
  get justifyItems() {
    return this.getPropertyValue("justify-items");
  }
  set justifyItems(value2) {
    this.setProperty("justify-items", value2);
  }
  get justifySelf() {
    return this.getPropertyValue("justify-self");
  }
  set justifySelf(value2) {
    this.setProperty("justify-self", value2);
  }
  get left() {
    return this.getPropertyValue("left");
  }
  set left(value2) {
    this.setProperty("left", value2);
  }
  get letterSpacing() {
    return this.getPropertyValue("letter-spacing");
  }
  set letterSpacing(value2) {
    this.setProperty("letter-spacing", value2);
  }
  get lightingColor() {
    return this.getPropertyValue("lighting-color");
  }
  set lightingColor(value2) {
    this.setProperty("lighting-color", value2);
  }
  get lineBreak() {
    return this.getPropertyValue("line-break");
  }
  set lineBreak(value2) {
    this.setProperty("line-break", value2);
  }
  get lineHeight() {
    return this.getPropertyValue("line-height");
  }
  set lineHeight(value2) {
    this.setProperty("line-height", value2);
  }
  get listStyle() {
    return this.getPropertyValue("list-style");
  }
  set listStyle(value2) {
    this.setProperty("list-style", value2);
  }
  get listStyleImage() {
    return this.getPropertyValue("list-style-image");
  }
  set listStyleImage(value2) {
    this.setProperty("list-style-image", value2);
  }
  get listStylePosition() {
    return this.getPropertyValue("list-style-position");
  }
  set listStylePosition(value2) {
    this.setProperty("list-style-position", value2);
  }
  get listStyleType() {
    return this.getPropertyValue("list-style-type");
  }
  set listStyleType(value2) {
    this.setProperty("list-style-type", value2);
  }
  get margin() {
    return this.getPropertyValue("margin");
  }
  set margin(value2) {
    this.setProperty("margin", value2);
  }
  get marginBlockEnd() {
    return this.getPropertyValue("margin-block-end");
  }
  set marginBlockEnd(value2) {
    this.setProperty("margin-block-end", value2);
  }
  get marginBlockStart() {
    return this.getPropertyValue("margin-block-start");
  }
  set marginBlockStart(value2) {
    this.setProperty("margin-block-start", value2);
  }
  get marginBottom() {
    return this.getPropertyValue("margin-bottom");
  }
  set marginBottom(value2) {
    this.setProperty("margin-bottom", value2);
  }
  get marginInlineEnd() {
    return this.getPropertyValue("margin-inline-end");
  }
  set marginInlineEnd(value2) {
    this.setProperty("margin-inline-end", value2);
  }
  get marginInlineStart() {
    return this.getPropertyValue("margin-inline-start");
  }
  set marginInlineStart(value2) {
    this.setProperty("margin-inline-start", value2);
  }
  get marginLeft() {
    return this.getPropertyValue("margin-left");
  }
  set marginLeft(value2) {
    this.setProperty("margin-left", value2);
  }
  get marginRight() {
    return this.getPropertyValue("margin-right");
  }
  set marginRight(value2) {
    this.setProperty("margin-right", value2);
  }
  get marginTop() {
    return this.getPropertyValue("margin-top");
  }
  set marginTop(value2) {
    this.setProperty("margin-top", value2);
  }
  get marker() {
    return this.getPropertyValue("marker");
  }
  set marker(value2) {
    this.setProperty("marker", value2);
  }
  get markerEnd() {
    return this.getPropertyValue("marker-end");
  }
  set markerEnd(value2) {
    this.setProperty("marker-end", value2);
  }
  get markerMid() {
    return this.getPropertyValue("marker-mid");
  }
  set markerMid(value2) {
    this.setProperty("marker-mid", value2);
  }
  get markerStart() {
    return this.getPropertyValue("marker-start");
  }
  set markerStart(value2) {
    this.setProperty("marker-start", value2);
  }
  get mask() {
    return this.getPropertyValue("mask");
  }
  set mask(value2) {
    this.setProperty("mask", value2);
  }
  get maskType() {
    return this.getPropertyValue("mask-type");
  }
  set maskType(value2) {
    this.setProperty("mask-type", value2);
  }
  get maxBlockSize() {
    return this.getPropertyValue("max-block-size");
  }
  set maxBlockSize(value2) {
    this.setProperty("max-block-size", value2);
  }
  get maxHeight() {
    return this.getPropertyValue("max-height");
  }
  set maxHeight(value2) {
    this.setProperty("max-height", value2);
  }
  get maxInlineSize() {
    return this.getPropertyValue("max-inline-size");
  }
  set maxInlineSize(value2) {
    this.setProperty("max-inline-size", value2);
  }
  get maxWidth() {
    return this.getPropertyValue("max-width");
  }
  set maxWidth(value2) {
    this.setProperty("max-width", value2);
  }
  get maxZoom() {
    return this.getPropertyValue("max-zoom");
  }
  set maxZoom(value2) {
    this.setProperty("max-zoom", value2);
  }
  get minBlockSize() {
    return this.getPropertyValue("min-block-size");
  }
  set minBlockSize(value2) {
    this.setProperty("min-block-size", value2);
  }
  get minHeight() {
    return this.getPropertyValue("min-height");
  }
  set minHeight(value2) {
    this.setProperty("min-height", value2);
  }
  get minInlineSize() {
    return this.getPropertyValue("min-inline-size");
  }
  set minInlineSize(value2) {
    this.setProperty("min-inline-size", value2);
  }
  get minWidth() {
    return this.getPropertyValue("min-width");
  }
  set minWidth(value2) {
    this.setProperty("min-width", value2);
  }
  get minZoom() {
    return this.getPropertyValue("min-zoom");
  }
  set minZoom(value2) {
    this.setProperty("min-zoom", value2);
  }
  get mixBlendMode() {
    return this.getPropertyValue("mix-blend-mode");
  }
  set mixBlendMode(value2) {
    this.setProperty("mix-blend-mode", value2);
  }
  get objectFit() {
    return this.getPropertyValue("object-fit");
  }
  set objectFit(value2) {
    this.setProperty("object-fit", value2);
  }
  get objectPosition() {
    return this.getPropertyValue("object-position");
  }
  set objectPosition(value2) {
    this.setProperty("object-position", value2);
  }
  get offset() {
    return this.getPropertyValue("offset");
  }
  set offset(value2) {
    this.setProperty("offset", value2);
  }
  get offsetDistance() {
    return this.getPropertyValue("offset-distance");
  }
  set offsetDistance(value2) {
    this.setProperty("offset-distance", value2);
  }
  get offsetPath() {
    return this.getPropertyValue("offset-path");
  }
  set offsetPath(value2) {
    this.setProperty("offset-path", value2);
  }
  get offsetRotate() {
    return this.getPropertyValue("offset-rotate");
  }
  set offsetRotate(value2) {
    this.setProperty("offset-rotate", value2);
  }
  get opacity() {
    return this.getPropertyValue("opacity");
  }
  set opacity(value2) {
    this.setProperty("opacity", value2);
  }
  get order() {
    return this.getPropertyValue("order");
  }
  set order(value2) {
    this.setProperty("order", value2);
  }
  get orientation() {
    return this.getPropertyValue("orientation");
  }
  set orientation(value2) {
    this.setProperty("orientation", value2);
  }
  get orphans() {
    return this.getPropertyValue("orphans");
  }
  set orphans(value2) {
    this.setProperty("orphans", value2);
  }
  get outline() {
    return this.getPropertyValue("outline");
  }
  set outline(value2) {
    this.setProperty("outline", value2);
  }
  get outlineColor() {
    return this.getPropertyValue("outline-color");
  }
  set outlineColor(value2) {
    this.setProperty("outline-color", value2);
  }
  get outlineOffset() {
    return this.getPropertyValue("outline-offset");
  }
  set outlineOffset(value2) {
    this.setProperty("outline-offset", value2);
  }
  get outlineStyle() {
    return this.getPropertyValue("outline-style");
  }
  set outlineStyle(value2) {
    this.setProperty("outline-style", value2);
  }
  get outlineWidth() {
    return this.getPropertyValue("outline-width");
  }
  set outlineWidth(value2) {
    this.setProperty("outline-width", value2);
  }
  get overflow() {
    return this.getPropertyValue("overflow");
  }
  set overflow(value2) {
    this.setProperty("overflow", value2);
  }
  get overflowAnchor() {
    return this.getPropertyValue("overflow-anchor");
  }
  set overflowAnchor(value2) {
    this.setProperty("overflow-anchor", value2);
  }
  get overflowWrap() {
    return this.getPropertyValue("overflow-wrap");
  }
  set overflowWrap(value2) {
    this.setProperty("overflow-wrap", value2);
  }
  get overflowX() {
    return this.getPropertyValue("overflow-x");
  }
  set overflowX(value2) {
    this.setProperty("overflow-x", value2);
  }
  get overflowY() {
    return this.getPropertyValue("overflow-y");
  }
  set overflowY(value2) {
    this.setProperty("overflow-y", value2);
  }
  get overscrollBehavior() {
    return this.getPropertyValue("overscroll-behavior");
  }
  set overscrollBehavior(value2) {
    this.setProperty("overscroll-behavior", value2);
  }
  get overscrollBehaviorBlock() {
    return this.getPropertyValue("overscroll-behavior-block");
  }
  set overscrollBehaviorBlock(value2) {
    this.setProperty("overscroll-behavior-block", value2);
  }
  get overscrollBehaviorInline() {
    return this.getPropertyValue("overscroll-behavior-inline");
  }
  set overscrollBehaviorInline(value2) {
    this.setProperty("overscroll-behavior-inline", value2);
  }
  get overscrollBehaviorX() {
    return this.getPropertyValue("overscroll-behavior-x");
  }
  set overscrollBehaviorX(value2) {
    this.setProperty("overscroll-behavior-x", value2);
  }
  get overscrollBehaviorY() {
    return this.getPropertyValue("overscroll-behavior-y");
  }
  set overscrollBehaviorY(value2) {
    this.setProperty("overscroll-behavior-y", value2);
  }
  get overflowClipMargin() {
    return this.getPropertyValue("overflow-clip-margin");
  }
  set overflowClipMargin(value2) {
    this.setProperty("overflow-clip-margin", value2);
  }
  get padding() {
    return this.getPropertyValue("padding");
  }
  set padding(value2) {
    this.setProperty("padding", value2);
  }
  get paddingBlockEnd() {
    return this.getPropertyValue("padding-block-end");
  }
  set paddingBlockEnd(value2) {
    this.setProperty("padding-block-end", value2);
  }
  get paddingBlockStart() {
    return this.getPropertyValue("padding-block-start");
  }
  set paddingBlockStart(value2) {
    this.setProperty("padding-block-start", value2);
  }
  get paddingBottom() {
    return this.getPropertyValue("padding-bottom");
  }
  set paddingBottom(value2) {
    this.setProperty("padding-bottom", value2);
  }
  get paddingInlineEnd() {
    return this.getPropertyValue("padding-inline-end");
  }
  set paddingInlineEnd(value2) {
    this.setProperty("padding-inline-end", value2);
  }
  get paddingInlineStart() {
    return this.getPropertyValue("padding-inline-start");
  }
  set paddingInlineStart(value2) {
    this.setProperty("padding-inline-start", value2);
  }
  get paddingLeft() {
    return this.getPropertyValue("padding-left");
  }
  set paddingLeft(value2) {
    this.setProperty("padding-left", value2);
  }
  get paddingRight() {
    return this.getPropertyValue("padding-right");
  }
  set paddingRight(value2) {
    this.setProperty("padding-right", value2);
  }
  get paddingTop() {
    return this.getPropertyValue("padding-top");
  }
  set paddingTop(value2) {
    this.setProperty("padding-top", value2);
  }
  get page() {
    return this.getPropertyValue("page");
  }
  set page(value2) {
    this.setProperty("page", value2);
  }
  get pageBreakAfter() {
    return this.getPropertyValue("page-break-after");
  }
  set pageBreakAfter(value2) {
    this.setProperty("page-break-after", value2);
  }
  get pageBreakBefore() {
    return this.getPropertyValue("page-break-before");
  }
  set pageBreakBefore(value2) {
    this.setProperty("page-break-before", value2);
  }
  get pageBreakInside() {
    return this.getPropertyValue("page-break-inside");
  }
  set pageBreakInside(value2) {
    this.setProperty("page-break-inside", value2);
  }
  get pageOrientation() {
    return this.getPropertyValue("page-orientation");
  }
  set pageOrientation(value2) {
    this.setProperty("page-orientation", value2);
  }
  get paintOrder() {
    return this.getPropertyValue("paint-order");
  }
  set paintOrder(value2) {
    this.setProperty("paint-order", value2);
  }
  get perspective() {
    return this.getPropertyValue("perspective");
  }
  set perspective(value2) {
    this.setProperty("perspective", value2);
  }
  get perspectiveOrigin() {
    return this.getPropertyValue("perspective-origin");
  }
  set perspectiveOrigin(value2) {
    this.setProperty("perspective-origin", value2);
  }
  get placeContent() {
    return this.getPropertyValue("place-content");
  }
  set placeContent(value2) {
    this.setProperty("place-content", value2);
  }
  get placeItems() {
    return this.getPropertyValue("place-items");
  }
  set placeItems(value2) {
    this.setProperty("place-items", value2);
  }
  get placeSelf() {
    return this.getPropertyValue("place-self");
  }
  set placeSelf(value2) {
    this.setProperty("place-self", value2);
  }
  get pointerEvents() {
    return this.getPropertyValue("pointer-events");
  }
  set pointerEvents(value2) {
    this.setProperty("pointer-events", value2);
  }
  get position() {
    return this.getPropertyValue("position");
  }
  set position(value2) {
    this.setProperty("position", value2);
  }
  get quotes() {
    return this.getPropertyValue("quotes");
  }
  set quotes(value2) {
    this.setProperty("quotes", value2);
  }
  get r() {
    return this.getPropertyValue("r");
  }
  set r(value2) {
    this.setProperty("r", value2);
  }
  get resize() {
    return this.getPropertyValue("resize");
  }
  set resize(value2) {
    this.setProperty("resize", value2);
  }
  get right() {
    return this.getPropertyValue("right");
  }
  set right(value2) {
    this.setProperty("right", value2);
  }
  get rowGap() {
    return this.getPropertyValue("row-gap");
  }
  set rowGap(value2) {
    this.setProperty("row-gap", value2);
  }
  get rubyPosition() {
    return this.getPropertyValue("ruby-position");
  }
  set rubyPosition(value2) {
    this.setProperty("ruby-position", value2);
  }
  get rx() {
    return this.getPropertyValue("rx");
  }
  set rx(value2) {
    this.setProperty("rx", value2);
  }
  get ry() {
    return this.getPropertyValue("ry");
  }
  set ry(value2) {
    this.setProperty("ry", value2);
  }
  get scrollBehavior() {
    return this.getPropertyValue("scroll-behavior");
  }
  set scrollBehavior(value2) {
    this.setProperty("scroll-behavior", value2);
  }
  get scrollMargin() {
    return this.getPropertyValue("scroll-margin");
  }
  set scrollMargin(value2) {
    this.setProperty("scroll-margin", value2);
  }
  get scrollMarginBlock() {
    return this.getPropertyValue("scroll-margin-block");
  }
  set scrollMarginBlock(value2) {
    this.setProperty("scroll-margin-block", value2);
  }
  get scrollMarginBlockEnd() {
    return this.getPropertyValue("scroll-margin-block-end");
  }
  set scrollMarginBlockEnd(value2) {
    this.setProperty("scroll-margin-block-end", value2);
  }
  get scrollMarginBlockStart() {
    return this.getPropertyValue("scroll-margin-block-start");
  }
  set scrollMarginBlockStart(value2) {
    this.setProperty("scroll-margin-block-start", value2);
  }
  get scrollMarginBottom() {
    return this.getPropertyValue("scroll-margin-bottom");
  }
  set scrollMarginBottom(value2) {
    this.setProperty("scroll-margin-bottom", value2);
  }
  get scrollMarginInline() {
    return this.getPropertyValue("scroll-margin-inline");
  }
  set scrollMarginInline(value2) {
    this.setProperty("scroll-margin-inline", value2);
  }
  get scrollMarginInlineEnd() {
    return this.getPropertyValue("scroll-margin-inline-end");
  }
  set scrollMarginInlineEnd(value2) {
    this.setProperty("scroll-margin-inline-end", value2);
  }
  get scrollMarginInlineStart() {
    return this.getPropertyValue("scroll-margin-inline-start");
  }
  set scrollMarginInlineStart(value2) {
    this.setProperty("scroll-margin-inline-start", value2);
  }
  get scrollMarginLeft() {
    return this.getPropertyValue("scroll-margin-left");
  }
  set scrollMarginLeft(value2) {
    this.setProperty("scroll-margin-left", value2);
  }
  get scrollMarginRight() {
    return this.getPropertyValue("scroll-margin-right");
  }
  set scrollMarginRight(value2) {
    this.setProperty("scroll-margin-right", value2);
  }
  get scrollMarginTop() {
    return this.getPropertyValue("scroll-margin-top");
  }
  set scrollMarginTop(value2) {
    this.setProperty("scroll-margin-top", value2);
  }
  get scrollPadding() {
    return this.getPropertyValue("scroll-padding");
  }
  set scrollPadding(value2) {
    this.setProperty("scroll-padding", value2);
  }
  get scrollPaddingBlock() {
    return this.getPropertyValue("scroll-padding-block");
  }
  set scrollPaddingBlock(value2) {
    this.setProperty("scroll-padding-block", value2);
  }
  get scrollPaddingBlockEnd() {
    return this.getPropertyValue("scroll-padding-block-end");
  }
  set scrollPaddingBlockEnd(value2) {
    this.setProperty("scroll-padding-block-end", value2);
  }
  get scrollPaddingBlockStart() {
    return this.getPropertyValue("scroll-padding-block-start");
  }
  set scrollPaddingBlockStart(value2) {
    this.setProperty("scroll-padding-block-start", value2);
  }
  get scrollPaddingBottom() {
    return this.getPropertyValue("scroll-padding-bottom");
  }
  set scrollPaddingBottom(value2) {
    this.setProperty("scroll-padding-bottom", value2);
  }
  get scrollPaddingInline() {
    return this.getPropertyValue("scroll-padding-inline");
  }
  set scrollPaddingInline(value2) {
    this.setProperty("scroll-padding-inline", value2);
  }
  get scrollPaddingInlineEnd() {
    return this.getPropertyValue("scroll-padding-inline-end");
  }
  set scrollPaddingInlineEnd(value2) {
    this.setProperty("scroll-padding-inline-end", value2);
  }
  get scrollPaddingInlineStart() {
    return this.getPropertyValue("scroll-padding-inline-start");
  }
  set scrollPaddingInlineStart(value2) {
    this.setProperty("scroll-padding-inline-start", value2);
  }
  get scrollPaddingLeft() {
    return this.getPropertyValue("scroll-padding-left");
  }
  set scrollPaddingLeft(value2) {
    this.setProperty("scroll-padding-left", value2);
  }
  get scrollPaddingRight() {
    return this.getPropertyValue("scroll-padding-right");
  }
  set scrollPaddingRight(value2) {
    this.setProperty("scroll-padding-right", value2);
  }
  get scrollPaddingTop() {
    return this.getPropertyValue("scroll-padding-top");
  }
  set scrollPaddingTop(value2) {
    this.setProperty("scroll-padding-top", value2);
  }
  get scrollSnapAlign() {
    return this.getPropertyValue("scroll-snap-align");
  }
  set scrollSnapAlign(value2) {
    this.setProperty("scroll-snap-align", value2);
  }
  get scrollSnapStop() {
    return this.getPropertyValue("scroll-snap-stop");
  }
  set scrollSnapStop(value2) {
    this.setProperty("scroll-snap-stop", value2);
  }
  get scrollSnapType() {
    return this.getPropertyValue("scroll-snap-type");
  }
  set scrollSnapType(value2) {
    this.setProperty("scroll-snap-type", value2);
  }
  get shapeImageThreshold() {
    return this.getPropertyValue("shape-image-threshold");
  }
  set shapeImageThreshold(value2) {
    this.setProperty("shape-image-threshold", value2);
  }
  get shapeMargin() {
    return this.getPropertyValue("shape-margin");
  }
  set shapeMargin(value2) {
    this.setProperty("shape-margin", value2);
  }
  get shapeOutside() {
    return this.getPropertyValue("shape-outside");
  }
  set shapeOutside(value2) {
    this.setProperty("shape-outside", value2);
  }
  get shapeRendering() {
    return this.getPropertyValue("shape-rendering");
  }
  set shapeRendering(value2) {
    this.setProperty("shape-rendering", value2);
  }
  get size() {
    return this.getPropertyValue("size");
  }
  set size(value2) {
    this.setProperty("size", value2);
  }
  get speak() {
    return this.getPropertyValue("speak");
  }
  set speak(value2) {
    this.setProperty("speak", value2);
  }
  get src() {
    return this.getPropertyValue("src");
  }
  set src(value2) {
    this.setProperty("src", value2);
  }
  get stopColor() {
    return this.getPropertyValue("stop-color");
  }
  set stopColor(value2) {
    this.setProperty("stop-color", value2);
  }
  get stopOpacity() {
    return this.getPropertyValue("stop-opacity");
  }
  set stopOpacity(value2) {
    this.setProperty("stop-opacity", value2);
  }
  get stroke() {
    return this.getPropertyValue("stroke");
  }
  set stroke(value2) {
    this.setProperty("stroke", value2);
  }
  get strokeDasharray() {
    return this.getPropertyValue("stroke-dasharray");
  }
  set strokeDasharray(value2) {
    this.setProperty("stroke-dasharray", value2);
  }
  get strokeDashoffset() {
    return this.getPropertyValue("stroke-dashoffset");
  }
  set strokeDashoffset(value2) {
    this.setProperty("stroke-dashoffset", value2);
  }
  get strokeLinecap() {
    return this.getPropertyValue("stroke-linecap");
  }
  set strokeLinecap(value2) {
    this.setProperty("stroke-linecap", value2);
  }
  get strokeLinejoin() {
    return this.getPropertyValue("stroke-linejoin");
  }
  set strokeLinejoin(value2) {
    this.setProperty("stroke-linejoin", value2);
  }
  get strokeMiterlimit() {
    return this.getPropertyValue("stroke-miterlimit");
  }
  set strokeMiterlimit(value2) {
    this.setProperty("stroke-miterlimit", value2);
  }
  get strokeOpacity() {
    return this.getPropertyValue("stroke-opacity");
  }
  set strokeOpacity(value2) {
    this.setProperty("stroke-opacity", value2);
  }
  get strokeWidth() {
    return this.getPropertyValue("stroke-width");
  }
  set strokeWidth(value2) {
    this.setProperty("stroke-width", value2);
  }
  get syntax() {
    return this.getPropertyValue("syntax");
  }
  set syntax(value2) {
    this.setProperty("syntax", value2);
  }
  get scrollbarGutter() {
    return this.getPropertyValue("scrollbar-gutter");
  }
  set scrollbarGutter(value2) {
    this.setProperty("scrollbar-gutter", value2);
  }
  get tabSize() {
    return this.getPropertyValue("tab-size");
  }
  set tabSize(value2) {
    this.setProperty("tab-size", value2);
  }
  get tableLayout() {
    return this.getPropertyValue("table-layout");
  }
  set tableLayout(value2) {
    this.setProperty("table-layout", value2);
  }
  get textAlign() {
    return this.getPropertyValue("text-align");
  }
  set textAlign(value2) {
    this.setProperty("text-align", value2);
  }
  get textAlignLast() {
    return this.getPropertyValue("text-align-last");
  }
  set textAlignLast(value2) {
    this.setProperty("text-align-last", value2);
  }
  get textAnchor() {
    return this.getPropertyValue("text-anchor");
  }
  set textAnchor(value2) {
    this.setProperty("text-anchor", value2);
  }
  get textCombineUpright() {
    return this.getPropertyValue("text-combine-upright");
  }
  set textCombineUpright(value2) {
    this.setProperty("text-combine-upright", value2);
  }
  get textDecoration() {
    return this.getPropertyValue("text-decoration");
  }
  set textDecoration(value2) {
    this.setProperty("text-decoration", value2);
  }
  get textDecorationColor() {
    return this.getPropertyValue("text-decoration-color");
  }
  set textDecorationColor(value2) {
    this.setProperty("text-decoration-color", value2);
  }
  get textDecorationLine() {
    return this.getPropertyValue("text-decoration-line");
  }
  set textDecorationLine(value2) {
    this.setProperty("text-decoration-line", value2);
  }
  get textDecorationSkipInk() {
    return this.getPropertyValue("text-decoration-skip-ink");
  }
  set textDecorationSkipInk(value2) {
    this.setProperty("text-decoration-skip-ink", value2);
  }
  get textDecorationStyle() {
    return this.getPropertyValue("text-decoration-style");
  }
  set textDecorationStyle(value2) {
    this.setProperty("text-decoration-style", value2);
  }
  get textIndent() {
    return this.getPropertyValue("text-indent");
  }
  set textIndent(value2) {
    this.setProperty("text-indent", value2);
  }
  get textOrientation() {
    return this.getPropertyValue("text-orientation");
  }
  set textOrientation(value2) {
    this.setProperty("text-orientation", value2);
  }
  get textOverflow() {
    return this.getPropertyValue("text-overflow");
  }
  set textOverflow(value2) {
    this.setProperty("text-overflow", value2);
  }
  get textRendering() {
    return this.getPropertyValue("text-rendering");
  }
  set textRendering(value2) {
    this.setProperty("text-rendering", value2);
  }
  get textShadow() {
    return this.getPropertyValue("text-shadow");
  }
  set textShadow(value2) {
    this.setProperty("text-shadow", value2);
  }
  get textSizeAdjust() {
    return this.getPropertyValue("text-size-adjust");
  }
  set textSizeAdjust(value2) {
    this.setProperty("text-size-adjust", value2);
  }
  get textTransform() {
    return this.getPropertyValue("text-transform");
  }
  set textTransform(value2) {
    this.setProperty("text-transform", value2);
  }
  get textUnderlinePosition() {
    return this.getPropertyValue("text-underline-position");
  }
  set textUnderlinePosition(value2) {
    this.setProperty("text-underline-position", value2);
  }
  get top() {
    return this.getPropertyValue("top");
  }
  set top(value2) {
    this.setProperty("top", value2);
  }
  get touchAction() {
    return this.getPropertyValue("touch-action");
  }
  set touchAction(value2) {
    this.setProperty("touch-action", value2);
  }
  get transform() {
    return this.getPropertyValue("transform");
  }
  set transform(value2) {
    this.setProperty("transform", value2);
  }
  get transformBox() {
    return this.getPropertyValue("transform-box");
  }
  set transformBox(value2) {
    this.setProperty("transform-box", value2);
  }
  get transformOrigin() {
    return this.getPropertyValue("transform-origin");
  }
  set transformOrigin(value2) {
    this.setProperty("transform-origin", value2);
  }
  get transformStyle() {
    return this.getPropertyValue("transform-style");
  }
  set transformStyle(value2) {
    this.setProperty("transform-style", value2);
  }
  get transition() {
    return this.getPropertyValue("transition");
  }
  set transition(value2) {
    this.setProperty("transition", value2);
  }
  get transitionDelay() {
    return this.getPropertyValue("transition-delay");
  }
  set transitionDelay(value2) {
    this.setProperty("transition-delay", value2);
  }
  get transitionDuration() {
    return this.getPropertyValue("transition-duration");
  }
  set transitionDuration(value2) {
    this.setProperty("transition-duration", value2);
  }
  get transitionProperty() {
    return this.getPropertyValue("transition-property");
  }
  set transitionProperty(value2) {
    this.setProperty("transition-property", value2);
  }
  get transitionTimingFunction() {
    return this.getPropertyValue("transition-timing-function");
  }
  set transitionTimingFunction(value2) {
    this.setProperty("transition-timing-function", value2);
  }
  get textEmphasisColor() {
    return this.getPropertyValue("text-emphasis-color");
  }
  set textEmphasisColor(value2) {
    this.setProperty("text-emphasis-color", value2);
  }
  get textEmphasisPosition() {
    return this.getPropertyValue("text-emphasis-position");
  }
  set textEmphasisPosition(value2) {
    this.setProperty("text-emphasis-position", value2);
  }
  get textEmphasisStyle() {
    return this.getPropertyValue("text-emphasis-style");
  }
  set textEmphasisStyle(value2) {
    this.setProperty("text-emphasis-style", value2);
  }
  get unicodeBidi() {
    return this.getPropertyValue("unicode-bidi");
  }
  set unicodeBidi(value2) {
    this.setProperty("unicode-bidi", value2);
  }
  get unicodeRange() {
    return this.getPropertyValue("unicode-range");
  }
  set unicodeRange(value2) {
    this.setProperty("unicode-range", value2);
  }
  get userSelect() {
    return this.getPropertyValue("user-select");
  }
  set userSelect(value2) {
    this.setProperty("user-select", value2);
  }
  get userZoom() {
    return this.getPropertyValue("user-zoom");
  }
  set userZoom(value2) {
    this.setProperty("user-zoom", value2);
  }
  get vectorEffect() {
    return this.getPropertyValue("vector-effect");
  }
  set vectorEffect(value2) {
    this.setProperty("vector-effect", value2);
  }
  get verticalAlign() {
    return this.getPropertyValue("vertical-align");
  }
  set verticalAlign(value2) {
    this.setProperty("vertical-align", value2);
  }
  get visibility() {
    return this.getPropertyValue("visibility");
  }
  set visibility(value2) {
    this.setProperty("visibility", value2);
  }
  get whiteSpace() {
    return this.getPropertyValue("white-space");
  }
  set whiteSpace(value2) {
    this.setProperty("white-space", value2);
  }
  get widows() {
    return this.getPropertyValue("widows");
  }
  set widows(value2) {
    this.setProperty("widows", value2);
  }
  get width() {
    return this.getPropertyValue("width");
  }
  set width(value2) {
    this.setProperty("width", value2);
  }
  get willChange() {
    return this.getPropertyValue("will-change");
  }
  set willChange(value2) {
    this.setProperty("will-change", value2);
  }
  get wordBreak() {
    return this.getPropertyValue("word-break");
  }
  set wordBreak(value2) {
    this.setProperty("word-break", value2);
  }
  get wordSpacing() {
    return this.getPropertyValue("word-spacing");
  }
  set wordSpacing(value2) {
    this.setProperty("word-spacing", value2);
  }
  get wordWrap() {
    return this.getPropertyValue("word-wrap");
  }
  set wordWrap(value2) {
    this.setProperty("word-wrap", value2);
  }
  get writingMode() {
    return this.getPropertyValue("writing-mode");
  }
  set writingMode(value2) {
    this.setProperty("writing-mode", value2);
  }
  get x() {
    return this.getPropertyValue("x");
  }
  set x(value2) {
    this.setProperty("x", value2);
  }
  get y() {
    return this.getPropertyValue("y");
  }
  set y(value2) {
    this.setProperty("y", value2);
  }
  get zIndex() {
    return this.getPropertyValue("z-index");
  }
  set zIndex(value2) {
    this.setProperty("z-index", value2);
  }
  get zoom() {
    return this.getPropertyValue("zoom");
  }
  set zoom(value2) {
    this.setProperty("zoom", value2);
  }
  get containerType() {
    return this.getPropertyValue("container-type");
  }
  set containerType(value2) {
    this.setProperty("container-type", value2);
  }
  get containerName() {
    return this.getPropertyValue("container-name");
  }
  set containerName(value2) {
    this.setProperty("container-name", value2);
  }
}

// node_modules/happy-dom-without-node/lib/event/events/MouseEvent.js
class MouseEvent extends UIEvent_default {
  constructor(type, eventInit = null) {
    super(type, eventInit);
    this.altKey = eventInit?.altKey ?? false;
    this.button = eventInit?.button ?? 0;
    this.buttons = eventInit?.buttons ?? 0;
    this.clientX = eventInit?.clientX ?? 0;
    this.clientY = eventInit?.clientY ?? 0;
    this.ctrlKey = eventInit?.ctrlKey ?? false;
    this.metaKey = eventInit?.metaKey ?? false;
    this.movementX = eventInit?.movementX ?? 0;
    this.movementY = eventInit?.movementY ?? 0;
    this.region = eventInit?.region ?? "";
    this.relatedTarget = eventInit?.relatedTarget ?? null;
    this.screenX = eventInit?.screenX ?? 0;
    this.screenY = eventInit?.screenY ?? 0;
    this.shiftKey = eventInit?.shiftKey ?? false;
  }
}

// node_modules/happy-dom-without-node/lib/event/events/PointerEvent.js
class PointerEvent extends MouseEvent {
  constructor(type, eventInit = null) {
    super(type, eventInit);
    this.getCoalescedEvents = () => this.coalescedEvents;
    this.getPredictedEvents = () => this.predictedEvents;
    this.pointerId = eventInit?.pointerId ?? 0;
    this.width = eventInit?.width ?? 1;
    this.height = eventInit?.height ?? 1;
    this.pressure = eventInit?.pressure ?? 0;
    this.tangentialPressure = eventInit?.tangentialPressure ?? 0;
    this.tiltX = eventInit?.tiltX ?? 0;
    this.tiltY = eventInit?.tiltY ?? 0;
    this.twist = eventInit?.twist ?? 0;
    this.altitudeAngle = eventInit?.altitudeAngle ?? 0;
    this.azimuthAngle = eventInit?.azimuthAngle ?? 0;
    this.pointerType = eventInit?.pointerType ?? "";
    this.isPrimary = eventInit?.isPrimary ?? false;
    this.coalescedEvents = eventInit?.coalescedEvents ?? [];
    this.predictedEvents = eventInit?.predictedEvents ?? [];
  }
}

// node_modules/happy-dom-without-node/lib/event/events/FocusEvent.js
class FocusEvent extends UIEvent_default {
  constructor(type, eventInit = null) {
    super(type, eventInit);
    this.relatedTarget = eventInit?.relatedTarget ?? null;
  }
}

// node_modules/happy-dom-without-node/lib/nodes/html-element/HTMLElementUtility.js
class HTMLElementUtility {
  static blur(element) {
    if (element[ownerDocument][activeElement] !== element || !element[isConnected]) {
      return;
    }
    const relatedTarget = element[ownerDocument][nextActiveElement] ?? null;
    element[ownerDocument][activeElement] = null;
    element.dispatchEvent(new FocusEvent("blur", {
      relatedTarget,
      bubbles: false,
      composed: true
    }));
    element.dispatchEvent(new FocusEvent("focusout", {
      relatedTarget,
      bubbles: true,
      composed: true
    }));
  }
  static focus(element) {
    if (element[ownerDocument][activeElement] === element || !element[isConnected]) {
      return;
    }
    element[ownerDocument][nextActiveElement] = element;
    const relatedTarget = element[ownerDocument][activeElement];
    if (element[ownerDocument][activeElement] !== null) {
      element[ownerDocument][activeElement].blur();
    }
    element[ownerDocument][nextActiveElement] = null;
    element[ownerDocument][activeElement] = element;
    element.dispatchEvent(new FocusEvent("focus", {
      relatedTarget,
      bubbles: false,
      composed: true
    }));
    element.dispatchEvent(new FocusEvent("focusin", {
      relatedTarget,
      bubbles: true,
      composed: true
    }));
  }
}

// node_modules/happy-dom-without-node/lib/nodes/html-element/HTMLElementNamedNodeMap.js
class HTMLElementNamedNodeMap extends ElementNamedNodeMap {
  setNamedItem(item2) {
    const replacedItem = super.setNamedItem(item2);
    if (item2[name] === "style" && this[ownerElement][style2]) {
      this[ownerElement][style2].cssText = item2[value];
    }
    return replacedItem || null;
  }
  [(ownerElement, removeNamedItem)](name2) {
    const removedItem = super[removeNamedItem](name2);
    if (removedItem && removedItem[name] === "style" && this[ownerElement][style2]) {
      this[ownerElement][style2].cssText = "";
    }
    return removedItem;
  }
}

// node_modules/happy-dom-without-node/lib/nodes/element/DatasetUtility.js
class DatasetUtility {
  static kebabToCamelCase(text2) {
    const parts = text2.split("-");
    for (let i = 0, max3 = parts.length;i < max3; i++) {
      parts[i] = i > 0 ? parts[i].charAt(0).toUpperCase() + parts[i].slice(1) : parts[i];
    }
    return parts.join("");
  }
  static camelCaseToKebab(text2) {
    return text2.toString().replace(/[A-Z]+(?![a-z])|[A-Z]/g, ($, ofs) => (ofs ? "-" : "") + $.toLowerCase());
  }
}

// node_modules/happy-dom-without-node/lib/nodes/element/DatasetFactory.js
class DatasetFactory {
  static createDataset(element) {
    const dataset = {};
    for (let i = 0, max3 = element[attributes].length;i < max3; i++) {
      const attribute = element[attributes][i];
      if (attribute[name].startsWith("data-")) {
        const key = DatasetUtility.kebabToCamelCase(attribute[name].replace("data-", ""));
        dataset[key] = attribute[value];
      }
    }
    return new Proxy(dataset, {
      get(dataset2, key) {
        const attribute = element[attributes].getNamedItem("data-" + DatasetUtility.camelCaseToKebab(key));
        if (attribute) {
          return dataset2[key] = attribute[value];
        }
        delete dataset2[key];
        return;
      },
      set(dataset2, key, value2) {
        element.setAttribute("data-" + DatasetUtility.camelCaseToKebab(key), value2);
        dataset2[key] = value2;
        return true;
      },
      deleteProperty(dataset2, key) {
        element[attributes][removeNamedItem]("data-" + DatasetUtility.camelCaseToKebab(key));
        return delete dataset2[key];
      },
      ownKeys(dataset2) {
        const keys = [];
        const deleteKeys = [];
        for (let i = 0, max3 = element[attributes].length;i < max3; i++) {
          const attribute = element[attributes][i];
          if (attribute[name].startsWith("data-")) {
            const key = DatasetUtility.kebabToCamelCase(attribute[name].replace("data-", ""));
            keys.push(key);
            dataset2[key] = attribute[value];
            if (!dataset2[key]) {
              deleteKeys.push(key);
            }
          }
        }
        for (const key of deleteKeys) {
          delete dataset2[key];
        }
        return keys;
      },
      has(_dataset, key) {
        return !!element[attributes].getNamedItem("data-" + DatasetUtility.camelCaseToKebab(key));
      }
    });
  }
}

// node_modules/happy-dom-without-node/lib/nodes/html-element/HTMLElement.js
var __classPrivateFieldGet13 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet10 = function(receiver, state, value2, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
};
var _HTMLElement_dataset;
var _HTMLElement_customElementDefineCallback;
var _a15;
var _b11;
var _c10;
var _d7;
var _e5;
var _f4;
var _g4;
var _h4;
var _j4;
var _k3;
var _l3;
var _m3;
var _o3;

class HTMLElement2 extends Element_default {
  constructor() {
    super(...arguments);
    this.oncopy = null;
    this.oncut = null;
    this.onpaste = null;
    this.oninvalid = null;
    this.onanimationcancel = null;
    this.onanimationend = null;
    this.onanimationiteration = null;
    this.onanimationstart = null;
    this.onbeforeinput = null;
    this.oninput = null;
    this.onchange = null;
    this.ongotpointercapture = null;
    this.onlostpointercapture = null;
    this.onpointercancel = null;
    this.onpointerdown = null;
    this.onpointerenter = null;
    this.onpointerleave = null;
    this.onpointermove = null;
    this.onpointerout = null;
    this.onpointerover = null;
    this.onpointerup = null;
    this.ontransitioncancel = null;
    this.ontransitionend = null;
    this.ontransitionrun = null;
    this.ontransitionstart = null;
    this[_a15] = new HTMLElementNamedNodeMap(this);
    this[_b11] = "";
    this[_c10] = "inherit";
    this[_d7] = false;
    this[_e5] = 0;
    this[_f4] = 0;
    this[_g4] = 0;
    this[_h4] = 0;
    this[_j4] = 0;
    this[_k3] = 0;
    this[_l3] = 0;
    this[_m3] = 0;
    this[_o3] = null;
    _HTMLElement_dataset.set(this, null);
    _HTMLElement_customElementDefineCallback.set(this, null);
  }
  get accessKey() {
    return this[accessKey];
  }
  set accessKey(accessKey2) {
    this[accessKey] = accessKey2;
  }
  get contentEditable() {
    return this[contentEditable];
  }
  set contentEditable(contentEditable2) {
    this[contentEditable] = contentEditable2;
  }
  get isContentEditable() {
    return this[isContentEditable];
  }
  get offsetHeight() {
    return this[offsetHeight];
  }
  get offsetWidth() {
    return this[offsetWidth];
  }
  get offsetLeft() {
    return this[offsetLeft];
  }
  get offsetTop() {
    return this[offsetTop];
  }
  get clientHeight() {
    return this[clientHeight];
  }
  get clientWidth() {
    return this[clientWidth];
  }
  get clientLeft() {
    return this[clientLeft];
  }
  get clientTop() {
    return this[clientTop];
  }
  get tabIndex() {
    const tabIndex = this.getAttribute("tabindex");
    return tabIndex !== null ? Number(tabIndex) : -1;
  }
  set tabIndex(tabIndex) {
    if (tabIndex === -1) {
      this.removeAttribute("tabindex");
    } else {
      this.setAttribute("tabindex", String(tabIndex));
    }
  }
  get innerText() {
    if (!this[isConnected]) {
      return this.textContent;
    }
    let result = "";
    for (const childNode of this[childNodes]) {
      if (childNode[nodeType] === NodeTypeEnum_default.elementNode) {
        const childElement = childNode;
        const computedStyle2 = this[ownerDocument][ownerWindow].getComputedStyle(childElement);
        if (childElement[tagName3] !== "SCRIPT" && childElement[tagName3] !== "STYLE") {
          const display = computedStyle2.display;
          if (display !== "none") {
            const textTransform = computedStyle2.textTransform;
            if ((display === "block" || display === "flex") && result) {
              result += "\n";
            }
            let text2 = childElement.innerText;
            switch (textTransform) {
              case "uppercase":
                text2 = text2.toUpperCase();
                break;
              case "lowercase":
                text2 = text2.toLowerCase();
                break;
              case "capitalize":
                text2 = text2.replace(/(^|\s)\S/g, (l) => l.toUpperCase());
                break;
            }
            result += text2;
          }
        }
      } else if (childNode[nodeType] === NodeTypeEnum_default.textNode) {
        result += childNode.textContent.replace(/[\n\r]/, "");
      }
    }
    return result;
  }
  set innerText(text2) {
    for (const child of this[childNodes].slice()) {
      this.removeChild(child);
    }
    const texts = text2.split(/[\n\r]/);
    for (let i = 0, max3 = texts.length;i < max3; i++) {
      if (i !== 0) {
        this.appendChild(this[ownerDocument].createElement("br"));
      }
      this.appendChild(this[ownerDocument].createTextNode(texts[i]));
    }
  }
  get outerText() {
    return this.innerText;
  }
  set outerText(text2) {
    if (!this[parentNode]) {
      throw new DOMException("Failed to set the 'outerHTML' property on 'Element': This element has no parent node.");
    }
    const texts = text2.split(/[\n\r]/);
    for (let i = 0, max3 = texts.length;i < max3; i++) {
      if (i !== 0) {
        this[parentNode].insertBefore(this[ownerDocument].createElement("br"), this);
      }
      this[parentNode].insertBefore(this[ownerDocument].createTextNode(texts[i]), this);
    }
    this[parentNode].removeChild(this);
  }
  get style() {
    if (!this[style2]) {
      this[style2] = new CSSStyleDeclaration(this);
    }
    return this[style2];
  }
  set style(cssText2) {
    this.style.cssText = typeof cssText2 === "string" ? cssText2 : "";
  }
  get dataset() {
    return __classPrivateFieldSet10(this, _HTMLElement_dataset, __classPrivateFieldGet13(this, _HTMLElement_dataset, "f") ?? DatasetFactory.createDataset(this), "f");
  }
  get dir() {
    return this.getAttribute("dir") || "";
  }
  set dir(direction) {
    this.setAttribute("dir", direction);
  }
  get hidden() {
    return this.getAttribute("hidden") !== null;
  }
  set hidden(hidden) {
    if (!hidden) {
      this.removeAttribute("hidden");
    } else {
      this.setAttribute("hidden", "");
    }
  }
  get inert() {
    return this.getAttribute("inert") !== null;
  }
  set inert(inert) {
    if (!inert) {
      this.removeAttribute("inert");
    } else {
      this.setAttribute("inert", "");
    }
  }
  get lang() {
    return this.getAttribute("lang") || "";
  }
  set lang(lang) {
    this.setAttribute("lang", lang);
  }
  get title() {
    return this.getAttribute("title") || "";
  }
  set title(title) {
    this.setAttribute("title", title);
  }
  click() {
    const event = new PointerEvent("click", {
      bubbles: true,
      composed: true
    });
    event[target] = this;
    event[currentTarget] = this;
    this.dispatchEvent(event);
  }
  blur() {
    HTMLElementUtility.blur(this);
  }
  focus() {
    HTMLElementUtility.focus(this);
  }
  [(_HTMLElement_dataset = new WeakMap, _HTMLElement_customElementDefineCallback = new WeakMap, _a15 = attributes, _b11 = accessKey, _c10 = contentEditable, _d7 = isContentEditable, _e5 = offsetHeight, _f4 = offsetWidth, _g4 = offsetLeft, _h4 = offsetTop, _j4 = clientHeight, _k3 = clientWidth, _l3 = clientLeft, _m3 = clientTop, _o3 = style2, cloneNode)](deep = false) {
    const clone = super[cloneNode](deep);
    clone[accessKey] = this[accessKey];
    clone[contentEditable] = this[contentEditable];
    clone[isContentEditable] = this[isContentEditable];
    if (this[style2]) {
      clone.style.cssText = this[style2].cssText;
    }
    return clone;
  }
  [connectToNode](parentNode2 = null) {
    const localName2 = this[localName];
    if (this.constructor === HTMLElement2 && localName2.includes("-") && this[ownerDocument][ownerWindow].customElements[callbacks]) {
      const callbacks2 = this[ownerDocument][ownerWindow].customElements[callbacks];
      if (parentNode2 && !__classPrivateFieldGet13(this, _HTMLElement_customElementDefineCallback, "f")) {
        const callback = () => {
          if (this[parentNode]) {
            const newElement = this[ownerDocument].createElement(localName2);
            newElement[childNodes] = this[childNodes];
            newElement[children] = this[children];
            newElement[isConnected] = this[isConnected];
            newElement[rootNode] = this[rootNode];
            newElement[formNode] = this[formNode];
            newElement[selectNode] = this[selectNode];
            newElement[textAreaNode] = this[textAreaNode];
            newElement[observers] = this[observers];
            newElement[isValue] = this[isValue];
            for (let i = 0, max3 = this[attributes].length;i < max3; i++) {
              newElement[attributes].setNamedItem(this[attributes][i]);
            }
            this[childNodes] = new NodeList;
            this[children] = new HTMLCollection;
            this[rootNode] = null;
            this[formNode] = null;
            this[selectNode] = null;
            this[textAreaNode] = null;
            this[observers] = [];
            this[isValue] = null;
            this[attributes] = new HTMLElementNamedNodeMap(this);
            for (let i = 0, max3 = this[parentNode][childNodes].length;i < max3; i++) {
              if (this[parentNode][childNodes][i] === this) {
                this[parentNode][childNodes][i] = newElement;
                break;
              }
            }
            if (this[parentNode][children]) {
              for (let i = 0, max3 = this[parentNode][children].length;i < max3; i++) {
                if (this[parentNode][children][i] === this) {
                  this[parentNode][children][i] = newElement;
                  break;
                }
              }
            }
            if (newElement[isConnected] && newElement.connectedCallback) {
              const result = newElement.connectedCallback();
              if (result instanceof Promise) {
                const asyncTaskManager2 = this[ownerDocument][ownerWindow][asyncTaskManager];
                const taskID = asyncTaskManager2.startTask();
                result.then(() => asyncTaskManager2.endTask(taskID)).catch(() => asyncTaskManager2.endTask(taskID));
              }
            }
            this[connectToNode](null);
          }
        };
        callbacks2[localName2] = callbacks2[localName2] || [];
        callbacks2[localName2].push(callback);
        __classPrivateFieldSet10(this, _HTMLElement_customElementDefineCallback, callback, "f");
      } else if (!parentNode2 && callbacks2[localName2] && __classPrivateFieldGet13(this, _HTMLElement_customElementDefineCallback, "f")) {
        const index = callbacks2[localName2].indexOf(__classPrivateFieldGet13(this, _HTMLElement_customElementDefineCallback, "f"));
        if (index !== -1) {
          callbacks2[localName2].splice(index, 1);
        }
        if (!callbacks2[localName2].length) {
          delete callbacks2[localName2];
        }
        __classPrivateFieldSet10(this, _HTMLElement_customElementDefineCallback, null, "f");
      }
    }
    super[connectToNode](parentNode2);
  }
}

// node_modules/happy-dom-without-node/lib/nodes/html-template-element/HTMLTemplateElement.js
var _a16;

class HTMLTemplateElement extends HTMLElement2 {
  constructor() {
    super(...arguments);
    this[_a16] = this[ownerDocument].createDocumentFragment();
  }
  get content() {
    return this[content];
  }
  get innerHTML() {
    return this.getInnerHTML();
  }
  set innerHTML(html) {
    const content2 = this[content];
    for (const child of content2[childNodes].slice()) {
      this[content].removeChild(child);
    }
    XMLParser.parse(this[ownerDocument], html, {
      rootNode: this[content]
    });
  }
  get firstChild() {
    return this[content].firstChild;
  }
  get lastChild() {
    return this[content].lastChild;
  }
  getInnerHTML(options3) {
    const xmlSerializer = new XMLSerializer({
      includeShadowRoots: options3 && options3.includeShadowRoots,
      escapeEntities: false
    });
    const content2 = this[content];
    let xml = "";
    for (const node2 of content2[childNodes]) {
      xml += xmlSerializer.serializeToString(node2);
    }
    return xml;
  }
  [(_a16 = content, appendChild)](node2) {
    return this[content].appendChild(node2);
  }
  [removeChild](node2) {
    return this[content].removeChild(node2);
  }
  [insertBefore](newNode, referenceNode) {
    return this[content].insertBefore(newNode, referenceNode);
  }
  [replaceChild](newChild, oldChild) {
    return this[content].replaceChild(newChild, oldChild);
  }
  [cloneNode](deep = false) {
    const clone = super[cloneNode](deep);
    clone[content] = this[content].cloneNode(deep);
    return clone;
  }
}

// node_modules/happy-dom-without-node/lib/event/events/SubmitEvent.js
class SubmitEvent extends Event_default {
  constructor(type, eventInit = null) {
    super(type, eventInit);
    this.submitter = eventInit?.submitter ?? null;
  }
}

// node_modules/happy-dom-without-node/lib/nodes/html-form-element/RadioNodeList.js
class RadioNodeList extends NodeList {
  get value() {
    for (const node2 of this) {
      if (node2.checked) {
        return node2.value;
      }
    }
    return null;
  }
}

// node_modules/happy-dom-without-node/lib/nodes/html-form-element/HTMLFormControlsCollection.js
var _a17;

class HTMLFormControlsCollection extends Array {
  constructor() {
    super(...arguments);
    this[_a17] = {};
  }
  item(index) {
    return index >= 0 && this[index] ? this[index] : null;
  }
  namedItem(name2) {
    if (this[namedItems][name2] && this[namedItems][name2].length) {
      if (this[namedItems][name2].length === 1) {
        return this[namedItems][name2][0];
      }
      return this[namedItems][name2];
    }
    return null;
  }
  [(_a17 = namedItems, appendNamedItem)](node2, name2) {
    if (name2) {
      this[namedItems][name2] = this[namedItems][name2] || new RadioNodeList;
      if (!this[namedItems][name2].includes(node2)) {
        this[namedItems][name2].push(node2);
      }
      if (this[isValidPropertyName](name2)) {
        this[name2] = this[namedItems][name2].length > 1 ? this[namedItems][name2] : this[namedItems][name2][0];
      }
    }
  }
  [removeNamedItem](node2, name2) {
    if (name2 && this[namedItems][name2]) {
      const index = this[namedItems][name2].indexOf(node2);
      if (index > -1) {
        this[namedItems][name2].splice(index, 1);
        if (this[namedItems][name2].length === 0) {
          delete this[namedItems][name2];
          if (this.hasOwnProperty(name2) && this[isValidPropertyName](name2)) {
            delete this[name2];
          }
        } else if (this[isValidPropertyName](name2)) {
          this[name2] = this[namedItems][name2].length > 1 ? this[namedItems][name2] : this[namedItems][name2][0];
        }
      }
    }
  }
  [isValidPropertyName](name2) {
    return !!name2 && !this.constructor.prototype.hasOwnProperty(name2) && !Array.prototype.hasOwnProperty(name2) && (isNaN(Number(name2)) || name2.includes("."));
  }
}

// node_modules/happy-dom-without-node/lib/fetch/AbortController.js
class NotSupported2 {
}

// node_modules/happy-dom-without-node/lib/browser/utilities/BrowserFrameFactory.js
class BrowserFrameFactory {
  static createChildFrame(parentFrame) {
    const frame = new parentFrame.constructor(parentFrame.page);
    frame.parentFrame = parentFrame;
    parentFrame.childFrames.push(frame);
    return frame;
  }
  static destroyFrame(frame) {
    return new Promise((resolve3, reject) => {
      if (!frame.window) {
        resolve3();
        return;
      }
      if (frame.parentFrame) {
        const index = frame.parentFrame.childFrames.indexOf(frame);
        if (index !== -1) {
          frame.parentFrame.childFrames.splice(index, 1);
        }
      }
      if (!frame.childFrames.length) {
        if (frame.window && frame.window[mutationObservers]) {
          for (const mutationObserver of frame.window[mutationObservers]) {
            mutationObserver.disconnect();
          }
          frame.window[mutationObservers] = [];
        }
        return frame[asyncTaskManager].destroy().then(() => {
          frame[exceptionObserver]?.disconnect();
          if (frame.window) {
            frame.window[destroy]();
            frame.page = null;
            frame.window = null;
            frame[openerFrame] = null;
            frame[openerWindow] = null;
          }
          resolve3();
        }).catch((error4) => reject(error4));
      }
      Promise.all(frame.childFrames.slice().map((childFrame) => this.destroyFrame(childFrame))).then(() => {
        if (frame.window && frame.window[mutationObservers]) {
          for (const mutationObserver of frame.window[mutationObservers]) {
            mutationObserver.disconnect();
          }
          frame.window[mutationObservers] = [];
        }
        return frame[asyncTaskManager].destroy().then(() => {
          frame[exceptionObserver]?.disconnect();
          if (frame.window) {
            const listeners2 = frame[listeners];
            frame.window[destroy]();
            frame.page = null;
            frame.window = null;
            frame[listeners] = null;
            frame[openerFrame] = null;
            frame[openerWindow] = null;
            for (const listener of listeners2.navigation) {
              listener();
            }
          }
          resolve3();
        });
      }).catch((error4) => reject(error4));
    });
  }
}

// node_modules/happy-dom-without-node/lib/browser/utilities/BrowserFrameURL.js
class BrowserFrameURL {
  static getRelativeURL(frame, url4) {
    url4 = url4 || "about:blank";
    if (url4.startsWith("about:") || url4.startsWith("javascript:")) {
      return new $URL(url4);
    }
    try {
      return new $URL(url4, frame.window.location.href);
    } catch (e) {
      return new $URL("about:blank");
    }
  }
}

// node_modules/happy-dom-without-node/lib/browser/enums/BrowserNavigationCrossOriginPolicyEnum.js
var BrowserNavigationCrossOriginPolicyEnum;
(function(BrowserNavigationCrossOriginPolicyEnum2) {
  BrowserNavigationCrossOriginPolicyEnum2["anyOrigin"] = "anyOrigin";
  BrowserNavigationCrossOriginPolicyEnum2["sameOrigin"] = "sameOrigin";
  BrowserNavigationCrossOriginPolicyEnum2["strictOrigin"] = "strictOrigin";
})(BrowserNavigationCrossOriginPolicyEnum || (BrowserNavigationCrossOriginPolicyEnum = {}));
var BrowserNavigationCrossOriginPolicyEnum_default = BrowserNavigationCrossOriginPolicyEnum;

// node_modules/happy-dom-without-node/lib/polyfills/vm.js
class Script {
  constructor(code2) {
    this.code = code2;
  }
  runInContext(context) {
    const evaluate = (code2) => {
      globalThis.eval(code2);
    };
    evaluate.call(context, this.code);
  }
}
var contextSymbol = Symbol("context");
var isContext = (context) => {
  return context[contextSymbol] === true;
};
var createContext = (context) => {
  context[contextSymbol] = true;
  return context;
};
var vm_default = { Script, isContext, createContext };

// node_modules/happy-dom-without-node/lib/browser/utilities/BrowserFrameScriptEvaluator.js
class BrowserFrameScriptEvaluator {
  static evaluate(frame, script) {
    if (!frame.window) {
      throw new Error('The frame has been destroyed, the "window" property is not set.');
    }
    script = typeof script === "string" ? new Script(script) : script;
    return script.runInContext(frame.window);
  }
}

// node_modules/happy-dom-without-node/lib/browser/utilities/BrowserFrameExceptionObserver.js
class BrowserFrameExceptionObserver {
  constructor() {
    this.browserFrame = null;
    this.uncaughtExceptionListener = null;
    this.uncaughtRejectionListener = null;
  }
  observe(browserFrame) {
    if (this.browserFrame) {
      throw new Error("Already observing.");
    }
    this.browserFrame = browserFrame;
    this.constructor.listenerCount++;
    this.uncaughtExceptionListener = (error4, origin) => {
      if (origin === "unhandledRejection") {
        return;
      }
      if (!this.browserFrame.window) {
        throw new Error("Browser frame was not closed correctly. Window is undefined on browser frame, but exception observer is still watching.");
      }
      if (error4 instanceof this.browserFrame.window.Error || error4 instanceof this.browserFrame.window.DOMException) {
        this.browserFrame.window.console.error(error4);
        this.browserFrame.window.dispatchEvent(new this.browserFrame.window.ErrorEvent("error", { error: error4, message: error4.message }));
      } else if (process.listenerCount("uncaughtException") === this.constructor.listenerCount) {
        console.error(error4);
        process.exit(1);
      }
    };
    this.uncaughtRejectionListener = (error4) => {
      if (!this.browserFrame.window) {
        throw new Error("Browser frame was not closed correctly. Window is undefined on browser frame, but exception observer is still watching.");
      }
      if (error4 instanceof this.browserFrame.window.Error || error4 instanceof this.browserFrame.window.DOMException) {
        this.browserFrame.window.console.error(error4);
        this.browserFrame.window.dispatchEvent(new this.browserFrame.window.ErrorEvent("error", { error: error4, message: error4.message }));
      } else if (process.listenerCount("unhandledRejection") === this.constructor.listenerCount) {
        console.error(error4);
        process.exit(1);
      }
    };
    process.on("uncaughtException", this.uncaughtExceptionListener);
    process.on("unhandledRejection", this.uncaughtRejectionListener);
  }
  disconnect() {
    if (!this.browserFrame) {
      return;
    }
    this.constructor.listenerCount--;
    process.off("uncaughtException", this.uncaughtExceptionListener);
    process.off("unhandledRejection", this.uncaughtRejectionListener);
    this.uncaughtExceptionListener = null;
    this.uncaughtRejectionListener = null;
    this.browserFrame = null;
  }
}
BrowserFrameExceptionObserver.listenerCount = 0;
var BrowserFrameExceptionObserver_default = BrowserFrameExceptionObserver;

// node_modules/happy-dom-without-node/lib/browser/detached-browser/DetachedBrowserFrame.js
var _a18;
var _b12;
var _c11;
var _d8;
var _e6;
var _f5;

class DetachedBrowserFrame {
  constructor(page) {
    this.childFrames = [];
    this.parentFrame = null;
    this[_a18] = new AsyncTaskManager_default;
    this[_b12] = null;
    this[_c11] = { navigation: [] };
    this[_d8] = null;
    this[_e6] = null;
    this[_f5] = false;
    this.page = page;
    if (page.context.browser.contexts[0]?.pages[0]?.mainFrame) {
      this.window = new this.page.context.browser.windowClass(this);
    }
    if (page.context.browser.settings.errorCapture === BrowserErrorCaptureEnum_default.processLevel) {
      this[exceptionObserver] = new BrowserFrameExceptionObserver_default;
      this[exceptionObserver].observe(this);
    }
  }
  get content() {
    if (!this.window) {
      throw new Error('The frame has been destroyed, the "window" property is not set.');
    }
    return this.window.document.documentElement.outerHTML;
  }
  set content(content2) {
    if (!this.window) {
      throw new Error('The frame has been destroyed, the "window" property is not set.');
    }
    this.window.document[isFirstWrite] = true;
    this.window.document[isFirstWriteAfterOpen] = false;
    this.window.document.open();
    this.window.document.write(content2);
  }
  get url() {
    if (!this.window) {
      throw new Error('The frame has been destroyed, the "window" property is not set.');
    }
    return this.window.location.href;
  }
  set url(url4) {
    if (!this.window) {
      throw new Error('The frame has been destroyed, the "window" property is not set.');
    }
    this.window.location[setURL](this, BrowserFrameURL.getRelativeURL(this, url4).href);
  }
  get document() {
    return this.window?.document ?? null;
  }
  async waitUntilComplete() {
    await Promise.all([
      this[asyncTaskManager].waitUntilComplete(),
      ...this.childFrames.map((frame) => frame.waitUntilComplete())
    ]);
  }
  waitForNavigation() {
    return new Promise((resolve3) => this[listeners].navigation.push(resolve3));
  }
  abort() {
    if (!this.childFrames.length) {
      return this[asyncTaskManager].abort();
    }
    return new Promise((resolve3, reject) => {
      Promise.all(this.childFrames.map((frame) => frame.abort()).concat([this[asyncTaskManager].abort()])).then(() => resolve3()).catch(reject);
    });
  }
  evaluate(script) {
    return BrowserFrameScriptEvaluator.evaluate(this, script);
  }
  goto(url4, options3) {
    return BrowserFrameNavigator2.navigate({
      windowClass: this.page.context.browser.windowClass,
      frame: this,
      url: url4,
      goToOptions: options3
    });
  }
  reload(options3) {
    return BrowserFrameNavigator2.navigate({
      windowClass: this.page.context.browser.windowClass,
      frame: this,
      url: this.url,
      goToOptions: options3
    });
  }
}
_a18 = asyncTaskManager, _b12 = exceptionObserver, _c11 = listeners, _d8 = openerFrame, _e6 = openerWindow, _f5 = popup;
var DetachedBrowserFrame_default = DetachedBrowserFrame;

// node_modules/happy-dom-without-node/lib/browser/utilities/BrowserFrameValidator.js
class BrowserFrameValidator {
  static validateCrossOriginPolicy(frame, toURL) {
    const settings = frame.page.context.browser.settings;
    let fromURL = frame.page.mainFrame.window.location;
    if (frame[openerFrame]) {
      fromURL = frame[openerFrame].window.location;
    } else if (frame.parentFrame) {
      fromURL = frame.parentFrame.window.location;
    }
    if (settings.navigation.crossOriginPolicy === BrowserNavigationCrossOriginPolicyEnum_default.sameOrigin && fromURL.protocol !== "about:" && toURL.protocol !== "about:" && toURL.protocol !== "javascript:" && fromURL.origin !== toURL.origin) {
      return false;
    }
    if (settings.navigation.crossOriginPolicy === BrowserNavigationCrossOriginPolicyEnum_default.strictOrigin && fromURL.protocol === "https:" && toURL.protocol === "http:") {
      return false;
    }
    return true;
  }
  static validateFrameNavigation(frame) {
    const settings = frame.page.context.browser.settings;
    if (frame instanceof DetachedBrowserFrame_default && frame.page.context === frame.page.context.browser.defaultContext && frame.page.context.pages[0] === frame.page && frame.page.mainFrame === frame) {
      return false;
    }
    if (settings.navigation.disableMainFrameNavigation && frame.page.mainFrame === frame) {
      return false;
    }
    if (settings.navigation.disableChildFrameNavigation && frame.page.mainFrame !== frame) {
      return false;
    }
    if (settings.navigation.disableChildPageNavigation && !!frame[openerFrame]) {
      return false;
    }
    return true;
  }
}

// node_modules/happy-dom-without-node/lib/browser/utilities/BrowserFrameNavigator.js
class BrowserFrameNavigator2 {
  static async navigate(options3) {
    const { windowClass, frame, url: url4, formData, method, goToOptions } = options3;
    const referrer2 = goToOptions?.referrer || frame.window.location.origin;
    const targetURL = BrowserFrameURL.getRelativeURL(frame, url4);
    if (!frame.window) {
      throw new Error('The frame has been destroyed, the "window" property is not set.');
    }
    if (targetURL.protocol === "javascript:") {
      if (frame && !frame.page.context.browser.settings.disableJavaScriptEvaluation) {
        const readyStateManager3 = frame.window[readyStateManager];
        readyStateManager3.startTask();
        await new Promise((resolve3) => frame.page.mainFrame.window.setTimeout(resolve3));
        const code2 = "//# sourceURL=" + frame.url + "\n" + targetURL.href.replace("javascript:", "");
        if (frame.page.context.browser.settings.disableErrorCapturing || frame.page.context.browser.settings.errorCapture !== BrowserErrorCaptureEnum_default.tryAndCatch) {
          frame.window.eval(code2);
        } else {
          WindowErrorUtility.captureError(frame.window, () => frame.window.eval(code2));
        }
        readyStateManager3.endTask();
      }
      return null;
    }
    if (!BrowserFrameValidator.validateCrossOriginPolicy(frame, targetURL)) {
      return null;
    }
    if (!BrowserFrameValidator.validateFrameNavigation(frame)) {
      if (!frame.page.context.browser.settings.navigation.disableFallbackToSetURL) {
        frame.window.location[setURL](frame, targetURL.href);
      }
      return null;
    }
    const width2 = frame.window.innerWidth;
    const height2 = frame.window.innerHeight;
    const devicePixelRatio = frame.window.devicePixelRatio;
    const parentWindow = frame.window.parent !== frame.window ? frame.window.parent : null;
    const topWindow = frame.window.top !== frame.window ? frame.window.top : null;
    for (const childFrame of frame.childFrames) {
      BrowserFrameFactory.destroyFrame(childFrame);
    }
    frame.childFrames = [];
    frame.window[destroy]();
    frame[asyncTaskManager].destroy();
    frame[asyncTaskManager] = new AsyncTaskManager_default;
    frame.window = new windowClass(frame, { url: targetURL.href, width: width2, height: height2 });
    frame.window.parent = parentWindow;
    frame.window.top = topWindow;
    frame.window.devicePixelRatio = devicePixelRatio;
    if (referrer2) {
      frame.window.document[referrer] = referrer2;
    }
    if (targetURL.protocol === "about:") {
      return null;
    }
    const readyStateManager2 = frame.window[readyStateManager];
    readyStateManager2.startTask();
    const abortController = new NotSupported2;
    let response;
    let responseText;
    const timeout = frame.window.setTimeout(() => abortController.abort(new Error("Request timed out.")), goToOptions?.timeout ?? 30000);
    const finalize = () => {
      frame.window.clearTimeout(timeout);
      readyStateManager2.endTask();
      const listeners2 = frame[listeners].navigation;
      frame[listeners].navigation = [];
      for (const listener of listeners2) {
        listener();
      }
    };
    try {
      response = await frame.window.fetch(targetURL.href, {
        referrer: referrer2,
        referrerPolicy: goToOptions?.referrerPolicy || "origin",
        signal: abortController.signal,
        method: method || (formData ? "POST" : "GET"),
        headers: goToOptions?.hard ? { "Cache-Control": "no-cache" } : undefined,
        body: formData
      });
      if (frame.parentFrame) {
        const originURL = frame.parentFrame.window.location;
        const xFrameOptions = response.headers?.get("X-Frame-Options")?.toLowerCase();
        const isSameOrigin = originURL.origin === targetURL.origin || targetURL.origin === "null";
        if (xFrameOptions === "deny" || xFrameOptions === "sameorigin" && !isSameOrigin) {
          throw new Error(`Refused to display '${url4}' in a frame because it set 'X-Frame-Options' to '${xFrameOptions}'.`);
        }
      }
      responseText = await response.text();
    } catch (error4) {
      finalize();
      throw error4;
    }
    if (!response.ok) {
      frame.page.console.error(`GET ${targetURL.href} ${response.status} (${response.statusText})`);
    }
    frame.window.requestAnimationFrame(() => frame.content = responseText);
    await new Promise((resolve3) => frame.window.requestAnimationFrame(() => {
      finalize();
      resolve3(null);
    }));
    return response;
  }
}

// node_modules/happy-dom-without-node/lib/polyfills/buffer.js
class Buffer {
  static from() {
    return new Buffer;
  }
}

// node_modules/happy-dom-without-node/lib/file/Blob.js
var _a19;

class Blob2 {
  constructor(bits, options3) {
    this.type = "";
    this[_a19] = null;
    const buffers = [];
    if (bits) {
      for (const bit of bits) {
        let buffer3;
        if (bit instanceof ArrayBuffer) {
          buffer3 = Buffer.from(new Uint8Array(bit));
        } else if (bit instanceof Blob2) {
          buffer3 = bit[buffer];
        } else if (bit instanceof Buffer) {
          buffer3 = bit;
        } else if (ArrayBuffer.isView(bit)) {
          buffer3 = Buffer.from(new Uint8Array(bit.buffer, bit.byteOffset, bit.byteLength));
        } else {
          buffer3 = Buffer.from(typeof bit === "string" ? bit : String(bit));
        }
        buffers.push(buffer3);
      }
    }
    this[buffer] = Buffer.concat(buffers);
    if (options3 && options3.type && options3.type.match(/^[\u0020-\u007E]*$/)) {
      this.type = String(options3.type).toLowerCase();
    }
  }
  get size() {
    return this[buffer].length;
  }
  slice(start3 = 0, end3 = null, contentType2 = "") {
    const size = this.size;
    let relativeStart;
    let relativeEnd;
    let relativeContentType;
    if (start3 === undefined) {
      relativeStart = 0;
    } else if (start3 < 0) {
      relativeStart = Math.max(size + start3, 0);
    } else {
      relativeStart = Math.min(start3, size);
    }
    if (end3 === null) {
      relativeEnd = size;
    } else if (end3 < 0) {
      relativeEnd = Math.max(size + end3, 0);
    } else {
      relativeEnd = Math.min(end3, size);
    }
    if (contentType2 === undefined) {
      relativeContentType = "";
    } else {
      relativeContentType = contentType2;
    }
    const span2 = Math.max(relativeEnd - relativeStart, 0);
    const buffer3 = this[buffer];
    const slicedBuffer = buffer3.slice(relativeStart, relativeStart + span2);
    const blob = new Blob2([], { type: relativeContentType });
    blob[buffer] = slicedBuffer;
    return blob;
  }
  async arrayBuffer() {
    return new Uint8Array(this[buffer]).buffer;
  }
  async text() {
    return this[buffer].toString();
  }
  toString() {
    return "[object Blob]";
  }
}
_a19 = buffer;
var Blob_default = Blob2;

// node_modules/happy-dom-without-node/lib/file/File.js
class File extends Blob_default {
  constructor(bits, name2, options3) {
    super(bits, options3);
    this.lastModified = null;
    this.name = null;
    this.name = name2.replace(/\//g, ":");
    this.lastModified = options3 && options3.lastModified ? options3.lastModified : Date.now();
  }
}

// node_modules/happy-dom-without-node/lib/form-data/FormData.js
var __classPrivateFieldGet14 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet11 = function(receiver, state, value2, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
};
var _FormData_instances;
var _FormData_entries;
var _FormData_parseValue;
var SUBMITTABLE_ELEMENTS = ["BUTTON", "INPUT", "OBJECT", "SELECT", "TEXTAREA"];

class FormData {
  constructor(form) {
    _FormData_instances.add(this);
    _FormData_entries.set(this, []);
    if (form) {
      for (const name2 of Object.keys(form[elements][namedItems])) {
        let radioNodeList = form[elements][namedItems][name2];
        if (radioNodeList[0][tagName3] === "INPUT" && (radioNodeList[0].type === "checkbox" || radioNodeList[0].type === "radio")) {
          const newRadioNodeList = new RadioNodeList;
          for (const node2 of radioNodeList) {
            if (node2.checked) {
              newRadioNodeList.push(node2);
              break;
            }
          }
          radioNodeList = newRadioNodeList;
        }
        for (const node2 of radioNodeList) {
          if (node2.name && SUBMITTABLE_ELEMENTS.includes(node2[tagName3])) {
            if (node2[tagName3] === "INPUT" && node2.type === "file") {
              if (node2[files].length === 0) {
                this.append(node2.name, new File([], "", { type: "application/octet-stream" }));
              } else {
                for (const file of node2[files]) {
                  this.append(node2.name, file);
                }
              }
            } else if (node2.value) {
              this.append(node2.name, node2.value);
            }
          }
        }
      }
    }
  }
  forEach(callback) {
    for (const entry of __classPrivateFieldGet14(this, _FormData_entries, "f")) {
      callback.call(this, entry.value, entry.name, this);
    }
  }
  append(name2, value2, filename) {
    __classPrivateFieldGet14(this, _FormData_entries, "f").push({
      name: name2,
      value: __classPrivateFieldGet14(this, _FormData_instances, "m", _FormData_parseValue).call(this, value2, filename)
    });
  }
  delete(name2) {
    const newEntries = [];
    for (const entry of __classPrivateFieldGet14(this, _FormData_entries, "f")) {
      if (entry.name !== name2) {
        newEntries.push(entry);
      }
    }
    __classPrivateFieldSet11(this, _FormData_entries, newEntries, "f");
  }
  get(name2) {
    for (const entry of __classPrivateFieldGet14(this, _FormData_entries, "f")) {
      if (entry.name === name2) {
        return entry.value;
      }
    }
    return null;
  }
  getAll(name2) {
    const values = [];
    for (const entry of __classPrivateFieldGet14(this, _FormData_entries, "f")) {
      if (entry.name === name2) {
        values.push(entry.value);
      }
    }
    return values;
  }
  has(name2) {
    for (const entry of __classPrivateFieldGet14(this, _FormData_entries, "f")) {
      if (entry.name === name2) {
        return true;
      }
    }
    return false;
  }
  set(name2, value2, filename) {
    for (const entry of __classPrivateFieldGet14(this, _FormData_entries, "f")) {
      if (entry.name === name2) {
        entry.value = __classPrivateFieldGet14(this, _FormData_instances, "m", _FormData_parseValue).call(this, value2, filename);
        return;
      }
    }
    this.append(name2, value2);
  }
  *keys() {
    for (const entry of __classPrivateFieldGet14(this, _FormData_entries, "f")) {
      yield entry.name;
    }
  }
  *values() {
    for (const entry of __classPrivateFieldGet14(this, _FormData_entries, "f")) {
      yield entry.value;
    }
  }
  *entries() {
    for (const entry of __classPrivateFieldGet14(this, _FormData_entries, "f")) {
      yield [entry.name, entry.value];
    }
  }
  *[(_FormData_entries = new WeakMap, _FormData_instances = new WeakSet, Symbol.iterator)]() {
    for (const entry of __classPrivateFieldGet14(this, _FormData_entries, "f")) {
      yield [entry.name, entry.value];
    }
  }
}
_FormData_parseValue = function _FormData_parseValue2(value2, filename) {
  if (value2 instanceof Blob_default && !(value2 instanceof File)) {
    const file = new File([], "blob", { type: value2.type });
    file[buffer] = value2[buffer];
    return file;
  }
  if (value2 instanceof File) {
    if (filename) {
      const file = new File([], filename, { type: value2.type, lastModified: value2.lastModified });
      file[buffer] = value2[buffer];
      return file;
    }
    return value2;
  }
  return String(value2);
};
var FormData_default = FormData;

// node_modules/happy-dom-without-node/lib/nodes/html-form-element/HTMLFormElement.js
var __classPrivateFieldSet12 = function(receiver, state, value2, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
};
var __classPrivateFieldGet15 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _HTMLFormElement_instances;
var _HTMLFormElement_browserFrame;
var _HTMLFormElement_submit;
var _a20;
var _b13;
var _c12;

class HTMLFormElement extends HTMLElement2 {
  constructor(browserFrame) {
    super();
    _HTMLFormElement_instances.add(this);
    this[_a20] = new HTMLFormControlsCollection;
    this[_b13] = 0;
    this[_c12] = this;
    this.onformdata = null;
    this.onreset = null;
    this.onsubmit = null;
    _HTMLFormElement_browserFrame.set(this, undefined);
    __classPrivateFieldSet12(this, _HTMLFormElement_browserFrame, browserFrame, "f");
  }
  get elements() {
    return this[elements];
  }
  get length() {
    return this[length];
  }
  get name() {
    return this.getAttribute("name") || "";
  }
  set name(name2) {
    this.setAttribute("name", name2);
  }
  get method() {
    return this.getAttribute("method") || "get";
  }
  set method(method) {
    this.setAttribute("method", method);
  }
  get target() {
    return this.getAttribute("target") || "";
  }
  set target(target2) {
    this.setAttribute("target", target2);
  }
  get action() {
    if (!this.hasAttribute("action")) {
      return this[ownerDocument].location.href;
    }
    try {
      return new URL(this.getAttribute("action"), this[ownerDocument].location.href).href;
    } catch (e) {
      return "";
    }
  }
  set action(action) {
    this.setAttribute("action", action);
  }
  get encoding() {
    return this.getAttribute("encoding") || "";
  }
  set encoding(encoding) {
    this.setAttribute("encoding", encoding);
  }
  get enctype() {
    return this.getAttribute("enctype") || "";
  }
  set enctype(enctype) {
    this.setAttribute("enctype", enctype);
  }
  get autocomplete() {
    return this.getAttribute("autocomplete") || "";
  }
  set autocomplete(autocomplete) {
    this.setAttribute("autocomplete", autocomplete);
  }
  get acceptCharset() {
    return this.getAttribute("acceptcharset") || "";
  }
  set acceptCharset(acceptCharset) {
    this.setAttribute("acceptcharset", acceptCharset);
  }
  get noValidate() {
    return this.getAttribute("novalidate") !== null;
  }
  set noValidate(noValidate) {
    if (!noValidate) {
      this.removeAttribute("novalidate");
    } else {
      this.setAttribute("novalidate", "");
    }
  }
  submit() {
    __classPrivateFieldGet15(this, _HTMLFormElement_instances, "m", _HTMLFormElement_submit).call(this);
  }
  requestSubmit(submitter) {
    const noValidate = submitter?.formNoValidate || this.noValidate;
    if (noValidate || this.checkValidity()) {
      this.dispatchEvent(new SubmitEvent("submit", { bubbles: true, cancelable: true, submitter: submitter || this }));
      __classPrivateFieldGet15(this, _HTMLFormElement_instances, "m", _HTMLFormElement_submit).call(this, submitter);
    }
  }
  reset() {
    for (const element of this[elements]) {
      if (element[tagName3] === "INPUT" || element[tagName3] === "TEXTAREA") {
        element[value] = null;
        element[checked] = null;
      } else if (element[tagName3] === "TEXTAREA") {
        element[value] = null;
      } else if (element[tagName3] === "SELECT") {
        let hasSelectedAttribute = false;
        for (const option of element.options) {
          if (option.hasAttribute("selected")) {
            hasSelectedAttribute = true;
            option.selected = true;
            break;
          }
        }
        if (!hasSelectedAttribute && element.options.length > 0) {
          element.options[0].selected = true;
        }
      }
    }
    this.dispatchEvent(new Event_default("reset", { bubbles: true, cancelable: true }));
  }
  checkValidity() {
    const radioValidationState = {};
    let isFormValid = true;
    for (const element of this[elements]) {
      if (element[tagName3] === "INPUT" && element.type === "radio" && element.name) {
        if (!radioValidationState[element.name]) {
          radioValidationState[element.name] = true;
          if (!element.checkValidity()) {
            isFormValid = false;
          }
        }
      } else if (!element.checkValidity()) {
        isFormValid = false;
      }
    }
    return isFormValid;
  }
  reportValidity() {
    return this.checkValidity();
  }
  [(_HTMLFormElement_browserFrame = new WeakMap, _HTMLFormElement_instances = new WeakSet, _a20 = elements, _b13 = length, _c12 = formNode, cloneNode)](deep = false) {
    return super[cloneNode](deep);
  }
  [appendFormControlItem](node2, name2) {
    const elements2 = this[elements];
    if (!elements2.includes(node2)) {
      this[elements2.length] = node2;
      elements2.push(node2);
      this[length] = elements2.length;
    }
    elements2[appendNamedItem](node2, name2);
    if (this[isValidPropertyName](name2)) {
      this[name2] = elements2[name2];
    }
  }
  [removeFormControlItem](node2, name2) {
    const elements2 = this[elements];
    const index = elements2.indexOf(node2);
    if (index !== -1) {
      elements2.splice(index, 1);
      for (let i = index;i < this[length]; i++) {
        this[i] = this[i + 1];
      }
      delete this[this[length] - 1];
      this[length]--;
    }
    elements2[removeNamedItem](node2, name2);
    if (this[isValidPropertyName](name2)) {
      if (elements2[name2]) {
        this[name2] = elements2[name2];
      } else {
        delete this[name2];
      }
    }
  }
  [isValidPropertyName](name2) {
    return !!name2 && !HTMLFormElement.prototype.hasOwnProperty(name2) && !HTMLElement2.prototype.hasOwnProperty(name2) && !Element_default.prototype.hasOwnProperty(name2) && !Node_default.prototype.hasOwnProperty(name2) && (isNaN(Number(name2)) || name2.includes("."));
  }
}
_HTMLFormElement_submit = function _HTMLFormElement_submit2(submitter) {
  const action = submitter?.hasAttribute("formaction") ? submitter?.formAction || this.action : this.action;
  if (!action) {
    this[ownerDocument].location.hash = "#blocked";
    return;
  }
  const method = submitter?.formMethod || this.method;
  const formData = new FormData_default(this);
  let targetFrame;
  switch (submitter?.formTarget || this.target) {
    default:
    case "_self":
      targetFrame = __classPrivateFieldGet15(this, _HTMLFormElement_browserFrame, "f");
      break;
    case "_top":
      targetFrame = __classPrivateFieldGet15(this, _HTMLFormElement_browserFrame, "f").page.mainFrame;
      break;
    case "_parent":
      targetFrame = __classPrivateFieldGet15(this, _HTMLFormElement_browserFrame, "f").parentFrame ?? __classPrivateFieldGet15(this, _HTMLFormElement_browserFrame, "f");
      break;
    case "_blank":
      const newPage = __classPrivateFieldGet15(this, _HTMLFormElement_browserFrame, "f").page.context.newPage();
      targetFrame = newPage.mainFrame;
      targetFrame[openerFrame] = __classPrivateFieldGet15(this, _HTMLFormElement_browserFrame, "f");
      break;
  }
  if (method === "get") {
    const url4 = new URL(action);
    for (const [key, value2] of formData) {
      if (typeof value2 === "string") {
        url4.searchParams.append(key, value2);
      }
    }
    BrowserFrameNavigator2.navigate({
      windowClass: this[ownerDocument][defaultView].constructor,
      frame: targetFrame,
      url: url4.href,
      goToOptions: {
        referrer: __classPrivateFieldGet15(this, _HTMLFormElement_browserFrame, "f").page.mainFrame.window.location.origin
      }
    });
    return;
  }
  BrowserFrameNavigator2.navigate({
    windowClass: this[ownerDocument][defaultView].constructor,
    frame: targetFrame,
    method,
    url: action,
    formData,
    goToOptions: {
      referrer: __classPrivateFieldGet15(this, _HTMLFormElement_browserFrame, "f").page.mainFrame.window.location.origin
    }
  });
};
var HTMLFormElement_default = HTMLFormElement;

// node_modules/happy-dom-without-node/lib/nodes/html-unknown-element/HTMLUnknownElement.js
class HTMLUnknownElement extends HTMLElement2 {
}

// node_modules/happy-dom-without-node/lib/nodes/html-input-element/HTMLInputElementSelectionDirectionEnum.js
var HTMLInputElementSelectionDirectionEnum;
(function(HTMLInputElementSelectionDirectionEnum2) {
  HTMLInputElementSelectionDirectionEnum2["none"] = "none";
  HTMLInputElementSelectionDirectionEnum2["forward"] = "forward";
  HTMLInputElementSelectionDirectionEnum2["backward"] = "backward";
})(HTMLInputElementSelectionDirectionEnum || (HTMLInputElementSelectionDirectionEnum = {}));
var HTMLInputElementSelectionDirectionEnum_default = HTMLInputElementSelectionDirectionEnum;

// node_modules/happy-dom-without-node/lib/nodes/html-input-element/HTMLInputElementSelectionModeEnum.js
var HTMLInputElementSelectionModeEnum;
(function(HTMLInputElementSelectionModeEnum2) {
  HTMLInputElementSelectionModeEnum2["preserve"] = "preserve";
  HTMLInputElementSelectionModeEnum2["select"] = "select";
  HTMLInputElementSelectionModeEnum2["start"] = "start";
  HTMLInputElementSelectionModeEnum2["end"] = "end";
})(HTMLInputElementSelectionModeEnum || (HTMLInputElementSelectionModeEnum = {}));
var HTMLInputElementSelectionModeEnum_default = HTMLInputElementSelectionModeEnum;

// node_modules/happy-dom-without-node/lib/nodes/html-label-element/HTMLLabelElementUtility.js
class HTMLLabelElementUtility {
  static getAssociatedLabelElements(element) {
    const id = element.id;
    let labels;
    if (id) {
      const rootNode2 = element.getRootNode();
      labels = rootNode2.querySelectorAll(`label[for="${id}"]`);
    } else {
      labels = new NodeList;
    }
    let parent = element[parentNode];
    while (parent) {
      if (parent["tagName"] === "LABEL") {
        labels.push(parent);
        break;
      }
      parent = parent[parentNode];
    }
    return labels;
  }
}

// node_modules/happy-dom-without-node/lib/nodes/html-text-area-element/HTMLTextAreaElementNamedNodeMap.js
class HTMLTextAreaElementNamedNodeMap extends HTMLElementNamedNodeMap {
  setNamedItem(item2) {
    const replacedItem = super.setNamedItem(item2);
    if ((item2[name] === "id" || item2[name] === "name") && this[ownerElement][formNode]) {
      if (replacedItem && replacedItem[value]) {
        this[ownerElement][formNode][removeFormControlItem](this[ownerElement], replacedItem[value]);
      }
      if (item2[value]) {
        this[ownerElement][formNode][appendFormControlItem](this[ownerElement], item2[value]);
      }
    }
    return replacedItem || null;
  }
  [(ownerElement, removeNamedItem)](name2) {
    const removedItem = super[removeNamedItem](name2);
    if (removedItem && (removedItem[name] === "id" || removedItem[name] === "name") && this[ownerElement][formNode]) {
      this[ownerElement][formNode][removeFormControlItem](this[ownerElement], removedItem[value]);
    }
    return removedItem;
  }
}

// node_modules/happy-dom-without-node/lib/nodes/html-text-area-element/HTMLTextAreaElement.js
var __classPrivateFieldSet13 = function(receiver, state, value2, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
};
var __classPrivateFieldGet16 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _HTMLTextAreaElement_selectionStart;
var _HTMLTextAreaElement_selectionEnd;
var _HTMLTextAreaElement_selectionDirection;
var _a21;
var _b14;
var _c13;
var _d9;
var _e7;

class HTMLTextAreaElement extends HTMLElement2 {
  constructor() {
    super(...arguments);
    this.type = "textarea";
    this.oninput = null;
    this.onselectionchange = null;
    this[_a21] = new HTMLTextAreaElementNamedNodeMap(this);
    this[_b14] = "";
    this[_c13] = new ValidityState2(this);
    this[_d9] = null;
    this[_e7] = this;
    _HTMLTextAreaElement_selectionStart.set(this, null);
    _HTMLTextAreaElement_selectionEnd.set(this, null);
    _HTMLTextAreaElement_selectionDirection.set(this, HTMLInputElementSelectionDirectionEnum_default.none);
  }
  get validationMessage() {
    return this[validationMessage];
  }
  get validity() {
    return this[validity];
  }
  get defaultValue() {
    return this.textContent;
  }
  set defaultValue(defaultValue) {
    this.textContent = defaultValue;
  }
  get minLength() {
    const minLength = this.getAttribute("minlength");
    if (minLength !== null) {
      return parseInt(minLength);
    }
    return -1;
  }
  set minLength(minlength) {
    this.setAttribute("minlength", String(minlength));
  }
  get maxLength() {
    const maxLength = this.getAttribute("maxlength");
    if (maxLength !== null) {
      return parseInt(maxLength);
    }
    return -1;
  }
  set maxLength(maxLength) {
    this.setAttribute("maxlength", String(maxLength));
  }
  get name() {
    return this.getAttribute("name") || "";
  }
  set name(name2) {
    this.setAttribute("name", name2);
  }
  get placeholder() {
    return this.getAttribute("placeholder") || "";
  }
  set placeholder(placeholder) {
    this.setAttribute("placeholder", placeholder);
  }
  get inputmode() {
    return this.getAttribute("inputmode") || "";
  }
  set inputmode(inputmode) {
    this.setAttribute("inputmode", inputmode);
  }
  get cols() {
    return this.getAttribute("cols") || "";
  }
  set cols(cols) {
    this.setAttribute("cols", cols);
  }
  get rows() {
    return this.getAttribute("rows") || "";
  }
  set rows(rows) {
    this.setAttribute("rows", rows);
  }
  get autocomplete() {
    return this.getAttribute("autocomplete") || "";
  }
  set autocomplete(autocomplete) {
    this.setAttribute("autocomplete", autocomplete);
  }
  get readOnly() {
    return this.getAttribute("readonly") !== null;
  }
  set readOnly(readOnly) {
    if (!readOnly) {
      this.removeAttribute("readonly");
    } else {
      this.setAttribute("readonly", "");
    }
  }
  get disabled() {
    return this.getAttribute("disabled") !== null;
  }
  set disabled(disabled) {
    if (!disabled) {
      this.removeAttribute("disabled");
    } else {
      this.setAttribute("disabled", "");
    }
  }
  get autofocus() {
    return this.getAttribute("autofocus") !== null;
  }
  set autofocus(autofocus) {
    if (!autofocus) {
      this.removeAttribute("autofocus");
    } else {
      this.setAttribute("autofocus", "");
    }
  }
  get required() {
    return this.getAttribute("required") !== null;
  }
  set required(required) {
    if (!required) {
      this.removeAttribute("required");
    } else {
      this.setAttribute("required", "");
    }
  }
  get value() {
    if (this[value] === null) {
      return this.textContent;
    }
    return this[value];
  }
  set value(value2) {
    const oldValue = this[value];
    this[value] = value2;
    if (oldValue !== this[value]) {
      __classPrivateFieldSet13(this, _HTMLTextAreaElement_selectionStart, this[value].length, "f");
      __classPrivateFieldSet13(this, _HTMLTextAreaElement_selectionEnd, this[value].length, "f");
      __classPrivateFieldSet13(this, _HTMLTextAreaElement_selectionDirection, HTMLInputElementSelectionDirectionEnum_default.none, "f");
    }
  }
  get selectionStart() {
    if (__classPrivateFieldGet16(this, _HTMLTextAreaElement_selectionStart, "f") === null) {
      return this.value.length;
    }
    return __classPrivateFieldGet16(this, _HTMLTextAreaElement_selectionStart, "f");
  }
  set selectionStart(start3) {
    this.setSelectionRange(start3, Math.max(start3, this.selectionEnd), __classPrivateFieldGet16(this, _HTMLTextAreaElement_selectionDirection, "f"));
  }
  get selectionEnd() {
    if (__classPrivateFieldGet16(this, _HTMLTextAreaElement_selectionEnd, "f") === null) {
      return this.value.length;
    }
    return __classPrivateFieldGet16(this, _HTMLTextAreaElement_selectionEnd, "f");
  }
  set selectionEnd(end3) {
    this.setSelectionRange(this.selectionStart, end3, __classPrivateFieldGet16(this, _HTMLTextAreaElement_selectionDirection, "f"));
  }
  get selectionDirection() {
    return __classPrivateFieldGet16(this, _HTMLTextAreaElement_selectionDirection, "f");
  }
  set selectionDirection(direction) {
    this.setSelectionRange(this.selectionStart, this.selectionEnd, direction);
  }
  get form() {
    return this[formNode];
  }
  get textLength() {
    return this.value.length;
  }
  get labels() {
    return HTMLLabelElementUtility.getAssociatedLabelElements(this);
  }
  select() {
    __classPrivateFieldSet13(this, _HTMLTextAreaElement_selectionStart, 0, "f");
    __classPrivateFieldSet13(this, _HTMLTextAreaElement_selectionEnd, this.value.length, "f");
    __classPrivateFieldSet13(this, _HTMLTextAreaElement_selectionDirection, HTMLInputElementSelectionDirectionEnum_default.none, "f");
    this.dispatchEvent(new Event_default("select", { bubbles: true, cancelable: true }));
  }
  setSelectionRange(start3, end3, direction = "none") {
    __classPrivateFieldSet13(this, _HTMLTextAreaElement_selectionEnd, Math.min(end3, this.value.length), "f");
    __classPrivateFieldSet13(this, _HTMLTextAreaElement_selectionStart, Math.min(start3, this.selectionEnd), "f");
    __classPrivateFieldSet13(this, _HTMLTextAreaElement_selectionDirection, direction === HTMLInputElementSelectionDirectionEnum_default.forward || direction === HTMLInputElementSelectionDirectionEnum_default.backward ? direction : HTMLInputElementSelectionDirectionEnum_default.none, "f");
    this.dispatchEvent(new Event_default("select", { bubbles: true, cancelable: true }));
  }
  setRangeText(replacement, start3 = null, end3 = null, selectionMode = HTMLInputElementSelectionModeEnum_default.preserve) {
    if (start3 === null) {
      start3 = __classPrivateFieldGet16(this, _HTMLTextAreaElement_selectionStart, "f");
    }
    if (end3 === null) {
      end3 = __classPrivateFieldGet16(this, _HTMLTextAreaElement_selectionEnd, "f");
    }
    if (start3 > end3) {
      throw new DOMException("The index is not in the allowed range.", DOMExceptionNameEnum_default.invalidStateError);
    }
    start3 = Math.min(start3, this.value.length);
    end3 = Math.min(end3, this.value.length);
    const val = this.value;
    let selectionStart = __classPrivateFieldGet16(this, _HTMLTextAreaElement_selectionStart, "f");
    let selectionEnd = __classPrivateFieldGet16(this, _HTMLTextAreaElement_selectionEnd, "f");
    this.value = val.slice(0, start3) + replacement + val.slice(end3);
    const newEnd = start3 + this.value.length;
    switch (selectionMode) {
      case HTMLInputElementSelectionModeEnum_default.select:
        this.setSelectionRange(start3, newEnd);
        break;
      case HTMLInputElementSelectionModeEnum_default.start:
        this.setSelectionRange(start3, start3);
        break;
      case HTMLInputElementSelectionModeEnum_default.end:
        this.setSelectionRange(newEnd, newEnd);
        break;
      default:
        const delta = replacement.length - (end3 - start3);
        if (selectionStart > end3) {
          selectionStart += delta;
        } else if (selectionStart > start3) {
          selectionStart = start3;
        }
        if (selectionEnd > end3) {
          selectionEnd += delta;
        } else if (selectionEnd > start3) {
          selectionEnd = newEnd;
        }
        this.setSelectionRange(selectionStart, selectionEnd);
        break;
    }
  }
  setCustomValidity(message) {
    this[validationMessage] = String(message);
  }
  checkValidity() {
    const valid = this.disabled || this.readOnly || this[validity].valid;
    if (!valid) {
      this.dispatchEvent(new Event_default("invalid", { bubbles: true, cancelable: true }));
    }
    return valid;
  }
  reportValidity() {
    return this.checkValidity();
  }
  [(_HTMLTextAreaElement_selectionStart = new WeakMap, _HTMLTextAreaElement_selectionEnd = new WeakMap, _HTMLTextAreaElement_selectionDirection = new WeakMap, _a21 = attributes, _b14 = validationMessage, _c13 = validity, _d9 = value, _e7 = textAreaNode, cloneNode)](deep = false) {
    const clone = super[cloneNode](deep);
    clone[value] = this[value];
    __classPrivateFieldSet13(clone, _HTMLTextAreaElement_selectionStart, __classPrivateFieldGet16(this, _HTMLTextAreaElement_selectionStart, "f"), "f");
    __classPrivateFieldSet13(clone, _HTMLTextAreaElement_selectionEnd, __classPrivateFieldGet16(this, _HTMLTextAreaElement_selectionEnd, "f"), "f");
    __classPrivateFieldSet13(clone, _HTMLTextAreaElement_selectionDirection, __classPrivateFieldGet16(this, _HTMLTextAreaElement_selectionDirection, "f"), "f");
    return clone;
  }
  [resetSelection]() {
    if (this[value] === null) {
      __classPrivateFieldSet13(this, _HTMLTextAreaElement_selectionStart, null, "f");
      __classPrivateFieldSet13(this, _HTMLTextAreaElement_selectionEnd, null, "f");
      __classPrivateFieldSet13(this, _HTMLTextAreaElement_selectionDirection, HTMLInputElementSelectionDirectionEnum_default.none, "f");
    }
  }
  [connectToNode](parentNode2 = null) {
    const oldFormNode = this[formNode];
    super[connectToNode](parentNode2);
    if (oldFormNode !== this[formNode]) {
      if (oldFormNode) {
        oldFormNode[removeFormControlItem](this, this.name);
        oldFormNode[removeFormControlItem](this, this.id);
      }
      if (this[formNode]) {
        this[formNode][appendFormControlItem](this, this.name);
        this[formNode][appendFormControlItem](this, this.id);
      }
    }
  }
}

// node_modules/happy-dom-without-node/lib/validity-state/ValidityState.js
var EMAIL_REGEXP = /^([^\x00-\x20\x22\x28\x29\x2c\x2e\x3a-\x3c\x3e\x40\x5b-\x5d\x7f-\xff]+|\x22([^\x0d\x22\x5c\x80-\xff]|\x5c[\x00-\x7f])*\x22)(\x2e([^\x00-\x20\x22\x28\x29\x2c\x2e\x3a-\x3c\x3e\x40\x5b-\x5d\x7f-\xff]+|\x22([^\x0d\x22\x5c\x80-\xff]|\x5c[\x00-\x7f])*\x22))*\x40([^\x00-\x20\x22\x28\x29\x2c\x2e\x3a-\x3c\x3e\x40\x5b-\x5d\x7f-\xff]+|\x5b([^\x0d\x5b-\x5d\x80-\xff]|\x5c[\x00-\x7f])*\x5d)(\x2e([^\x00-\x20\x22\x28\x29\x2c\x2e\x3a-\x3c\x3e\x40\x5b-\x5d\x7f-\xff]+|\x5b([^\x0d\x5b-\x5d\x80-\xff]|\x5c[\x00-\x7f])*\x5d))*$/;
var URL_REGEXP2 = /^(?:(?:https?|HTTPS?|ftp|FTP):\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-zA-Z\u00a1-\uffff0-9]-*)*[a-zA-Z\u00a1-\uffff0-9]+)(?:\.(?:[a-zA-Z\u00a1-\uffff0-9]-*)*[a-zA-Z\u00a1-\uffff0-9]+)*)(?::\d{2,5})?(?:[\/?#]\S*)?$/;

class ValidityState2 {
  constructor(element) {
    this.element = element;
  }
  get badInput() {
    return this.element instanceof HTMLInputElement_default && (this.element.type === "number" || this.element.type === "range") && this.element.value.length > 0 && !/^[-+]?(?:\d+|\d*[.,]\d+)$/.test(this.element.value);
  }
  get customError() {
    return this.element[validationMessage].length > 0;
  }
  get patternMismatch() {
    return this.element instanceof HTMLInputElement_default && this.element.hasAttribute("pattern") && this.element.value.length > 0 && this.element.value.replace(new RegExp(this.element.getAttribute("pattern")), "").length > 0;
  }
  get rangeOverflow() {
    return this.element instanceof HTMLInputElement_default && this.element.hasAttribute("max") && (this.element.type === "number" || this.element.type === "range") && this.element.value.length > 0 && Number(this.element.value) > Number(this.element.getAttribute("max"));
  }
  get rangeUnderflow() {
    return this.element instanceof HTMLInputElement_default && this.element.hasAttribute("min") && (this.element.type === "number" || this.element.type === "range") && this.element.value.length > 0 && Number(this.element.value) < Number(this.element.getAttribute("min"));
  }
  get stepMismatch() {
    return this.element instanceof HTMLInputElement_default && (this.element.type === "number" || this.element.type === "range") && (this.element.hasAttribute("step") && this.element.getAttribute("step") !== "any" && Number(this.element.value) % Number(this.element.getAttribute("step")) !== 0 || !this.element.hasAttribute("step") && Number(this.element.value) % 1 !== 0);
  }
  get tooLong() {
    return (this.element instanceof HTMLInputElement_default || this.element instanceof HTMLTextAreaElement) && this.element.maxLength > 0 && this.element.value.length > this.element.maxLength;
  }
  get tooShort() {
    return (this.element instanceof HTMLInputElement_default || this.element instanceof HTMLTextAreaElement) && this.element.minLength > 0 && this.element.value.length > 0 && this.element.value.length < this.element.minLength;
  }
  get typeMismatch() {
    return this.element instanceof HTMLInputElement_default && this.element.value.length > 0 && (this.element.type === "email" && !EMAIL_REGEXP.test(this.element.value) || this.element.type === "url" && !URL_REGEXP2.test(this.element.value));
  }
  get valueMissing() {
    if (!this.element.required) {
      return false;
    }
    if (this.element instanceof HTMLInputElement_default) {
      if (this.element.type === "checkbox") {
        return !this.element.checked;
      } else if (this.element.type === "radio") {
        if (this.element.checked) {
          return false;
        }
        if (!this.element.name) {
          return true;
        }
        const root = this.element[formNode] || this.element.getRootNode();
        return !root || !root.querySelector(`input[name="${this.element.name}"]:checked`);
      }
    }
    return this.element.value.length === 0;
  }
  get valid() {
    return !this.badInput && !this.customError && !this.patternMismatch && !this.rangeOverflow && !this.rangeUnderflow && !this.stepMismatch && !this.tooLong && !this.tooShort && !this.typeMismatch && !this.valueMissing;
  }
}

// node_modules/happy-dom-without-node/lib/nodes/html-input-element/HTMLInputElementValueSanitizer.js
var NEW_LINES_REGEXP = /[\n\r]/gm;
var parseInts = (a) => a.map((v) => parseInt(v, 10));

class HTMLInputElementValueSanitizer {
  static sanitize(input, value2) {
    switch (input.type) {
      case "password":
      case "search":
      case "tel":
      case "text":
        return value2.replace(NEW_LINES_REGEXP, "");
      case "color":
        return /^#[a-fA-F\d]{6}$/.test(value2) ? value2.toLowerCase() : "#000000";
      case "email":
        if (input.multiple) {
          return value2.split(",").map((token) => token.trim()).join(",");
        }
        return value2.trim().replace(NEW_LINES_REGEXP, "");
      case "number":
        return !isNaN(Number.parseFloat(value2)) ? value2 : "";
      case "range": {
        const number = Number.parseFloat(value2);
        const min2 = parseFloat(input.min) || 0;
        const max3 = parseFloat(input.max) || 100;
        if (isNaN(number)) {
          return max3 < min2 ? String(min2) : String((min2 + max3) / 2);
        } else if (number < min2) {
          return String(min2);
        } else if (number > max3) {
          return String(max3);
        }
        return value2;
      }
      case "url":
        return value2.trim().replace(NEW_LINES_REGEXP, "");
      case "date":
        value2 = this.sanitizeDate(value2);
        return value2 && this.checkBoundaries(value2, input.min, input.max) ? value2 : "";
      case "datetime-local": {
        const match = value2.match(/^(\d\d\d\d)-(\d\d)-(\d\d)[T ](\d\d):(\d\d)(?::(\d\d)(?:\.(\d{1,3}))?)?$/);
        if (!match) {
          return "";
        }
        const dateString = this.sanitizeDate(value2.slice(0, 10));
        let timeString = this.sanitizeTime(value2.slice(11));
        if (!(dateString && timeString)) {
          return "";
        }
        if (match[6] !== undefined) {
          if (timeString.indexOf(".") !== -1) {
            timeString = timeString.replace(/(?:\.0*|(\.\d+?)0+)$/, "$1");
          }
          timeString = timeString.replace(/(\d\d:\d\d)(:00)$/, "$1");
        }
        return dateString + "T" + timeString;
      }
      case "month":
        if (!(value2.match(/^(\d\d\d\d)-(\d\d)$/) && this.parseMonthComponent(value2))) {
          return "";
        }
        return this.checkBoundaries(value2, input.min, input.max) ? value2 : "";
      case "time": {
        value2 = this.sanitizeTime(value2);
        return value2 && this.checkBoundaries(value2, input.min, input.max) ? value2 : "";
      }
      case "week": {
        const match = value2.match(/^(\d\d\d\d)-W(\d\d)$/);
        if (!match) {
          return "";
        }
        const [intY, intW] = parseInts(match.slice(1, 3));
        if (intY <= 0 || intW < 1 || intW > 53) {
          return "";
        }
        const lastWeek = this.lastIsoWeekOfYear(intY);
        if (intW < 1 || intW > 52 + lastWeek) {
          return "";
        }
        if (!this.checkBoundaries(value2, input.min, input.max)) {
          return "";
        }
        return value2;
      }
    }
    return value2;
  }
  static checkBoundaries(value2, min2, max3) {
    if (min2 && min2 > value2) {
      return false;
    } else if (max3 && max3 < value2) {
      return false;
    }
    return true;
  }
  static parseMonthComponent(value2) {
    const [Y, M] = value2.split("-");
    const [intY, intM] = parseInts([Y, M]);
    if (isNaN(intY) || isNaN(intM) || intY <= 0 || intM < 1 || intM > 12) {
      return "";
    }
    return value2;
  }
  static sanitizeDate(value2) {
    const match = value2.match(/^(\d{4})-(\d{2})-(\d{2})$/);
    if (!match) {
      return "";
    }
    const month = this.parseMonthComponent(value2.slice(0, 7));
    if (!month) {
      return "";
    }
    const [intY, intM, intD] = parseInts(match.slice(1, 4));
    if (intD < 1 || intD > 31) {
      return "";
    }
    const lastDayOfMonth = new Date(intY, intM, 0).getDate();
    if (intD > lastDayOfMonth) {
      return "";
    }
    return value2;
  }
  static sanitizeTime(value2) {
    const match = value2.match(/^(\d{2}):(\d{2})(?::(\d{2}(?:\.(\d{1,3}))?))?$/);
    if (!match) {
      return "";
    }
    const [intH, intM] = parseInts(match.slice(1, 3));
    const ms = parseFloat(match[3] || "0") * 1000;
    if (intH > 23 || intM > 59 || ms > 59999) {
      return "";
    }
    if (ms === 0) {
      return `${match[1]}:${match[2]}`;
    } else {
      return `${match[1]}:${match[2]}${ms >= 1e4 ? `:${ms / 1000}` : `:0${ms / 1000}`}`;
    }
  }
}
HTMLInputElementValueSanitizer.lastIsoWeekOfYear = (year) => {
  const date = new Date(+year, 11, 31);
  const day = (date.getDay() + 6) % 7;
  date.setDate(date.getDate() - day + 3);
  const firstThursday = date.getTime();
  date.setMonth(0, 1);
  if (date.getDay() !== 4) {
    date.setMonth(0, 1 + (4 - date.getDay() + 7) % 7);
  }
  return 1 + Math.ceil((firstThursday - date.getTime()) / 604800000);
};
var HTMLInputElementValueSanitizer_default = HTMLInputElementValueSanitizer;

// node_modules/happy-dom-without-node/lib/nodes/html-input-element/HTMLInputElementValueStepping.js
class HTMLInputElementValueStepping {
  static step(type, value2, direction, increment2) {
    switch (type) {
      case "number":
        return String(Number(value2) + (increment2 !== undefined ? increment2 * direction : direction));
      case "date":
      case "month":
      case "week":
      case "time":
      case "datetime-local":
      case "range":
        return null;
      default:
        throw new DOMException("This form element is not steppable.");
    }
  }
}

// node_modules/happy-dom-without-node/lib/nodes/html-input-element/FileList.js
class FileList extends Array {
  constructor() {
    super(0);
  }
  get [Symbol.toStringTag]() {
    return this.constructor.name;
  }
  item(index) {
    return this[index] || null;
  }
}

// node_modules/happy-dom-without-node/lib/nodes/html-input-element/HTMLInputElementDateUtility.js
class HTMLInputElementDateUtility {
  static dateIsoWeek(date) {
    date = typeof date === "number" ? new Date(date) : date;
    date = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));
    date.setUTCDate(date.getUTCDate() + 4 - (date.getUTCDay() || 7));
    const yearStart = new Date(Date.UTC(date.getUTCFullYear(), 0, 1));
    const weekNo = Math.ceil(((date - yearStart) / 86400000 + 1) / 7);
    return `${date.getUTCFullYear()}-W${weekNo < 10 ? "0" : ""}${weekNo}`;
  }
  static isoWeekDate(isoWeek) {
    const [, Y, W] = isoWeek.match(/^(\d{4})-W(\d{2})$/) || [];
    if (!Y || !W || Number(W) > 53 || Number(W) < 1) {
      return new Date("x");
    }
    const date = new Date(`${Y}-01-01T00:00Z`);
    const jan4th = new Date(`${Y}-01-04T00:00Z`);
    const jan4thDay = (jan4th.getUTCDay() + 6) % 7;
    const ordinalDate = 1 + (Number(W) - 1) * 7 - jan4thDay + 3;
    date.setUTCDate(ordinalDate);
    if (date.getUTCFullYear() > Number(Y)) {
      return new Date("x");
    }
    return date;
  }
}

// node_modules/happy-dom-without-node/lib/nodes/html-input-element/HTMLInputElementNamedNodeMap.js
class HTMLInputElementNamedNodeMap extends HTMLElementNamedNodeMap {
  setNamedItem(item2) {
    const replacedItem = super.setNamedItem(item2);
    if ((item2[name] === "id" || item2[name] === "name") && this[ownerElement][formNode]) {
      if (replacedItem && replacedItem[value]) {
        this[ownerElement][formNode][removeFormControlItem](this[ownerElement], replacedItem[value]);
      }
      if (item2[value]) {
        this[ownerElement][formNode][appendFormControlItem](this[ownerElement], item2[value]);
      }
    }
    return replacedItem || null;
  }
  [(ownerElement, removeNamedItem)](name2) {
    const removedItem = super[removeNamedItem](name2);
    if (removedItem && (removedItem[name] === "id" || removedItem[name] === "name") && this[ownerElement][formNode]) {
      this[ownerElement][formNode][removeFormControlItem](this[ownerElement], removedItem[value]);
    }
    return removedItem;
  }
}

// node_modules/happy-dom-without-node/lib/nodes/html-input-element/HTMLInputElement.js
var __classPrivateFieldGet17 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet14 = function(receiver, state, value2, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
};
var _HTMLInputElement_instances;
var _HTMLInputElement_selectionStart;
var _HTMLInputElement_selectionEnd;
var _HTMLInputElement_selectionDirection;
var _HTMLInputElement_isSelectionSupported;
var _HTMLInputElement_setChecked;
var _a22;
var _b15;
var _c14;
var _d10;
var _e8;
var _f6;
var _g5;
var _h5;
var _j5;

class HTMLInputElement2 extends HTMLElement2 {
  constructor() {
    super(...arguments);
    _HTMLInputElement_instances.add(this);
    this.oninput = null;
    this.oninvalid = null;
    this.onselectionchange = null;
    this[_a22] = new HTMLInputElementNamedNodeMap(this);
    this[_b15] = null;
    this[_c14] = 0;
    this[_d10] = 0;
    this[_e8] = false;
    this[_f6] = null;
    this[_g5] = "";
    this[_h5] = new ValidityState2(this);
    this[_j5] = new FileList;
    _HTMLInputElement_selectionStart.set(this, null);
    _HTMLInputElement_selectionEnd.set(this, null);
    _HTMLInputElement_selectionDirection.set(this, HTMLInputElementSelectionDirectionEnum_default.none);
  }
  get defaultChecked() {
    return this[defaultChecked];
  }
  set defaultChecked(defaultChecked2) {
    this[defaultChecked] = defaultChecked2;
  }
  get files() {
    return this[files];
  }
  set files(files2) {
    this[files] = files2;
  }
  get formAction() {
    if (!this.hasAttribute("formaction")) {
      return this[ownerDocument].location.href;
    }
    try {
      return new $URL(this.getAttribute("formaction"), this[ownerDocument].location.href).href;
    } catch (e) {
      return "";
    }
  }
  set formAction(formAction) {
    this.setAttribute("formaction", formAction);
  }
  get formEnctype() {
    return this.getAttribute("formenctype") || "";
  }
  set formEnctype(formEnctype) {
    this.setAttribute("formenctype", formEnctype);
  }
  get formMethod() {
    return this.getAttribute("formmethod") || "";
  }
  set formMethod(formMethod) {
    this.setAttribute("formmethod", formMethod);
  }
  get formNoValidate() {
    return this.getAttribute("formnovalidate") !== null;
  }
  set formNoValidate(formNoValidate) {
    if (!formNoValidate) {
      this.removeAttribute("formnovalidate");
    } else {
      this.setAttribute("formnovalidate", "");
    }
  }
  get formTarget() {
    return this.getAttribute("formtarget") || "";
  }
  set formTarget(formTarget) {
    this.setAttribute("formtarget", formTarget);
  }
  get form() {
    if (this[formNode]) {
      return this[formNode];
    }
    if (!this.isConnected) {
      return null;
    }
    const formID = this.getAttribute("form");
    return formID ? this[ownerDocument].getElementById(formID) : null;
  }
  get validationMessage() {
    return this[validationMessage];
  }
  get validity() {
    return this[validity];
  }
  get height() {
    return this[height];
  }
  set height(height2) {
    this[height] = height2;
    this.setAttribute("height", String(height2));
  }
  get width() {
    return this[width];
  }
  set width(width2) {
    this[width] = width2;
    this.setAttribute("width", String(width2));
  }
  get size() {
    const size = this.getAttribute("size");
    if (size !== null) {
      return parseInt(size);
    }
    return 20;
  }
  set size(size) {
    this.setAttribute("size", String(size));
  }
  get minLength() {
    const minLength = this.getAttribute("minlength");
    if (minLength !== null) {
      return parseInt(minLength);
    }
    return -1;
  }
  set minLength(minlength) {
    this.setAttribute("minlength", String(minlength));
  }
  get maxLength() {
    const maxLength = this.getAttribute("maxlength");
    if (maxLength !== null) {
      return parseInt(maxLength);
    }
    return -1;
  }
  set maxLength(maxLength) {
    this.setAttribute("maxlength", String(maxLength));
  }
  get type() {
    return this.getAttribute("type") || "text";
  }
  set type(type) {
    this.setAttribute("type", type.toLowerCase());
  }
  get name() {
    return this.getAttribute("name") || "";
  }
  set name(name2) {
    this.setAttribute("name", name2);
  }
  get alt() {
    return this.getAttribute("alt") || "";
  }
  set alt(alt) {
    this.setAttribute("alt", alt);
  }
  get min() {
    return this.getAttribute("min") || "";
  }
  set min(min2) {
    this.setAttribute("min", min2);
  }
  get max() {
    return this.getAttribute("max") || "";
  }
  set max(max3) {
    this.setAttribute("max", max3);
  }
  get pattern() {
    return this.getAttribute("pattern") || "";
  }
  set pattern(pattern) {
    this.setAttribute("pattern", pattern);
  }
  get placeholder() {
    return this.getAttribute("placeholder") || "";
  }
  set placeholder(placeholder) {
    this.setAttribute("placeholder", placeholder);
  }
  get step() {
    return this.getAttribute("step") || "";
  }
  set step(step) {
    this.setAttribute("step", step);
  }
  get inputmode() {
    return this.getAttribute("inputmode") || "";
  }
  set inputmode(inputmode) {
    this.setAttribute("inputmode", inputmode);
  }
  get accept() {
    return this.getAttribute("accept") || "";
  }
  set accept(accept) {
    this.setAttribute("accept", accept);
  }
  get allowdirs() {
    return this.getAttribute("allowdirs") || "";
  }
  set allowdirs(allowdirs) {
    this.setAttribute("allowdirs", allowdirs);
  }
  get autocomplete() {
    return this.getAttribute("autocomplete") || "";
  }
  set autocomplete(autocomplete) {
    this.setAttribute("autocomplete", autocomplete);
  }
  get src() {
    return this.getAttribute("src") || "";
  }
  set src(src) {
    this.setAttribute("src", src);
  }
  get defaultValue() {
    return this.getAttribute("value") || "";
  }
  set defaultValue(defaultValue) {
    this.setAttribute("value", defaultValue);
  }
  get readOnly() {
    return this.getAttribute("readonly") !== null;
  }
  set readOnly(readOnly) {
    if (!readOnly) {
      this.removeAttribute("readonly");
    } else {
      this.setAttribute("readonly", "");
    }
  }
  get disabled() {
    return this.getAttribute("disabled") !== null;
  }
  set disabled(disabled) {
    if (!disabled) {
      this.removeAttribute("disabled");
    } else {
      this.setAttribute("disabled", "");
    }
  }
  get autofocus() {
    return this.getAttribute("autofocus") !== null;
  }
  set autofocus(autofocus) {
    if (!autofocus) {
      this.removeAttribute("autofocus");
    } else {
      this.setAttribute("autofocus", "");
    }
  }
  get required() {
    return this.getAttribute("required") !== null;
  }
  set required(required) {
    if (!required) {
      this.removeAttribute("required");
    } else {
      this.setAttribute("required", "");
    }
  }
  get indeterminate() {
    return this.getAttribute("indeterminate") !== null;
  }
  set indeterminate(indeterminate) {
    if (!indeterminate) {
      this.removeAttribute("indeterminate");
    } else {
      this.setAttribute("indeterminate", "");
    }
  }
  get multiple() {
    return this.getAttribute("multiple") !== null;
  }
  set multiple(multiple) {
    if (!multiple) {
      this.removeAttribute("multiple");
    } else {
      this.setAttribute("multiple", "");
    }
  }
  get checked() {
    if (this[checked] !== null) {
      return this[checked];
    }
    return this.getAttribute("checked") !== null;
  }
  set checked(checked2) {
    __classPrivateFieldGet17(this, _HTMLInputElement_instances, "m", _HTMLInputElement_setChecked).call(this, checked2);
  }
  get value() {
    switch (this.type) {
      case "hidden":
      case "submit":
      case "image":
      case "reset":
      case "button":
        return this.getAttribute("value") || "";
      case "checkbox":
      case "radio":
        const attritube = this.getAttribute("value");
        return attritube !== null ? attritube : "on";
      case "file":
        return this[files].length > 0 ? "/fake/path/" + this[files][0].name : "";
    }
    if (this[value] === null) {
      return this.getAttribute("value") || "";
    }
    return this[value];
  }
  set value(value2) {
    value2 = String(value2);
    switch (this.type) {
      case "hidden":
      case "submit":
      case "image":
      case "reset":
      case "button":
      case "checkbox":
      case "radio":
        this.setAttribute("value", value2);
        break;
      case "file":
        if (value2 !== "") {
          throw new DOMException('Input elements of type "file" may only programmatically set the value to empty string.', DOMExceptionNameEnum_default.invalidStateError);
        }
        break;
      default:
        const oldValue = this.value;
        this[value] = HTMLInputElementValueSanitizer_default.sanitize(this, value2);
        if (oldValue !== this[value]) {
          __classPrivateFieldSet14(this, _HTMLInputElement_selectionStart, this[value].length, "f");
          __classPrivateFieldSet14(this, _HTMLInputElement_selectionEnd, this[value].length, "f");
          __classPrivateFieldSet14(this, _HTMLInputElement_selectionDirection, HTMLInputElementSelectionDirectionEnum_default.none, "f");
        }
        break;
    }
  }
  get selectionStart() {
    if (!__classPrivateFieldGet17(this, _HTMLInputElement_instances, "m", _HTMLInputElement_isSelectionSupported).call(this)) {
      return null;
    }
    if (__classPrivateFieldGet17(this, _HTMLInputElement_selectionStart, "f") === null) {
      return this.value.length;
    }
    return __classPrivateFieldGet17(this, _HTMLInputElement_selectionStart, "f");
  }
  set selectionStart(start3) {
    if (!__classPrivateFieldGet17(this, _HTMLInputElement_instances, "m", _HTMLInputElement_isSelectionSupported).call(this)) {
      throw new DOMException(`The input element's type (${this.type}) does not support selection.`, DOMExceptionNameEnum_default.invalidStateError);
    }
    this.setSelectionRange(start3, Math.max(start3, this.selectionEnd), __classPrivateFieldGet17(this, _HTMLInputElement_selectionDirection, "f"));
  }
  get selectionEnd() {
    if (!__classPrivateFieldGet17(this, _HTMLInputElement_instances, "m", _HTMLInputElement_isSelectionSupported).call(this)) {
      return null;
    }
    if (__classPrivateFieldGet17(this, _HTMLInputElement_selectionEnd, "f") === null) {
      return this.value.length;
    }
    return __classPrivateFieldGet17(this, _HTMLInputElement_selectionEnd, "f");
  }
  set selectionEnd(end3) {
    if (!__classPrivateFieldGet17(this, _HTMLInputElement_instances, "m", _HTMLInputElement_isSelectionSupported).call(this)) {
      throw new DOMException(`The input element's type (${this.type}) does not support selection.`, DOMExceptionNameEnum_default.invalidStateError);
    }
    this.setSelectionRange(this.selectionStart, end3, __classPrivateFieldGet17(this, _HTMLInputElement_selectionDirection, "f"));
  }
  get selectionDirection() {
    if (!__classPrivateFieldGet17(this, _HTMLInputElement_instances, "m", _HTMLInputElement_isSelectionSupported).call(this)) {
      return null;
    }
    return __classPrivateFieldGet17(this, _HTMLInputElement_selectionDirection, "f");
  }
  set selectionDirection(direction) {
    if (!__classPrivateFieldGet17(this, _HTMLInputElement_instances, "m", _HTMLInputElement_isSelectionSupported).call(this)) {
      throw new DOMException(`The input element's type (${this.type}) does not support selection.`, DOMExceptionNameEnum_default.invalidStateError);
    }
    this.setSelectionRange(__classPrivateFieldGet17(this, _HTMLInputElement_selectionStart, "f"), __classPrivateFieldGet17(this, _HTMLInputElement_selectionEnd, "f"), direction);
  }
  get willValidate() {
    return this.type !== "hidden" && this.type !== "reset" && this.type !== "button" && !this.disabled && !this["readOnly"];
  }
  get valueAsDate() {
    switch (this.type) {
      case "date":
      case "month":
        return isNaN(new Date(String(this.value)).getTime()) ? null : new Date(this.value);
      case "week": {
        const d = HTMLInputElementDateUtility.isoWeekDate(this.value);
        return isNaN(d.getTime()) ? null : d;
      }
      case "time": {
        const d = new Date(`1970-01-01T${this.value}Z`);
        return isNaN(d.getTime()) ? null : d;
      }
      default:
        return null;
    }
  }
  set valueAsDate(value2) {
    if (!["date", "month", "time", "week"].includes(this.type)) {
      throw new DOMException("Failed to set the 'valueAsDate' property on 'HTMLInputElement': This input element does not support Date values.", DOMExceptionNameEnum_default.invalidStateError);
    }
    if (typeof value2 !== "object") {
      throw new TypeError("Failed to set the 'valueAsDate' property on 'HTMLInputElement': Failed to convert value to 'object'.");
    } else if (value2 && !(value2 instanceof Date)) {
      throw new TypeError("Failed to set the 'valueAsDate' property on 'HTMLInputElement': The provided value is not a Date.");
    } else if (value2 === null || isNaN(value2.getTime())) {
      this.value = "";
      return;
    }
    switch (this.type) {
      case "date":
        this.value = value2.toISOString().split("T")[0];
        break;
      case "month":
        this.value = value2.toISOString().split("T")[0].slice(0, -3);
        break;
      case "time":
        this.value = value2.toISOString().split("T")[1].slice(0, 5);
        break;
      case "week":
        this.value = HTMLInputElementDateUtility.dateIsoWeek(value2);
        break;
    }
  }
  get valueAsNumber() {
    const value2 = this.value;
    if (!this.type.match(/^(range|number|date|datetime-local|month|time|week)$/) || !value2) {
      return NaN;
    }
    switch (this.type) {
      case "number":
        return parseFloat(value2);
      case "range": {
        const number = parseFloat(value2);
        const min2 = parseFloat(this.min) || 0;
        const max3 = parseFloat(this.max) || 100;
        if (isNaN(number)) {
          return max3 < min2 ? min2 : (min2 + max3) / 2;
        } else if (number < min2) {
          return min2;
        } else if (number > max3) {
          return max3;
        }
        return number;
      }
      case "date":
        return new Date(value2).getTime();
      case "datetime-local":
        return new Date(value2).getTime() - new Date(value2).getTimezoneOffset() * 60000;
      case "month":
        return (new Date(value2).getUTCFullYear() - 1970) * 12 + new Date(value2).getUTCMonth();
      case "time":
        return new Date("1970-01-01T" + value2).getTime() - new Date("1970-01-01T00:00:00").getTime();
      case "week": {
        const match = value2.match(/^(\d{4})-W(\d{2})$/);
        if (!match) {
          return NaN;
        }
        const d = new Date(Date.UTC(parseInt(match[1], 10), 0));
        const day = d.getUTCDay();
        const diff = ((day === 0 ? -6 : 1) - day) * 86400000 + parseInt(match[2], 10) * 604800000;
        return d.getTime() + diff;
      }
    }
  }
  set valueAsNumber(value2) {
    switch (this.type) {
      case "number":
      case "range":
        this.value = Number(value2).toString();
        break;
      case "date":
      case "datetime-local": {
        const d = new Date(Number(value2));
        if (isNaN(d.getTime())) {
          this.value = "";
          break;
        }
        if (this.type == "date") {
          this.value = d.toISOString().slice(0, 10);
        } else {
          this.value = d.toISOString().slice(0, -1);
        }
        break;
      }
      case "month":
        if (!Number.isInteger(value2) || value2 < 0) {
          this.value = "";
        } else {
          this.value = new Date(Date.UTC(1970, Number(value2))).toISOString().slice(0, 7);
        }
        break;
      case "time":
        if (!Number.isInteger(value2) || value2 < 0) {
          this.value = "";
        } else {
          this.value = new Date(Number(value2)).toISOString().slice(11, -1);
        }
        break;
      case "week": {
        const d = new Date(Number(value2));
        this.value = isNaN(d.getTime()) ? "" : HTMLInputElementDateUtility.dateIsoWeek(d);
        break;
      }
      default:
        throw new DOMException("Failed to set the 'valueAsNumber' property on 'HTMLInputElement': This input element does not support Number values.", DOMExceptionNameEnum_default.invalidStateError);
    }
  }
  get labels() {
    return HTMLLabelElementUtility.getAssociatedLabelElements(this);
  }
  setCustomValidity(message) {
    this[validationMessage] = String(message);
  }
  select() {
    if (!__classPrivateFieldGet17(this, _HTMLInputElement_instances, "m", _HTMLInputElement_isSelectionSupported).call(this)) {
      return null;
    }
    __classPrivateFieldSet14(this, _HTMLInputElement_selectionStart, 0, "f");
    __classPrivateFieldSet14(this, _HTMLInputElement_selectionEnd, this.value.length, "f");
    __classPrivateFieldSet14(this, _HTMLInputElement_selectionDirection, HTMLInputElementSelectionDirectionEnum_default.none, "f");
    this.dispatchEvent(new Event_default("select", { bubbles: true, cancelable: true }));
  }
  setSelectionRange(start3, end3, direction = "none") {
    if (!__classPrivateFieldGet17(this, _HTMLInputElement_instances, "m", _HTMLInputElement_isSelectionSupported).call(this)) {
      throw new DOMException(`The input element's type (${this.type}) does not support selection.`, DOMExceptionNameEnum_default.invalidStateError);
    }
    __classPrivateFieldSet14(this, _HTMLInputElement_selectionEnd, Math.min(end3, this.value.length), "f");
    __classPrivateFieldSet14(this, _HTMLInputElement_selectionStart, Math.min(start3, __classPrivateFieldGet17(this, _HTMLInputElement_selectionEnd, "f")), "f");
    __classPrivateFieldSet14(this, _HTMLInputElement_selectionDirection, direction === HTMLInputElementSelectionDirectionEnum_default.forward || direction === HTMLInputElementSelectionDirectionEnum_default.backward ? direction : HTMLInputElementSelectionDirectionEnum_default.none, "f");
    this.dispatchEvent(new Event_default("select", { bubbles: true, cancelable: true }));
  }
  setRangeText(replacement, start3 = null, end3 = null, selectionMode = HTMLInputElementSelectionModeEnum_default.preserve) {
    if (!__classPrivateFieldGet17(this, _HTMLInputElement_instances, "m", _HTMLInputElement_isSelectionSupported).call(this)) {
      throw new DOMException(`The input element's type (${this.type}) does not support selection.`, DOMExceptionNameEnum_default.invalidStateError);
    }
    if (start3 === null) {
      start3 = __classPrivateFieldGet17(this, _HTMLInputElement_selectionStart, "f");
    }
    if (end3 === null) {
      end3 = __classPrivateFieldGet17(this, _HTMLInputElement_selectionEnd, "f");
    }
    if (start3 > end3) {
      throw new DOMException("The index is not in the allowed range.", DOMExceptionNameEnum_default.invalidStateError);
    }
    start3 = Math.min(start3, this.value.length);
    end3 = Math.min(end3, this.value.length);
    const val = this.value;
    let selectionStart = __classPrivateFieldGet17(this, _HTMLInputElement_selectionStart, "f");
    let selectionEnd = __classPrivateFieldGet17(this, _HTMLInputElement_selectionEnd, "f");
    this.value = val.slice(0, start3) + replacement + val.slice(end3);
    const newEnd = start3 + this.value.length;
    switch (selectionMode) {
      case HTMLInputElementSelectionModeEnum_default.select:
        this.setSelectionRange(start3, newEnd);
        break;
      case HTMLInputElementSelectionModeEnum_default.start:
        this.setSelectionRange(start3, start3);
        break;
      case HTMLInputElementSelectionModeEnum_default.end:
        this.setSelectionRange(newEnd, newEnd);
        break;
      default:
        const delta = replacement.length - (end3 - start3);
        if (selectionStart > end3) {
          selectionStart += delta;
        } else if (selectionStart > start3) {
          selectionStart = start3;
        }
        if (selectionEnd > end3) {
          selectionEnd += delta;
        } else if (selectionEnd > start3) {
          selectionEnd = newEnd;
        }
        this.setSelectionRange(selectionStart, selectionEnd);
        break;
    }
  }
  checkValidity() {
    const valid = this.disabled || this.readOnly || this.type === "hidden" || this.type === "reset" || this.type === "button" || this[validity].valid;
    if (!valid) {
      this.dispatchEvent(new Event_default("invalid", { bubbles: true, cancelable: true }));
    }
    return valid;
  }
  reportValidity() {
    return this.checkValidity();
  }
  stepUp(increment2) {
    const newValue = HTMLInputElementValueStepping.step(this.type, this.value, 1, increment2);
    if (newValue !== null) {
      this.value = newValue;
    }
  }
  stepDown(increment2) {
    const newValue = HTMLInputElementValueStepping.step(this.type, this.value, -1, increment2);
    if (newValue !== null) {
      this.value = newValue;
    }
  }
  [(_HTMLInputElement_selectionStart = new WeakMap, _HTMLInputElement_selectionEnd = new WeakMap, _HTMLInputElement_selectionDirection = new WeakMap, _HTMLInputElement_instances = new WeakSet, _a22 = attributes, _b15 = value, _c14 = height, _d10 = width, _e8 = defaultChecked, _f6 = checked, _g5 = validationMessage, _h5 = validity, _j5 = files, cloneNode)](deep = false) {
    const clone = super[cloneNode](deep);
    clone.formAction = this.formAction;
    clone.formMethod = this.formMethod;
    clone[value] = this[value];
    clone[height] = this[height];
    clone[width] = this[width];
    clone[defaultChecked] = this[defaultChecked];
    clone[files] = this[files].slice();
    __classPrivateFieldSet14(clone, _HTMLInputElement_selectionStart, __classPrivateFieldGet17(this, _HTMLInputElement_selectionStart, "f"), "f");
    __classPrivateFieldSet14(clone, _HTMLInputElement_selectionEnd, __classPrivateFieldGet17(this, _HTMLInputElement_selectionEnd, "f"), "f");
    __classPrivateFieldSet14(clone, _HTMLInputElement_selectionDirection, __classPrivateFieldGet17(this, _HTMLInputElement_selectionDirection, "f"), "f");
    return clone;
  }
  dispatchEvent(event) {
    if (event.type === "click" && event instanceof MouseEvent && event.eventPhase === EventPhaseEnum_default.none && this.disabled) {
      return false;
    }
    let previousCheckedValue = null;
    if ((event.eventPhase === EventPhaseEnum_default.atTarget || event.eventPhase === EventPhaseEnum_default.bubbling) && event.type === "click" && event instanceof MouseEvent) {
      const inputType = this.type;
      if (inputType === "checkbox" || inputType === "radio") {
        previousCheckedValue = this.checked;
        __classPrivateFieldGet17(this, _HTMLInputElement_instances, "m", _HTMLInputElement_setChecked).call(this, inputType === "checkbox" ? !previousCheckedValue : true);
      }
    }
    const returnValue2 = super.dispatchEvent(event);
    if (!event.defaultPrevented && (event.eventPhase === EventPhaseEnum_default.atTarget || event.eventPhase === EventPhaseEnum_default.bubbling) && event.type === "click" && event instanceof MouseEvent && this[isConnected]) {
      const inputType = this.type;
      if (!this.readOnly || inputType === "checkbox" || inputType === "radio") {
        if (inputType === "checkbox" || inputType === "radio") {
          this.dispatchEvent(new Event_default("input", { bubbles: true, cancelable: true }));
          this.dispatchEvent(new Event_default("change", { bubbles: true, cancelable: true }));
        } else if (inputType === "submit") {
          const form = this.form;
          if (form) {
            form.requestSubmit(this);
          }
        } else if (inputType === "reset" && this[isConnected]) {
          const form = this.form;
          if (form) {
            form.reset();
          }
        }
      }
    }
    if (event.defaultPrevented && (event.eventPhase === EventPhaseEnum_default.atTarget || event.eventPhase === EventPhaseEnum_default.bubbling) && event.type === "click" && event instanceof MouseEvent && previousCheckedValue !== null) {
      const inputType = this.type;
      if (inputType === "checkbox" || inputType === "radio") {
        __classPrivateFieldGet17(this, _HTMLInputElement_instances, "m", _HTMLInputElement_setChecked).call(this, previousCheckedValue);
      }
    }
    return returnValue2;
  }
  [connectToNode](parentNode2 = null) {
    const oldFormNode = this[formNode];
    super[connectToNode](parentNode2);
    if (oldFormNode !== this[formNode]) {
      if (oldFormNode) {
        oldFormNode[removeFormControlItem](this, this.name);
        oldFormNode[removeFormControlItem](this, this.id);
      }
      if (this[formNode]) {
        this[formNode][appendFormControlItem](this, this.name);
        this[formNode][appendFormControlItem](this, this.id);
      }
    }
  }
}
_HTMLInputElement_isSelectionSupported = function _HTMLInputElement_isSelectionSupported2() {
  const inputType = this.type;
  return inputType === "text" || inputType === "search" || inputType === "url" || inputType === "tel" || inputType === "password";
}, _HTMLInputElement_setChecked = function _HTMLInputElement_setChecked2(checked2) {
  this[checked] = checked2;
  if (checked2 && this.type === "radio" && this.name) {
    const root = this[formNode] || this.getRootNode();
    const radioButtons = root.querySelectorAll(`input[type="radio"][name="${this.name}"]`);
    for (const radioButton of radioButtons) {
      if (radioButton !== this) {
        radioButton[checked] = false;
      }
    }
  }
};
var HTMLInputElement_default = HTMLInputElement2;

// node_modules/happy-dom-without-node/lib/nodes/html-select-element/HTMLOptionsCollection.js
var __classPrivateFieldSet15 = function(receiver, state, value2, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
};
var __classPrivateFieldGet18 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _HTMLOptionsCollection_selectElement;

class HTMLOptionsCollection extends HTMLCollection {
  constructor(selectElement) {
    super();
    _HTMLOptionsCollection_selectElement.set(this, undefined);
    __classPrivateFieldSet15(this, _HTMLOptionsCollection_selectElement, selectElement, "f");
  }
  get selectedIndex() {
    return __classPrivateFieldGet18(this, _HTMLOptionsCollection_selectElement, "f").selectedIndex;
  }
  set selectedIndex(selectedIndex) {
    __classPrivateFieldGet18(this, _HTMLOptionsCollection_selectElement, "f").selectedIndex = selectedIndex;
  }
  item(index) {
    return this[index];
  }
  add(element, before) {
    if (!before && before !== 0) {
      __classPrivateFieldGet18(this, _HTMLOptionsCollection_selectElement, "f").appendChild(element);
      return;
    }
    if (!Number.isNaN(Number(before))) {
      if (before < 0) {
        return;
      }
      __classPrivateFieldGet18(this, _HTMLOptionsCollection_selectElement, "f").insertBefore(element, this[before]);
      return;
    }
    const index = this.indexOf(before);
    if (index === -1) {
      throw new DOMException("Failed to execute 'add' on 'DOMException': The node before which the new node is to be inserted is not a child of this node.");
    }
    __classPrivateFieldGet18(this, _HTMLOptionsCollection_selectElement, "f").insertBefore(element, this[index]);
  }
  remove(index) {
    if (this[index]) {
      __classPrivateFieldGet18(this, _HTMLOptionsCollection_selectElement, "f").removeChild(this[index]);
    }
  }
}
_HTMLOptionsCollection_selectElement = new WeakMap;
var HTMLOptionsCollection_default = HTMLOptionsCollection;

// node_modules/happy-dom-without-node/lib/nodes/html-select-element/HTMLSelectElementNamedNodeMap.js
class HTMLSelectElementNamedNodeMap extends HTMLElementNamedNodeMap {
  setNamedItem(item2) {
    const replacedItem = super.setNamedItem(item2);
    if ((item2[name] === "id" || item2[name] === "name") && this[ownerElement][formNode]) {
      if (replacedItem && replacedItem[value]) {
        this[ownerElement][formNode][removeFormControlItem](this[ownerElement], replacedItem[value]);
      }
      if (item2[value]) {
        this[ownerElement][formNode][appendFormControlItem](this[ownerElement], item2[value]);
      }
    }
    return replacedItem || null;
  }
  [(ownerElement, removeNamedItem)](name2) {
    const removedItem = super[removeNamedItem](name2);
    if (removedItem && (removedItem[name] === "id" || removedItem[name] === "name") && this[ownerElement][formNode]) {
      this[ownerElement][formNode][removeFormControlItem](this[ownerElement], removedItem[value]);
    }
    return removedItem;
  }
}

// node_modules/happy-dom-without-node/lib/nodes/html-select-element/HTMLSelectElement.js
var __classPrivateFieldGet19 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _HTMLSelectElement_instances;
var _HTMLSelectElement_getDisplaySize;
var _a23;
var _b16;
var _c15;
var _d11;
var _e9;
var _f7;

class HTMLSelectElement extends HTMLElement2 {
  constructor() {
    super(...arguments);
    _HTMLSelectElement_instances.add(this);
    this[_a23] = new HTMLSelectElementNamedNodeMap(this);
    this[_b16] = "";
    this[_c15] = new ValidityState2(this);
    this[_d11] = this;
    this[_e9] = 0;
    this[_f7] = new HTMLOptionsCollection_default(this);
    this.onchange = null;
    this.oninput = null;
  }
  get length() {
    return this[length];
  }
  get options() {
    return this[options2];
  }
  get validationMessage() {
    return this[validationMessage];
  }
  get validity() {
    return this[validity];
  }
  get name() {
    return this.getAttribute("name") || "";
  }
  set name(name2) {
    this.setAttribute("name", name2);
  }
  get disabled() {
    return this.getAttribute("disabled") !== null;
  }
  set disabled(disabled) {
    if (!disabled) {
      this.removeAttribute("disabled");
    } else {
      this.setAttribute("disabled", "");
    }
  }
  get multiple() {
    return this.getAttribute("multiple") !== null;
  }
  set multiple(multiple) {
    if (!multiple) {
      this.removeAttribute("multiple");
    } else {
      this.setAttribute("multiple", "");
    }
  }
  get autofocus() {
    return this.getAttribute("autofocus") !== null;
  }
  set autofocus(autofocus) {
    if (!autofocus) {
      this.removeAttribute("autofocus");
    } else {
      this.setAttribute("autofocus", "");
    }
  }
  get required() {
    return this.getAttribute("required") !== null;
  }
  set required(required) {
    if (!required) {
      this.removeAttribute("required");
    } else {
      this.setAttribute("required", "");
    }
  }
  get type() {
    return this.hasAttributeNS(null, "multiple") ? "select-multiple" : "select-one";
  }
  get value() {
    for (let i = 0, max3 = this[options2].length;i < max3; i++) {
      const option = this[options2][i];
      if (option[selectedness]) {
        return option.value;
      }
    }
    return "";
  }
  set value(value2) {
    for (let i = 0, max3 = this[options2].length;i < max3; i++) {
      const option = this[options2][i];
      if (option.value === value2) {
        option[selectedness] = true;
        option[dirtyness] = true;
      } else {
        option[selectedness] = false;
      }
    }
  }
  get selectedIndex() {
    for (let i = 0, max3 = this[options2].length;i < max3; i++) {
      if (this[options2][i][selectedness]) {
        return i;
      }
    }
    return -1;
  }
  set selectedIndex(selectedIndex) {
    if (typeof selectedIndex === "number" && !isNaN(selectedIndex)) {
      for (let i = 0, max3 = this[options2].length;i < max3; i++) {
        this[options2][i][selectedness] = false;
      }
      const selectedOption = this[options2][selectedIndex];
      if (selectedOption) {
        selectedOption[selectedness] = true;
        selectedOption[dirtyness] = true;
      }
    }
  }
  get selectedOptions() {
    const selectedOptions = new HTMLCollection;
    for (let i = 0, max3 = this[options2].length;i < max3; i++) {
      if (this[options2][i][selectedness]) {
        selectedOptions.push(this[options2][i]);
      }
    }
    return selectedOptions;
  }
  get labels() {
    return HTMLLabelElementUtility.getAssociatedLabelElements(this);
  }
  get form() {
    return this[formNode];
  }
  get willValidate() {
    return this.type !== "hidden" && this.type !== "reset" && this.type !== "button" && !this.disabled && !this["readOnly"];
  }
  item(index) {
    return this[options2].item(index);
  }
  add(element, before) {
    this[options2].add(element, before);
  }
  remove(index) {
    if (typeof index === "number") {
      this[options2].remove(index);
    } else {
      super.remove();
    }
  }
  setCustomValidity(message) {
    this[validationMessage] = String(message);
  }
  checkValidity() {
    const valid = this.disabled || this[validity].valid;
    if (!valid) {
      this.dispatchEvent(new Event_default("invalid", { bubbles: true, cancelable: true }));
    }
    return valid;
  }
  reportValidity() {
    return this.checkValidity();
  }
  [(_HTMLSelectElement_instances = new WeakSet, _a23 = attributes, _b16 = validationMessage, _c15 = validity, _d11 = selectNode, _e9 = length, _f7 = options2, updateOptionItems)](selectedOption) {
    const optionElements = this.getElementsByTagName("option");
    if (optionElements.length < this[options2].length) {
      this[options2].splice(this[options2].length - 1, this[options2].length - optionElements.length);
      for (let i = optionElements.length - 1, max3 = this[length];i < max3; i++) {
        delete this[i];
      }
    }
    const isMultiple = this.hasAttributeNS(null, "multiple");
    const selected = [];
    for (let i = 0;i < optionElements.length; i++) {
      this[options2][i] = optionElements[i];
      this[i] = optionElements[i];
      if (!isMultiple) {
        if (selectedOption) {
          optionElements[i][selectedness] = optionElements[i] === selectedOption;
        }
        if (optionElements[i][selectedness]) {
          selected.push(optionElements[i]);
        }
      }
    }
    this[length] = optionElements.length;
    const size = __classPrivateFieldGet19(this, _HTMLSelectElement_instances, "m", _HTMLSelectElement_getDisplaySize).call(this);
    if (size === 1 && !selected.length) {
      for (let i = 0, max3 = optionElements.length;i < max3; i++) {
        const option = optionElements[i];
        let disabled = option.hasAttributeNS(null, "disabled");
        const parentNode2 = option[parentNode];
        if (parentNode2 && parentNode2[nodeType] === NodeTypeEnum_default.elementNode && parentNode2[tagName3] === "OPTGROUP" && parentNode2.hasAttributeNS(null, "disabled")) {
          disabled = true;
        }
        if (!disabled) {
          option[selectedness] = true;
          break;
        }
      }
    } else if (selected.length >= 2) {
      for (let i = 0, max3 = optionElements.length;i < max3; i++) {
        optionElements[i][selectedness] = i === selected.length - 1;
      }
    }
  }
  [connectToNode](parentNode2 = null) {
    const oldFormNode = this[formNode];
    super[connectToNode](parentNode2);
    if (oldFormNode !== this[formNode]) {
      if (oldFormNode) {
        oldFormNode[removeFormControlItem](this, this.name);
        oldFormNode[removeFormControlItem](this, this.id);
      }
      if (this[formNode]) {
        this[formNode][appendFormControlItem](this, this.name);
        this[formNode][appendFormControlItem](this, this.id);
      }
    }
  }
}
_HTMLSelectElement_getDisplaySize = function _HTMLSelectElement_getDisplaySize2() {
  if (this.hasAttributeNS(null, "size")) {
    const size = parseInt(this.getAttribute("size"));
    if (!isNaN(size) && size >= 0) {
      return size;
    }
  }
  return this.hasAttributeNS(null, "multiple") ? 4 : 1;
};
var HTMLSelectElement_default = HTMLSelectElement;

// node_modules/happy-dom-without-node/lib/nodes/html-link-element/HTMLLinkElementNamedNodeMap.js
var __classPrivateFieldSet16 = function(receiver, state, value2, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
};
var __classPrivateFieldGet20 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _HTMLLinkElementNamedNodeMap_styleSheetLoader;

class HTMLLinkElementNamedNodeMap extends HTMLElementNamedNodeMap {
  constructor(ownerElement2, styleSheetLoader) {
    super(ownerElement2);
    _HTMLLinkElementNamedNodeMap_styleSheetLoader.set(this, undefined);
    __classPrivateFieldSet16(this, _HTMLLinkElementNamedNodeMap_styleSheetLoader, styleSheetLoader, "f");
  }
  setNamedItem(item2) {
    const replacedItem = super.setNamedItem(item2);
    if (item2[name] === "rel" && this[ownerElement][relList]) {
      this[ownerElement][relList][updateIndices]();
    }
    if (item2[name] === "rel") {
      __classPrivateFieldGet20(this, _HTMLLinkElementNamedNodeMap_styleSheetLoader, "f").loadStyleSheet(this[ownerElement].getAttribute("href"), item2[value]);
    } else if (item2[name] === "href") {
      __classPrivateFieldGet20(this, _HTMLLinkElementNamedNodeMap_styleSheetLoader, "f").loadStyleSheet(item2[value], this[ownerElement].getAttribute("rel"));
    }
    return replacedItem || null;
  }
  [(_HTMLLinkElementNamedNodeMap_styleSheetLoader = new WeakMap, ownerElement, removeNamedItem)](name2) {
    const removedItem = super[removeNamedItem](name2);
    if (removedItem && removedItem[name] === "rel" && this[ownerElement][relList]) {
      this[ownerElement][relList][updateIndices]();
    }
    return removedItem;
  }
}

// node_modules/happy-dom-without-node/lib/fetch/ResourceFetch.js
class NotSupported3 {
}

// node_modules/happy-dom-without-node/lib/css/CSSRule.js
class CSSRule {
  constructor() {
    this.parentRule = null;
    this.parentStyleSheet = null;
    this.type = null;
  }
  get cssText() {
    return "";
  }
}
CSSRule.CONTAINER_RULE = CSSRuleTypeEnum_default.containerRule;
CSSRule.STYLE_RULE = CSSRuleTypeEnum_default.styleRule;
CSSRule.IMPORT_RULE = CSSRuleTypeEnum_default.importRule;
CSSRule.MEDIA_RULE = CSSRuleTypeEnum_default.mediaRule;
CSSRule.FONT_FACE_RULE = CSSRuleTypeEnum_default.fontFaceRule;
CSSRule.PAGE_RULE = CSSRuleTypeEnum_default.pageRule;
CSSRule.KEYFRAMES_RULE = CSSRuleTypeEnum_default.keyframesRule;
CSSRule.KEYFRAME_RULE = CSSRuleTypeEnum_default.keyframeRule;
CSSRule.NAMESPACE_RULE = CSSRuleTypeEnum_default.namespaceRule;
CSSRule.COUNTER_STYLE_RULE = CSSRuleTypeEnum_default.counterStyleRule;
CSSRule.SUPPORTS_RULE = CSSRuleTypeEnum_default.supportsRule;
CSSRule.DOCUMENT_RULE = CSSRuleTypeEnum_default.documentRule;
CSSRule.FONT_FEATURE_VALUES_RULE = CSSRuleTypeEnum_default.fontFeatureValuesRule;
CSSRule.REGION_STYLE_RULE = CSSRuleTypeEnum_default.regionStyleRule;
var CSSRule_default = CSSRule;

// node_modules/happy-dom-without-node/lib/css/rules/CSSStyleRule.js
var __classPrivateFieldGet21 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet17 = function(receiver, state, value2, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
};
var _CSSStyleRule_style;
var _a24;

class CSSStyleRule extends CSSRule_default {
  constructor() {
    super(...arguments);
    this.type = CSSRule_default.STYLE_RULE;
    this.selectorText = "";
    this.styleMap = new Map;
    this[_a24] = "";
    _CSSStyleRule_style.set(this, null);
  }
  get style() {
    if (!__classPrivateFieldGet21(this, _CSSStyleRule_style, "f")) {
      __classPrivateFieldSet17(this, _CSSStyleRule_style, new CSSStyleDeclaration, "f");
      __classPrivateFieldGet21(this, _CSSStyleRule_style, "f").parentRule = this;
      __classPrivateFieldGet21(this, _CSSStyleRule_style, "f").cssText = this[cssText];
    }
    return __classPrivateFieldGet21(this, _CSSStyleRule_style, "f");
  }
  get cssText() {
    return `${this.selectorText} { ${this.style.cssText} }`;
  }
}
_CSSStyleRule_style = new WeakMap, _a24 = cssText;
var CSSStyleRule_default = CSSStyleRule;

// node_modules/happy-dom-without-node/lib/css/rules/CSSKeyframeRule.js
var __classPrivateFieldGet22 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet18 = function(receiver, state, value2, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
};
var _CSSKeyframeRule_style;
var _a25;

class CSSKeyframeRule extends CSSRule_default {
  constructor() {
    super(...arguments);
    this.type = CSSRule_default.KEYFRAME_RULE;
    this[_a25] = "";
    _CSSKeyframeRule_style.set(this, null);
  }
  get style() {
    if (!__classPrivateFieldGet22(this, _CSSKeyframeRule_style, "f")) {
      __classPrivateFieldSet18(this, _CSSKeyframeRule_style, new CSSStyleDeclaration, "f");
      __classPrivateFieldGet22(this, _CSSKeyframeRule_style, "f").parentRule = this;
      __classPrivateFieldGet22(this, _CSSKeyframeRule_style, "f").cssText = this[cssText];
    }
    return __classPrivateFieldGet22(this, _CSSKeyframeRule_style, "f");
  }
  get cssText() {
    return `${this.keyText} { ${this.style.cssText} }`;
  }
}
_CSSKeyframeRule_style = new WeakMap, _a25 = cssText;
var CSSKeyframeRule_default = CSSKeyframeRule;

// node_modules/happy-dom-without-node/lib/css/rules/CSSKeyframesRule.js
var CSS_RULE_REGEXP = /([^{]+){([^}]+)}/;

class CSSKeyframesRule extends CSSRule_default {
  constructor() {
    super(...arguments);
    this.type = CSSRule_default.KEYFRAMES_RULE;
    this.cssRules = [];
    this.name = null;
  }
  get cssText() {
    let cssText2 = "";
    for (const cssRule of this.cssRules) {
      cssText2 += cssRule.cssText + " ";
    }
    return `@keyframes ${this.name} { ${cssText2}}`;
  }
  appendRule(rule) {
    const match = rule.match(CSS_RULE_REGEXP);
    if (match) {
      const cssRule = new CSSKeyframeRule_default;
      const style3 = new CSSStyleDeclaration;
      cssRule.parentRule = this;
      cssRule.keyText = match[1].trim();
      style3.cssText = match[2].trim();
      style3.parentRule = this;
      cssRule.style = style3;
    }
  }
  deleteRule(rule) {
    for (let i = 0, max3 = this.cssRules.length;i < max3; i++) {
      if (this.cssRules[i].keyText === rule) {
        this.cssRules.splice(i, 1);
        break;
      }
    }
  }
}

// node_modules/happy-dom-without-node/lib/css/MediaList.js
class MediaList {
  constructor() {
    this.length = 0;
  }
  get mediaText() {
    const mediaText = [];
    for (let i = 0;i < this.length; i++) {
      mediaText.push(this[i]);
    }
    return mediaText.join(", ");
  }
  item(index) {
    return this[index] || "";
  }
  appendMedium(medium2) {
    this[this.length] = medium2;
    this.length++;
  }
  deleteMedium(medium2) {
    let isDeleted = false;
    for (let i = 0;i < this.length; i++) {
      if (isDeleted) {
        this[i - 1] = this[i];
      }
      if (this[i] === medium2) {
        isDeleted = true;
      }
    }
    if (isDeleted) {
      this.length--;
    }
  }
}

// node_modules/happy-dom-without-node/lib/css/rules/CSSMediaRule.js
class CSSMediaRule extends CSSRule_default {
  constructor() {
    super(...arguments);
    this.type = CSSRule_default.MEDIA_RULE;
    this.cssRules = [];
    this.media = new MediaList;
  }
  get cssText() {
    let cssText2 = "";
    for (const cssRule of this.cssRules) {
      cssText2 += cssRule.cssText;
    }
    return `@media ${this.conditionText} { ${cssText2} }`;
  }
  get conditionText() {
    return this.media.mediaText;
  }
}

// node_modules/happy-dom-without-node/lib/css/rules/CSSContainerRule.js
class CSSContainerRule extends CSSRule_default {
  constructor() {
    super(...arguments);
    this.type = CSSRule_default.CONTAINER_RULE;
    this.cssRules = [];
    this.conditionText = "";
  }
  get cssText() {
    let cssText2 = "";
    for (const cssRule of this.cssRules) {
      cssText2 += cssRule.cssText;
    }
    return `@container ${this.conditionText} { ${cssText2} }`;
  }
}

// node_modules/happy-dom-without-node/lib/css/rules/CSSSupportsRule.js
class CSSSupportsRule extends CSSRule_default {
  constructor() {
    super(...arguments);
    this.type = CSSRule_default.SUPPORTS_RULE;
    this.cssRules = [];
    this.conditionText = "";
  }
  get cssText() {
    let cssText2 = "";
    for (const cssRule of this.cssRules) {
      cssText2 += cssRule.cssText;
    }
    return `@supports ${this.conditionText} { ${cssText2} }`;
  }
}

// node_modules/happy-dom-without-node/lib/css/utilities/CSSParser.js
var COMMENT_REGEXP = /\/\*[\s\S]*?\*\//gm;

class CSSParser {
  static parseFromString(parentStyleSheet, cssText2) {
    const css = cssText2.replace(COMMENT_REGEXP, "");
    const cssRules = [];
    const regExp = /{|}/gm;
    const stack = [];
    let parentRule = null;
    let lastIndex = 0;
    let match;
    while (match = regExp.exec(css)) {
      if (match[0] === "{") {
        const selectorText = css.substring(lastIndex, match.index).trim();
        if (selectorText.startsWith("@keyframes") || selectorText.startsWith("@-webkit-keyframes")) {
          const newRule = new CSSKeyframesRule;
          newRule.name = selectorText.replace(/@(-webkit-){0,1}keyframes +/, "");
          newRule.parentStyleSheet = parentStyleSheet;
          cssRules.push(newRule);
          parentRule = newRule;
        } else if (selectorText.startsWith("@media")) {
          const mediums = selectorText.replace("@media", "").split(",");
          const newRule = new CSSMediaRule;
          for (const medium2 of mediums) {
            newRule.media.appendMedium(medium2.trim());
          }
          newRule.parentStyleSheet = parentStyleSheet;
          cssRules.push(newRule);
          parentRule = newRule;
        } else if (selectorText.startsWith("@container") || selectorText.startsWith("@-webkit-container")) {
          const conditionText = selectorText.replace(/@(-webkit-){0,1}container +/, "");
          const newRule = new CSSContainerRule;
          newRule.conditionText = conditionText;
          newRule.parentStyleSheet = parentStyleSheet;
          cssRules.push(newRule);
          parentRule = newRule;
        } else if (selectorText.startsWith("@supports") || selectorText.startsWith("@-webkit-supports")) {
          const conditionText = selectorText.replace(/@(-webkit-){0,1}supports +/, "");
          const newRule = new CSSSupportsRule;
          newRule.conditionText = conditionText;
          newRule.parentStyleSheet = parentStyleSheet;
          cssRules.push(newRule);
          parentRule = newRule;
        } else if (selectorText.startsWith("@")) {
          const newRule = new CSSRule_default;
          newRule.parentStyleSheet = parentStyleSheet;
          parentRule = newRule;
        } else if (parentRule && parentRule.type === CSSRule_default.KEYFRAMES_RULE) {
          const newRule = new CSSKeyframeRule_default;
          newRule.keyText = selectorText.trim();
          newRule.parentStyleSheet = parentStyleSheet;
          newRule.parentRule = parentRule;
          parentRule.cssRules.push(newRule);
          parentRule = newRule;
        } else if (parentRule && (parentRule.type === CSSRule_default.MEDIA_RULE || parentRule.type === CSSRule_default.CONTAINER_RULE || parentRule.type === CSSRule_default.SUPPORTS_RULE)) {
          if (this.validateSelectorText(selectorText)) {
            const newRule = new CSSStyleRule_default;
            newRule.selectorText = selectorText;
            newRule.parentStyleSheet = parentStyleSheet;
            newRule.parentRule = parentRule;
            parentRule.cssRules.push(newRule);
            parentRule = newRule;
          }
        } else {
          if (this.validateSelectorText(selectorText)) {
            const newRule = new CSSStyleRule_default;
            newRule.selectorText = selectorText;
            newRule.parentStyleSheet = parentStyleSheet;
            newRule.parentRule = parentRule;
            if (!parentRule) {
              cssRules.push(newRule);
            }
            parentRule = newRule;
          }
        }
        stack.push(parentRule);
      } else {
        if (parentRule) {
          const cssText3 = css.substring(lastIndex, match.index).trim().replace(/([^;])$/, "$1;");
          switch (parentRule.type) {
            case CSSRule_default.FONT_FACE_RULE:
            case CSSRule_default.KEYFRAME_RULE:
            case CSSRule_default.STYLE_RULE:
              parentRule[cssText] = cssText3;
              break;
          }
        }
        stack.pop();
        parentRule = stack[stack.length - 1] || null;
      }
      lastIndex = match.index + 1;
    }
    return cssRules;
  }
  static validateSelectorText(selectorText) {
    try {
      SelectorParser.getSelectorGroups(selectorText);
    } catch (e) {
      return false;
    }
    return true;
  }
}

// node_modules/happy-dom-without-node/lib/css/CSSStyleSheet.js
var __classPrivateFieldGet23 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet19 = function(receiver, state, value2, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
};
var _CSSStyleSheet_currentText;

class CSSStyleSheet {
  constructor(options3) {
    this.value = null;
    this.name = null;
    this.namespaceURI = null;
    this.cssRules = [];
    _CSSStyleSheet_currentText.set(this, null);
    this.media = options3 && options3.media ? options3.media : "";
    this.title = options3 && options3.title ? options3.title : "";
    this.alternate = options3 && options3.alternate ? options3.alternate : false;
    this.disabled = options3 && options3.disabled ? options3.disabled : false;
  }
  insertRule(rule, index) {
    const rules = CSSParser.parseFromString(this, rule);
    if (rules.length === 0) {
      throw new DOMException("Invalid CSS rule.", DOMExceptionNameEnum_default.hierarchyRequestError);
    }
    if (rules.length > 1) {
      throw new DOMException("Only one rule is allowed to be added.", DOMExceptionNameEnum_default.syntaxError);
    }
    if (index !== undefined) {
      if (index > this.cssRules.length) {
        throw new DOMException("Index is more than the length of CSSRuleList.", DOMExceptionNameEnum_default.indexSizeError);
      }
      this.cssRules.splice(index, 0, rules[0]);
      return index;
    }
    const newIndex = this.cssRules.length;
    this.cssRules.push(rules[0]);
    return newIndex;
  }
  deleteRule(index) {
    delete this.cssRules[index];
  }
  async replace(text2) {
    this.replaceSync(text2);
  }
  replaceSync(text2) {
    if (__classPrivateFieldGet23(this, _CSSStyleSheet_currentText, "f") !== text2) {
      __classPrivateFieldSet19(this, _CSSStyleSheet_currentText, text2, "f");
      this.cssRules = CSSParser.parseFromString(this, text2);
    }
  }
}
_CSSStyleSheet_currentText = new WeakMap;
var CSSStyleSheet_default = CSSStyleSheet;

// node_modules/happy-dom-without-node/lib/nodes/html-link-element/HTMLLinkElementStyleSheetLoader.js
var __classPrivateFieldSet20 = function(receiver, state, value2, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
};
var __classPrivateFieldGet24 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _HTMLLinkElementStyleSheetLoader_element;
var _HTMLLinkElementStyleSheetLoader_browserFrame;
var _HTMLLinkElementStyleSheetLoader_loadedStyleSheetURL;

class HTMLLinkElementStyleSheetLoader {
  constructor(options3) {
    _HTMLLinkElementStyleSheetLoader_element.set(this, undefined);
    _HTMLLinkElementStyleSheetLoader_browserFrame.set(this, undefined);
    _HTMLLinkElementStyleSheetLoader_loadedStyleSheetURL.set(this, null);
    __classPrivateFieldSet20(this, _HTMLLinkElementStyleSheetLoader_element, options3.element, "f");
    __classPrivateFieldSet20(this, _HTMLLinkElementStyleSheetLoader_browserFrame, options3.browserFrame, "f");
  }
  async loadStyleSheet(url5, rel) {
    const element = __classPrivateFieldGet24(this, _HTMLLinkElementStyleSheetLoader_element, "f");
    const browserSettings = __classPrivateFieldGet24(this, _HTMLLinkElementStyleSheetLoader_browserFrame, "f").page.context.browser.settings;
    const window3 = element[ownerDocument][ownerWindow];
    if (!url5 || !rel || rel.toLowerCase() !== "stylesheet" || !element[isConnected]) {
      return;
    }
    let absoluteURL;
    try {
      absoluteURL = new URL(url5, window3.location.href).href;
    } catch (error5) {
      return;
    }
    if (__classPrivateFieldGet24(this, _HTMLLinkElementStyleSheetLoader_loadedStyleSheetURL, "f") === absoluteURL) {
      return;
    }
    if (browserSettings.disableCSSFileLoading) {
      if (browserSettings.handleDisabledFileLoadingAsSuccess) {
        element.dispatchEvent(new Event_default("load"));
      } else {
        WindowErrorUtility.dispatchError(element, new DOMException(`Failed to load external stylesheet "${absoluteURL}". CSS file loading is disabled.`, DOMExceptionNameEnum_default.notSupportedError));
      }
      return;
    }
    const resourceFetch = new NotSupported3({
      browserFrame: __classPrivateFieldGet24(this, _HTMLLinkElementStyleSheetLoader_browserFrame, "f"),
      window: window3
    });
    const readyStateManager2 = window3[readyStateManager];
    __classPrivateFieldSet20(this, _HTMLLinkElementStyleSheetLoader_loadedStyleSheetURL, absoluteURL, "f");
    readyStateManager2.startTask();
    let code2 = null;
    let error4 = null;
    try {
      code2 = await resourceFetch.fetch(absoluteURL);
    } catch (e) {
      error4 = e;
    }
    readyStateManager2.endTask();
    if (error4) {
      WindowErrorUtility.dispatchError(element, error4);
    } else {
      const styleSheet = new CSSStyleSheet_default;
      styleSheet.replaceSync(code2);
      element[sheet] = styleSheet;
      element.dispatchEvent(new Event_default("load"));
    }
  }
}
_HTMLLinkElementStyleSheetLoader_element = new WeakMap, _HTMLLinkElementStyleSheetLoader_browserFrame = new WeakMap, _HTMLLinkElementStyleSheetLoader_loadedStyleSheetURL = new WeakMap;
var HTMLLinkElementStyleSheetLoader_default = HTMLLinkElementStyleSheetLoader;

// node_modules/happy-dom-without-node/lib/nodes/html-link-element/HTMLLinkElement.js
var __classPrivateFieldSet21 = function(receiver, state, value2, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
};
var __classPrivateFieldGet25 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _HTMLLinkElement_styleSheetLoader;
var _a26;
var _b17;
var _c16;

class HTMLLinkElement extends HTMLElement2 {
  constructor(browserFrame) {
    super();
    this.onerror = null;
    this.onload = null;
    this[_a26] = null;
    this[_b17] = true;
    this[_c16] = null;
    _HTMLLinkElement_styleSheetLoader.set(this, undefined);
    __classPrivateFieldSet21(this, _HTMLLinkElement_styleSheetLoader, new HTMLLinkElementStyleSheetLoader_default({
      element: this,
      browserFrame
    }), "f");
    this[attributes] = new HTMLLinkElementNamedNodeMap(this, __classPrivateFieldGet25(this, _HTMLLinkElement_styleSheetLoader, "f"));
  }
  get sheet() {
    return this[sheet];
  }
  get relList() {
    if (!this[relList]) {
      this[relList] = new DOMTokenList_default(this, "rel");
    }
    return this[relList];
  }
  get as() {
    return this.getAttribute("as") || "";
  }
  set as(as) {
    this.setAttribute("as", as);
  }
  get crossOrigin() {
    return this.getAttribute("crossorigin") || "";
  }
  set crossOrigin(crossOrigin) {
    this.setAttribute("crossorigin", crossOrigin);
  }
  get href() {
    if (!this.hasAttribute("href")) {
      return "";
    }
    try {
      return new URL(this.getAttribute("href"), this[ownerDocument].location.href).href;
    } catch (e) {
      return this.getAttribute("href");
    }
  }
  set href(href) {
    this.setAttribute("href", href);
  }
  get hreflang() {
    return this.getAttribute("hreflang") || "";
  }
  set hreflang(hreflang) {
    this.setAttribute("hreflang", hreflang);
  }
  get media() {
    return this.getAttribute("media") || "";
  }
  set media(media) {
    this.setAttribute("media", media);
  }
  get referrerPolicy() {
    return this.getAttribute("referrerPolicy") || "";
  }
  set referrerPolicy(referrerPolicy) {
    this.setAttribute("referrerPolicy", referrerPolicy);
  }
  get rel() {
    return this.getAttribute("rel") || "";
  }
  set rel(rel) {
    this.setAttribute("rel", rel);
  }
  get type() {
    return this.getAttribute("type") || "";
  }
  set type(type) {
    this.setAttribute("type", type);
  }
  [(_HTMLLinkElement_styleSheetLoader = new WeakMap, attributes, _a26 = sheet, _b17 = evaluateCSS, _c16 = relList, connectToNode)](parentNode2 = null) {
    const isConnected2 = this[isConnected];
    const isParentConnected = parentNode2 ? parentNode2[isConnected] : false;
    super[connectToNode](parentNode2);
    if (isParentConnected && isConnected2 !== isParentConnected && this[evaluateCSS]) {
      __classPrivateFieldGet25(this, _HTMLLinkElement_styleSheetLoader, "f").loadStyleSheet(this.getAttribute("href"), this.getAttribute("rel"));
    }
  }
}

// node_modules/happy-dom-without-node/lib/nodes/html-style-element/HTMLStyleElement.js
var _a27;
var _b18;

class HTMLStyleElement extends HTMLElement2 {
  constructor() {
    super(...arguments);
    this[_a27] = null;
    this[_b18] = this;
  }
  get sheet() {
    return this[sheet] ? this[sheet] : null;
  }
  get media() {
    return this.getAttribute("media") || "";
  }
  set media(media) {
    this.setAttribute("media", media);
  }
  get type() {
    return this.getAttribute("type") || "";
  }
  set type(type) {
    this.setAttribute("type", type);
  }
  get disabled() {
    return this.getAttribute("disabled") !== null;
  }
  set disabled(disabled) {
    if (!disabled) {
      this.removeAttribute("disabled");
    } else {
      this.setAttribute("disabled", "");
    }
  }
  [(_a27 = sheet, _b18 = styleNode, appendChild)](node2) {
    const returnValue2 = super[appendChild](node2);
    this[updateSheet]();
    return returnValue2;
  }
  [removeChild](node2) {
    const returnValue2 = super[removeChild](node2);
    this[updateSheet]();
    return returnValue2;
  }
  [insertBefore](newNode, referenceNode) {
    const returnValue2 = super[insertBefore](newNode, referenceNode);
    this[updateSheet]();
    return returnValue2;
  }
  [connectToNode](parentNode2 = null) {
    super[connectToNode](parentNode2);
    if (parentNode2) {
      this[sheet] = new CSSStyleSheet_default;
      this[sheet].replaceSync(this.textContent);
    } else {
      this[sheet] = null;
    }
  }
  [updateSheet]() {
    if (this[sheet]) {
      this[ownerDocument][cacheID]++;
      this[sheet].replaceSync(this.textContent);
    }
  }
}

// node_modules/happy-dom-without-node/lib/nodes/html-slot-element/HTMLSlotElement.js
class HTMLSlotElement extends HTMLElement2 {
  constructor() {
    super(...arguments);
    this.onslotchange = null;
  }
  get name() {
    return this.getAttribute("name") || "";
  }
  set name(name2) {
    this.setAttribute("name", name2);
  }
  assign(..._nodes) {
  }
  assignedNodes(options3) {
    const host2 = this.getRootNode()?.host;
    if (host2) {
      const name2 = this.name;
      if (name2) {
        return this.assignedElements(options3);
      }
      return host2[childNodes].slice();
    }
    return [];
  }
  assignedElements(_options) {
    const host2 = this.getRootNode()?.host;
    if (host2) {
      const name2 = this.name;
      if (name2) {
        const assignedElements = [];
        for (const child of host2[children]) {
          if (child.slot === name2) {
            assignedElements.push(child);
          }
        }
        return assignedElements;
      }
      return host2[children].slice();
    }
    return [];
  }
  [cloneNode](deep = false) {
    return super[cloneNode](deep);
  }
}

// node_modules/happy-dom-without-node/lib/nodes/html-label-element/HTMLLabelElement.js
class HTMLLabelElement extends HTMLElement2 {
  get htmlFor() {
    const htmlFor = this.getAttribute("for");
    if (htmlFor !== null) {
      return htmlFor;
    }
    return htmlFor !== null ? htmlFor : "";
  }
  set htmlFor(htmlFor) {
    this.setAttribute("for", htmlFor);
  }
  get control() {
    const htmlFor = this.htmlFor;
    if (htmlFor) {
      const control = this[ownerDocument].getElementById(htmlFor);
      return control !== this ? control : null;
    }
    return this.querySelector('button,input:not([type="hidden"]),meter,output,progress,select,textarea');
  }
  get form() {
    return this[formNode];
  }
  [cloneNode](deep = false) {
    return super[cloneNode](deep);
  }
  dispatchEvent(event) {
    const returnValue2 = super.dispatchEvent(event);
    if (event.type === "click" && event instanceof MouseEvent && (event.eventPhase === EventPhaseEnum_default.atTarget || event.eventPhase === EventPhaseEnum_default.bubbling)) {
      const control = this.control;
      if (control && event.target !== control) {
        control.dispatchEvent(new MouseEvent("click", { bubbles: true, cancelable: true }));
      }
    }
    return returnValue2;
  }
}

// node_modules/happy-dom-without-node/lib/nodes/html-meta-element/HTMLMetaElement.js
class HTMLMetaElement extends HTMLElement2 {
  get content() {
    return this.getAttribute("content") || "";
  }
  set content(content2) {
    this.setAttribute("content", content2);
  }
  get httpEquiv() {
    return this.getAttribute("http-equiv") || "";
  }
  set httpEquiv(httpEquiv) {
    this.setAttribute("http-equiv", httpEquiv);
  }
  get name() {
    return this.getAttribute("name") || "";
  }
  set name(name2) {
    this.setAttribute("name", name2);
  }
  get scheme() {
    return this.getAttribute("scheme") || "";
  }
  set scheme(scheme) {
    this.setAttribute("scheme", scheme);
  }
}

// node_modules/happy-dom-without-node/lib/nodes/html-media-element/TimeRange.js
class TimeRange {
  constructor() {
    this.length = 0;
  }
  start() {
    return 0;
  }
  end() {
    return 0;
  }
}

// node_modules/happy-dom-without-node/lib/nodes/html-media-element/HTMLMediaElement.js
var _a28;
var _b19;
var _c17;
var _d12;
var _e10;
var _f8;
var _g6;
var _h6;
var _j6;
var _k4;
var _l4;
var _m4;
var _o4;
var _p3;
var _q3;
var _r2;
var _s2;
var _t2;
var _u;

class HTMLMediaElement extends HTMLElement2 {
  constructor() {
    super(...arguments);
    this.onabort = null;
    this.oncanplay = null;
    this.oncanplaythrough = null;
    this.ondurationchange = null;
    this.onemptied = null;
    this.onended = null;
    this.onerror = null;
    this.onloadeddata = null;
    this.onloadedmetadata = null;
    this.onloadstart = null;
    this.onpause = null;
    this.onplay = null;
    this.onplaying = null;
    this.onprogress = null;
    this.onratechange = null;
    this.onresize = null;
    this.onseeked = null;
    this.onseeking = null;
    this.onstalled = null;
    this.onsuspend = null;
    this.ontimeupdate = null;
    this.onvolumechange = null;
    this.onwaiting = null;
    this[_a28] = 1;
    this[_b19] = true;
    this[_c17] = 0;
    this[_d12] = 1;
    this[_e10] = 1;
    this[_f8] = false;
    this[_g6] = false;
    this[_h6] = true;
    this[_j6] = new TimeRange;
    this[_k4] = NaN;
    this[_l4] = null;
    this[_m4] = false;
    this[_o4] = 0;
    this[_p3] = 0;
    this[_q3] = [];
    this[_r2] = [];
    this[_s2] = false;
    this[_t2] = new TimeRange;
    this[_u] = new TimeRange;
  }
  get buffered() {
    return this[buffered];
  }
  get duration() {
    return this[duration];
  }
  get error() {
    return this[error3];
  }
  get ended() {
    return this[ended];
  }
  get networkState() {
    return this[networkState];
  }
  get readyState() {
    return this[readyState];
  }
  get textTracks() {
    return this[textTracks];
  }
  get videoTracks() {
    return this[videoTracks];
  }
  get seeking() {
    return this[seeking];
  }
  get seekable() {
    return this[seekable];
  }
  get played() {
    return this[played];
  }
  get autoplay() {
    return this.getAttribute("autoplay") !== null;
  }
  set autoplay(autoplay) {
    if (!autoplay) {
      this.removeAttribute("autoplay");
    } else {
      this.setAttribute("autoplay", "");
    }
  }
  get controls() {
    return this.getAttribute("controls") !== null;
  }
  set controls(controls) {
    if (!controls) {
      this.removeAttribute("controls");
    } else {
      this.setAttribute("controls", "");
    }
  }
  get loop() {
    return this.getAttribute("loop") !== null;
  }
  set loop(loop) {
    if (!loop) {
      this.removeAttribute("loop");
    } else {
      this.setAttribute("loop", "");
    }
  }
  get muted() {
    if (this[muted]) {
      return this[muted];
    }
    if (!this[defaultMuted]) {
      return this.getAttribute("muted") !== null;
    }
    return false;
  }
  set muted(muted2) {
    this[muted] = !!muted2;
    if (!muted2 && !this[defaultMuted]) {
      this.removeAttribute("muted");
    } else {
      this.setAttribute("muted", "");
    }
  }
  get defaultMuted() {
    return this[defaultMuted];
  }
  set defaultMuted(defaultMuted2) {
    this[defaultMuted] = !!defaultMuted2;
    if (!this[defaultMuted] && !this[muted]) {
      this.removeAttribute("muted");
    } else {
      this.setAttribute("muted", "");
    }
  }
  get src() {
    return this.getAttribute("src") || "";
  }
  set src(src) {
    this.setAttribute("src", src);
    if (Boolean(src)) {
      this.dispatchEvent(new Event_default("canplay", { bubbles: false, cancelable: false }));
      this.dispatchEvent(new Event_default("durationchange", { bubbles: false, cancelable: false }));
    }
  }
  get currentSrc() {
    return this.src;
  }
  get volume() {
    return this[volume];
  }
  set volume(volume2) {
    const parsedVolume = Number(volume2);
    if (isNaN(parsedVolume)) {
      throw new TypeError(`Failed to set the 'volume' property on 'HTMLMediaElement': The provided double value is non-finite.`);
    }
    if (parsedVolume < 0 || parsedVolume > 1) {
      throw new DOMException(`Failed to set the 'volume' property on 'HTMLMediaElement': The volume provided (${parsedVolume}) is outside the range [0, 1].`, DOMExceptionNameEnum_default.indexSizeError);
    }
    this[volume] = parsedVolume;
  }
  get crossOrigin() {
    return this.getAttribute("crossorigin");
  }
  set crossOrigin(crossOrigin) {
    if (crossOrigin === null) {
      return;
    }
    if (["", "use-credentials", "anonymous"].includes(crossOrigin)) {
      this.setAttribute("crossorigin", crossOrigin);
    } else {
      this.setAttribute("crossorigin", "anonymous");
    }
  }
  get currentTime() {
    return this[currentTime];
  }
  set currentTime(currentTime2) {
    const parsedCurrentTime = Number(currentTime2);
    if (isNaN(parsedCurrentTime)) {
      throw new TypeError(`Failed to set the 'currentTime' property on 'HTMLMediaElement': The provided double value is non-finite.`);
    }
    this[currentTime] = parsedCurrentTime;
  }
  get playbackRate() {
    return this[playbackRate];
  }
  set playbackRate(playbackRate2) {
    const parsedPlaybackRate = Number(playbackRate2);
    if (isNaN(parsedPlaybackRate)) {
      throw new TypeError(`Failed to set the 'playbackRate' property on 'HTMLMediaElement': The provided double value is non-finite.`);
    }
    this[playbackRate] = parsedPlaybackRate;
  }
  get defaultPlaybackRate() {
    return this[defaultPlaybackRate];
  }
  set defaultPlaybackRate(defaultPlaybackRate2) {
    const parsedDefaultPlaybackRate = Number(defaultPlaybackRate2);
    if (isNaN(parsedDefaultPlaybackRate)) {
      throw new TypeError(`Failed to set the 'defaultPlaybackRate' property on 'HTMLMediaElement': The provided double value is non-finite.`);
    }
    this[defaultPlaybackRate] = parsedDefaultPlaybackRate;
  }
  get preservesPitch() {
    return this[preservesPitch];
  }
  set preservesPitch(preservesPitch2) {
    this[preservesPitch] = Boolean(preservesPitch2);
  }
  get preload() {
    return this.getAttribute("preload") || "auto";
  }
  set preload(preload) {
    this.setAttribute("preload", preload);
  }
  get paused() {
    return this[paused];
  }
  pause() {
    this[paused] = true;
    this.dispatchEvent(new Event_default("pause", { bubbles: false, cancelable: false }));
  }
  async play() {
    this[paused] = false;
    return Promise.resolve();
  }
  canPlayType(_type) {
    return "";
  }
  load() {
    this.dispatchEvent(new Event_default("emptied", { bubbles: false, cancelable: false }));
  }
  captureStream() {
    return {};
  }
  [(_a28 = volume, _b19 = paused, _c17 = currentTime, _d12 = playbackRate, _e10 = defaultPlaybackRate, _f8 = muted, _g6 = defaultMuted, _h6 = preservesPitch, _j6 = buffered, _k4 = duration, _l4 = error3, _m4 = ended, _o4 = networkState, _p3 = readyState, _q3 = textTracks, _r2 = videoTracks, _s2 = seeking, _t2 = seekable, _u = played, cloneNode)](deep = false) {
    return super[cloneNode](deep);
  }
}

// node_modules/happy-dom-without-node/lib/nodes/html-audio-element/HTMLAudioElement.js
class HTMLAudioElement extends HTMLMediaElement {
}

// node_modules/happy-dom-without-node/lib/nodes/html-video-element/HTMLVideoElement.js
class HTMLVideoElement extends HTMLMediaElement {
}

// node_modules/happy-dom-without-node/lib/nodes/html-base-element/HTMLBaseElement.js
class HTMLBaseElement extends HTMLElement2 {
  get href() {
    const href = this.getAttribute("href");
    if (href !== null) {
      return href;
    }
    return this[ownerDocument].location.href;
  }
  set href(href) {
    this.setAttribute("href", href);
  }
  get target() {
    return this.getAttribute("target") || "";
  }
  set target(target2) {
    this.setAttribute("target", target2);
  }
  [cloneNode](deep = false) {
    return super[cloneNode](deep);
  }
}

// node_modules/happy-dom-without-node/lib/nodes/html-iframe-element/HTMLIFrameElementNamedNodeMap.js
var __classPrivateFieldSet22 = function(receiver, state, value2, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
};
var __classPrivateFieldGet26 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _HTMLIFrameElementNamedNodeMap_instances;
var _HTMLIFrameElementNamedNodeMap_pageLoader;
var _HTMLIFrameElementNamedNodeMap_validateSandboxFlags;
var SANDBOX_FLAGS = [
  "allow-downloads",
  "allow-forms",
  "allow-modals",
  "allow-orientation-lock",
  "allow-pointer-lock",
  "allow-popups",
  "allow-popups-to-escape-sandbox",
  "allow-presentation",
  "allow-same-origin",
  "allow-scripts",
  "allow-top-navigation",
  "allow-top-navigation-by-user-activation",
  "allow-top-navigation-to-custom-protocols"
];

class HTMLIFrameElementNamedNodeMap extends HTMLElementNamedNodeMap {
  constructor(ownerElement2, pageLoader) {
    super(ownerElement2);
    _HTMLIFrameElementNamedNodeMap_instances.add(this);
    _HTMLIFrameElementNamedNodeMap_pageLoader.set(this, undefined);
    __classPrivateFieldSet22(this, _HTMLIFrameElementNamedNodeMap_pageLoader, pageLoader, "f");
  }
  setNamedItem(item2) {
    const replacedAttribute = super.setNamedItem(item2);
    if (item2[name] === "srcdoc") {
      __classPrivateFieldGet26(this, _HTMLIFrameElementNamedNodeMap_pageLoader, "f").loadPage();
    }
    if (item2[name] === "src" && this[ownerElement][attributes]["srcdoc"]?.value === undefined && item2[value] && item2[value] !== replacedAttribute?.[value]) {
      __classPrivateFieldGet26(this, _HTMLIFrameElementNamedNodeMap_pageLoader, "f").loadPage();
    }
    if (item2[name] === "sandbox") {
      if (!this[ownerElement][sandbox]) {
        this[ownerElement][sandbox] = new DOMTokenList_default(this[ownerElement], "sandbox");
      } else {
        this[ownerElement][sandbox][updateIndices]();
      }
      __classPrivateFieldGet26(this, _HTMLIFrameElementNamedNodeMap_instances, "m", _HTMLIFrameElementNamedNodeMap_validateSandboxFlags).call(this);
    }
    return replacedAttribute || null;
  }
  [(_HTMLIFrameElementNamedNodeMap_pageLoader = new WeakMap, _HTMLIFrameElementNamedNodeMap_instances = new WeakSet, removeNamedItem)](name2) {
    const removedItem = super[removeNamedItem](name2);
    if (removedItem && (removedItem[name] === "srcdoc" || removedItem[name] === "src")) {
      __classPrivateFieldGet26(this, _HTMLIFrameElementNamedNodeMap_pageLoader, "f").loadPage();
    }
    return removedItem;
  }
}
_HTMLIFrameElementNamedNodeMap_validateSandboxFlags = function _HTMLIFrameElementNamedNodeMap_validateSandboxFlags2() {
  const window3 = this[ownerElement][ownerDocument][ownerWindow];
  const values = this[ownerElement][sandbox].values();
  const invalidFlags = [];
  for (const token of values) {
    if (!SANDBOX_FLAGS.includes(token)) {
      invalidFlags.push(token);
    }
  }
  if (invalidFlags.length === 1) {
    window3.console.error(`Error while parsing the 'sandbox' attribute: '${invalidFlags[0]}' is an invalid sandbox flag.`);
  } else if (invalidFlags.length > 1) {
    window3.console.error(`Error while parsing the 'sandbox' attribute: '${invalidFlags.join(`', '`)}' are invalid sandbox flags.`);
  }
};
var HTMLIFrameElementNamedNodeMap_default = HTMLIFrameElementNamedNodeMap;

// node_modules/happy-dom-without-node/lib/window/CrossOriginBrowserWindow.js
var __classPrivateFieldSet23 = function(receiver, state, value2, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
};
var __classPrivateFieldGet27 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _CrossOriginBrowserWindow_targetWindow;

class CrossOriginBrowserWindow extends EventTarget_default {
  constructor(target2, parent) {
    super();
    this.self = this;
    this.window = this;
    _CrossOriginBrowserWindow_targetWindow.set(this, undefined);
    this.parent = parent ?? this;
    this.top = parent ?? this;
    this.location = new Proxy({}, {
      get: () => {
        throw new DOMException(`Blocked a frame with origin "${this.parent.location.origin}" from accessing a cross-origin frame.`, DOMExceptionNameEnum_default.securityError);
      },
      set: () => {
        throw new DOMException(`Blocked a frame with origin "${this.parent.location.origin}" from accessing a cross-origin frame.`, DOMExceptionNameEnum_default.securityError);
      }
    });
    __classPrivateFieldSet23(this, _CrossOriginBrowserWindow_targetWindow, target2, "f");
  }
  get opener() {
    return __classPrivateFieldGet27(this, _CrossOriginBrowserWindow_targetWindow, "f").opener;
  }
  get closed() {
    return __classPrivateFieldGet27(this, _CrossOriginBrowserWindow_targetWindow, "f").closed;
  }
  blur() {
    __classPrivateFieldGet27(this, _CrossOriginBrowserWindow_targetWindow, "f").blur();
  }
  focus() {
    __classPrivateFieldGet27(this, _CrossOriginBrowserWindow_targetWindow, "f").focus();
  }
  close() {
    __classPrivateFieldGet27(this, _CrossOriginBrowserWindow_targetWindow, "f").close();
  }
  postMessage(message, targetOrigin = "*", transfer) {
    __classPrivateFieldGet27(this, _CrossOriginBrowserWindow_targetWindow, "f").postMessage(message, targetOrigin, transfer);
  }
}
_CrossOriginBrowserWindow_targetWindow = new WeakMap;
var CrossOriginBrowserWindow_default = CrossOriginBrowserWindow;

// node_modules/happy-dom-without-node/lib/nodes/html-iframe-element/HTMLIFrameElementPageLoader.js
var __classPrivateFieldSet24 = function(receiver, state, value2, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
};
var __classPrivateFieldGet28 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _HTMLIFrameElementPageLoader_element;
var _HTMLIFrameElementPageLoader_contentWindowContainer;
var _HTMLIFrameElementPageLoader_browserParentFrame;
var _HTMLIFrameElementPageLoader_browserIFrame;
var _HTMLIFrameElementPageLoader_srcdoc;

class HTMLIFrameElementPageLoader {
  constructor(options3) {
    _HTMLIFrameElementPageLoader_element.set(this, undefined);
    _HTMLIFrameElementPageLoader_contentWindowContainer.set(this, undefined);
    _HTMLIFrameElementPageLoader_browserParentFrame.set(this, undefined);
    _HTMLIFrameElementPageLoader_browserIFrame.set(this, undefined);
    _HTMLIFrameElementPageLoader_srcdoc.set(this, null);
    __classPrivateFieldSet24(this, _HTMLIFrameElementPageLoader_element, options3.element, "f");
    __classPrivateFieldSet24(this, _HTMLIFrameElementPageLoader_contentWindowContainer, options3.contentWindowContainer, "f");
    __classPrivateFieldSet24(this, _HTMLIFrameElementPageLoader_browserParentFrame, options3.browserParentFrame, "f");
  }
  loadPage() {
    if (!__classPrivateFieldGet28(this, _HTMLIFrameElementPageLoader_element, "f")[isConnected]) {
      this.unloadPage();
      return;
    }
    const srcdoc = __classPrivateFieldGet28(this, _HTMLIFrameElementPageLoader_element, "f").getAttribute("srcdoc");
    const window3 = __classPrivateFieldGet28(this, _HTMLIFrameElementPageLoader_element, "f")[ownerDocument][ownerWindow];
    if (srcdoc !== null) {
      if (__classPrivateFieldGet28(this, _HTMLIFrameElementPageLoader_srcdoc, "f") === srcdoc) {
        return;
      }
      this.unloadPage();
      __classPrivateFieldSet24(this, _HTMLIFrameElementPageLoader_browserIFrame, BrowserFrameFactory.createChildFrame(__classPrivateFieldGet28(this, _HTMLIFrameElementPageLoader_browserParentFrame, "f")), "f");
      __classPrivateFieldGet28(this, _HTMLIFrameElementPageLoader_browserIFrame, "f").url = "about:srcdoc";
      __classPrivateFieldGet28(this, _HTMLIFrameElementPageLoader_contentWindowContainer, "f").window = __classPrivateFieldGet28(this, _HTMLIFrameElementPageLoader_browserIFrame, "f").window;
      __classPrivateFieldGet28(this, _HTMLIFrameElementPageLoader_browserIFrame, "f").window.top = __classPrivateFieldGet28(this, _HTMLIFrameElementPageLoader_browserParentFrame, "f").window.top;
      __classPrivateFieldGet28(this, _HTMLIFrameElementPageLoader_browserIFrame, "f").window.parent = __classPrivateFieldGet28(this, _HTMLIFrameElementPageLoader_browserParentFrame, "f").window;
      __classPrivateFieldGet28(this, _HTMLIFrameElementPageLoader_browserIFrame, "f").window.document.open();
      __classPrivateFieldGet28(this, _HTMLIFrameElementPageLoader_browserIFrame, "f").window.document.write(srcdoc);
      __classPrivateFieldSet24(this, _HTMLIFrameElementPageLoader_srcdoc, srcdoc, "f");
      __classPrivateFieldGet28(this, _HTMLIFrameElementPageLoader_element, "f")[ownerDocument][ownerWindow].requestAnimationFrame(() => __classPrivateFieldGet28(this, _HTMLIFrameElementPageLoader_element, "f").dispatchEvent(new Event_default("load")));
      return;
    }
    if (__classPrivateFieldGet28(this, _HTMLIFrameElementPageLoader_srcdoc, "f") !== null) {
      this.unloadPage();
    }
    const originURL = __classPrivateFieldGet28(this, _HTMLIFrameElementPageLoader_browserParentFrame, "f").window.location;
    const targetURL = BrowserFrameURL.getRelativeURL(__classPrivateFieldGet28(this, _HTMLIFrameElementPageLoader_browserParentFrame, "f"), __classPrivateFieldGet28(this, _HTMLIFrameElementPageLoader_element, "f").src);
    if (__classPrivateFieldGet28(this, _HTMLIFrameElementPageLoader_browserIFrame, "f") && __classPrivateFieldGet28(this, _HTMLIFrameElementPageLoader_browserIFrame, "f").window.location.href === targetURL.href) {
      return;
    }
    if (__classPrivateFieldGet28(this, _HTMLIFrameElementPageLoader_browserParentFrame, "f").page.context.browser.settings.disableIframePageLoading) {
      WindowErrorUtility.dispatchError(__classPrivateFieldGet28(this, _HTMLIFrameElementPageLoader_element, "f"), new DOMException(`Failed to load iframe page "${targetURL.href}". Iframe page loading is disabled.`, DOMExceptionNameEnum_default.notSupportedError));
      return;
    }
    const isSameOrigin = originURL.origin === targetURL.origin || targetURL.origin === "null";
    const parentWindow = isSameOrigin ? window3 : new CrossOriginBrowserWindow_default(window3);
    __classPrivateFieldSet24(this, _HTMLIFrameElementPageLoader_browserIFrame, __classPrivateFieldGet28(this, _HTMLIFrameElementPageLoader_browserIFrame, "f") ?? BrowserFrameFactory.createChildFrame(__classPrivateFieldGet28(this, _HTMLIFrameElementPageLoader_browserParentFrame, "f")), "f");
    __classPrivateFieldGet28(this, _HTMLIFrameElementPageLoader_browserIFrame, "f").window.top = parentWindow;
    __classPrivateFieldGet28(this, _HTMLIFrameElementPageLoader_browserIFrame, "f").window.parent = parentWindow;
    __classPrivateFieldGet28(this, _HTMLIFrameElementPageLoader_browserIFrame, "f").goto(targetURL.href, {
      referrer: originURL.origin,
      referrerPolicy: __classPrivateFieldGet28(this, _HTMLIFrameElementPageLoader_element, "f").referrerPolicy
    }).then(() => __classPrivateFieldGet28(this, _HTMLIFrameElementPageLoader_element, "f").dispatchEvent(new Event_default("load"))).catch((error4) => WindowErrorUtility.dispatchError(__classPrivateFieldGet28(this, _HTMLIFrameElementPageLoader_element, "f"), error4));
    __classPrivateFieldGet28(this, _HTMLIFrameElementPageLoader_contentWindowContainer, "f").window = isSameOrigin ? __classPrivateFieldGet28(this, _HTMLIFrameElementPageLoader_browserIFrame, "f").window : new CrossOriginBrowserWindow_default(__classPrivateFieldGet28(this, _HTMLIFrameElementPageLoader_browserIFrame, "f").window, window3);
  }
  unloadPage() {
    if (__classPrivateFieldGet28(this, _HTMLIFrameElementPageLoader_browserIFrame, "f")) {
      BrowserFrameFactory.destroyFrame(__classPrivateFieldGet28(this, _HTMLIFrameElementPageLoader_browserIFrame, "f"));
      __classPrivateFieldSet24(this, _HTMLIFrameElementPageLoader_browserIFrame, null, "f");
    }
    __classPrivateFieldGet28(this, _HTMLIFrameElementPageLoader_contentWindowContainer, "f").window = null;
    __classPrivateFieldSet24(this, _HTMLIFrameElementPageLoader_srcdoc, null, "f");
  }
}
_HTMLIFrameElementPageLoader_element = new WeakMap, _HTMLIFrameElementPageLoader_contentWindowContainer = new WeakMap, _HTMLIFrameElementPageLoader_browserParentFrame = new WeakMap, _HTMLIFrameElementPageLoader_browserIFrame = new WeakMap, _HTMLIFrameElementPageLoader_srcdoc = new WeakMap;
var HTMLIFrameElementPageLoader_default = HTMLIFrameElementPageLoader;

// node_modules/happy-dom-without-node/lib/nodes/html-iframe-element/HTMLIFrameElement.js
var __classPrivateFieldGet29 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet25 = function(receiver, state, value2, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
};
var _HTMLIFrameElement_contentWindowContainer;
var _HTMLIFrameElement_pageLoader;
var _a29;

class HTMLIFrameElement extends HTMLElement2 {
  constructor(browserFrame) {
    super();
    this.onload = null;
    this.onerror = null;
    this[_a29] = null;
    _HTMLIFrameElement_contentWindowContainer.set(this, {
      window: null
    });
    _HTMLIFrameElement_pageLoader.set(this, undefined);
    __classPrivateFieldSet25(this, _HTMLIFrameElement_pageLoader, new HTMLIFrameElementPageLoader_default({
      element: this,
      contentWindowContainer: __classPrivateFieldGet29(this, _HTMLIFrameElement_contentWindowContainer, "f"),
      browserParentFrame: browserFrame
    }), "f");
    this[attributes] = new HTMLIFrameElementNamedNodeMap_default(this, __classPrivateFieldGet29(this, _HTMLIFrameElement_pageLoader, "f"));
  }
  get src() {
    return this.getAttribute("src") || "";
  }
  set src(src) {
    this.setAttribute("src", src);
  }
  get allow() {
    return this.getAttribute("allow") || "";
  }
  set allow(allow) {
    this.setAttribute("allow", allow);
  }
  get height() {
    return this.getAttribute("height") || "";
  }
  set height(height2) {
    this.setAttribute("height", height2);
  }
  get width() {
    return this.getAttribute("width") || "";
  }
  set width(width2) {
    this.setAttribute("width", width2);
  }
  get name() {
    return this.getAttribute("name") || "";
  }
  set name(name2) {
    this.setAttribute("name", name2);
  }
  get sandbox() {
    if (!this[sandbox]) {
      this[sandbox] = new DOMTokenList_default(this, "sandbox");
    }
    return this[sandbox];
  }
  set sandbox(sandbox2) {
    this.setAttribute("sandbox", sandbox2);
  }
  get srcdoc() {
    return this.getAttribute("srcdoc") || "";
  }
  set srcdoc(srcdoc) {
    this.setAttribute("srcdoc", srcdoc);
  }
  get referrerPolicy() {
    return this.getAttribute("referrerpolicy") || "";
  }
  set referrerPolicy(referrerPolicy) {
    this.setAttribute("referrerpolicy", referrerPolicy);
  }
  get contentDocument() {
    return __classPrivateFieldGet29(this, _HTMLIFrameElement_contentWindowContainer, "f").window?.document ?? null;
  }
  get contentWindow() {
    return __classPrivateFieldGet29(this, _HTMLIFrameElement_contentWindowContainer, "f").window;
  }
  [(_HTMLIFrameElement_contentWindowContainer = new WeakMap, _HTMLIFrameElement_pageLoader = new WeakMap, attributes, _a29 = sandbox, connectToNode)](parentNode2 = null) {
    const isConnected2 = this[isConnected];
    const isParentConnected = parentNode2 ? parentNode2[isConnected] : false;
    super[connectToNode](parentNode2);
    if (isConnected2 !== isParentConnected) {
      if (isParentConnected) {
        __classPrivateFieldGet29(this, _HTMLIFrameElement_pageLoader, "f").loadPage();
      } else {
        __classPrivateFieldGet29(this, _HTMLIFrameElement_pageLoader, "f").unloadPage();
      }
    }
  }
  [cloneNode](deep = false) {
    return super[cloneNode](deep);
  }
}

// node_modules/happy-dom-without-node/lib/nodes/html-dialog-element/HTMLDialogElement.js
var _a30;

class HTMLDialogElement extends HTMLElement2 {
  constructor() {
    super(...arguments);
    this[_a30] = "";
    this.oncancel = null;
    this.onclose = null;
  }
  get returnValue() {
    return this[returnValue];
  }
  set returnValue(value2) {
    this[returnValue] = value2;
  }
  set open(open) {
    if (open) {
      this.setAttribute("open", "");
    } else {
      this.removeAttribute("open");
    }
  }
  get open() {
    return this.getAttribute("open") !== null;
  }
  close(returnValue2 = "") {
    const wasOpen = this.open;
    this.removeAttribute("open");
    this.returnValue = returnValue2;
    if (wasOpen) {
      this.dispatchEvent(new Event_default("close"));
    }
  }
  showModal() {
    this.setAttribute("open", "");
  }
  show() {
    this.setAttribute("open", "");
  }
}
_a30 = returnValue;
var HTMLDialogElement_default = HTMLDialogElement;

// node_modules/happy-dom-without-node/lib/nodes/svg-element/SVGElementNamedNodeMap.js
class SVGElementNamedNodeMap extends ElementNamedNodeMap {
  setNamedItem(item2) {
    const replacedItem = super.setNamedItem(item2);
    if (item2[name] === "style" && this[ownerElement][style2]) {
      this[ownerElement][style2].cssText = item2[value];
    }
    return replacedItem || null;
  }
  [(ownerElement, removeNamedItem)](name2) {
    const removedItem = super[removeNamedItem](name2);
    if (removedItem && removedItem[name] === "style" && this[ownerElement][style2]) {
      this[ownerElement][style2].cssText = "";
    }
    return removedItem;
  }
}

// node_modules/happy-dom-without-node/lib/nodes/svg-element/SVGElement.js
var __classPrivateFieldGet30 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet26 = function(receiver, state, value2, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
};
var _SVGElement_dataset;
var _a31;
var _b20;

class SVGElement extends Element_default {
  constructor() {
    super(...arguments);
    this.onabort = null;
    this.onerror = null;
    this.onload = null;
    this.onresize = null;
    this.onscroll = null;
    this.onunload = null;
    this[_a31] = new SVGElementNamedNodeMap(this);
    this[_b20] = null;
    _SVGElement_dataset.set(this, null);
  }
  get viewportElement() {
    return null;
  }
  get ownerSVGElement() {
    let parent = this[parentNode];
    while (parent) {
      if (parent[localName] === "svg") {
        return parent;
      }
      parent = parent[parentNode];
    }
    return null;
  }
  get dataset() {
    return __classPrivateFieldSet26(this, _SVGElement_dataset, __classPrivateFieldGet30(this, _SVGElement_dataset, "f") ?? DatasetFactory.createDataset(this), "f");
  }
  get style() {
    if (!this[style2]) {
      this[style2] = new CSSStyleDeclaration(this);
    }
    return this[style2];
  }
  get tabIndex() {
    const tabIndex = this.getAttribute("tabindex");
    return tabIndex !== null ? Number(tabIndex) : -1;
  }
  set tabIndex(tabIndex) {
    if (tabIndex === -1) {
      this.removeAttribute("tabindex");
    } else {
      this.setAttribute("tabindex", String(tabIndex));
    }
  }
  blur() {
    HTMLElementUtility.blur(this);
  }
  focus() {
    HTMLElementUtility.focus(this);
  }
}
_SVGElement_dataset = new WeakMap, _a31 = attributes, _b20 = style2;
var SVGElement_default = SVGElement;

// node_modules/happy-dom-without-node/lib/nodes/svg-element/DOMMatrix.js
class DOMMatrix {
  constructor() {
    this.is2D = false;
    this.isIdentity = false;
  }
}

// node_modules/happy-dom-without-node/lib/nodes/svg-element/SVGGraphicsElement.js
class SVGGraphicsElement extends SVGElement_default {
  constructor() {
    super(...arguments);
    this.transform = {};
  }
  getBBox() {
    return new DOMRect;
  }
  getCTM() {
    return new DOMMatrix;
  }
  getScreenCTM() {
    return new DOMMatrix;
  }
}

// node_modules/happy-dom-without-node/lib/nodes/svg-element/SVGRect.js
class SVGRect {
  constructor() {
    this.x = 0;
    this.y = 0;
    this.width = 0;
    this.height = 0;
  }
}

// node_modules/happy-dom-without-node/lib/nodes/svg-element/SVGPoint.js
class SVGPoint {
  constructor() {
    this.x = 0;
    this.y = 0;
  }
}

// node_modules/happy-dom-without-node/lib/nodes/svg-element/SVGLength.js
class SVGLength {
  constructor() {
    this.unitType = "";
    this.value = 0;
    this.valueInSpecifiedUnits = 0;
    this.valueAsString = "";
  }
  newValueSpecifiedUnits() {
  }
  convertToSpecifiedUnits() {
  }
}
SVGLength.SVG_LENGTHTYPE_UNKNOWN = 0;
SVGLength.SVG_LENGTHTYPE_NUMBER = 1;
SVGLength.SVG_LENGTHTYPE_PERCENTAGE = 2;
SVGLength.SVG_LENGTHTYPE_EMS = 3;
SVGLength.SVG_LENGTHTYPE_EXS = 4;
SVGLength.SVG_LENGTHTYPE_PX = 5;
SVGLength.SVG_LENGTHTYPE_CM = 6;
SVGLength.SVG_LENGTHTYPE_MM = 7;
SVGLength.SVG_LENGTHTYPE_IN = 8;
SVGLength.SVG_LENGTHTYPE_PT = 9;
SVGLength.SVG_LENGTHTYPE_PC = 10;
var SVGLength_default = SVGLength;

// node_modules/happy-dom-without-node/lib/nodes/svg-element/SVGAngle.js
class SVGAngle {
  constructor() {
    this.unitType = "";
    this.value = 0;
    this.valueInSpecifiedUnits = 0;
    this.valueAsString = "";
  }
  newValueSpecifiedUnits() {
  }
  convertToSpecifiedUnits() {
  }
}
SVGAngle.SVG_ANGLETYPE_UNKNOWN = "unknown";
SVGAngle.SVG_ANGLETYPE_UNSPECIFIED = "unspecified";
SVGAngle.SVG_ANGLETYPE_DEG = "0deg";
SVGAngle.SVG_ANGLETYPE_RAD = "0rad";
SVGAngle.SVG_ANGLETYPE_GRAD = "0grad";
var SVGAngle_default = SVGAngle;

// node_modules/happy-dom-without-node/lib/nodes/svg-element/SVGNumber.js
class SVGNumber {
  constructor() {
    this.value = 0;
  }
}

// node_modules/happy-dom-without-node/lib/nodes/svg-element/SVGTransform.js
class SVGTransform {
  constructor() {
    this.type = 0;
    this.angle = 0;
  }
  setMatrix() {
  }
  setTranslate() {
  }
  setScale() {
  }
  setRotate() {
  }
  setSkewX() {
  }
  setSkewY() {
  }
}
SVGTransform.SVG_TRANSFORM_UNKNOWN = 0;
SVGTransform.SVG_TRANSFORM_MATRIX = 1;
SVGTransform.SVG_TRANSFORM_TRANSLATE = 2;
SVGTransform.SVG_TRANSFORM_SCALE = 3;
SVGTransform.SVG_TRANSFORM_ROTATE = 4;
SVGTransform.SVG_TRANSFORM_SKEWX = 5;
SVGTransform.SVG_TRANSFORM_SKEWY = 6;
var SVGTransform_default = SVGTransform;

// node_modules/happy-dom-without-node/lib/nodes/svg-element/SVGAnimatedRect.js
class SVGAnimatedRect {
  constructor() {
    this.baseVal = new SVGRect;
    this.animVal = new SVGRect;
  }
}

// node_modules/happy-dom-without-node/lib/nodes/svg-element/SVGSVGElement.js
class SVGSVGElement extends SVGGraphicsElement {
  constructor() {
    super(...arguments);
    this.onafterprint = null;
    this.onbeforeprint = null;
    this.onbeforeunload = null;
    this.ongamepadconnected = null;
    this.ongamepaddisconnected = null;
    this.onhashchange = null;
    this.onlanguagechange = null;
    this.onmessage = null;
    this.onmessageerror = null;
    this.onoffline = null;
    this.ononline = null;
    this.onpagehide = null;
    this.onpageshow = null;
    this.onpopstate = null;
    this.onrejectionhandled = null;
    this.onstorage = null;
    this.onunhandledrejection = null;
    this.onunload = null;
  }
  get preserveAspectRatio() {
    return this.getAttributeNS(null, "preserveAspectRatio") || "xMidYMid meet";
  }
  set preserveAspectRatio(preserveAspectRatio) {
    this.setAttributeNS(null, "preserveAspectRatio", preserveAspectRatio);
  }
  get width() {
    return this.getAttributeNS(null, "width") || "";
  }
  set width(width2) {
    this.setAttributeNS(null, "width", width2);
  }
  get height() {
    return this.getAttributeNS(null, "height") || "";
  }
  set height(height2) {
    this.setAttributeNS(null, "height", height2);
  }
  get x() {
    return this.getAttributeNS(null, "x") || "";
  }
  set x(x2) {
    this.setAttributeNS(null, "x", x2);
  }
  get y() {
    return this.getAttributeNS(null, "y") || "";
  }
  set y(y2) {
    this.setAttributeNS(null, "y", y2);
  }
  get contentScriptType() {
    return this.getAttributeNS(null, "contentScriptType") || "";
  }
  set contentScriptType(contentScriptType) {
    this.setAttributeNS(null, "contentScriptType", contentScriptType);
  }
  get currentScale() {
    const currentScale = this.getAttributeNS(null, "currentScale");
    if (currentScale !== null) {
      return parseFloat(currentScale);
    }
    return 1;
  }
  set currentScale(currentScale) {
    this.setAttributeNS(null, "currentScale", String(currentScale));
  }
  get viewport() {
    return new SVGRect;
  }
  get currentTranslate() {
    return new SVGPoint;
  }
  get viewBox() {
    const rect = new SVGAnimatedRect;
    const viewBox = this.getAttribute("viewBox");
    const list2 = viewBox.split(/\s+/);
    rect.baseVal.x = Number(list2[0]);
    rect.baseVal.y = Number(list2[1]);
    rect.baseVal.width = Number(list2[2]);
    rect.baseVal.height = Number(list2[3]);
    return rect;
  }
  pauseAnimations() {
  }
  unpauseAnimations() {
  }
  animationsPaused() {
    return false;
  }
  getCurrentTime() {
    return 0;
  }
  setCurrentTime() {
  }
  getIntersectionList() {
    return [];
  }
  getEnclosureList() {
    return [];
  }
  checkIntersection() {
    return false;
  }
  checkEnclosure() {
    return false;
  }
  deselectAll() {
  }
  createSVGNumber() {
    return new SVGNumber;
  }
  createSVGLength() {
    return new SVGLength_default;
  }
  createSVGAngle() {
    return new SVGAngle_default;
  }
  createSVGPoint() {
    return new SVGPoint;
  }
  createSVGRect() {
    return new SVGRect;
  }
  createSVGTransform() {
    return new SVGTransform_default;
  }
  [cloneNode](deep = false) {
    return super[cloneNode](deep);
  }
}

// node_modules/happy-dom-without-node/lib/nodes/html-script-element/HTMLScriptElementNamedNodeMap.js
var __classPrivateFieldSet27 = function(receiver, state, value2, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
};
var __classPrivateFieldGet31 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _HTMLScriptElementNamedNodeMap_scriptLoader;

class HTMLScriptElementNamedNodeMap extends HTMLElementNamedNodeMap {
  constructor(ownerElement2, scriptLoader) {
    super(ownerElement2);
    _HTMLScriptElementNamedNodeMap_scriptLoader.set(this, undefined);
    __classPrivateFieldSet27(this, _HTMLScriptElementNamedNodeMap_scriptLoader, scriptLoader, "f");
  }
  setNamedItem(item2) {
    const replacedItem = super.setNamedItem(item2);
    if (item2[name] === "src" && item2[value] !== null && this[ownerElement][isConnected]) {
      __classPrivateFieldGet31(this, _HTMLScriptElementNamedNodeMap_scriptLoader, "f").loadScript(item2[value]);
    }
    return replacedItem || null;
  }
}
_HTMLScriptElementNamedNodeMap_scriptLoader = new WeakMap, ownerElement;
var HTMLScriptElementNamedNodeMap_default = HTMLScriptElementNamedNodeMap;

// node_modules/happy-dom-without-node/lib/nodes/html-script-element/HTMLScriptElementScriptLoader.js
var __classPrivateFieldSet28 = function(receiver, state, value2, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
};
var __classPrivateFieldGet32 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _HTMLScriptElementScriptLoader_element;
var _HTMLScriptElementScriptLoader_browserFrame;
var _HTMLScriptElementScriptLoader_loadedScriptURL;

class HTMLScriptElementScriptLoader {
  constructor(options3) {
    _HTMLScriptElementScriptLoader_element.set(this, undefined);
    _HTMLScriptElementScriptLoader_browserFrame.set(this, undefined);
    _HTMLScriptElementScriptLoader_loadedScriptURL.set(this, null);
    __classPrivateFieldSet28(this, _HTMLScriptElementScriptLoader_element, options3.element, "f");
    __classPrivateFieldSet28(this, _HTMLScriptElementScriptLoader_browserFrame, options3.browserFrame, "f");
  }
  async loadScript(url5) {
    const browserSettings = __classPrivateFieldGet32(this, _HTMLScriptElementScriptLoader_browserFrame, "f").page.context.browser.settings;
    const element = __classPrivateFieldGet32(this, _HTMLScriptElementScriptLoader_element, "f");
    const async = element.getAttribute("async") !== null;
    if (!url5 || !element[isConnected]) {
      return;
    }
    let absoluteURL;
    try {
      absoluteURL = new URL(url5, element[ownerDocument][ownerWindow].location.href).href;
    } catch (error5) {
      return;
    }
    if (__classPrivateFieldGet32(this, _HTMLScriptElementScriptLoader_loadedScriptURL, "f") === absoluteURL) {
      return;
    }
    if (browserSettings.disableJavaScriptFileLoading || browserSettings.disableJavaScriptEvaluation) {
      if (browserSettings.handleDisabledFileLoadingAsSuccess) {
        element.dispatchEvent(new Event_default("load"));
      } else {
        WindowErrorUtility.dispatchError(element, new DOMException(`Failed to load external script "${absoluteURL}". JavaScript file loading is disabled.`, DOMExceptionNameEnum_default.notSupportedError));
      }
      return;
    }
    const resourceFetch = new NotSupported3({
      browserFrame: __classPrivateFieldGet32(this, _HTMLScriptElementScriptLoader_browserFrame, "f"),
      window: element[ownerDocument][ownerWindow]
    });
    let code2 = null;
    let error4 = null;
    __classPrivateFieldSet28(this, _HTMLScriptElementScriptLoader_loadedScriptURL, absoluteURL, "f");
    if (async) {
      const readyStateManager2 = element[ownerDocument][ownerWindow][readyStateManager];
      readyStateManager2.startTask();
      try {
        code2 = await resourceFetch.fetch(absoluteURL);
      } catch (e) {
        error4 = e;
      }
      readyStateManager2.endTask();
    } else {
      try {
        code2 = resourceFetch.fetchSync(absoluteURL);
      } catch (e) {
        error4 = e;
      }
    }
    if (error4) {
      WindowErrorUtility.dispatchError(element, error4);
    } else {
      element[ownerDocument][currentScript] = element;
      code2 = "//# sourceURL=" + absoluteURL + "\n" + code2;
      if (browserSettings.disableErrorCapturing || browserSettings.errorCapture !== BrowserErrorCaptureEnum_default.tryAndCatch) {
        element[ownerDocument][ownerWindow].eval(code2);
      } else {
        WindowErrorUtility.captureError(element[ownerDocument][ownerWindow], () => element[ownerDocument][ownerWindow].eval(code2));
      }
      element[ownerDocument][currentScript] = null;
      element.dispatchEvent(new Event_default("load"));
    }
  }
}
_HTMLScriptElementScriptLoader_element = new WeakMap, _HTMLScriptElementScriptLoader_browserFrame = new WeakMap, _HTMLScriptElementScriptLoader_loadedScriptURL = new WeakMap;
var HTMLScriptElementScriptLoader_default = HTMLScriptElementScriptLoader;

// node_modules/happy-dom-without-node/lib/nodes/html-script-element/HTMLScriptElement.js
var __classPrivateFieldSet29 = function(receiver, state, value2, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
};
var __classPrivateFieldGet33 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _HTMLScriptElement_scriptLoader;
var _a32;

class HTMLScriptElement extends HTMLElement2 {
  constructor(browserFrame) {
    super();
    this.onerror = null;
    this.onload = null;
    this[_a32] = true;
    _HTMLScriptElement_scriptLoader.set(this, undefined);
    __classPrivateFieldSet29(this, _HTMLScriptElement_scriptLoader, new HTMLScriptElementScriptLoader_default({
      element: this,
      browserFrame
    }), "f");
    this[attributes] = new HTMLScriptElementNamedNodeMap_default(this, __classPrivateFieldGet33(this, _HTMLScriptElement_scriptLoader, "f"));
  }
  get type() {
    return this.getAttribute("type") || "";
  }
  set type(type) {
    this.setAttribute("type", type);
  }
  get src() {
    if (!this.hasAttribute("src")) {
      return "";
    }
    try {
      return new URL(this.getAttribute("src"), this[ownerDocument].location.href).href;
    } catch (e) {
      return this.getAttribute("src");
    }
  }
  set src(src) {
    this.setAttribute("src", src);
  }
  get charset() {
    return this.getAttribute("charset") || "";
  }
  set charset(charset) {
    this.setAttribute("charset", charset);
  }
  get lang() {
    return this.getAttribute("lang") || "";
  }
  set lang(lang) {
    this.setAttribute("lang", lang);
  }
  get async() {
    return this.getAttribute("async") !== null;
  }
  set async(async) {
    if (!async) {
      this.removeAttribute("async");
    } else {
      this.setAttribute("async", "");
    }
  }
  get defer() {
    return this.getAttribute("defer") !== null;
  }
  set defer(defer) {
    if (!defer) {
      this.removeAttribute("defer");
    } else {
      this.setAttribute("defer", "");
    }
  }
  get text() {
    return this.textContent;
  }
  set text(text2) {
    this.textContent = text2;
  }
  [(_HTMLScriptElement_scriptLoader = new WeakMap, attributes, _a32 = evaluateScript, cloneNode)](deep = false) {
    return super[cloneNode](deep);
  }
  [connectToNode](parentNode2 = null) {
    const isConnected2 = this[isConnected];
    const isParentConnected = parentNode2 ? parentNode2[isConnected] : false;
    const browserSettings = WindowBrowserSettingsReader_default.getSettings(this[ownerDocument][ownerWindow]);
    super[connectToNode](parentNode2);
    if (isParentConnected && isConnected2 !== isParentConnected && this[evaluateScript]) {
      const src = this.getAttribute("src");
      if (src !== null) {
        __classPrivateFieldGet33(this, _HTMLScriptElement_scriptLoader, "f").loadScript(src);
      } else if (!browserSettings.disableJavaScriptEvaluation) {
        const textContent = this.textContent;
        const type = this.getAttribute("type");
        if (textContent && (type === null || type === "application/x-ecmascript" || type === "application/x-javascript" || type.startsWith("text/javascript"))) {
          this[ownerDocument][currentScript] = this;
          const code2 = `//# sourceURL=${this[ownerDocument][ownerWindow].location.href}\n` + textContent;
          if (browserSettings.disableErrorCapturing || browserSettings.errorCapture !== BrowserErrorCaptureEnum_default.tryAndCatch) {
            this[ownerDocument][ownerWindow].eval(code2);
          } else {
            WindowErrorUtility.captureError(this[ownerDocument][ownerWindow], () => this[ownerDocument][ownerWindow].eval(code2));
          }
          this[ownerDocument][currentScript] = null;
        }
      }
    }
  }
}

// node_modules/happy-dom-without-node/lib/nodes/html-image-element/HTMLImageElement.js
var _a33;
var _b21;
var _c18;
var _d13;
var _e11;
var _f9;
var _g7;

class HTMLImageElement extends HTMLElement2 {
  constructor() {
    super(...arguments);
    this[_a33] = "IMG";
    this[_b21] = false;
    this[_c18] = 0;
    this[_d13] = 0;
    this[_e11] = "auto";
    this[_f9] = 0;
    this[_g7] = 0;
  }
  get complete() {
    return this[complete];
  }
  get naturalHeight() {
    return this[naturalHeight];
  }
  get naturalWidth() {
    return this[naturalWidth];
  }
  get loading() {
    const loading2 = this.getAttribute("loading");
    return loading2 === "eager" || loading2 === "lazy" ? loading2 : "auto";
  }
  set loading(loading2) {
    this.setAttribute("loading", loading2);
  }
  get x() {
    return this[x];
  }
  get y() {
    return this[y];
  }
  get decoding() {
    return this.getAttribute("decoding") || "auto";
  }
  set decoding(decoding) {
    this.setAttribute("decoding", decoding);
  }
  get crossOrigin() {
    return this.getAttribute("crossOrigin");
  }
  set crossOrigin(crossOrigin) {
    if (crossOrigin === "anonymous" || crossOrigin === "use-credentials") {
      this.setAttribute("crossOrigin", crossOrigin);
    }
  }
  get alt() {
    return this.getAttribute("alt") || "";
  }
  set alt(alt) {
    this.setAttribute("alt", alt);
  }
  get currentSrc() {
    return this.src;
  }
  get width() {
    const width2 = this.getAttribute("width");
    return width2 !== null ? Number(width2) : 0;
  }
  set width(width2) {
    this.setAttribute("width", String(width2));
  }
  get height() {
    const height2 = this.getAttribute("height");
    return height2 !== null ? Number(height2) : 0;
  }
  set height(height2) {
    this.setAttribute("height", String(height2));
  }
  get isMap() {
    return this.getAttribute("ismap") !== null;
  }
  set isMap(isMap) {
    if (!isMap) {
      this.removeAttribute("ismap");
    } else {
      this.setAttribute("ismap", "");
    }
  }
  get referrerPolicy() {
    return this.getAttribute("referrerpolicy") || "";
  }
  set referrerPolicy(referrerPolicy) {
    this.setAttribute("referrerpolicy", referrerPolicy);
  }
  get sizes() {
    return this.getAttribute("sizes") || "";
  }
  set sizes(sizes) {
    this.setAttribute("sizes", sizes);
  }
  get src() {
    if (!this.hasAttribute("src")) {
      return "";
    }
    try {
      return new URL(this.getAttribute("src"), this[ownerDocument].location.href).href;
    } catch (e) {
      return this.getAttribute("src");
    }
  }
  set src(src) {
    this.setAttribute("src", src);
  }
  get srcset() {
    return this.getAttribute("srcset") || "";
  }
  set srcset(srcset) {
    this.setAttribute("srcset", srcset);
  }
  get useMap() {
    return this.getAttribute("usemap") || "";
  }
  set useMap(useMap) {
    this.setAttribute("usemap", useMap);
  }
  decode() {
    return Promise.resolve();
  }
  [(_a33 = tagName3, _b21 = complete, _c18 = naturalHeight, _d13 = naturalWidth, _e11 = loading, _f9 = x, _g7 = y, cloneNode)](deep = false) {
    return super[cloneNode](deep);
  }
}

// node_modules/happy-dom-without-node/lib/nodes/character-data/CharacterDataUtility.js
class CharacterDataUtility {
  static appendData(characterData, data2) {
    characterData.data += data2;
  }
  static deleteData(characterData, offset3, count) {
    characterData.data = characterData.data.substring(0, offset3) + characterData.data.substring(offset3 + count);
  }
  static insertData(characterData, offset3, data2) {
    characterData.data = characterData.data.substring(0, offset3) + data2 + characterData.data.substring(offset3);
  }
  static replaceData(characterData, offset3, count, data2) {
    characterData.data = characterData.data.substring(0, offset3) + data2 + characterData.data.substring(offset3 + count);
  }
  static substringData(characterData, offset3, count) {
    return characterData.data.substring(offset3, offset3 + count);
  }
}

// node_modules/happy-dom-without-node/lib/nodes/character-data/CharacterData.js
var _a34;

class CharacterData extends Node_default {
  constructor(data2) {
    super();
    this[_a34] = "";
    if (data2) {
      this[data] = data2;
    }
  }
  get length() {
    return this[data].length;
  }
  get data() {
    return this[data];
  }
  set data(data2) {
    const oldValue = this[data];
    this[data] = String(data2);
    if (this[isConnected]) {
      this[ownerDocument][cacheID]++;
    }
    if (this[observers].length > 0) {
      for (const observer of this[observers]) {
        if (observer.options?.characterData) {
          observer.report(new MutationRecord({
            target: this,
            type: MutationTypeEnum_default.characterData,
            oldValue: observer.options.characterDataOldValue ? oldValue : null
          }));
        }
      }
    }
  }
  get textContent() {
    return this[data];
  }
  set textContent(textContent) {
    this.data = textContent;
  }
  get nodeValue() {
    return this[data];
  }
  set nodeValue(nodeValue) {
    this.textContent = nodeValue;
  }
  get previousElementSibling() {
    return NonDocumentChildNodeUtility.previousElementSibling(this);
  }
  get nextElementSibling() {
    return NonDocumentChildNodeUtility.nextElementSibling(this);
  }
  appendData(data2) {
    CharacterDataUtility.appendData(this, data2);
  }
  deleteData(offset3, count) {
    CharacterDataUtility.deleteData(this, offset3, count);
  }
  insertData(offset3, data2) {
    CharacterDataUtility.insertData(this, offset3, data2);
  }
  replaceData(offset3, count, data2) {
    CharacterDataUtility.replaceData(this, offset3, count, data2);
  }
  substringData(offset3, count) {
    return CharacterDataUtility.substringData(this, offset3, count);
  }
  remove() {
    ChildNodeUtility.remove(this);
  }
  replaceWith(...nodes) {
    ChildNodeUtility.replaceWith(this, ...nodes);
  }
  before(...nodes) {
    ChildNodeUtility.before(this, ...nodes);
  }
  after(...nodes) {
    ChildNodeUtility.after(this, ...nodes);
  }
  [(_a34 = data, cloneNode)](deep = false) {
    const clone = super[cloneNode](deep);
    clone[data] = this[data];
    return clone;
  }
}

// node_modules/happy-dom-without-node/lib/event/events/CustomEvent.js
class CustomEvent extends Event_default {
  constructor(type, eventInit = null) {
    super(type, eventInit);
    this.detail = eventInit?.detail ?? null;
  }
  initCustomEvent(type, bubbles = false, cancelable = false, detail = null) {
    this.type = type;
    this.bubbles = bubbles;
    this.cancelable = cancelable;
    this.detail = detail;
  }
}

// node_modules/happy-dom-without-node/lib/event/events/AnimationEvent.js
class AnimationEvent extends Event_default {
  constructor(type, eventInit = null) {
    super(type, eventInit);
    this.animationName = eventInit?.animationName ?? "";
    this.elapsedTime = eventInit?.elapsedTime ?? 0;
    this.pseudoElement = eventInit?.pseudoElement ?? "";
  }
}

// node_modules/happy-dom-without-node/lib/event/events/KeyboardEvent.js
class KeyboardEvent extends UIEvent_default {
  constructor(type, eventInit = null) {
    super(type, eventInit);
    this.altKey = eventInit?.altKey ?? false;
    this.code = eventInit?.code ?? "";
    this.ctrlKey = eventInit?.ctrlKey ?? false;
    this.isComposing = eventInit?.isComposing ?? false;
    this.key = eventInit?.key ?? "";
    this.location = eventInit?.location ?? 0;
    this.metaKey = eventInit?.metaKey ?? false;
    this.repeat = eventInit?.repeat ?? false;
    this.shiftKey = eventInit?.shiftKey ?? false;
    this.keyCode = eventInit?.keyCode ?? 0;
  }
}
KeyboardEvent.DOM_KEY_LOCATION_STANDARD = 0;
KeyboardEvent.DOM_KEY_LOCATION_LEFT = 1;
KeyboardEvent.DOM_KEY_LOCATION_RIGHT = 2;
KeyboardEvent.DOM_KEY_LOCATION_NUMPAD = 3;
var KeyboardEvent_default = KeyboardEvent;

// node_modules/happy-dom-without-node/lib/event/events/MessageEvent.js
class MessageEvent extends Event_default {
  constructor(type, eventInit = null) {
    super(type, eventInit);
    this.data = eventInit?.data ?? null;
    this.origin = eventInit?.origin ?? "";
    this.lastEventId = eventInit?.lastEventId ?? "";
    this.source = eventInit?.source ?? null;
    this.ports = eventInit?.ports ?? [];
  }
}

// node_modules/happy-dom-without-node/lib/event/events/ProgressEvent.js
class ProgressEvent extends Event_default {
  constructor(type, eventInit = null) {
    super(type);
    this.lengthComputable = eventInit?.lengthComputable ?? false;
    this.loaded = eventInit?.loaded ?? 0;
    this.total = eventInit?.total ?? 0;
  }
}

// node_modules/happy-dom-without-node/lib/event/events/HashChangeEvent.js
class HashChangeEvent extends Event_default {
  constructor(type, eventInit = null) {
    super(type, eventInit);
    this.newURL = eventInit?.newURL ?? "";
    this.oldURL = eventInit?.oldURL ?? "";
  }
}

// node_modules/happy-dom-without-node/lib/event/events/TouchEvent.js
class TouchEvent extends UIEvent_default {
  constructor(type, eventInit = null) {
    super(type, eventInit);
    this.altKey = eventInit?.altKey ?? false;
    this.changedTouches = eventInit?.changedTouches ?? [];
    this.ctrlKey = eventInit?.ctrlKey ?? false;
    this.metaKey = eventInit?.metaKey ?? false;
    this.shiftKey = eventInit?.shiftKey ?? false;
    this.targetTouches = eventInit?.targetTouches ?? [];
    this.touches = eventInit?.touches ?? [];
  }
}

// node_modules/happy-dom-without-node/lib/event/Touch.js
class Touch {
  constructor(touchInit) {
    this.identifier = touchInit.identifier;
    this.target = touchInit.target;
    this.clientX = touchInit.clientX ?? 0;
    this.clientY = touchInit.clientY ?? 0;
    this.screenX = touchInit.screenX ?? 0;
    this.screenY = touchInit.screenY ?? 0;
    this.pageX = touchInit.pageX ?? 0;
    this.pageY = touchInit.pageY ?? 0;
    this.radiusX = touchInit.radiusX ?? 0;
    this.radiusY = touchInit.radiusY ?? 0;
    this.rotationAngle = touchInit.rotationAngle ?? 0;
    this.force = touchInit.force ?? 0;
  }
}

// node_modules/happy-dom-without-node/lib/event/MessagePort.js
class MessagePort extends EventTarget_default {
  postMessage(_message, _transerList) {
  }
  start() {
  }
  close() {
  }
}

// node_modules/happy-dom-without-node/lib/url/URL.js
class URL3 extends $URL {
  static createObjectURL(object) {
    if (object instanceof Blob_default) {
      const blob = new Blob_default([object[buffer]], { type: object.type });
      return super.createObjectURL(blob);
    }
    return super.createObjectURL(object);
  }
}

// node_modules/happy-dom-without-node/lib/location/Location.js
var __classPrivateFieldSet30 = function(receiver, state, value2, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
};
var __classPrivateFieldGet34 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Location_browserFrame;
var _Location_url;
var _a35;

class Location {
  constructor(browserFrame, url7) {
    this[_a35] = "Location";
    _Location_browserFrame.set(this, undefined);
    _Location_url.set(this, undefined);
    __classPrivateFieldSet30(this, _Location_browserFrame, browserFrame, "f");
    __classPrivateFieldSet30(this, _Location_url, new $URL(url7), "f");
  }
  get hash() {
    return __classPrivateFieldGet34(this, _Location_url, "f").hash;
  }
  set hash(hash3) {
    const oldURL = __classPrivateFieldGet34(this, _Location_url, "f").href;
    __classPrivateFieldGet34(this, _Location_url, "f").hash = hash3;
    const newURL = __classPrivateFieldGet34(this, _Location_url, "f").href;
    if (newURL !== oldURL) {
      __classPrivateFieldGet34(this, _Location_browserFrame, "f").window?.dispatchEvent(new HashChangeEvent("hashchange", { oldURL, newURL }));
    }
  }
  get host() {
    return __classPrivateFieldGet34(this, _Location_url, "f").host;
  }
  set host(host2) {
    const url7 = new $URL(__classPrivateFieldGet34(this, _Location_url, "f").href);
    url7.host = host2;
    __classPrivateFieldGet34(this, _Location_browserFrame, "f").goto(url7.href).catch((error4) => __classPrivateFieldGet34(this, _Location_browserFrame, "f").page.console.error(error4));
  }
  get hostname() {
    return __classPrivateFieldGet34(this, _Location_url, "f").hostname;
  }
  set hostname(hostname) {
    const url7 = new $URL(__classPrivateFieldGet34(this, _Location_url, "f").href);
    url7.hostname = hostname;
    __classPrivateFieldGet34(this, _Location_browserFrame, "f").goto(url7.href).catch((error4) => __classPrivateFieldGet34(this, _Location_browserFrame, "f").page.console.error(error4));
  }
  get href() {
    return __classPrivateFieldGet34(this, _Location_url, "f").href;
  }
  set href(url7) {
    __classPrivateFieldGet34(this, _Location_browserFrame, "f").goto(url7).catch((error4) => __classPrivateFieldGet34(this, _Location_browserFrame, "f").page.console.error(error4));
  }
  get origin() {
    return __classPrivateFieldGet34(this, _Location_url, "f").origin;
  }
  get pathname() {
    return __classPrivateFieldGet34(this, _Location_url, "f").pathname;
  }
  set pathname(pathname) {
    const url7 = new $URL(__classPrivateFieldGet34(this, _Location_url, "f").href);
    url7.pathname = pathname;
    __classPrivateFieldGet34(this, _Location_browserFrame, "f").goto(url7.href).catch((error4) => __classPrivateFieldGet34(this, _Location_browserFrame, "f").page.console.error(error4));
  }
  get port() {
    return __classPrivateFieldGet34(this, _Location_url, "f").port;
  }
  set port(port) {
    const url7 = new $URL(__classPrivateFieldGet34(this, _Location_url, "f").href);
    url7.port = port;
    __classPrivateFieldGet34(this, _Location_browserFrame, "f").goto(url7.href).catch((error4) => __classPrivateFieldGet34(this, _Location_browserFrame, "f").page.console.error(error4));
  }
  get protocol() {
    return __classPrivateFieldGet34(this, _Location_url, "f").protocol;
  }
  set protocol(protocol) {
    const url7 = new $URL(__classPrivateFieldGet34(this, _Location_url, "f").href);
    url7.protocol = protocol;
    __classPrivateFieldGet34(this, _Location_browserFrame, "f").goto(url7.href).catch((error4) => __classPrivateFieldGet34(this, _Location_browserFrame, "f").page.console.error(error4));
  }
  get search() {
    return __classPrivateFieldGet34(this, _Location_url, "f").search;
  }
  set search(search) {
    const url7 = new $URL(__classPrivateFieldGet34(this, _Location_url, "f").href);
    url7.search = search;
    __classPrivateFieldGet34(this, _Location_browserFrame, "f").goto(url7.href).catch((error4) => __classPrivateFieldGet34(this, _Location_browserFrame, "f").page.console.error(error4));
  }
  replace(url7) {
    this.href = url7;
  }
  assign(url7) {
    this.href = url7;
  }
  reload() {
    __classPrivateFieldGet34(this, _Location_browserFrame, "f").goto(this.href).catch((error4) => __classPrivateFieldGet34(this, _Location_browserFrame, "f").page.console.error(error4));
  }
  [(_Location_browserFrame = new WeakMap, _Location_url = new WeakMap, _a35 = Symbol.toStringTag, setURL)](browserFrame, url7) {
    if (__classPrivateFieldGet34(this, _Location_browserFrame, "f") !== browserFrame) {
      throw new Error("Failed to set URL. Browser frame mismatch.");
    }
    __classPrivateFieldGet34(this, _Location_url, "f").href = url7;
  }
  toString() {
    return __classPrivateFieldGet34(this, _Location_url, "f").toString();
  }
}

// node_modules/happy-dom-without-node/lib/mutation-observer/MutationListener.js
var __classPrivateFieldSet31 = function(receiver, state, value2, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
};
var __classPrivateFieldGet35 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _MutationListener_window;
var _MutationListener_observer;
var _MutationListener_callback;
var _MutationListener_records;
var _MutationListener_immediate;

class MutationListener {
  constructor(init) {
    _MutationListener_window.set(this, undefined);
    _MutationListener_observer.set(this, undefined);
    _MutationListener_callback.set(this, undefined);
    _MutationListener_records.set(this, []);
    _MutationListener_immediate.set(this, null);
    this.options = init.options;
    this.target = init.target;
    __classPrivateFieldSet31(this, _MutationListener_window, init.window, "f");
    __classPrivateFieldSet31(this, _MutationListener_observer, init.observer, "f");
    __classPrivateFieldSet31(this, _MutationListener_callback, init.callback, "f");
  }
  report(record) {
    if (!__classPrivateFieldGet35(this, _MutationListener_records, "f")) {
      return;
    }
    __classPrivateFieldGet35(this, _MutationListener_records, "f").push(record);
    if (__classPrivateFieldGet35(this, _MutationListener_immediate, "f")) {
      __classPrivateFieldGet35(this, _MutationListener_window, "f").cancelAnimationFrame(__classPrivateFieldGet35(this, _MutationListener_immediate, "f"));
    }
    __classPrivateFieldSet31(this, _MutationListener_immediate, __classPrivateFieldGet35(this, _MutationListener_window, "f").requestAnimationFrame(() => {
      const records = __classPrivateFieldGet35(this, _MutationListener_records, "f");
      if (records?.length > 0) {
        __classPrivateFieldSet31(this, _MutationListener_records, [], "f");
        __classPrivateFieldGet35(this, _MutationListener_callback, "f").call(this, records, __classPrivateFieldGet35(this, _MutationListener_observer, "f"));
      }
    }), "f");
  }
  takeRecords() {
    if (__classPrivateFieldGet35(this, _MutationListener_immediate, "f")) {
      __classPrivateFieldGet35(this, _MutationListener_window, "f").cancelAnimationFrame(__classPrivateFieldGet35(this, _MutationListener_immediate, "f"));
    }
    const records = __classPrivateFieldGet35(this, _MutationListener_records, "f");
    __classPrivateFieldSet31(this, _MutationListener_records, [], "f");
    return records;
  }
  destroy() {
    if (__classPrivateFieldGet35(this, _MutationListener_immediate, "f")) {
      __classPrivateFieldGet35(this, _MutationListener_window, "f").cancelAnimationFrame(__classPrivateFieldGet35(this, _MutationListener_immediate, "f"));
    }
    this.options = null;
    this.target = null;
    __classPrivateFieldSet31(this, _MutationListener_observer, null, "f");
    __classPrivateFieldSet31(this, _MutationListener_callback, null, "f");
    __classPrivateFieldSet31(this, _MutationListener_immediate, null, "f");
    __classPrivateFieldSet31(this, _MutationListener_records, null, "f");
  }
}
_MutationListener_window = new WeakMap, _MutationListener_observer = new WeakMap, _MutationListener_callback = new WeakMap, _MutationListener_records = new WeakMap, _MutationListener_immediate = new WeakMap;
var MutationListener_default = MutationListener;

// node_modules/happy-dom-without-node/lib/mutation-observer/MutationObserver.js
var __classPrivateFieldSet32 = function(receiver, state, value2, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
};
var __classPrivateFieldGet36 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _MutationObserver_callback;
var _MutationObserver_listeners;
var _MutationObserver_window;

class MutationObserver {
  constructor(callback) {
    _MutationObserver_callback.set(this, undefined);
    _MutationObserver_listeners.set(this, []);
    _MutationObserver_window.set(this, null);
    __classPrivateFieldSet32(this, _MutationObserver_callback, callback, "f");
  }
  observe(target2, options3) {
    if (!target2) {
      throw new TypeError(`Failed to execute 'observe' on 'MutationObserver': The first parameter "target" should be of type "Node".`);
    }
    if (options3 && (options3.attributeFilter || options3.attributeOldValue)) {
      if (options3.attributes === undefined) {
        options3 = Object.assign({}, options3, {
          attributes: true,
          attributeFilter: options3.attributeFilter,
          attributeOldValue: options3.attributeOldValue
        });
      }
      if (!options3.attributes && options3.attributeOldValue) {
        throw new TypeError(`Failed to execute 'observe' on 'MutationObserver': The options object may only set 'attributeOldValue' to true when 'attributes' is true or not present.`);
      }
      if (!options3.attributes && options3.attributeFilter) {
        throw new TypeError(`Failed to execute 'observe' on 'MutationObserver': The options object may only set 'attributeFilter' when 'attributes' is true or not present.`);
      }
    }
    if (options3 && options3.characterDataOldValue) {
      if (options3.characterData === undefined) {
        options3 = Object.assign({}, options3, {
          characterData: true,
          characterDataOldValue: options3.characterDataOldValue
        });
      }
      if (!options3.characterData && options3.characterDataOldValue) {
        throw new TypeError(`Failed to execute 'observe' on 'MutationObserver': The options object may only set 'characterDataOldValue' to true when 'characterData' is true or not present.`);
      }
    }
    if (!options3 || !options3.childList && !options3.attributes && !options3.characterData) {
      throw new TypeError(`Failed to execute 'observe' on 'MutationObserver': The options object must set at least one of 'attributes', 'characterData', or 'childList' to true.`);
    }
    if (!__classPrivateFieldGet36(this, _MutationObserver_window, "f")) {
      __classPrivateFieldSet32(this, _MutationObserver_window, target2[ownerDocument] ? target2[ownerDocument][ownerWindow] : target2[ownerWindow], "f");
    }
    options3 = Object.assign({}, options3, {
      attributeFilter: options3.attributeFilter ? options3.attributeFilter.map((name2) => name2.toLowerCase()) : null
    });
    for (const listener2 of __classPrivateFieldGet36(this, _MutationObserver_listeners, "f")) {
      if (listener2.target === target2) {
        listener2.options = options3;
        return;
      }
    }
    const listener = new MutationListener_default({
      window: __classPrivateFieldGet36(this, _MutationObserver_window, "f"),
      options: options3,
      callback: __classPrivateFieldGet36(this, _MutationObserver_callback, "f").bind(this),
      observer: this,
      target: target2
    });
    __classPrivateFieldGet36(this, _MutationObserver_listeners, "f").push(listener);
    __classPrivateFieldGet36(this, _MutationObserver_window, "f")[mutationObservers].push(this);
    target2[observe](listener);
  }
  disconnect() {
    if (__classPrivateFieldGet36(this, _MutationObserver_listeners, "f").length === 0) {
      return;
    }
    const mutationObservers2 = __classPrivateFieldGet36(this, _MutationObserver_window, "f")[mutationObservers];
    const index = mutationObservers2.indexOf(this);
    if (index !== -1) {
      mutationObservers2.splice(index, 1);
    }
    for (const listener of __classPrivateFieldGet36(this, _MutationObserver_listeners, "f")) {
      listener.target[unobserve](listener);
      listener.destroy();
    }
    __classPrivateFieldSet32(this, _MutationObserver_listeners, [], "f");
  }
  takeRecords() {
    let records = [];
    for (const listener of __classPrivateFieldGet36(this, _MutationObserver_listeners, "f")) {
      records = records.concat(listener.takeRecords());
    }
    return records;
  }
}
_MutationObserver_callback = new WeakMap, _MutationObserver_listeners = new WeakMap, _MutationObserver_window = new WeakMap;
var MutationObserver_default = MutationObserver;

// node_modules/happy-dom-without-node/lib/resize-observer/ResizeObserver.js
class ResizeObserver {
  observe() {
  }
  unobserve() {
  }
  disconnect() {
  }
}

// node_modules/happy-dom-without-node/lib/history/HistoryScrollRestorationEnum.js
var HistoryScrollRestorationEnum;
(function(HistoryScrollRestorationEnum2) {
  HistoryScrollRestorationEnum2["auto"] = "auto";
  HistoryScrollRestorationEnum2["manual"] = "manual";
})(HistoryScrollRestorationEnum || (HistoryScrollRestorationEnum = {}));
var HistoryScrollRestorationEnum_default = HistoryScrollRestorationEnum;

// node_modules/happy-dom-without-node/lib/history/History.js
var __classPrivateFieldGet37 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet33 = function(receiver, state, value2, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
};
var _History_scrollRestoration;

class History {
  constructor() {
    this.length = 0;
    this.state = null;
    _History_scrollRestoration.set(this, HistoryScrollRestorationEnum_default.auto);
  }
  get scrollRestoration() {
    return __classPrivateFieldGet37(this, _History_scrollRestoration, "f");
  }
  set scrollRestoration(scrollRestoration) {
    __classPrivateFieldSet33(this, _History_scrollRestoration, HistoryScrollRestorationEnum_default[scrollRestoration] ? scrollRestoration : __classPrivateFieldGet37(this, _History_scrollRestoration, "f"), "f");
  }
  back() {
  }
  forward() {
  }
  go(_delta) {
  }
  pushState(_state, _title, _url) {
  }
  replaceState(_state, _title, _url) {
  }
}
_History_scrollRestoration = new WeakMap;
var History_default = History;

// node_modules/happy-dom-without-node/lib/css/utilities/CSSEscaper.js
class CSSEscaper {
  static escape(cssText2) {
    if (arguments.length == 0) {
      throw new TypeError("`CSS.escape` requires an argument.");
    }
    const returnValue2 = String(cssText2);
    const length2 = returnValue2.length;
    let index = -1;
    let codeUnit;
    let result = "";
    const firstCodeUnit = returnValue2.charCodeAt(0);
    if (length2 == 1 && firstCodeUnit == 45) {
      return "\\" + returnValue2;
    }
    while (++index < length2) {
      codeUnit = returnValue2.charCodeAt(index);
      if (codeUnit == 0) {
        result += "\uFFFD";
        continue;
      }
      if (codeUnit >= 1 && codeUnit <= 31 || codeUnit == 127 || index == 0 && codeUnit >= 48 && codeUnit <= 57 || index == 1 && codeUnit >= 48 && codeUnit <= 57 && firstCodeUnit == 45) {
        result += "\\" + codeUnit.toString(16) + " ";
        continue;
      }
      if (codeUnit >= 128 || codeUnit == 45 || codeUnit == 95 || codeUnit >= 48 && codeUnit <= 57 || codeUnit >= 65 && codeUnit <= 90 || codeUnit >= 97 && codeUnit <= 122) {
        result += returnValue2.charAt(index);
        continue;
      }
      result += "\\" + returnValue2.charAt(index);
    }
    return result;
  }
}

// node_modules/happy-dom-without-node/lib/css/CSSUnits.js
var CSSUnits_default = [
  "Hz",
  "Q",
  "ch",
  "cm",
  "deg",
  "dpcm",
  "dpi",
  "dppx",
  "em",
  "ex",
  "fr",
  "grad",
  "in",
  "kHz",
  "mm",
  "ms",
  "number",
  "pc",
  "percent",
  "pt",
  "px",
  "rad",
  "rem",
  "s",
  "turn",
  "vh",
  "vmax",
  "vmin",
  "vw"
];

// node_modules/happy-dom-without-node/lib/css/CSSUnitValue.js
class CSSUnitValue {
  constructor(value2, unit) {
    this.unit = null;
    this.value = null;
    if (typeof value2 !== "number") {
      throw new TypeError("The provided double value is non-finite");
    }
    if (!CSSUnits_default.includes(unit)) {
      throw new TypeError("Invalid unit: " + unit);
    }
    this.value = value2;
    this.unit = unit;
  }
}

// node_modules/happy-dom-without-node/lib/css/CSS.js
class CSS {
  constructor() {
    for (const unit of CSSUnits_default) {
      this[unit] = (value2) => new CSSUnitValue(value2, unit);
    }
  }
  supports(_condition, _value) {
    return true;
  }
  escape(value2) {
    return CSSEscaper.escape(value2);
  }
}

// node_modules/happy-dom-without-node/lib/css/rules/CSSFontFaceRule.js
var __classPrivateFieldGet38 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet34 = function(receiver, state, value2, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
};
var _CSSFontFaceRule_style;
var _a36;

class CSSFontFaceRule extends CSSRule_default {
  constructor() {
    super(...arguments);
    this.type = CSSRule_default.FONT_FACE_RULE;
    this[_a36] = "";
    _CSSFontFaceRule_style.set(this, null);
  }
  get style() {
    if (!__classPrivateFieldGet38(this, _CSSFontFaceRule_style, "f")) {
      __classPrivateFieldSet34(this, _CSSFontFaceRule_style, new CSSStyleDeclaration, "f");
      __classPrivateFieldGet38(this, _CSSFontFaceRule_style, "f").parentRule = this;
      __classPrivateFieldGet38(this, _CSSFontFaceRule_style, "f").cssText = this[cssText];
    }
    return __classPrivateFieldGet38(this, _CSSFontFaceRule_style, "f");
  }
}
_CSSFontFaceRule_style = new WeakMap, _a36 = cssText;
var CSSFontFaceRule_default = CSSFontFaceRule;

// node_modules/happy-dom-without-node/lib/event/events/WheelEvent.js
class WheelEvent extends UIEvent_default {
  constructor(type, eventInit = null) {
    super(type, eventInit);
    this.deltaX = eventInit?.deltaX ?? 0;
    this.deltaY = eventInit?.deltaY ?? 0;
    this.deltaZ = eventInit?.deltaZ ?? 0;
    this.deltaMode = eventInit?.deltaMode ?? 0;
  }
}
WheelEvent.DOM_DELTA_PIXEL = 0;
WheelEvent.DOM_DELTA_LINE = 1;
WheelEvent.DOM_DELTA_PAGE = 2;
var WheelEvent_default = WheelEvent;

// node_modules/happy-dom-without-node/lib/event/DataTransferItem.js
var __classPrivateFieldSet35 = function(receiver, state, value2, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
};
var __classPrivateFieldGet39 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _DataTransferItem_item;

class DataTransferItem {
  constructor(item2, type = "") {
    _DataTransferItem_item.set(this, null);
    this.kind = typeof item2 === "string" ? "string" : "file";
    this.type = this.kind === "string" ? type : item2.type;
    __classPrivateFieldSet35(this, _DataTransferItem_item, item2, "f");
  }
  getAsFile() {
    if (this.kind === "string") {
      return null;
    }
    return __classPrivateFieldGet39(this, _DataTransferItem_item, "f");
  }
  getAsString(callback) {
    if (this.kind === "file") {
    }
    callback(__classPrivateFieldGet39(this, _DataTransferItem_item, "f"));
  }
}
_DataTransferItem_item = new WeakMap;
var DataTransferItem_default = DataTransferItem;

// node_modules/happy-dom-without-node/lib/event/DataTransferItemList.js
class DataTransferItemList extends Array {
  add(item2, type) {
    if (item2 instanceof File) {
      this.push(new DataTransferItem_default(item2));
      return;
    }
    if (!type) {
      throw new TypeError(`Failed to execute 'add' on 'DataTransferItemList': parameter 1 is not of type 'File'.`);
    }
    this.push(new DataTransferItem_default(item2, type));
  }
  remove(index) {
    this.splice(index, 1);
  }
  clear() {
    while (this.length) {
      this.pop();
    }
  }
}

// node_modules/happy-dom-without-node/lib/event/DataTransfer.js
class DataTransfer {
  constructor() {
    this.dropEffect = "none";
    this.effectAllowed = "none";
    this.items = new DataTransferItemList;
  }
  get files() {
    const files2 = [];
    for (const item2 of this.items) {
      if (item2.kind === "file") {
        files2.push(item2.getAsFile());
      }
    }
    return files2;
  }
  get types() {
    return this.items.map((item2) => item2.type);
  }
  clearData() {
    this.items.clear();
  }
  setData(format2, data2) {
    for (let i = 0, max3 = this.items.length;i < max3; i++) {
      if (this.items[i].type === format2) {
        this.items[i] = new DataTransferItem_default(data2, format2);
        return;
      }
    }
    this.items.add(data2, format2);
  }
  getData(format2) {
    for (let i = 0, max3 = this.items.length;i < max3; i++) {
      if (this.items[i].type === format2) {
        let data2 = "";
        this.items[i].getAsString((s2) => data2 = s2);
        return data2;
      }
    }
    return "";
  }
  setDragImage() {
    throw new Error("Not implemented.");
  }
}

// node_modules/happy-dom-without-node/lib/event/events/InputEvent.js
class InputEvent extends UIEvent_default {
  constructor(type, eventInit = null) {
    super(type, eventInit);
    this.data = eventInit?.data ?? "";
    this.dataTransfer = eventInit?.dataTransfer ?? null;
    this.inputType = eventInit?.inputType ?? "";
    this.isComposing = eventInit?.isComposing ?? false;
  }
}

// node_modules/happy-dom-without-node/lib/event/events/StorageEvent.js
class StorageEvent extends Event_default {
  constructor(type, eventInit = null) {
    super(type);
    this.key = eventInit?.key ?? null;
    this.oldValue = eventInit?.oldValue ?? null;
    this.newValue = eventInit?.newValue ?? null;
    this.url = eventInit?.url ?? "";
    this.storageArea = eventInit?.storageArea ?? null;
  }
}

// node_modules/happy-dom-without-node/lib/screen/Screen.js
class Screen {
  constructor() {
    this.width = 1024;
    this.height = 768;
    this.availWidth = 1024;
    this.availHeight = 768;
    this.colorDepth = 24;
    this.pixelDepth = 24;
  }
}

// node_modules/happy-dom-without-node/lib/storage/Storage.js
var _a37;

class Storage {
  constructor() {
    this[_a37] = {};
  }
  get length() {
    return Object.keys(this[data]).length;
  }
  key(index) {
    const name2 = Object.keys(this[data])[index];
    return name2 !== undefined ? name2 : null;
  }
  setItem(name2, item2) {
    this[data][name2] = String(item2);
  }
  getItem(name2) {
    return this[data][name2] !== undefined ? this[data][name2] : null;
  }
  removeItem(name2) {
    delete this[data][name2];
  }
  clear() {
    this[data] = {};
  }
}
_a37 = data;
var Storage_default = Storage;

// node_modules/happy-dom-without-node/lib/storage/StorageFactory.js
class StorageFactory {
  static createStorage() {
    return new Proxy(new Storage_default, {
      get(storage, key) {
        if (Storage_default.prototype.hasOwnProperty(key)) {
          const descriptor = Object.getOwnPropertyDescriptor(Storage_default.prototype, key);
          if (descriptor.value !== undefined) {
            if (typeof descriptor.value === "function") {
              return storage[key].bind(storage);
            }
            return descriptor.value;
          }
          if (descriptor.get) {
            return descriptor.get.call(storage);
          }
          return storage[key];
        }
        return storage[data][key];
      },
      set(storage, key, value2) {
        if (Storage_default.prototype.hasOwnProperty(key)) {
          return true;
        }
        storage[data][key] = String(value2);
        return true;
      },
      deleteProperty(storage, key) {
        if (Storage_default.prototype.hasOwnProperty(key)) {
          return true;
        }
        return delete storage[data][key];
      },
      ownKeys(storage) {
        return Object.keys(storage[data]);
      },
      has(storage, key) {
        return storage[data][key] !== undefined;
      },
      defineProperty(storage, key, descriptor) {
        if (Storage_default.prototype.hasOwnProperty(key)) {
          if (descriptor.get || descriptor.set) {
            Object.defineProperty(storage, key, {
              ...descriptor,
              get: descriptor.get ? descriptor.get.bind(storage) : undefined,
              set: descriptor.set ? descriptor.set.bind(storage) : undefined
            });
          } else {
            Object.defineProperty(storage, key, {
              ...descriptor,
              value: typeof descriptor.value === "function" ? descriptor.value.bind(storage) : descriptor.value
            });
          }
          return true;
        }
        if (descriptor.value === undefined) {
          return false;
        }
        storage[data][key] = String(descriptor.value);
        return true;
      },
      getOwnPropertyDescriptor(storage, key) {
        if (Storage_default.prototype.hasOwnProperty(key) || storage[data][key] === undefined) {
          return;
        }
        return {
          value: storage[data][key],
          writable: true,
          enumerable: true,
          configurable: true
        };
      }
    });
  }
}

// node_modules/happy-dom-without-node/lib/navigator/MimeTypeArray.js
class MimeTypeArray {
  constructor(mimeTypes) {
    for (let i = 0, max3 = mimeTypes.length;i < max3; i++) {
      this[i] = mimeTypes[i];
      this[mimeTypes[i].type] = mimeTypes[i];
    }
    this.length = mimeTypes.length;
  }
  item(index) {
    return this[index] || null;
  }
  namedItem(name2) {
    return this[name2] || null;
  }
  toString() {
    return "[object MimeTypeArray]";
  }
}

// node_modules/happy-dom-without-node/lib/navigator/PluginArray.js
class PluginArray {
  constructor(plugins) {
    for (let i = 0, max3 = plugins.length;i < max3; i++) {
      this[i] = plugins[i];
      this[plugins[i].name] = plugins[i];
    }
    this.length = plugins.length;
  }
  item(index) {
    return this[index] || null;
  }
  namedItem(name2) {
    return this[name2] || null;
  }
  refresh() {
  }
  toString() {
    return "[object PluginArray]";
  }
}

// node_modules/happy-dom-without-node/lib/permissions/PermissionStatus.js
class PermissionStatus extends EventTarget_default {
  constructor(state = "granted") {
    super();
    this.onchange = null;
    this.state = state;
  }
}

// node_modules/happy-dom-without-node/lib/permissions/PermissionNameEnum.js
var PermissionNameEnum;
(function(PermissionNameEnum2) {
  PermissionNameEnum2["geolocation"] = "geolocation";
  PermissionNameEnum2["notifications"] = "notifications";
  PermissionNameEnum2["push"] = "push";
  PermissionNameEnum2["midi"] = "midi";
  PermissionNameEnum2["camera"] = "camera";
  PermissionNameEnum2["microphone"] = "microphone";
  PermissionNameEnum2["backgroundFetch"] = "background-fetch";
  PermissionNameEnum2["backgroundSync"] = "background-sync";
  PermissionNameEnum2["persistentStorage"] = "persistent-storage";
  PermissionNameEnum2["ambientLightSensor"] = "ambient-light-sensor";
  PermissionNameEnum2["accelerometer"] = "accelerometer";
  PermissionNameEnum2["gyroscope"] = "gyroscope";
  PermissionNameEnum2["magnetometer"] = "magnetometer";
  PermissionNameEnum2["screenWakeLock"] = "screen-wake-lock";
  PermissionNameEnum2["nfc"] = "nfc";
  PermissionNameEnum2["displayCapture"] = "display-capture";
  PermissionNameEnum2["accessibilityEvents"] = "accessibility-events";
  PermissionNameEnum2["clipboardRead"] = "clipboard-read";
  PermissionNameEnum2["clipboardWrite"] = "clipboard-write";
  PermissionNameEnum2["paymentHandler"] = "payment-handler";
  PermissionNameEnum2["idleDetection"] = "idle-detection";
  PermissionNameEnum2["periodicBackgroundSync"] = "periodic-background-sync";
  PermissionNameEnum2["systemWakeLock"] = "system-wake-lock";
  PermissionNameEnum2["storageAccess"] = "storage-access";
  PermissionNameEnum2["windowManagement"] = "window-management";
  PermissionNameEnum2["windowPlacement"] = "window-placement";
  PermissionNameEnum2["localFonts"] = "local-fonts";
  PermissionNameEnum2["topLevelStorageAccess"] = "top-level-storage-access";
})(PermissionNameEnum || (PermissionNameEnum = {}));
var PermissionNameEnum_default = PermissionNameEnum;

// node_modules/happy-dom-without-node/lib/permissions/Permissions.js
var __classPrivateFieldGet40 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Permissions_permissionStatus;

class Permissions {
  constructor() {
    _Permissions_permissionStatus.set(this, {});
  }
  async query(permissionDescriptor) {
    if (__classPrivateFieldGet40(this, _Permissions_permissionStatus, "f")[permissionDescriptor.name]) {
      return __classPrivateFieldGet40(this, _Permissions_permissionStatus, "f")[permissionDescriptor.name];
    }
    if (!Object.values(PermissionNameEnum_default).includes(permissionDescriptor.name)) {
      throw new Error(`Failed to execute 'query' on 'Permissions': Failed to read the 'name' property from 'PermissionDescriptor': The provided value '${permissionDescriptor.name}' is not a valid enum value of type PermissionName.`);
    }
    __classPrivateFieldGet40(this, _Permissions_permissionStatus, "f")[permissionDescriptor.name] = new PermissionStatus("granted");
    return __classPrivateFieldGet40(this, _Permissions_permissionStatus, "f")[permissionDescriptor.name];
  }
}
_Permissions_permissionStatus = new WeakMap;
var Permissions_default = Permissions;

// node_modules/happy-dom-without-node/lib/clipboard/ClipboardItem.js
var __classPrivateFieldSet36 = function(receiver, state, value2, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
};
var __classPrivateFieldGet41 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ClipboardItem_data;

class ClipboardItem {
  constructor(data2, options3) {
    this.presentationStyle = "unspecified";
    _ClipboardItem_data.set(this, undefined);
    __classPrivateFieldSet36(this, _ClipboardItem_data, data2, "f");
    if (options3?.presentationStyle) {
      this.presentationStyle = options3.presentationStyle;
    }
  }
  get types() {
    return Object.keys(__classPrivateFieldGet41(this, _ClipboardItem_data, "f"));
  }
  async getType(type) {
    if (!__classPrivateFieldGet41(this, _ClipboardItem_data, "f")[type]) {
      throw new DOMException(`Failed to execute 'getType' on 'ClipboardItem': The type '${type}' was not found`);
    }
    return __classPrivateFieldGet41(this, _ClipboardItem_data, "f")[type];
  }
}
_ClipboardItem_data = new WeakMap;
var ClipboardItem_default = ClipboardItem;

// node_modules/happy-dom-without-node/lib/clipboard/Clipboard.js
var __classPrivateFieldSet37 = function(receiver, state, value2, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
};
var __classPrivateFieldGet42 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Clipboard_ownerWindow;
var _Clipboard_data;

class Clipboard {
  constructor(ownerWindow2) {
    _Clipboard_ownerWindow.set(this, undefined);
    _Clipboard_data.set(this, []);
    __classPrivateFieldSet37(this, _Clipboard_ownerWindow, ownerWindow2, "f");
  }
  async read() {
    const permissionStatus = await __classPrivateFieldGet42(this, _Clipboard_ownerWindow, "f").navigator.permissions.query({
      name: "clipboard-read"
    });
    if (permissionStatus.state === "denied") {
      throw new DOMException(`Failed to execute 'read' on 'Clipboard': The request is not allowed`);
    }
    return __classPrivateFieldGet42(this, _Clipboard_data, "f");
  }
  async readText() {
    const permissionStatus = await __classPrivateFieldGet42(this, _Clipboard_ownerWindow, "f").navigator.permissions.query({
      name: "clipboard-read"
    });
    if (permissionStatus.state === "denied") {
      throw new DOMException(`Failed to execute 'readText' on 'Clipboard': The request is not allowed`);
    }
    let text2 = "";
    for (const item2 of __classPrivateFieldGet42(this, _Clipboard_data, "f")) {
      if (item2.types.includes("text/plain")) {
        const data2 = await item2.getType("text/plain");
        if (typeof data2 === "string") {
          text2 += data2;
        } else {
          text2 += await data2.text();
        }
      }
    }
    return text2;
  }
  async write(data2) {
    const permissionStatus = await __classPrivateFieldGet42(this, _Clipboard_ownerWindow, "f").navigator.permissions.query({
      name: "clipboard-write"
    });
    if (permissionStatus.state === "denied") {
      throw new DOMException(`Failed to execute 'write' on 'Clipboard': The request is not allowed`);
    }
    __classPrivateFieldSet37(this, _Clipboard_data, data2, "f");
  }
  async writeText(text2) {
    const permissionStatus = await __classPrivateFieldGet42(this, _Clipboard_ownerWindow, "f").navigator.permissions.query({
      name: "clipboard-write"
    });
    if (permissionStatus.state === "denied") {
      throw new DOMException(`Failed to execute 'writeText' on 'Clipboard': The request is not allowed`);
    }
    __classPrivateFieldSet37(this, _Clipboard_data, [new ClipboardItem_default({ "text/plain": new Blob_default([text2], { type: "text/plain" }) })], "f");
  }
}
_Clipboard_ownerWindow = new WeakMap, _Clipboard_data = new WeakMap;
var Clipboard_default = Clipboard;

// node_modules/happy-dom-without-node/lib/navigator/Navigator.js
var __classPrivateFieldSet38 = function(receiver, state, value2, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
};
var __classPrivateFieldGet43 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Navigator_ownerWindow;
var _Navigator_clipboard;
var _Navigator_permissions;

class Navigator {
  constructor(ownerWindow2) {
    _Navigator_ownerWindow.set(this, undefined);
    _Navigator_clipboard.set(this, undefined);
    _Navigator_permissions.set(this, undefined);
    __classPrivateFieldSet38(this, _Navigator_ownerWindow, ownerWindow2, "f");
    __classPrivateFieldSet38(this, _Navigator_clipboard, new Clipboard_default(ownerWindow2), "f");
    __classPrivateFieldSet38(this, _Navigator_permissions, new Permissions_default, "f");
  }
  get cookieEnabled() {
    return true;
  }
  get credentials() {
    return null;
  }
  get geolocation() {
    return null;
  }
  get language() {
    return "en-US";
  }
  get languages() {
    return ["en-US", "en"];
  }
  get locks() {
    return null;
  }
  get maxTouchPoints() {
    return WindowBrowserSettingsReader_default.getSettings(__classPrivateFieldGet43(this, _Navigator_ownerWindow, "f"))?.navigator.maxTouchPoints || 0;
  }
  get hardwareConcurrency() {
    return 8;
  }
  get appCodeName() {
    return "Mozilla";
  }
  get appName() {
    return "Netscape";
  }
  get appVersion() {
    const userAgent3 = this.userAgent;
    const index = userAgent3.indexOf("/");
    return index > -1 ? userAgent3.substring(index + 1) : "";
  }
  get platform() {
    const userAgent3 = this.userAgent;
    const indexStart = userAgent3.indexOf("(");
    const indexEnd = userAgent3.indexOf(")");
    return indexStart > -1 && indexEnd > -1 ? userAgent3.substring(indexStart + 1, indexEnd) : "";
  }
  get product() {
    return "Gecko";
  }
  get productSub() {
    return "20100101";
  }
  get vendor() {
    return "";
  }
  get vendorSub() {
    return "";
  }
  get userAgent() {
    return WindowBrowserSettingsReader_default.getSettings(__classPrivateFieldGet43(this, _Navigator_ownerWindow, "f"))?.navigator.userAgent || "";
  }
  get onLine() {
    return true;
  }
  get permissions() {
    return __classPrivateFieldGet43(this, _Navigator_permissions, "f");
  }
  get clipboard() {
    return __classPrivateFieldGet43(this, _Navigator_clipboard, "f");
  }
  get webdriver() {
    return true;
  }
  get doNotTrack() {
    return "unspecified";
  }
  get mimeTypes() {
    return new MimeTypeArray([]);
  }
  get plugins() {
    return new PluginArray([]);
  }
  sendBeacon(url7, data2) {
    __classPrivateFieldGet43(this, _Navigator_ownerWindow, "f").fetch(url7, {
      method: "POST",
      body: data2
    });
    return true;
  }
  toString() {
    return "[object Navigator]";
  }
}
_Navigator_ownerWindow = new WeakMap, _Navigator_clipboard = new WeakMap, _Navigator_permissions = new WeakMap;
var Navigator_default = Navigator;

// node_modules/happy-dom-without-node/lib/navigator/MimeType.js
class MimeType {
  constructor(description, enabledPlugin, suffixes, type) {
    this.description = description;
    this.enabledPlugin = enabledPlugin;
    this.suffixes = suffixes;
    this.type = type;
  }
  toString() {
    return "[object MimeType]";
  }
}

// node_modules/happy-dom-without-node/lib/navigator/Plugin.js
class Plugin {
  constructor(mimeTypes, description, filename, name2) {
    this.length = 0;
    this.description = description;
    this.filename = filename;
    this.name = name2;
    for (let i = 0, max3 = mimeTypes.length;i < max3; i++) {
      this[i] = mimeTypes[i];
      this[mimeTypes[i].type] = mimeTypes[i];
    }
    this.length = mimeTypes.length;
  }
  item(index) {
    return this[index] || null;
  }
  namedItem(name2) {
    return this[name2] || null;
  }
  toString() {
    return "[object Plugin]";
  }
}

// node_modules/happy-dom-without-node/lib/fetch/Fetch.js
class NotSupported4 {
  send() {
    throw Error("Fetch is not supported without Node.js.");
  }
}

// node_modules/happy-dom-without-node/lib/window/VMGlobalPropertyScript.js
var VMGlobalPropertyScript_default = new Script(`
this.ArrayBuffer = globalThis.ArrayBuffer;
this.Boolean = globalThis.Boolean;
this.DataView = globalThis.DataView;
this.Date = globalThis.Date;
this.Error = globalThis.Error;
this.EvalError = globalThis.EvalError;
this.Float32Array = globalThis.Float32Array;
this.Float64Array = globalThis.Float64Array;
this.GLOBAL = globalThis.GLOBAL;
this.Infinity = globalThis.Infinity;
this.Int16Array = globalThis.Int16Array;
this.Int32Array = globalThis.Int32Array;
this.Int8Array = globalThis.Int8Array;
this.Intl = globalThis.Intl;
this.JSON = globalThis.JSON;
this.Map = globalThis.Map;
this.Math = globalThis.Math;
this.NaN = globalThis.NaN;
this.Number = globalThis.Number;
this.Promise = globalThis.Promise;
this.RangeError = globalThis.RangeError;
this.ReferenceError = globalThis.ReferenceError;
this.RegExp = globalThis.RegExp;
this.Reflect = globalThis.Reflect;
this.Set = globalThis.Set;
this.Symbol = globalThis.Symbol;
this.SyntaxError = globalThis.SyntaxError;
this.String = globalThis.String;
this.TypeError = globalThis.TypeError;
this.URIError = globalThis.URIError;
this.Uint16Array = globalThis.Uint16Array;
this.Uint32Array = globalThis.Uint32Array;
this.Uint8Array = globalThis.Uint8Array;
this.Uint8ClampedArray = globalThis.Uint8ClampedArray;
this.WeakMap = globalThis.WeakMap;
this.WeakSet = globalThis.WeakSet;
this.decodeURI = globalThis.decodeURI;
this.decodeURIComponent = globalThis.decodeURIComponent;
this.encodeURI = globalThis.encodeURI;
this.encodeURIComponent = globalThis.encodeURIComponent;
this.eval = globalThis.eval;
this.escape = globalThis.escape;
this.global = globalThis.global;
this.isFinite = globalThis.isFinite;
this.isNaN = globalThis.isNaN;
this.parseFloat = globalThis.parseFloat;
this.parseInt = globalThis.parseInt;
this.process = null;
this.root = globalThis.root;
this.undefined = globalThis.undefined;
this.unescape = globalThis.unescape;
this.gc = globalThis.gc;
this.v8debug = globalThis.v8debug;
this.AbortController = globalThis.AbortController;
this.AbortSignal = globalThis.AbortSignal;
this.Array = globalThis.Array;
this.Object = globalThis.Object;
this.Function = globalThis.Function;
`);

// node_modules/happy-dom-without-node/lib/polyfills/crypto.js
var webcrypto = globalThis.crypto;

// node_modules/happy-dom-without-node/lib/xml-http-request/XMLHttpRequestUpload.js
class NotSupported5 {
}

// node_modules/happy-dom-without-node/lib/xml-http-request/XMLHttpRequestEventTarget.js
class NotSupported6 {
}

// node_modules/happy-dom-without-node/lib/base64/Base64.js
var BASE64_CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";

class Base64 {
  static btoa(data2) {
    const str = data2.toString();
    if (/[^\u0000-\u00ff]/.test(str)) {
      throw new DOMException("Failed to execute 'btoa' on 'Window': The string to be encoded contains characters outside of the Latin1 range.", DOMExceptionNameEnum_default.invalidCharacterError);
    }
    let t = "";
    let p = -6;
    let a = 0;
    let i = 0;
    let v = 0;
    let c;
    while (i < str.length || p > -6) {
      if (p < 0) {
        if (i < str.length) {
          c = str.charCodeAt(i++);
          v += 8;
        } else {
          c = 0;
        }
        a = (a & 255) << 8 | c & 255;
        p += 8;
      }
      t += BASE64_CHARS.charAt(v > 0 ? a >> p & 63 : 64);
      p -= 6;
      v -= 6;
    }
    return t;
  }
  static atob(data2) {
    const str = data2.toString();
    if (/[^\u0000-\u00ff]/.test(str)) {
      throw new DOMException("Failed to execute 'atob' on 'Window': The string to be decoded contains characters outside of the Latin1 range.", DOMExceptionNameEnum_default.invalidCharacterError);
    }
    if (/[^A-Za-z\d+/=]/.test(str) || str.length % 4 == 1) {
      throw new DOMException("Failed to execute 'atob' on 'Window': The string to be decoded is not correctly encoded.", DOMExceptionNameEnum_default.invalidCharacterError);
    }
    let t = "";
    let p = -8;
    let a = 0;
    let c;
    let d;
    for (let i = 0;i < str.length; i++) {
      if ((c = BASE64_CHARS.indexOf(str.charAt(i))) < 0) {
        continue;
      }
      a = a << 6 | c & 63;
      if ((p += 6) >= 0) {
        d = a >> p & 255;
        if (c !== 64) {
          t += String.fromCharCode(d);
        }
        a &= 63;
        p -= 8;
      }
    }
    return t;
  }
}

// node_modules/happy-dom-without-node/lib/nodes/attr/Attr.js
var _a38;
var _b22;
var _c19;
var _d14;
var _e12;
var _f10;

class Attr extends Node_default {
  constructor() {
    super(...arguments);
    this[_a38] = NodeTypeEnum_default.attributeNode;
    this[_b22] = null;
    this[_c19] = null;
    this[_d14] = null;
    this[_e12] = true;
    this[_f10] = null;
  }
  get specified() {
    return this[specified];
  }
  get ownerElement() {
    return this[ownerElement];
  }
  get value() {
    return this[value];
  }
  set value(value2) {
    this[value] = value2;
  }
  get name() {
    return this[name];
  }
  get localName() {
    return this[name] ? this[name].split(":").reverse()[0] : null;
  }
  get prefix() {
    return this[name] ? this[name].split(":")[0] : null;
  }
  get textContent() {
    return this[value];
  }
  get namespaceURI() {
    return this[namespaceURI];
  }
}
_a38 = nodeType, _b22 = namespaceURI, _c19 = name, _d14 = value, _e12 = specified, _f10 = ownerElement;
var Attr_default = Attr;

// node_modules/happy-dom-without-node/lib/nodes/processing-instruction/ProcessingInstruction.js
var _a39;

class ProcessingInstruction extends CharacterData {
  constructor() {
    super(...arguments);
    this[_a39] = NodeTypeEnum_default.processingInstructionNode;
  }
  get target() {
    return this[target];
  }
}
_a39 = nodeType, target;
var ProcessingInstruction_default = ProcessingInstruction;

// node_modules/happy-dom-without-node/lib/polyfills/stream.js
var Readable = globalThis.ReadableStream;
var Writable = globalThis.WritableStream;
var Transform = globalThis.TransformStream;
var stream_default = {
  Readable,
  Writable,
  Transform
};

// node_modules/happy-dom-without-node/lib/polyfills/stream/web.js
var ReadableStream = globalThis.ReadableStream;

// node_modules/happy-dom-without-node/lib/fetch/AbortSignal.js
class NotSupported7 {
}

// node_modules/happy-dom-without-node/lib/event/events/ClipboardEvent.js
class ClipboardEvent extends Event_default {
  constructor(type, eventInit = null) {
    super(type, eventInit);
    this.clipboardData = eventInit?.clipboardData ?? null;
  }
}

// node_modules/happy-dom-without-node/lib/fetch/Headers.js
class NotSupported8 {
}

// node_modules/happy-dom-without-node/lib/xml-http-request/XMLHttpRequest.js
class NotSupported9 {
}

// node_modules/happy-dom-without-node/lib/nodes/document/DocumentReadyStateManager.js
class DocumentReadyStateManager {
  constructor(window3) {
    this.totalTasks = 0;
    this.readyStateCallbacks = [];
    this.window = null;
    this.immediate = null;
    this.isComplete = false;
    this.window = window3;
  }
  waitUntilComplete() {
    return new Promise((resolve3) => {
      if (this.isComplete) {
        resolve3();
      } else {
        this.readyStateCallbacks.push(resolve3);
        if (this.totalTasks === 0 && !this.immediate) {
          this.immediate = this.window.requestAnimationFrame(this.endTask.bind(this));
        }
      }
    });
  }
  startTask() {
    if (this.isComplete) {
      return;
    }
    if (this.immediate) {
      this.window.cancelAnimationFrame(this.immediate);
      this.immediate = null;
    }
    this.totalTasks++;
  }
  endTask() {
    if (this.isComplete) {
      return;
    }
    if (this.immediate) {
      this.window.cancelAnimationFrame(this.immediate);
      this.immediate = null;
    }
    this.totalTasks--;
    if (this.totalTasks <= 0) {
      const callbacks2 = this.readyStateCallbacks;
      this.readyStateCallbacks = [];
      this.isComplete = true;
      for (const callback of callbacks2) {
        callback();
      }
    }
  }
}

// node_modules/happy-dom-without-node/lib/nodes/html-anchor-element/HTMLAnchorElementNamedNodeMap.js
class HTMLAnchorElementNamedNodeMap extends HTMLElementNamedNodeMap {
  setNamedItem(item2) {
    const replacedItem = super.setNamedItem(item2);
    if (item2[name] === "rel" && this[ownerElement][relList]) {
      this[ownerElement][relList][updateIndices]();
    }
    return replacedItem || null;
  }
  [(ownerElement, removeNamedItem)](name2) {
    const removedItem = super[removeNamedItem](name2);
    if (removedItem?.[name] === "rel" && this[ownerElement][relList]) {
      this[ownerElement][relList][updateIndices]();
    }
    return removedItem;
  }
}

// node_modules/happy-dom-without-node/lib/nodes/html-anchor-element/HTMLAnchorElement.js
var _a40;
var _b23;

class HTMLAnchorElement extends HTMLElement2 {
  constructor() {
    super(...arguments);
    this[_a40] = new HTMLAnchorElementNamedNodeMap(this);
    this[_b23] = null;
  }
  get download() {
    return this.getAttribute("download") || "";
  }
  set download(download) {
    this.setAttribute("download", download);
  }
  get hash() {
    const href = this.getAttribute("href");
    if (href.startsWith("#")) {
      return href;
    }
    let url7;
    try {
      url7 = new URL3(this.href);
    } catch (e) {
      return "";
    }
    return url7.hash;
  }
  set hash(hash3) {
    let url7;
    try {
      url7 = new URL3(this.href);
    } catch (e) {
      return;
    }
    url7.hash = hash3;
    this.href = url7.href;
  }
  get href() {
    if (!this.hasAttribute("href")) {
      return "";
    }
    try {
      return new URL3(this.getAttribute("href"), this[ownerDocument].location.href).href;
    } catch (e) {
      return this.getAttribute("href");
    }
  }
  set href(href) {
    this.setAttribute("href", href);
  }
  get hreflang() {
    return this.getAttribute("hreflang") || "";
  }
  set hreflang(hreflang) {
    this.setAttribute("hreflang", hreflang);
  }
  get origin() {
    try {
      return new URL3(this.href).origin;
    } catch (e) {
      return "";
    }
  }
  get ping() {
    return this.getAttribute("ping") || "";
  }
  set ping(ping) {
    this.setAttribute("ping", ping);
  }
  get protocol() {
    try {
      return new URL3(this.href).protocol;
    } catch (e) {
      return "";
    }
  }
  set protocol(protocol) {
    let url7;
    try {
      url7 = new URL3(this.href);
    } catch (e) {
      return;
    }
    url7.protocol = protocol;
    this.href = url7.href;
  }
  get username() {
    try {
      return new URL3(this.href).username;
    } catch (e) {
      return "";
    }
  }
  set username(username) {
    let url7;
    try {
      url7 = new URL3(this.href);
    } catch (e) {
      return;
    }
    url7.username = username;
    this.href = url7.href;
  }
  get password() {
    try {
      return new URL3(this.href).password;
    } catch (e) {
      return "";
    }
  }
  set password(password) {
    let url7;
    try {
      url7 = new URL3(this.href);
    } catch (e) {
      return;
    }
    url7.password = password;
    this.href = url7.href;
  }
  get pathname() {
    try {
      return new URL3(this.href).pathname;
    } catch (e) {
      return "";
    }
  }
  set pathname(pathname) {
    let url7;
    try {
      url7 = new URL3(this.href);
    } catch (e) {
      return;
    }
    url7.pathname = pathname;
    this.href = url7.href;
  }
  get port() {
    try {
      return new URL3(this.href).port;
    } catch (e) {
      return "";
    }
  }
  set port(port) {
    let url7;
    try {
      url7 = new URL3(this.href);
    } catch (e) {
      return;
    }
    url7.port = port;
    this.href = url7.href;
  }
  get host() {
    try {
      return new URL3(this.href).host;
    } catch (e) {
      return "";
    }
  }
  set host(host2) {
    let url7;
    try {
      url7 = new URL3(this.href);
    } catch (e) {
      return;
    }
    url7.host = host2;
    this.href = url7.href;
  }
  get hostname() {
    try {
      return new URL3(this.href).hostname;
    } catch (e) {
      return "";
    }
  }
  set hostname(hostname) {
    let url7;
    try {
      url7 = new URL3(this.href);
    } catch (e) {
      return;
    }
    url7.hostname = hostname;
    this.href = url7.href;
  }
  get referrerPolicy() {
    return this.getAttribute("referrerPolicy") || "";
  }
  set referrerPolicy(referrerPolicy) {
    this.setAttribute("referrerPolicy", referrerPolicy);
  }
  get rel() {
    return this.getAttribute("rel") || "";
  }
  set rel(rel) {
    this.setAttribute("rel", rel);
  }
  get relList() {
    if (!this[relList]) {
      this[relList] = new DOMTokenList_default(this, "rel");
    }
    return this[relList];
  }
  get search() {
    try {
      return new URL3(this.href).search;
    } catch (e) {
      return "";
    }
  }
  set search(search) {
    let url7;
    try {
      url7 = new URL3(this.href);
    } catch (e) {
      return;
    }
    url7.search = search;
    this.href = url7.href;
  }
  get target() {
    return this.getAttribute("target") || "";
  }
  set target(target2) {
    this.setAttribute("target", target2);
  }
  get text() {
    return this.textContent;
  }
  set text(text2) {
    this.textContent = text2;
  }
  get type() {
    return this.getAttribute("type") || "";
  }
  set type(type) {
    this.setAttribute("type", type);
  }
  toString() {
    return this.href;
  }
  dispatchEvent(event) {
    const returnValue2 = super.dispatchEvent(event);
    if (event.type === "click" && event instanceof MouseEvent && event.eventPhase === EventPhaseEnum_default.none && !event.defaultPrevented) {
      const href = this.href;
      if (href) {
        this[ownerDocument][ownerWindow].open(href, this.target || "_self");
        if (this[ownerDocument][ownerWindow].closed) {
          event.stopImmediatePropagation();
        }
      }
    }
    return returnValue2;
  }
}
_a40 = attributes, _b23 = relList;
var HTMLAnchorElement_default = HTMLAnchorElement;

// node_modules/happy-dom-without-node/lib/nodes/html-button-element/HTMLButtonElementNamedNodeMap.js
class HTMLButtonElementNamedNodeMap extends HTMLElementNamedNodeMap {
  setNamedItem(item2) {
    const replacedItem = super.setNamedItem(item2);
    if ((item2[name] === "id" || item2[name] === "name") && this[ownerElement][formNode]) {
      if (replacedItem?.[value]) {
        this[ownerElement][formNode][removeFormControlItem](this[ownerElement], replacedItem[value]);
      }
      if (item2[value]) {
        this[ownerElement][formNode][appendFormControlItem](this[ownerElement], item2[value]);
      }
    }
    return replacedItem || null;
  }
  [(ownerElement, removeNamedItem)](name2) {
    const removedItem = super[removeNamedItem](name2);
    if (removedItem && (removedItem[name] === "id" || removedItem[name] === "name") && this[ownerElement][formNode]) {
      this[ownerElement][formNode][removeFormControlItem](this[ownerElement], removedItem[value]);
    }
    return removedItem;
  }
}

// node_modules/happy-dom-without-node/lib/nodes/html-button-element/HTMLButtonElement.js
var __classPrivateFieldGet44 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _HTMLButtonElement_instances;
var _HTMLButtonElement_sanitizeType;
var _a41;
var _b24;
var _c20;
var BUTTON_TYPES = ["submit", "reset", "button", "menu"];

class HTMLButtonElement extends HTMLElement2 {
  constructor() {
    super(...arguments);
    _HTMLButtonElement_instances.add(this);
    this[_a41] = new HTMLButtonElementNamedNodeMap(this);
    this[_b24] = "";
    this[_c20] = new ValidityState2(this);
  }
  get validationMessage() {
    return this[validationMessage];
  }
  get validity() {
    return this[validity];
  }
  get name() {
    return this.getAttribute("name") || "";
  }
  set name(name2) {
    this.setAttribute("name", name2);
  }
  get value() {
    return this.getAttribute("value");
  }
  set value(value2) {
    this.setAttribute("value", value2);
  }
  get disabled() {
    return this.getAttribute("disabled") !== null;
  }
  set disabled(disabled) {
    if (!disabled) {
      this.removeAttribute("disabled");
    } else {
      this.setAttribute("disabled", "");
    }
  }
  get type() {
    return __classPrivateFieldGet44(this, _HTMLButtonElement_instances, "m", _HTMLButtonElement_sanitizeType).call(this, this.getAttribute("type"));
  }
  set type(v) {
    this.setAttribute("type", __classPrivateFieldGet44(this, _HTMLButtonElement_instances, "m", _HTMLButtonElement_sanitizeType).call(this, v));
  }
  get formAction() {
    if (!this.hasAttribute("formaction")) {
      return this[ownerDocument].location.href;
    }
    try {
      return new $URL(this.getAttribute("formaction"), this[ownerDocument].location.href).href;
    } catch (e) {
      return "";
    }
  }
  set formAction(formAction) {
    this.setAttribute("formaction", formAction);
  }
  get formEnctype() {
    return this.getAttribute("formenctype") || "";
  }
  set formEnctype(formEnctype) {
    this.setAttribute("formenctype", formEnctype);
  }
  get formMethod() {
    return this.getAttribute("formmethod") || "";
  }
  set formMethod(formMethod) {
    this.setAttribute("formmethod", formMethod);
  }
  get formNoValidate() {
    return this.getAttribute("formnovalidate") !== null;
  }
  set formNoValidate(formNoValidate) {
    if (!formNoValidate) {
      this.removeAttribute("formnovalidate");
    } else {
      this.setAttribute("formnovalidate", "");
    }
  }
  get formTarget() {
    return this.getAttribute("formtarget") || "";
  }
  set formTarget(formTarget) {
    this.setAttribute("formtarget", formTarget);
  }
  get form() {
    if (this[formNode]) {
      return this[formNode];
    }
    if (!this.isConnected) {
      return null;
    }
    const formID = this.getAttribute("form");
    return formID ? this[ownerDocument].getElementById(formID) : null;
  }
  get labels() {
    return HTMLLabelElementUtility.getAssociatedLabelElements(this);
  }
  checkValidity() {
    const valid = this.disabled || this.type === "reset" || this.type === "button" || this[validity].valid;
    if (!valid) {
      this.dispatchEvent(new Event_default("invalid", { bubbles: true, cancelable: true }));
    }
    return valid;
  }
  reportValidity() {
    return this.checkValidity();
  }
  setCustomValidity(message) {
    this[validationMessage] = String(message);
  }
  dispatchEvent(event) {
    if (event.type === "click" && event instanceof MouseEvent && event.eventPhase === EventPhaseEnum_default.none && this.disabled) {
      return false;
    }
    const returnValue2 = super.dispatchEvent(event);
    if (event.type === "click" && event instanceof MouseEvent && (event.eventPhase === EventPhaseEnum_default.atTarget || event.eventPhase === EventPhaseEnum_default.bubbling) && this[isConnected]) {
      const form = this.form;
      if (!form) {
        return returnValue2;
      }
      switch (this.type) {
        case "submit":
          form.requestSubmit(this);
          break;
        case "reset":
          form.reset();
          break;
      }
    }
    return returnValue2;
  }
  [(_HTMLButtonElement_instances = new WeakSet, _a41 = attributes, _b24 = validationMessage, _c20 = validity, connectToNode)](parentNode2 = null) {
    const oldFormNode = this[formNode];
    super[connectToNode](parentNode2);
    if (oldFormNode !== this[formNode]) {
      if (oldFormNode) {
        oldFormNode[removeFormControlItem](this, this.name);
        oldFormNode[removeFormControlItem](this, this.id);
      }
      if (this[formNode]) {
        this[formNode][appendFormControlItem](this, this.name);
        this[formNode][appendFormControlItem](this, this.id);
      }
    }
  }
}
_HTMLButtonElement_sanitizeType = function _HTMLButtonElement_sanitizeType2(type) {
  type = type && type.toLowerCase() || "submit";
  if (!BUTTON_TYPES.includes(type)) {
    type = "submit";
  }
  return type;
};
var HTMLButtonElement_default = HTMLButtonElement;

// node_modules/happy-dom-without-node/lib/nodes/html-option-element/HTMLOptionElementNamedNodeMap.js
class HTMLOptionElementNamedNodeMap extends HTMLElementNamedNodeMap {
  setNamedItem(item2) {
    const replacedItem = super.setNamedItem(item2);
    if (!this[ownerElement][dirtyness] && item2[name] === "selected" && replacedItem?.[value] !== item2[value]) {
      const selectNode2 = this[ownerElement][selectNode];
      this[ownerElement][selectedness] = true;
      if (selectNode2) {
        selectNode2[updateOptionItems](this[ownerElement]);
      }
    }
    return replacedItem || null;
  }
  [(ownerElement, removeNamedItem)](name2) {
    const removedItem = super[removeNamedItem](name2);
    if (removedItem && !this[ownerElement][dirtyness] && removedItem[name] === "selected") {
      const selectNode2 = this[ownerElement][selectNode];
      this[ownerElement][selectedness] = false;
      if (selectNode2) {
        selectNode2[updateOptionItems]();
      }
    }
    return removedItem;
  }
}

// node_modules/happy-dom-without-node/lib/nodes/html-option-element/HTMLOptionElement.js
var _a42;
var _b25;
var _c21;

class HTMLOptionElement extends HTMLElement2 {
  constructor() {
    super(...arguments);
    this[_a42] = new HTMLOptionElementNamedNodeMap(this);
    this[_b25] = false;
    this[_c21] = false;
  }
  get text() {
    return this.innerText;
  }
  set text(text2) {
    this.innerText = text2;
  }
  get index() {
    return this[selectNode] ? this[selectNode].options.indexOf(this) : 0;
  }
  get form() {
    return this[formNode];
  }
  get selected() {
    return this[selectedness];
  }
  set selected(selected) {
    const selectNode2 = this[selectNode];
    this[dirtyness] = true;
    this[selectedness] = Boolean(selected);
    if (selectNode2) {
      selectNode2[updateOptionItems](this[selectedness] ? this : null);
    }
  }
  get disabled() {
    return this.getAttribute("disabled") !== null;
  }
  set disabled(disabled) {
    if (!disabled) {
      this.removeAttribute("disabled");
    } else {
      this.setAttribute("disabled", "");
    }
  }
  get value() {
    return this.getAttribute("value") ?? this.textContent;
  }
  set value(value2) {
    this.setAttribute("value", value2);
  }
  [(_a42 = attributes, _b25 = selectedness, _c21 = dirtyness, connectToNode)](parentNode2 = null) {
    const oldSelectNode = this[selectNode];
    super[connectToNode](parentNode2);
    if (oldSelectNode !== this[selectNode]) {
      if (oldSelectNode) {
        oldSelectNode[updateOptionItems]();
      }
      if (this[selectNode]) {
        this[selectNode][updateOptionItems]();
      }
    }
  }
}

// node_modules/happy-dom-without-node/lib/nodes/html-opt-group-element/HTMLOptGroupElement.js
class HTMLOptGroupElement extends HTMLElement2 {
  get label() {
    return this.getAttribute("label") || "";
  }
  set label(label) {
    if (!label) {
      this.removeAttribute("label");
    } else {
      this.setAttribute("label", label);
    }
  }
  get disabled() {
    return this.getAttribute("disabled") !== null;
  }
  set disabled(disabled) {
    if (!disabled) {
      this.removeAttribute("disabled");
    } else {
      this.setAttribute("disabled", "");
    }
  }
}

// node_modules/happy-dom-without-node/lib/nodes/html-time-element/HTMLTimeElement.js
class HTMLTimeElement extends HTMLElement2 {
  get dateTime() {
    return this.getAttribute("dateTime") || "";
  }
  set dateTime(dateTime) {
    this.setAttribute("dateTime", dateTime);
  }
}

// node_modules/happy-dom-without-node/lib/fetch/utilities/FetchCORSUtility.js
class NotSupported10 {
}

// node_modules/happy-dom-without-node/lib/window/WindowPageOpenUtility.js
class WindowPageOpenUtility {
  static openPage(browserFrame, options3) {
    const features = this.getWindowFeatures(options3?.features || "");
    const target2 = options3?.target !== undefined ? String(options3.target) : null;
    const originURL = new $URL(browserFrame.window.location.href);
    const targetURL = BrowserFrameURL.getRelativeURL(browserFrame, options3.url);
    const oldWindow = browserFrame.window;
    let targetFrame;
    switch (target2) {
      case "_self":
        targetFrame = browserFrame;
        break;
      case "_top":
        targetFrame = browserFrame.page.mainFrame;
        break;
      case "_parent":
        targetFrame = browserFrame.parentFrame ?? browserFrame;
        break;
      case "_blank":
      default:
        const newPage = browserFrame.page.context.newPage();
        targetFrame = newPage.mainFrame;
        targetFrame[openerFrame] = browserFrame;
        break;
    }
    targetFrame.goto(targetURL.href, {
      referrer: features.noreferrer ? undefined : browserFrame.window.location.origin,
      referrerPolicy: features.noreferrer ? "no-referrer" : undefined
    }).catch((error4) => targetFrame.page.console.error(error4));
    if (targetURL.protocol === "javascript:") {
      return targetFrame.window;
    }
    if (targetFrame === browserFrame && browserFrame.window === oldWindow) {
      return null;
    }
    if (features.popup && target2 !== "_self" && target2 !== "_top" && target2 !== "_parent") {
      targetFrame[popup] = true;
      if (features?.width || features?.height) {
        targetFrame.page.setViewport({
          width: features?.width,
          height: features?.height
        });
      }
      if (features?.left) {
        targetFrame.window.screenLeft = features.left;
        targetFrame.window.screenX = features.left;
      }
      if (features?.top) {
        targetFrame.window.screenTop = features.top;
        targetFrame.window.screenY = features.top;
      }
    }
    if (target2 && target2 !== "_self" && target2 !== "_top" && target2 !== "_parent" && target2 !== "_blank") {
      targetFrame.window.name = target2;
    }
    const isCORS = NotSupported10.isCORS(originURL, targetFrame.url);
    if (!features.noopener && !features.noreferrer && browserFrame.window && targetFrame[openerFrame] && targetFrame.window !== browserFrame.window) {
      targetFrame[openerWindow] = isCORS ? new CrossOriginBrowserWindow_default(browserFrame.window) : browserFrame.window;
    }
    if (features.noopener || features.noreferrer) {
      return null;
    }
    if (isCORS) {
      return new CrossOriginBrowserWindow_default(targetFrame.window, browserFrame.window);
    }
    return targetFrame.window;
  }
  static getWindowFeatures(features) {
    const parts = features.split(",");
    const result = {
      popup: false,
      width: 0,
      height: 0,
      left: 0,
      top: 0,
      noopener: false,
      noreferrer: false
    };
    for (const part of parts) {
      const [key, value2] = part.split("=");
      switch (key) {
        case "popup":
          result.popup = !value2 || value2 === "yes" || value2 === "1" || value2 === "true";
          break;
        case "width":
        case "innerWidth":
          result.width = parseInt(value2, 10);
          break;
        case "height":
        case "innerHeight":
          result.height = parseInt(value2, 10);
          break;
        case "left":
        case "screenX":
          result.left = parseInt(value2, 10);
          break;
        case "top":
        case "screenY":
          result.top = parseInt(value2, 10);
          break;
        case "noopener":
          result.noopener = true;
          break;
        case "noreferrer":
          result.noreferrer = true;
          break;
      }
    }
    return result;
  }
}

// node_modules/happy-dom-without-node/lib/nodes/html-audio-element/Audio.js
class Audio extends HTMLAudioElement {
  constructor(url9 = null) {
    super();
    if (url9 !== null) {
      this.src = url9;
    }
  }
}

// node_modules/happy-dom-without-node/lib/nodes/html-image-element/Image.js
class Image extends HTMLImageElement {
  constructor(width2 = null, height2 = null) {
    super();
    if (width2 !== null) {
      this.width = width2;
    }
    if (height2 !== null) {
      this.height = height2;
    }
  }
}

// node_modules/happy-dom-without-node/lib/nodes/text/Text.js
var _a43;

class Text extends CharacterData {
  constructor() {
    super(...arguments);
    this[_a43] = NodeTypeEnum_default.textNode;
  }
  get nodeName() {
    return "#text";
  }
  get data() {
    return this[data];
  }
  set data(data2) {
    super.data = data2;
    if (this[textAreaNode]) {
      this[textAreaNode][resetSelection]();
    }
    if (this[styleNode]) {
      this[styleNode][updateSheet]();
    }
  }
  splitText(offset3) {
    const length2 = this[data].length;
    if (offset3 < 0 || offset3 > length2) {
      throw new DOMException("The index is not in the allowed range.", DOMExceptionNameEnum_default.indexSizeError);
    }
    const count = length2 - offset3;
    const newData = this.substringData(offset3, count);
    const newNode = this[ownerDocument].createTextNode(newData);
    if (this[parentNode] !== null) {
      this[parentNode].insertBefore(newNode, this.nextSibling);
    }
    this.replaceData(offset3, count, "");
    return newNode;
  }
  toString() {
    return "[object Text]";
  }
  [(_a43 = nodeType, cloneNode)](deep = false) {
    return super[cloneNode](deep);
  }
  [connectToNode](parentNode2 = null) {
    const oldTextAreaNode = this[textAreaNode];
    super[connectToNode](parentNode2);
    if (oldTextAreaNode !== this[textAreaNode]) {
      if (oldTextAreaNode) {
        oldTextAreaNode[resetSelection]();
      }
      if (this[textAreaNode]) {
        this[textAreaNode][resetSelection]();
      }
    }
  }
}

// node_modules/happy-dom-without-node/lib/nodes/comment/Comment.js
var _a44;

class Comment extends CharacterData {
  constructor() {
    super(...arguments);
    this[_a44] = NodeTypeEnum_default.commentNode;
  }
  get nodeName() {
    return "#comment";
  }
  toString() {
    return "[object Comment]";
  }
  [(_a44 = nodeType, cloneNode)](deep = false) {
    return super[cloneNode](deep);
  }
}

// node_modules/happy-dom-without-node/lib/dom-parser/DOMParser.js
var __classPrivateFieldSet39 = function(receiver, state, value2, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
};
var __classPrivateFieldGet45 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _DOMParser_instances;
var _DOMParser_window;
var _DOMParser_createDocument;

class DOMParser {
  constructor(window3) {
    _DOMParser_instances.add(this);
    _DOMParser_window.set(this, undefined);
    __classPrivateFieldSet39(this, _DOMParser_window, window3, "f");
  }
  parseFromString(string, mimeType) {
    if (!mimeType) {
      throw new DOMException('Second parameter "mimeType" is mandatory.');
    }
    const newDocument = __classPrivateFieldGet45(this, _DOMParser_instances, "m", _DOMParser_createDocument).call(this, mimeType);
    newDocument[childNodes].length = 0;
    newDocument[children].length = 0;
    const root = XMLParser.parse(newDocument, string, { evaluateScripts: true });
    let documentElement = null;
    let documentTypeNode = null;
    for (const node2 of root[childNodes]) {
      if (node2["tagName"] === "HTML") {
        documentElement = node2;
      } else if (node2[nodeType] === NodeTypeEnum_default.documentTypeNode) {
        documentTypeNode = node2;
      }
      if (documentElement && documentTypeNode) {
        break;
      }
    }
    if (documentElement) {
      if (documentTypeNode) {
        newDocument.appendChild(documentTypeNode);
      }
      newDocument.appendChild(documentElement);
      const body = newDocument.body;
      if (body) {
        for (const child of root[childNodes].slice()) {
          body.appendChild(child);
        }
      }
    } else {
      switch (mimeType) {
        case "image/svg+xml":
          {
            for (const node2 of root[childNodes].slice()) {
              newDocument.appendChild(node2);
            }
          }
          break;
        case "text/html":
        default:
          {
            const documentElement2 = newDocument.createElement("html");
            const bodyElement = newDocument.createElement("body");
            const headElement = newDocument.createElement("head");
            documentElement2.appendChild(headElement);
            documentElement2.appendChild(bodyElement);
            newDocument.appendChild(documentElement2);
            for (const node2 of root[childNodes].slice()) {
              bodyElement.appendChild(node2);
            }
          }
          break;
      }
    }
    return newDocument;
  }
}
_DOMParser_window = new WeakMap, _DOMParser_instances = new WeakSet, _DOMParser_createDocument = function _DOMParser_createDocument2(mimeType) {
  switch (mimeType) {
    case "text/html":
      return new (__classPrivateFieldGet45(this, _DOMParser_window, "f")).HTMLDocument;
    case "image/svg+xml":
      return new (__classPrivateFieldGet45(this, _DOMParser_window, "f")).SVGDocument;
    case "text/xml":
    case "application/xml":
    case "application/xhtml+xml":
      return new (__classPrivateFieldGet45(this, _DOMParser_window, "f")).XMLDocument;
    default:
      throw new DOMException(`Unknown mime type "${mimeType}".`);
  }
};
var DOMParser_default = DOMParser;

// node_modules/happy-dom-without-node/lib/file/FileReader.js
var import_whatwg_mimetype = __toESM(require_mime_type(), 1);

// node_modules/happy-dom-without-node/lib/file/FileReaderReadyStateEnum.js
var FileReaderReadyStateEnum;
(function(FileReaderReadyStateEnum2) {
  FileReaderReadyStateEnum2[FileReaderReadyStateEnum2["empty"] = 0] = "empty";
  FileReaderReadyStateEnum2[FileReaderReadyStateEnum2["loading"] = 1] = "loading";
  FileReaderReadyStateEnum2[FileReaderReadyStateEnum2["done"] = 2] = "done";
})(FileReaderReadyStateEnum || (FileReaderReadyStateEnum = {}));
var FileReaderReadyStateEnum_default = FileReaderReadyStateEnum;

// node_modules/happy-dom-without-node/lib/file/FileReaderFormatEnum.js
var FileReaderFormatEnum;
(function(FileReaderFormatEnum2) {
  FileReaderFormatEnum2["buffer"] = "buffer";
  FileReaderFormatEnum2["binaryString"] = "binaryString";
  FileReaderFormatEnum2["dataURL"] = "dataURL";
  FileReaderFormatEnum2["text"] = "text";
})(FileReaderFormatEnum || (FileReaderFormatEnum = {}));
var FileReaderFormatEnum_default = FileReaderFormatEnum;

// node_modules/happy-dom-without-node/lib/file/FileReaderEventTypeEnum.js
var FileReaderEventTypeEnum;
(function(FileReaderEventTypeEnum2) {
  FileReaderEventTypeEnum2["abort"] = "abort";
  FileReaderEventTypeEnum2["error"] = "error";
  FileReaderEventTypeEnum2["load"] = "load";
  FileReaderEventTypeEnum2["loadstart"] = "loadstart";
  FileReaderEventTypeEnum2["loadend"] = "loadend";
  FileReaderEventTypeEnum2["progress"] = "progress";
})(FileReaderEventTypeEnum || (FileReaderEventTypeEnum = {}));
var FileReaderEventTypeEnum_default = FileReaderEventTypeEnum;

// node_modules/happy-dom-without-node/lib/file/FileReader.js
var __classPrivateFieldSet40 = function(receiver, state, value2, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
};
var __classPrivateFieldGet46 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _FileReader_instances;
var _FileReader_isTerminated;
var _FileReader_loadTimeout;
var _FileReader_parseTimeout;
var _FileReader_window;
var _FileReader_readFile;

class FileReader extends EventTarget_default {
  constructor(window3) {
    super();
    _FileReader_instances.add(this);
    this.error = null;
    this.result = null;
    this.readyState = FileReaderReadyStateEnum_default.empty;
    this.onabort = null;
    this.onerror = null;
    this.onload = null;
    this.onloadstart = null;
    this.onloadend = null;
    this.onprogress = null;
    _FileReader_isTerminated.set(this, false);
    _FileReader_loadTimeout.set(this, null);
    _FileReader_parseTimeout.set(this, null);
    _FileReader_window.set(this, undefined);
    __classPrivateFieldSet40(this, _FileReader_window, window3, "f");
  }
  readAsArrayBuffer(blob) {
    __classPrivateFieldGet46(this, _FileReader_instances, "m", _FileReader_readFile).call(this, blob, FileReaderFormatEnum_default.buffer);
  }
  readAsBinaryString(blob) {
    __classPrivateFieldGet46(this, _FileReader_instances, "m", _FileReader_readFile).call(this, blob, FileReaderFormatEnum_default.binaryString);
  }
  readAsDataURL(blob) {
    __classPrivateFieldGet46(this, _FileReader_instances, "m", _FileReader_readFile).call(this, blob, FileReaderFormatEnum_default.dataURL);
  }
  readAsText(blob, encoding = null) {
    __classPrivateFieldGet46(this, _FileReader_instances, "m", _FileReader_readFile).call(this, blob, FileReaderFormatEnum_default.text, encoding || "UTF-8");
  }
  abort() {
    __classPrivateFieldGet46(this, _FileReader_window, "f").clearTimeout(__classPrivateFieldGet46(this, _FileReader_loadTimeout, "f"));
    __classPrivateFieldGet46(this, _FileReader_window, "f").clearTimeout(__classPrivateFieldGet46(this, _FileReader_parseTimeout, "f"));
    if (this.readyState === FileReaderReadyStateEnum_default.empty || this.readyState === FileReaderReadyStateEnum_default.done) {
      this.result = null;
      return;
    }
    if (this.readyState === FileReaderReadyStateEnum_default.loading) {
      this.readyState = FileReaderReadyStateEnum_default.done;
      this.result = null;
    }
    __classPrivateFieldSet40(this, _FileReader_isTerminated, true, "f");
    this.dispatchEvent(new ProgressEvent(FileReaderEventTypeEnum_default.abort));
    this.dispatchEvent(new ProgressEvent(FileReaderEventTypeEnum_default.loadend));
  }
}
_FileReader_isTerminated = new WeakMap, _FileReader_loadTimeout = new WeakMap, _FileReader_parseTimeout = new WeakMap, _FileReader_window = new WeakMap, _FileReader_instances = new WeakSet, _FileReader_readFile = function _FileReader_readFile2(blob, format2, encoding = null) {
  if (this.readyState === FileReaderReadyStateEnum_default.loading) {
    throw new DOMException("The object is in an invalid state.", DOMExceptionNameEnum_default.invalidStateError);
  }
  this.readyState = FileReaderReadyStateEnum_default.loading;
  __classPrivateFieldSet40(this, _FileReader_loadTimeout, __classPrivateFieldGet46(this, _FileReader_window, "f").setTimeout(() => {
    if (__classPrivateFieldGet46(this, _FileReader_isTerminated, "f")) {
      __classPrivateFieldSet40(this, _FileReader_isTerminated, false, "f");
      return;
    }
    this.dispatchEvent(new ProgressEvent(FileReaderEventTypeEnum_default.loadstart));
    let data2 = blob[buffer];
    if (!data2) {
      data2 = Buffer.alloc(0);
    }
    this.dispatchEvent(new ProgressEvent(FileReaderEventTypeEnum_default.loadstart, {
      lengthComputable: !isNaN(blob.size),
      total: blob.size,
      loaded: data2.length
    }));
    __classPrivateFieldSet40(this, _FileReader_parseTimeout, __classPrivateFieldGet46(this, _FileReader_window, "f").setTimeout(() => {
      if (__classPrivateFieldGet46(this, _FileReader_isTerminated, "f")) {
        __classPrivateFieldSet40(this, _FileReader_isTerminated, false, "f");
        return;
      }
      switch (format2) {
        default:
        case FileReaderFormatEnum_default.buffer: {
          this.result = new Uint8Array(data2).buffer;
          break;
        }
        case FileReaderFormatEnum_default.binaryString: {
          this.result = data2.toString("binary");
          break;
        }
        case FileReaderFormatEnum_default.dataURL: {
          const contentType2 = import_whatwg_mimetype.default.parse(blob.type) || "application/octet-stream";
          this.result = `data:${contentType2};base64,${data2.toString("base64")}`;
          break;
        }
        case FileReaderFormatEnum_default.text: {
          this.result = new TextDecoder(encoding || "UTF-8").decode(data2);
          break;
        }
      }
      this.readyState = FileReaderReadyStateEnum_default.done;
      this.dispatchEvent(new ProgressEvent(FileReaderEventTypeEnum_default.load));
      this.dispatchEvent(new ProgressEvent(FileReaderEventTypeEnum_default.loadend));
    }), "f");
  }), "f");
};
var FileReader_default = FileReader;

// node_modules/happy-dom-without-node/lib/fetch/Request.js
class NotSupported11 {
}

// node_modules/happy-dom-without-node/lib/fetch/Response.js
class NotSupported12 {
}

// node_modules/happy-dom-without-node/lib/range/RangeHowEnum.js
var RangeHowEnum;
(function(RangeHowEnum2) {
  RangeHowEnum2[RangeHowEnum2["endToEnd"] = 2] = "endToEnd";
  RangeHowEnum2[RangeHowEnum2["endToStart"] = 3] = "endToStart";
  RangeHowEnum2[RangeHowEnum2["startToEnd"] = 1] = "startToEnd";
  RangeHowEnum2[RangeHowEnum2["startToStart"] = 0] = "startToStart";
})(RangeHowEnum || (RangeHowEnum = {}));
var RangeHowEnum_default = RangeHowEnum;

// node_modules/happy-dom-without-node/lib/range/Range.js
var __classPrivateFieldSet41 = function(receiver, state, value2, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
};
var __classPrivateFieldGet47 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Range_window;
var _a45;
var _b26;

class Range {
  constructor(window3) {
    this.END_TO_END = RangeHowEnum_default.endToEnd;
    this.END_TO_START = RangeHowEnum_default.endToStart;
    this.START_TO_END = RangeHowEnum_default.startToEnd;
    this.START_TO_START = RangeHowEnum_default.startToStart;
    this[_a45] = null;
    this[_b26] = null;
    _Range_window.set(this, undefined);
    __classPrivateFieldSet41(this, _Range_window, window3, "f");
    this[ownerDocument] = window3.document;
    this[start2] = { node: window3.document, offset: 0 };
    this[end2] = { node: window3.document, offset: 0 };
  }
  get startContainer() {
    return this[start2].node;
  }
  get endContainer() {
    return this[end2].node;
  }
  get startOffset() {
    if (this[start2].offset > 0) {
      const length2 = NodeUtility.getNodeLength(this[start2].node);
      if (this[start2].offset > length2) {
        this[start2].offset = length2;
      }
    }
    return this[start2].offset;
  }
  get endOffset() {
    if (this[end2].offset > 0) {
      const length2 = NodeUtility.getNodeLength(this[end2].node);
      if (this[end2].offset > length2) {
        this[end2].offset = length2;
      }
    }
    return this[end2].offset;
  }
  get collapsed() {
    return this[start2].node === this[end2].node && this.startOffset === this.endOffset;
  }
  get commonAncestorContainer() {
    let container = this[start2].node;
    while (container) {
      if (NodeUtility.isInclusiveAncestor(container, this[end2].node)) {
        return container;
      }
      container = container[parentNode];
    }
    return null;
  }
  collapse(toStart = false) {
    if (toStart) {
      this[end2] = Object.assign({}, this[start2]);
    } else {
      this[start2] = Object.assign({}, this[end2]);
    }
  }
  compareBoundaryPoints(how, sourceRange) {
    if (how !== RangeHowEnum_default.startToStart && how !== RangeHowEnum_default.startToEnd && how !== RangeHowEnum_default.endToEnd && how !== RangeHowEnum_default.endToStart) {
      throw new DOMException(`The comparison method provided must be one of '${RangeHowEnum_default.startToStart}', '${RangeHowEnum_default.startToEnd}', '${RangeHowEnum_default.endToEnd}' or '${RangeHowEnum_default.endToStart}'.`, DOMExceptionNameEnum_default.notSupportedError);
    }
    if (this[ownerDocument] !== sourceRange[ownerDocument]) {
      throw new DOMException(`The two Ranges are not in the same tree.`, DOMExceptionNameEnum_default.wrongDocumentError);
    }
    const thisPoint = {
      node: null,
      offset: 0
    };
    const sourcePoint = {
      node: null,
      offset: 0
    };
    switch (how) {
      case RangeHowEnum_default.startToStart:
        thisPoint.node = this[start2].node;
        thisPoint.offset = this.startOffset;
        sourcePoint.node = sourceRange[start2].node;
        sourcePoint.offset = sourceRange.startOffset;
        break;
      case RangeHowEnum_default.startToEnd:
        thisPoint.node = this[end2].node;
        thisPoint.offset = this.endOffset;
        sourcePoint.node = sourceRange[start2].node;
        sourcePoint.offset = sourceRange.startOffset;
        break;
      case RangeHowEnum_default.endToEnd:
        thisPoint.node = this[end2].node;
        thisPoint.offset = this.endOffset;
        sourcePoint.node = sourceRange[end2].node;
        sourcePoint.offset = sourceRange.endOffset;
        break;
      case RangeHowEnum_default.endToStart:
        thisPoint.node = this[start2].node;
        thisPoint.offset = this.startOffset;
        sourcePoint.node = sourceRange[end2].node;
        sourcePoint.offset = sourceRange.endOffset;
        break;
    }
    return RangeUtility.compareBoundaryPointsPosition(thisPoint, sourcePoint);
  }
  comparePoint(node2, offset3) {
    if (node2[ownerDocument] !== this[ownerDocument]) {
      throw new DOMException(`The two Ranges are not in the same tree.`, DOMExceptionNameEnum_default.wrongDocumentError);
    }
    RangeUtility.validateBoundaryPoint({ node: node2, offset: offset3 });
    const boundaryPoint = { node: node2, offset: offset3 };
    if (RangeUtility.compareBoundaryPointsPosition(boundaryPoint, {
      node: this[start2].node,
      offset: this.startOffset
    }) === -1) {
      return -1;
    } else if (RangeUtility.compareBoundaryPointsPosition(boundaryPoint, {
      node: this[end2].node,
      offset: this.endOffset
    }) === 1) {
      return 1;
    }
    return 0;
  }
  cloneContents() {
    const fragment = this[ownerDocument].createDocumentFragment();
    const startOffset = this.startOffset;
    const endOffset = this.endOffset;
    if (this.collapsed) {
      return fragment;
    }
    if (this[start2].node === this[end2].node && (this[start2].node[nodeType] === NodeTypeEnum_default.textNode || this[start2].node[nodeType] === NodeTypeEnum_default.processingInstructionNode || this[start2].node[nodeType] === NodeTypeEnum_default.commentNode)) {
      const clone = this[start2].node.cloneNode(false);
      clone[data] = clone.substringData(startOffset, endOffset - startOffset);
      fragment.appendChild(clone);
      return fragment;
    }
    let commonAncestor = this[start2].node;
    while (!NodeUtility.isInclusiveAncestor(commonAncestor, this[end2].node)) {
      commonAncestor = commonAncestor[parentNode];
    }
    let firstPartialContainedChild = null;
    if (!NodeUtility.isInclusiveAncestor(this[start2].node, this[end2].node)) {
      let candidate = commonAncestor.firstChild;
      while (!firstPartialContainedChild) {
        if (RangeUtility.isPartiallyContained(candidate, this)) {
          firstPartialContainedChild = candidate;
        }
        candidate = candidate.nextSibling;
      }
    }
    let lastPartiallyContainedChild = null;
    if (!NodeUtility.isInclusiveAncestor(this[end2].node, this[start2].node)) {
      let candidate = commonAncestor.lastChild;
      while (!lastPartiallyContainedChild) {
        if (RangeUtility.isPartiallyContained(candidate, this)) {
          lastPartiallyContainedChild = candidate;
        }
        candidate = candidate.previousSibling;
      }
    }
    const containedChildren = [];
    for (const node2 of commonAncestor[childNodes]) {
      if (RangeUtility.isContained(node2, this)) {
        if (node2[nodeType] === NodeTypeEnum_default.documentTypeNode) {
          throw new DOMException("Invalid document type element.", DOMExceptionNameEnum_default.hierarchyRequestError);
        }
        containedChildren.push(node2);
      }
    }
    if (firstPartialContainedChild !== null && (firstPartialContainedChild[nodeType] === NodeTypeEnum_default.textNode || firstPartialContainedChild[nodeType] === NodeTypeEnum_default.processingInstructionNode || firstPartialContainedChild[nodeType] === NodeTypeEnum_default.commentNode)) {
      const clone = this[start2].node.cloneNode(false);
      clone[data] = clone.substringData(startOffset, NodeUtility.getNodeLength(this[start2].node) - startOffset);
      fragment.appendChild(clone);
    } else if (firstPartialContainedChild !== null) {
      const clone = firstPartialContainedChild.cloneNode();
      fragment.appendChild(clone);
      const subRange = new (__classPrivateFieldGet47(this, _Range_window, "f")).Range;
      subRange[start2].node = this[start2].node;
      subRange[start2].offset = startOffset;
      subRange[end2].node = firstPartialContainedChild;
      subRange[end2].offset = NodeUtility.getNodeLength(firstPartialContainedChild);
      const subDocumentFragment = subRange.cloneContents();
      clone.appendChild(subDocumentFragment);
    }
    for (const containedChild of containedChildren) {
      const clone = containedChild.cloneNode(true);
      fragment.appendChild(clone);
    }
    if (lastPartiallyContainedChild !== null && (lastPartiallyContainedChild[nodeType] === NodeTypeEnum_default.textNode || lastPartiallyContainedChild[nodeType] === NodeTypeEnum_default.processingInstructionNode || lastPartiallyContainedChild[nodeType] === NodeTypeEnum_default.commentNode)) {
      const clone = this[end2].node.cloneNode(false);
      clone[data] = clone.substringData(0, endOffset);
      fragment.appendChild(clone);
    } else if (lastPartiallyContainedChild !== null) {
      const clone = lastPartiallyContainedChild.cloneNode(false);
      fragment.appendChild(clone);
      const subRange = new (__classPrivateFieldGet47(this, _Range_window, "f")).Range;
      subRange[start2].node = lastPartiallyContainedChild;
      subRange[start2].offset = 0;
      subRange[end2].node = this[end2].node;
      subRange[end2].offset = endOffset;
      const subFragment = subRange.cloneContents();
      clone.appendChild(subFragment);
    }
    return fragment;
  }
  cloneRange() {
    const clone = new (__classPrivateFieldGet47(this, _Range_window, "f")).Range;
    clone[start2].node = this[start2].node;
    clone[start2].offset = this[start2].offset;
    clone[end2].node = this[end2].node;
    clone[end2].offset = this[end2].offset;
    return clone;
  }
  createContextualFragment(tagString) {
    return XMLParser.parse(this[ownerDocument], tagString);
  }
  deleteContents() {
    const startOffset = this.startOffset;
    const endOffset = this.endOffset;
    if (this.collapsed) {
      return;
    }
    if (this[start2].node === this[end2].node && (this[start2].node[nodeType] === NodeTypeEnum_default.textNode || this[start2].node[nodeType] === NodeTypeEnum_default.processingInstructionNode || this[start2].node[nodeType] === NodeTypeEnum_default.commentNode)) {
      this[start2].node.replaceData(startOffset, endOffset - startOffset, "");
      return;
    }
    const nodesToRemove = [];
    let currentNode = this[start2].node;
    const endNode = NodeUtility.nextDescendantNode(this[end2].node);
    while (currentNode && currentNode !== endNode) {
      if (RangeUtility.isContained(currentNode, this) && !RangeUtility.isContained(currentNode[parentNode], this)) {
        nodesToRemove.push(currentNode);
      }
      currentNode = NodeUtility.following(currentNode);
    }
    let newNode;
    let newOffset;
    if (NodeUtility.isInclusiveAncestor(this[start2].node, this[end2].node)) {
      newNode = this[start2].node;
      newOffset = startOffset;
    } else {
      let referenceNode = this[start2].node;
      while (referenceNode && !NodeUtility.isInclusiveAncestor(referenceNode[parentNode], this[end2].node)) {
        referenceNode = referenceNode[parentNode];
      }
      newNode = referenceNode[parentNode];
      newOffset = referenceNode[parentNode][childNodes].indexOf(referenceNode) + 1;
    }
    if (this[start2].node[nodeType] === NodeTypeEnum_default.textNode || this[start2].node[nodeType] === NodeTypeEnum_default.processingInstructionNode || this[start2].node[nodeType] === NodeTypeEnum_default.commentNode) {
      this[start2].node.replaceData(this.startOffset, NodeUtility.getNodeLength(this[start2].node) - this.startOffset, "");
    }
    for (const node2 of nodesToRemove) {
      const parent = node2[parentNode];
      parent.removeChild(node2);
    }
    if (this[end2].node[nodeType] === NodeTypeEnum_default.textNode || this[end2].node[nodeType] === NodeTypeEnum_default.processingInstructionNode || this[end2].node[nodeType] === NodeTypeEnum_default.commentNode) {
      this[end2].node.replaceData(0, endOffset, "");
    }
    this[start2].node = newNode;
    this[start2].offset = newOffset;
    this[end2].node = newNode;
    this[end2].offset = newOffset;
  }
  detach() {
  }
  extractContents() {
    const fragment = this[ownerDocument].createDocumentFragment();
    const startOffset = this.startOffset;
    const endOffset = this.endOffset;
    if (this.collapsed) {
      return fragment;
    }
    if (this[start2].node === this[end2].node && (this[start2].node[nodeType] === NodeTypeEnum_default.textNode || this[start2].node[nodeType] === NodeTypeEnum_default.processingInstructionNode || this[start2].node[nodeType] === NodeTypeEnum_default.commentNode)) {
      const clone = this[start2].node.cloneNode(false);
      clone[data] = clone.substringData(startOffset, endOffset - startOffset);
      fragment.appendChild(clone);
      this[start2].node.replaceData(startOffset, endOffset - startOffset, "");
      return fragment;
    }
    let commonAncestor = this[start2].node;
    while (!NodeUtility.isInclusiveAncestor(commonAncestor, this[end2].node)) {
      commonAncestor = commonAncestor[parentNode];
    }
    let firstPartialContainedChild = null;
    if (!NodeUtility.isInclusiveAncestor(this[start2].node, this[end2].node)) {
      let candidate = commonAncestor.firstChild;
      while (!firstPartialContainedChild) {
        if (RangeUtility.isPartiallyContained(candidate, this)) {
          firstPartialContainedChild = candidate;
        }
        candidate = candidate.nextSibling;
      }
    }
    let lastPartiallyContainedChild = null;
    if (!NodeUtility.isInclusiveAncestor(this[end2].node, this[start2].node)) {
      let candidate = commonAncestor.lastChild;
      while (!lastPartiallyContainedChild) {
        if (RangeUtility.isPartiallyContained(candidate, this)) {
          lastPartiallyContainedChild = candidate;
        }
        candidate = candidate.previousSibling;
      }
    }
    const containedChildren = [];
    for (const node2 of commonAncestor[childNodes]) {
      if (RangeUtility.isContained(node2, this)) {
        if (node2[nodeType] === NodeTypeEnum_default.documentTypeNode) {
          throw new DOMException("Invalid document type element.", DOMExceptionNameEnum_default.hierarchyRequestError);
        }
        containedChildren.push(node2);
      }
    }
    let newNode;
    let newOffset;
    if (NodeUtility.isInclusiveAncestor(this[start2].node, this[end2].node)) {
      newNode = this[start2].node;
      newOffset = startOffset;
    } else {
      let referenceNode = this[start2].node;
      while (referenceNode && !NodeUtility.isInclusiveAncestor(referenceNode[parentNode], this[end2].node)) {
        referenceNode = referenceNode[parentNode];
      }
      newNode = referenceNode[parentNode];
      newOffset = referenceNode[parentNode][childNodes].indexOf(referenceNode) + 1;
    }
    if (firstPartialContainedChild !== null && (firstPartialContainedChild[nodeType] === NodeTypeEnum_default.textNode || firstPartialContainedChild[nodeType] === NodeTypeEnum_default.processingInstructionNode || firstPartialContainedChild[nodeType] === NodeTypeEnum_default.commentNode)) {
      const clone = this[start2].node.cloneNode(false);
      clone[data] = clone.substringData(startOffset, NodeUtility.getNodeLength(this[start2].node) - startOffset);
      fragment.appendChild(clone);
      this[start2].node.replaceData(startOffset, NodeUtility.getNodeLength(this[start2].node) - startOffset, "");
    } else if (firstPartialContainedChild !== null) {
      const clone = firstPartialContainedChild.cloneNode(false);
      fragment.appendChild(clone);
      const subRange = new (__classPrivateFieldGet47(this, _Range_window, "f")).Range;
      subRange[start2].node = this[start2].node;
      subRange[start2].offset = startOffset;
      subRange[end2].node = firstPartialContainedChild;
      subRange[end2].offset = NodeUtility.getNodeLength(firstPartialContainedChild);
      const subFragment = subRange.extractContents();
      clone.appendChild(subFragment);
    }
    for (const containedChild of containedChildren) {
      fragment.appendChild(containedChild);
    }
    if (lastPartiallyContainedChild !== null && (lastPartiallyContainedChild[nodeType] === NodeTypeEnum_default.textNode || lastPartiallyContainedChild[nodeType] === NodeTypeEnum_default.processingInstructionNode || lastPartiallyContainedChild[nodeType] === NodeTypeEnum_default.commentNode)) {
      const clone = this[end2].node.cloneNode(false);
      clone[data] = clone.substringData(0, endOffset);
      fragment.appendChild(clone);
      this[end2].node.replaceData(0, endOffset, "");
    } else if (lastPartiallyContainedChild !== null) {
      const clone = lastPartiallyContainedChild.cloneNode(false);
      fragment.appendChild(clone);
      const subRange = new (__classPrivateFieldGet47(this, _Range_window, "f")).Range;
      subRange[start2].node = lastPartiallyContainedChild;
      subRange[start2].offset = 0;
      subRange[end2].node = this[end2].node;
      subRange[end2].offset = endOffset;
      const subFragment = subRange.extractContents();
      clone.appendChild(subFragment);
    }
    this[start2].node = newNode;
    this[start2].offset = newOffset;
    this[end2].node = newNode;
    this[end2].offset = newOffset;
    return fragment;
  }
  getBoundingClientRect() {
    return new DOMRect;
  }
  getClientRects() {
    return new DOMRectList;
  }
  isPointInRange(node2, offset3 = 0) {
    if (node2[ownerDocument] !== this[ownerDocument]) {
      return false;
    }
    const boundaryPoint = { node: node2, offset: offset3 };
    RangeUtility.validateBoundaryPoint(boundaryPoint);
    if (RangeUtility.compareBoundaryPointsPosition(boundaryPoint, {
      node: this[start2].node,
      offset: this.startOffset
    }) === -1 || RangeUtility.compareBoundaryPointsPosition(boundaryPoint, {
      node: this[end2].node,
      offset: this.endOffset
    }) === 1) {
      return false;
    }
    return true;
  }
  insertNode(newNode) {
    if (this[start2].node[nodeType] === NodeTypeEnum_default.processingInstructionNode || this[start2].node[nodeType] === NodeTypeEnum_default.commentNode || this[start2].node[nodeType] === NodeTypeEnum_default.textNode && !this[start2].node[parentNode] || newNode === this[start2].node) {
      throw new DOMException("Invalid start node.", DOMExceptionNameEnum_default.hierarchyRequestError);
    }
    let referenceNode = this[start2].node[nodeType] === NodeTypeEnum_default.textNode ? this[start2].node : this[start2].node[childNodes][this.startOffset] || null;
    const parent = !referenceNode ? this[start2].node : referenceNode[parentNode];
    if (this[start2].node[nodeType] === NodeTypeEnum_default.textNode) {
      referenceNode = this[start2].node.splitText(this.startOffset);
    }
    if (newNode === referenceNode) {
      referenceNode = referenceNode.nextSibling;
    }
    const nodeParent = newNode[parentNode];
    if (nodeParent) {
      nodeParent.removeChild(newNode);
    }
    let newOffset = !referenceNode ? NodeUtility.getNodeLength(parent) : referenceNode[parentNode][childNodes].indexOf(referenceNode);
    newOffset += newNode[nodeType] === NodeTypeEnum_default.documentFragmentNode ? NodeUtility.getNodeLength(newNode) : 1;
    parent.insertBefore(newNode, referenceNode);
    if (this.collapsed) {
      this[end2].node = parent;
      this[end2].offset = newOffset;
    }
  }
  intersectsNode(node2) {
    if (node2[ownerDocument] !== this[ownerDocument]) {
      return false;
    }
    const parent = node2[parentNode];
    if (!parent) {
      return true;
    }
    const offset3 = parent[childNodes].indexOf(node2);
    return RangeUtility.compareBoundaryPointsPosition({ node: parent, offset: offset3 }, { node: this[end2].node, offset: this.endOffset }) === -1 && RangeUtility.compareBoundaryPointsPosition({ node: parent, offset: offset3 + 1 }, { node: this[start2].node, offset: this.startOffset }) === 1;
  }
  selectNode(node2) {
    if (!node2[parentNode]) {
      throw new DOMException(`The given Node has no parent.`, DOMExceptionNameEnum_default.invalidNodeTypeError);
    }
    const index = node2[parentNode][childNodes].indexOf(node2);
    this[start2].node = node2[parentNode];
    this[start2].offset = index;
    this[end2].node = node2[parentNode];
    this[end2].offset = index + 1;
  }
  selectNodeContents(node2) {
    if (node2[nodeType] === NodeTypeEnum_default.documentTypeNode) {
      throw new DOMException("DocumentType Node can't be used as boundary point.", DOMExceptionNameEnum_default.invalidNodeTypeError);
    }
    this[start2].node = node2;
    this[start2].offset = 0;
    this[end2].node = node2;
    this[end2].offset = NodeUtility.getNodeLength(node2);
  }
  setEnd(node2, offset3 = 0) {
    RangeUtility.validateBoundaryPoint({ node: node2, offset: offset3 });
    const boundaryPoint = { node: node2, offset: offset3 };
    if (node2[ownerDocument] !== this[ownerDocument] || RangeUtility.compareBoundaryPointsPosition(boundaryPoint, {
      node: this[start2].node,
      offset: this.startOffset
    }) === -1) {
      this[start2].node = node2;
      this[start2].offset = offset3;
    }
    this[end2].node = node2;
    this[end2].offset = offset3;
  }
  setStart(node2, offset3 = 0) {
    RangeUtility.validateBoundaryPoint({ node: node2, offset: offset3 });
    const boundaryPoint = { node: node2, offset: offset3 };
    if (node2[ownerDocument] !== this[ownerDocument] || RangeUtility.compareBoundaryPointsPosition(boundaryPoint, {
      node: this[end2].node,
      offset: this.endOffset
    }) === 1) {
      this[end2].node = node2;
      this[end2].offset = offset3;
    }
    this[start2].node = node2;
    this[start2].offset = offset3;
  }
  setEndAfter(node2) {
    if (!node2[parentNode]) {
      throw new DOMException("The given Node has no parent.", DOMExceptionNameEnum_default.invalidNodeTypeError);
    }
    this.setEnd(node2[parentNode], node2[parentNode][childNodes].indexOf(node2) + 1);
  }
  setEndBefore(node2) {
    if (!node2[parentNode]) {
      throw new DOMException("The given Node has no parent.", DOMExceptionNameEnum_default.invalidNodeTypeError);
    }
    this.setEnd(node2[parentNode], node2[parentNode][childNodes].indexOf(node2));
  }
  setStartAfter(node2) {
    if (!node2[parentNode]) {
      throw new DOMException("The given Node has no parent.", DOMExceptionNameEnum_default.invalidNodeTypeError);
    }
    this.setStart(node2[parentNode], node2[parentNode][childNodes].indexOf(node2) + 1);
  }
  setStartBefore(node2) {
    if (!node2[parentNode]) {
      throw new DOMException("The given Node has no parent.", DOMExceptionNameEnum_default.invalidNodeTypeError);
    }
    this.setStart(node2[parentNode], node2[parentNode][childNodes].indexOf(node2));
  }
  surroundContents(newParent) {
    let node2 = this.commonAncestorContainer;
    const endNode = NodeUtility.nextDescendantNode(node2);
    while (node2 !== endNode) {
      if (node2[nodeType] !== NodeTypeEnum_default.textNode && RangeUtility.isPartiallyContained(node2, this)) {
        throw new DOMException("The Range has partially contains a non-Text node.", DOMExceptionNameEnum_default.invalidStateError);
      }
      node2 = NodeUtility.following(node2);
    }
    if (newParent[nodeType] === NodeTypeEnum_default.documentNode || newParent[nodeType] === NodeTypeEnum_default.documentTypeNode || newParent[nodeType] === NodeTypeEnum_default.documentFragmentNode) {
      throw new DOMException("Invalid element type.", DOMExceptionNameEnum_default.invalidNodeTypeError);
    }
    const fragment = this.extractContents();
    while (newParent.firstChild) {
      newParent.removeChild(newParent.firstChild);
    }
    this.insertNode(newParent);
    newParent.appendChild(fragment);
    this.selectNode(newParent);
  }
  toString() {
    const startOffset = this.startOffset;
    const endOffset = this.endOffset;
    let string = "";
    if (this[start2].node === this[end2].node && this[start2].node[nodeType] === NodeTypeEnum_default.textNode) {
      return this[start2].node.data.slice(startOffset, endOffset);
    }
    if (this[start2].node[nodeType] === NodeTypeEnum_default.textNode) {
      string += this[start2].node.data.slice(startOffset);
    }
    const endNode = NodeUtility.nextDescendantNode(this[end2].node);
    let currentNode = this[start2].node;
    while (currentNode && currentNode !== endNode) {
      if (currentNode[nodeType] === NodeTypeEnum_default.textNode && RangeUtility.isContained(currentNode, this)) {
        string += currentNode.data;
      }
      currentNode = NodeUtility.following(currentNode);
    }
    if (this[end2].node[nodeType] === NodeTypeEnum_default.textNode) {
      string += this[end2].node.data.slice(0, endOffset);
    }
    return string;
  }
}
_Range_window = new WeakMap, _a45 = start2, _b26 = end2, ownerDocument;
Range.END_TO_END = RangeHowEnum_default.endToEnd;
Range.END_TO_START = RangeHowEnum_default.endToStart;
Range.START_TO_END = RangeHowEnum_default.startToEnd;
Range.START_TO_START = RangeHowEnum_default.startToStart;
var Range_default = Range;

// node_modules/happy-dom-without-node/lib/window/BrowserWindow.js
var __classPrivateFieldSet42 = function(receiver, state, value2, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
};
var __classPrivateFieldGet48 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _BrowserWindow_instances;
var _a46;
var _BrowserWindow_browserFrame;
var _BrowserWindow_innerWidth;
var _BrowserWindow_innerHeight;
var _BrowserWindow_outerWidth;
var _BrowserWindow_outerHeight;
var _BrowserWindow_devicePixelRatio;
var _BrowserWindow_zeroTimeouts;
var _BrowserWindow_bindToThisScope;
var _b27;
var _c22;
var _d15;
var _e13;
var TIMER2 = {
  setTimeout: globalThis.setTimeout.bind(globalThis),
  clearTimeout: globalThis.clearTimeout.bind(globalThis),
  setInterval: globalThis.setInterval.bind(globalThis),
  clearInterval: globalThis.clearInterval.bind(globalThis),
  queueMicrotask: globalThis.queueMicrotask.bind(globalThis),
  setImmediate: globalThis.setTimeout.bind(globalThis),
  clearImmediate: globalThis.clearTimeout.bind(globalThis)
};
var IS_NODE_JS_TIMEOUT_ENVIRONMENT = setTimeout.toString().includes("new Timeout");

class Timeout {
  constructor(callback) {
    this.callback = callback;
  }
}

class BrowserWindow2 extends EventTarget_default {
  constructor(browserFrame, options3) {
    var _f11;
    super();
    _BrowserWindow_instances.add(this);
    this.Node = Node_default;
    this.Attr = Attr_default;
    this.SVGSVGElement = SVGSVGElement;
    this.SVGElement = SVGElement_default;
    this.SVGGraphicsElement = SVGGraphicsElement;
    this.ShadowRoot = ShadowRoot2;
    this.ProcessingInstruction = ProcessingInstruction_default;
    this.Element = Element_default;
    this.CharacterData = CharacterData;
    this.DocumentType = DocumentType;
    this.HTMLAnchorElement = HTMLAnchorElement_default;
    this.HTMLButtonElement = HTMLButtonElement_default;
    this.HTMLOptGroupElement = HTMLOptGroupElement;
    this.HTMLOptionElement = HTMLOptionElement;
    this.HTMLElement = HTMLElement2;
    this.HTMLUnknownElement = HTMLUnknownElement;
    this.HTMLTemplateElement = HTMLTemplateElement;
    this.HTMLInputElement = HTMLInputElement_default;
    this.HTMLSelectElement = HTMLSelectElement_default;
    this.HTMLTextAreaElement = HTMLTextAreaElement;
    this.HTMLImageElement = HTMLImageElement;
    this.HTMLStyleElement = HTMLStyleElement;
    this.HTMLLabelElement = HTMLLabelElement;
    this.HTMLSlotElement = HTMLSlotElement;
    this.HTMLMetaElement = HTMLMetaElement;
    this.HTMLMediaElement = HTMLMediaElement;
    this.HTMLAudioElement = HTMLAudioElement;
    this.HTMLVideoElement = HTMLVideoElement;
    this.HTMLBaseElement = HTMLBaseElement;
    this.HTMLDialogElement = HTMLDialogElement_default;
    this.HTMLTimeElement = HTMLTimeElement;
    this.HTMLHeadElement = HTMLElement2;
    this.HTMLTitleElement = HTMLElement2;
    this.HTMLBodyElement = HTMLElement2;
    this.HTMLHeadingElement = HTMLElement2;
    this.HTMLParagraphElement = HTMLElement2;
    this.HTMLHRElement = HTMLElement2;
    this.HTMLPreElement = HTMLElement2;
    this.HTMLUListElement = HTMLElement2;
    this.HTMLOListElement = HTMLElement2;
    this.HTMLLElement = HTMLElement2;
    this.HTMLMenuElement = HTMLElement2;
    this.HTMLDListElement = HTMLElement2;
    this.HTMLDivElement = HTMLElement2;
    this.HTMLAreaElement = HTMLElement2;
    this.HTMLBRElement = HTMLElement2;
    this.HTMLCanvasElement = HTMLElement2;
    this.HTMLDataElement = HTMLElement2;
    this.HTMLDataListElement = HTMLElement2;
    this.HTMLDetailsElement = HTMLElement2;
    this.HTMLDirectoryElement = HTMLElement2;
    this.HTMLFieldSetElement = HTMLElement2;
    this.HTMLFontElement = HTMLElement2;
    this.HTMLHtmlElement = HTMLElement2;
    this.HTMLLegendElement = HTMLElement2;
    this.HTMLMapElement = HTMLElement2;
    this.HTMLMarqueeElement = HTMLElement2;
    this.HTMLMeterElement = HTMLElement2;
    this.HTMLModElement = HTMLElement2;
    this.HTMLOutputElement = HTMLElement2;
    this.HTMLPictureElement = HTMLElement2;
    this.HTMLProgressElement = HTMLElement2;
    this.HTMLQuoteElement = HTMLElement2;
    this.HTMLSourceElement = HTMLElement2;
    this.HTMLSpanElement = HTMLElement2;
    this.HTMLTableCaptionElement = HTMLElement2;
    this.HTMLTableCellElement = HTMLElement2;
    this.HTMLTableColElement = HTMLElement2;
    this.HTMLTableElement = HTMLElement2;
    this.HTMLTableRowElement = HTMLElement2;
    this.HTMLTableSectionElement = HTMLElement2;
    this.HTMLFrameElement = HTMLElement2;
    this.HTMLFrameSetElement = HTMLElement2;
    this.HTMLEmbedElement = HTMLElement2;
    this.HTMLObjectElement = HTMLElement2;
    this.HTMLParamElement = HTMLElement2;
    this.HTMLTrackElement = HTMLElement2;
    this.Event = Event_default;
    this.UIEvent = UIEvent_default;
    this.CustomEvent = CustomEvent;
    this.AnimationEvent = AnimationEvent;
    this.KeyboardEvent = KeyboardEvent_default;
    this.MessageEvent = MessageEvent;
    this.MouseEvent = MouseEvent;
    this.PointerEvent = PointerEvent;
    this.FocusEvent = FocusEvent;
    this.WheelEvent = WheelEvent_default;
    this.InputEvent = InputEvent;
    this.ErrorEvent = ErrorEvent;
    this.StorageEvent = StorageEvent;
    this.SubmitEvent = SubmitEvent;
    this.ProgressEvent = ProgressEvent;
    this.MediaQueryListEvent = MediaQueryListEvent;
    this.HashChangeEvent = HashChangeEvent;
    this.ClipboardEvent = ClipboardEvent;
    this.TouchEvent = TouchEvent;
    this.Touch = Touch;
    this.AudioProcessingEvent = Event_default;
    this.BeforeInputEvent = Event_default;
    this.BeforeUnloadEvent = Event_default;
    this.BlobEvent = Event_default;
    this.CloseEvent = Event_default;
    this.CompositionEvent = Event_default;
    this.CSSFontFaceLoadEvent = Event_default;
    this.DeviceLightEvent = Event_default;
    this.DeviceMotionEvent = Event_default;
    this.DeviceOrientationEvent = Event_default;
    this.DeviceProximityEvent = Event_default;
    this.DOMTransactionEvent = Event_default;
    this.DragEvent = Event_default;
    this.EditingBeforeInputEvent = Event_default;
    this.FetchEvent = Event_default;
    this.GamepadEvent = Event_default;
    this.IDBVersionChangeEvent = Event_default;
    this.MediaStreamEvent = Event_default;
    this.MutationEvent = Event_default;
    this.OfflineAudioCompletionEvent = Event_default;
    this.OverconstrainedError = Event_default;
    this.PageTransitionEvent = Event_default;
    this.PaymentRequestUpdateEvent = Event_default;
    this.PopStateEvent = Event_default;
    this.RelatedEvent = Event_default;
    this.RTCDataChannelEvent = Event_default;
    this.RTCIdentityErrorEvent = Event_default;
    this.RTCIdentityEvent = Event_default;
    this.RTCPeerConnectionIceEvent = Event_default;
    this.SensorEvent = Event_default;
    this.SVGEvent = Event_default;
    this.SVGZoomEvent = Event_default;
    this.TimeEvent = Event_default;
    this.TrackEvent = Event_default;
    this.TransitionEvent = Event_default;
    this.UserProximityEvent = Event_default;
    this.WebGLContextEvent = Event_default;
    this.TextEvent = Event_default;
    this.NamedNodeMap = NamedNodeMap;
    this.NodeFilter = NodeFilter_default;
    this.NodeIterator = NodeIterator_default;
    this.TreeWalker = TreeWalker;
    this.MutationObserver = MutationObserver_default;
    this.MutationRecord = MutationRecord;
    this.CSSStyleDeclaration = CSSStyleDeclaration;
    this.EventTarget = EventTarget_default;
    this.MessagePort = MessagePort;
    this.DataTransfer = DataTransfer;
    this.DataTransferItem = DataTransferItem_default;
    this.DataTransferItemList = DataTransferItemList;
    this.URL = URL3;
    this.Location = Location;
    this.CustomElementRegistry = CustomElementRegistry_default;
    this.Window = this.constructor;
    this.XMLSerializer = XMLSerializer;
    this.ResizeObserver = ResizeObserver;
    this.CSSStyleSheet = CSSStyleSheet_default;
    this.Blob = Blob_default;
    this.File = File;
    this.DOMException = DOMException;
    this.History = History_default;
    this.Screen = Screen;
    this.Storage = Storage_default;
    this.URLSearchParams = $URLSearchParams;
    this.HTMLCollection = HTMLCollection;
    this.HTMLFormControlsCollection = HTMLFormControlsCollection;
    this.NodeList = NodeList;
    this.CSSUnitValue = CSSUnitValue;
    this.CSSRule = CSSRule_default;
    this.CSSContainerRule = CSSContainerRule;
    this.CSSFontFaceRule = CSSFontFaceRule_default;
    this.CSSKeyframeRule = CSSKeyframeRule_default;
    this.CSSKeyframesRule = CSSKeyframesRule;
    this.CSSMediaRule = CSSMediaRule;
    this.CSSStyleRule = CSSStyleRule_default;
    this.CSSSupportsRule = CSSSupportsRule;
    this.Selection = Selection_default;
    this.Navigator = Navigator_default;
    this.MimeType = MimeType;
    this.MimeTypeArray = MimeTypeArray;
    this.Plugin = Plugin;
    this.PluginArray = PluginArray;
    this.FileList = FileList;
    this.DOMRect = DOMRect;
    this.DOMRectReadOnly = DOMRectReadOnly_default;
    this.RadioNodeList = RadioNodeList;
    this.ValidityState = ValidityState2;
    this.Headers = NotSupported8;
    this.XMLHttpRequestUpload = NotSupported5;
    this.XMLHttpRequestEventTarget = NotSupported6;
    this.ReadableStream = ReadableStream;
    this.WritableStream = stream_default.Writable;
    this.TransformStream = stream_default.Transform;
    this.AbortController = NotSupported2;
    this.AbortSignal = NotSupported7;
    this.FormData = FormData_default;
    this.Permissions = Permissions_default;
    this.PermissionStatus = PermissionStatus;
    this.Clipboard = Clipboard_default;
    this.ClipboardItem = ClipboardItem_default;
    this.onload = null;
    this.onerror = null;
    this.self = this;
    this.top = this;
    this.parent = this;
    this.window = this;
    this.globalThis = this;
    this.performance = performance;
    this.screenLeft = 0;
    this.screenTop = 0;
    this.screenX = 0;
    this.screenY = 0;
    this.crypto = webcrypto;
    this.closed = false;
    this.name = "";
    this.Buffer = Buffer;
    this[_b27] = {};
    this[_c22] = [];
    this[_d15] = new DocumentReadyStateManager(this);
    this[_e13] = null;
    _BrowserWindow_browserFrame.set(this, undefined);
    _BrowserWindow_innerWidth.set(this, null);
    _BrowserWindow_innerHeight.set(this, null);
    _BrowserWindow_outerWidth.set(this, null);
    _BrowserWindow_outerHeight.set(this, null);
    _BrowserWindow_devicePixelRatio.set(this, null);
    _BrowserWindow_zeroTimeouts.set(this, null);
    const asyncTaskManager2 = browserFrame[asyncTaskManager];
    __classPrivateFieldSet42(this, _BrowserWindow_browserFrame, browserFrame, "f");
    this.customElements = new CustomElementRegistry_default(this);
    this[navigator2] = new Navigator_default(this);
    this[history] = new History_default;
    this[screen] = new Screen;
    this[sessionStorage] = StorageFactory.createStorage();
    this[localStorage] = StorageFactory.createStorage();
    this[location] = new Location(__classPrivateFieldGet48(this, _BrowserWindow_browserFrame, "f"), options3?.url ?? "about:blank");
    this[asyncTaskManager] = asyncTaskManager2;
    this.console = browserFrame.page.console;
    WindowBrowserSettingsReader_default.setSettings(this, __classPrivateFieldGet48(this, _BrowserWindow_browserFrame, "f").page.context.browser.settings);
    const window3 = this;
    this[setupVMContext]();

    class Request2 extends NotSupported11 {
      constructor(input, init) {
        super({ window: window3, asyncTaskManager: asyncTaskManager2 }, input, init);
      }
    }

    class Response2 extends NotSupported12 {
      constructor(body, init) {
        super({ window: window3, browserFrame }, body, init);
      }
    }
    _f11 = window2;
    Response2[_f11] = window3;

    class XMLHttpRequest2 extends NotSupported9 {
      constructor() {
        super({ window: window3, browserFrame });
      }
    }

    class FileReader3 extends FileReader_default {
      constructor() {
        super(window3);
      }
    }

    class DOMParser3 extends DOMParser_default {
      constructor() {
        super(window3);
      }
    }

    class Range3 extends Range_default {
      constructor() {
        super(window3);
      }
    }

    class HTMLScriptElement3 extends HTMLScriptElement {
      constructor() {
        super(browserFrame);
      }
    }

    class HTMLLinkElement3 extends HTMLLinkElement {
      constructor() {
        super(browserFrame);
      }
    }

    class HTMLIFrameElement3 extends HTMLIFrameElement {
      constructor() {
        super(browserFrame);
      }
    }

    class HTMLFormElement3 extends HTMLFormElement_default {
      constructor() {
        super(browserFrame);
      }
    }

    class Document6 extends Document_default {
      constructor() {
        super({ window: window3, browserFrame });
      }
    }

    class HTMLDocument3 extends HTMLDocument {
      constructor() {
        super({ window: window3, browserFrame });
      }
    }

    class XMLDocument3 extends XMLDocument {
      constructor() {
        super({ window: window3, browserFrame });
      }
    }

    class SVGDocument3 extends SVGDocument {
      constructor() {
        super({ window: window3, browserFrame });
      }
    }

    class Audio3 extends Audio {
    }

    class Image3 extends Image {
    }

    class DocumentFragment4 extends DocumentFragment {
    }

    class Text3 extends Text {
    }

    class Comment3 extends Comment {
    }
    this.Response = Response2;
    this.Request = Request2;
    this.Image = Image3;
    this.Text = Text3;
    this.Comment = Comment3;
    this.DocumentFragment = DocumentFragment4;
    this.FileReader = FileReader3;
    this.DOMParser = DOMParser3;
    this.XMLHttpRequest = XMLHttpRequest2;
    this.Range = Range3;
    this.Audio = Audio3;
    this.HTMLScriptElement = HTMLScriptElement3;
    this.HTMLLinkElement = HTMLLinkElement3;
    this.HTMLIFrameElement = HTMLIFrameElement3;
    this.HTMLFormElement = HTMLFormElement3;
    this.Document = Document6;
    this.HTMLDocument = HTMLDocument3;
    this.XMLDocument = XMLDocument3;
    this.SVGDocument = SVGDocument3;
    this.Document[ownerDocument] = null;
    this.HTMLDocument[ownerDocument] = null;
    this.XMLDocument[ownerDocument] = null;
    this.SVGDocument[ownerDocument] = null;
    this.document = new HTMLDocument3;
    this.document[defaultView] = this;
    this.Audio[ownerDocument] = this.document;
    this.Image[ownerDocument] = this.document;
    this.DocumentFragment[ownerDocument] = this.document;
    this.Text[ownerDocument] = this.document;
    this.Comment[ownerDocument] = this.document;
    this[readyStateManager].waitUntilComplete().then(() => {
      this.document[readyState] = DocumentReadyStateEnum_default.complete;
      this.document.dispatchEvent(new Event_default("readystatechange"));
      this.document.dispatchEvent(new Event_default("load", { bubbles: true }));
    });
    __classPrivateFieldGet48(this, _BrowserWindow_instances, "m", _BrowserWindow_bindToThisScope).call(this);
  }
  get location() {
    return this[location];
  }
  set location(href) {
    this[location].href = href;
  }
  get history() {
    return this[history];
  }
  get navigator() {
    return this[navigator2];
  }
  get screen() {
    return this[screen];
  }
  get sessionStorage() {
    return this[sessionStorage];
  }
  get localStorage() {
    return this[localStorage];
  }
  get opener() {
    return __classPrivateFieldGet48(this, _BrowserWindow_browserFrame, "f")[openerWindow];
  }
  get scrollX() {
    return this.document?.documentElement?.scrollLeft ?? 0;
  }
  get pageXOffset() {
    return this.scrollX;
  }
  get scrollY() {
    return this.document?.documentElement?.scrollTop ?? 0;
  }
  get pageYOffset() {
    return this.scrollY;
  }
  get CSS() {
    return new CSS;
  }
  get innerWidth() {
    if (__classPrivateFieldGet48(this, _BrowserWindow_innerWidth, "f") === null) {
      return __classPrivateFieldGet48(this, _BrowserWindow_browserFrame, "f").page.viewport.width;
    }
    return __classPrivateFieldGet48(this, _BrowserWindow_innerWidth, "f");
  }
  set innerWidth(value2) {
    __classPrivateFieldSet42(this, _BrowserWindow_innerWidth, value2, "f");
  }
  get innerHeight() {
    if (__classPrivateFieldGet48(this, _BrowserWindow_innerHeight, "f") === null) {
      return __classPrivateFieldGet48(this, _BrowserWindow_browserFrame, "f").page.viewport.height;
    }
    return __classPrivateFieldGet48(this, _BrowserWindow_innerHeight, "f");
  }
  set innerHeight(value2) {
    __classPrivateFieldSet42(this, _BrowserWindow_innerHeight, value2, "f");
  }
  get outerWidth() {
    if (__classPrivateFieldGet48(this, _BrowserWindow_outerWidth, "f") === null) {
      return __classPrivateFieldGet48(this, _BrowserWindow_browserFrame, "f").page.viewport.width;
    }
    return __classPrivateFieldGet48(this, _BrowserWindow_outerWidth, "f");
  }
  set outerWidth(value2) {
    __classPrivateFieldSet42(this, _BrowserWindow_outerWidth, value2, "f");
  }
  get outerHeight() {
    if (__classPrivateFieldGet48(this, _BrowserWindow_outerHeight, "f") === null) {
      return __classPrivateFieldGet48(this, _BrowserWindow_browserFrame, "f").page.viewport.height;
    }
    return __classPrivateFieldGet48(this, _BrowserWindow_outerHeight, "f");
  }
  set outerHeight(value2) {
    __classPrivateFieldSet42(this, _BrowserWindow_outerHeight, value2, "f");
  }
  get devicePixelRatio() {
    if (__classPrivateFieldGet48(this, _BrowserWindow_devicePixelRatio, "f") === null) {
      return __classPrivateFieldGet48(this, _BrowserWindow_browserFrame, "f").page.viewport.devicePixelRatio;
    }
    return __classPrivateFieldGet48(this, _BrowserWindow_devicePixelRatio, "f");
  }
  set devicePixelRatio(value2) {
    __classPrivateFieldSet42(this, _BrowserWindow_devicePixelRatio, value2, "f");
  }
  getComputedStyle(element) {
    element[computedStyle] = element[computedStyle] || new CSSStyleDeclaration(element, true);
    return element[computedStyle];
  }
  getSelection() {
    return this.document.getSelection();
  }
  scroll(x2, y2) {
    if (typeof x2 === "object") {
      if (x2.behavior === "smooth") {
        this.setTimeout(() => {
          if (x2.top !== undefined) {
            this.document.documentElement.scrollTop = x2.top;
          }
          if (x2.left !== undefined) {
            this.document.documentElement.scrollLeft = x2.left;
          }
        });
      } else {
        if (x2.top !== undefined) {
          this.document.documentElement.scrollTop = x2.top;
        }
        if (x2.left !== undefined) {
          this.document.documentElement.scrollLeft = x2.left;
        }
      }
    } else if (x2 !== undefined && y2 !== undefined) {
      this.document.documentElement.scrollLeft = x2;
      this.document.documentElement.scrollTop = y2;
    }
  }
  scrollTo(x2, y2) {
    this.scroll(x2, y2);
  }
  blur() {
  }
  focus() {
  }
  open(url10, target2, features) {
    return WindowPageOpenUtility.openPage(__classPrivateFieldGet48(this, _BrowserWindow_browserFrame, "f"), {
      url: url10,
      target: target2,
      features
    });
  }
  close() {
    if (__classPrivateFieldGet48(this, _BrowserWindow_browserFrame, "f").page?.mainFrame === __classPrivateFieldGet48(this, _BrowserWindow_browserFrame, "f")) {
      this[destroy]();
      __classPrivateFieldGet48(this, _BrowserWindow_browserFrame, "f").page.close();
    }
  }
  matchMedia(mediaQueryString) {
    return new MediaQueryList_default({ ownerWindow: this, media: mediaQueryString });
  }
  setTimeout(callback, delay = 0, ...args) {
    if (!delay) {
      if (!__classPrivateFieldGet48(this, _BrowserWindow_zeroTimeouts, "f")) {
        const settings2 = __classPrivateFieldGet48(this, _BrowserWindow_browserFrame, "f").page?.context?.browser?.settings;
        const useTryCatch2 = !settings2 || !settings2.disableErrorCapturing || settings2.errorCapture === BrowserErrorCaptureEnum_default.tryAndCatch;
        const id2 = TIMER2.setTimeout(() => {
          const zeroTimeouts = __classPrivateFieldGet48(this, _BrowserWindow_zeroTimeouts, "f");
          __classPrivateFieldSet42(this, _BrowserWindow_zeroTimeouts, null, "f");
          for (const zeroTimeout2 of zeroTimeouts) {
            if (useTryCatch2) {
              WindowErrorUtility.captureError(this, () => zeroTimeout2.callback());
            } else {
              zeroTimeout2.callback();
            }
          }
          __classPrivateFieldGet48(this, _BrowserWindow_browserFrame, "f")[asyncTaskManager].endTimer(id2);
        });
        __classPrivateFieldSet42(this, _BrowserWindow_zeroTimeouts, [], "f");
        __classPrivateFieldGet48(this, _BrowserWindow_browserFrame, "f")[asyncTaskManager].startTimer(id2);
      }
      const zeroTimeout = new Timeout(() => callback(...args));
      __classPrivateFieldGet48(this, _BrowserWindow_zeroTimeouts, "f").push(zeroTimeout);
      return zeroTimeout;
    }
    const settings = __classPrivateFieldGet48(this, _BrowserWindow_browserFrame, "f").page?.context?.browser?.settings;
    const useTryCatch = !settings || !settings.disableErrorCapturing || settings.errorCapture === BrowserErrorCaptureEnum_default.tryAndCatch;
    const id = TIMER2.setTimeout(() => {
      if (useTryCatch) {
        WindowErrorUtility.captureError(this, () => callback(...args));
      } else {
        callback(...args);
      }
      __classPrivateFieldGet48(this, _BrowserWindow_browserFrame, "f")[asyncTaskManager].endTimer(id);
    }, settings?.timer.maxTimeout !== -1 && delay && delay > settings?.timer.maxTimeout ? settings?.timer.maxTimeout : delay);
    __classPrivateFieldGet48(this, _BrowserWindow_browserFrame, "f")[asyncTaskManager].startTimer(id);
    return id;
  }
  clearTimeout(id) {
    if (id && id instanceof Timeout) {
      const zeroTimeouts = __classPrivateFieldGet48(this, _BrowserWindow_zeroTimeouts, "f") || [];
      const index = zeroTimeouts.indexOf(id);
      if (index !== -1) {
        zeroTimeouts.splice(index, 1);
      }
      return;
    }
    if (IS_NODE_JS_TIMEOUT_ENVIRONMENT && (!id || id.constructor.name !== "Timeout")) {
      return;
    }
    TIMER2.clearTimeout(id);
    __classPrivateFieldGet48(this, _BrowserWindow_browserFrame, "f")[asyncTaskManager].endTimer(id);
  }
  setInterval(callback, delay = 0, ...args) {
    const settings = __classPrivateFieldGet48(this, _BrowserWindow_browserFrame, "f").page?.context?.browser?.settings;
    const useTryCatch = !settings || !settings.disableErrorCapturing || settings.errorCapture === BrowserErrorCaptureEnum_default.tryAndCatch;
    let iterations = 0;
    const id = TIMER2.setInterval(() => {
      if (useTryCatch) {
        WindowErrorUtility.captureError(this, () => callback(...args), () => this.clearInterval(id));
      } else {
        callback(...args);
      }
      if (settings?.timer.maxIntervalIterations !== -1) {
        if (iterations >= settings?.timer.maxIntervalIterations) {
          this.clearInterval(id);
        }
        iterations++;
      }
    }, settings?.timer.maxIntervalTime !== -1 && delay && delay > settings?.timer.maxIntervalTime ? settings?.timer.maxIntervalTime : delay);
    __classPrivateFieldGet48(this, _BrowserWindow_browserFrame, "f")[asyncTaskManager].startTimer(id);
    return id;
  }
  clearInterval(id) {
    if (IS_NODE_JS_TIMEOUT_ENVIRONMENT && (!id || id.constructor.name !== "Timeout")) {
      return;
    }
    TIMER2.clearInterval(id);
    __classPrivateFieldGet48(this, _BrowserWindow_browserFrame, "f")[asyncTaskManager].endTimer(id);
  }
  requestAnimationFrame(callback) {
    const settings = __classPrivateFieldGet48(this, _BrowserWindow_browserFrame, "f").page?.context?.browser?.settings;
    const useTryCatch = !settings || !settings.disableErrorCapturing || settings.errorCapture === BrowserErrorCaptureEnum_default.tryAndCatch;
    const id = TIMER2.setImmediate(() => {
      if (useTryCatch) {
        WindowErrorUtility.captureError(this, () => callback(this.performance.now()));
      } else {
        callback(this.performance.now());
      }
      __classPrivateFieldGet48(this, _BrowserWindow_browserFrame, "f")[asyncTaskManager].endImmediate(id);
    });
    __classPrivateFieldGet48(this, _BrowserWindow_browserFrame, "f")[asyncTaskManager].startImmediate(id);
    return id;
  }
  cancelAnimationFrame(id) {
    if (IS_NODE_JS_TIMEOUT_ENVIRONMENT && (!id || id.constructor.name !== "Immediate")) {
      return;
    }
    TIMER2.clearImmediate(id);
    __classPrivateFieldGet48(this, _BrowserWindow_browserFrame, "f")[asyncTaskManager].endImmediate(id);
  }
  queueMicrotask(callback) {
    let isAborted = false;
    const taskId = __classPrivateFieldGet48(this, _BrowserWindow_browserFrame, "f")[asyncTaskManager].startTask(() => isAborted = true);
    const settings = __classPrivateFieldGet48(this, _BrowserWindow_browserFrame, "f").page?.context?.browser?.settings;
    const useTryCatch = !settings || !settings.disableErrorCapturing || settings.errorCapture === BrowserErrorCaptureEnum_default.tryAndCatch;
    TIMER2.queueMicrotask(() => {
      if (!isAborted) {
        if (useTryCatch) {
          WindowErrorUtility.captureError(this, callback);
        } else {
          callback();
        }
        __classPrivateFieldGet48(this, _BrowserWindow_browserFrame, "f")[asyncTaskManager].endTask(taskId);
      }
    });
  }
  async fetch(url10, init) {
    return await new NotSupported4({
      browserFrame: __classPrivateFieldGet48(this, _BrowserWindow_browserFrame, "f"),
      window: this,
      url: url10,
      init
    }).send();
  }
  btoa(data2) {
    return Base64.btoa(data2);
  }
  atob(data2) {
    return Base64.atob(data2);
  }
  postMessage(message, targetOrigin = "*", _transfer) {
    if (targetOrigin && targetOrigin !== "*" && this.location.origin !== targetOrigin) {
      throw new DOMException(`Failed to execute 'postMessage' on 'Window': The target origin provided ('${targetOrigin}') does not match the recipient window\'s origin ('${this.location.origin}').`, DOMExceptionNameEnum_default.securityError);
    }
    try {
      JSON.stringify(message);
    } catch (error4) {
      throw new DOMException(`Failed to execute 'postMessage' on 'Window': The provided message cannot be serialized.`, DOMExceptionNameEnum_default.invalidStateError);
    }
    this.setTimeout(() => this.dispatchEvent(new MessageEvent("message", {
      data: message,
      origin: __classPrivateFieldGet48(this, _BrowserWindow_browserFrame, "f").parentFrame ? __classPrivateFieldGet48(this, _BrowserWindow_browserFrame, "f").parentFrame.window.location.origin : __classPrivateFieldGet48(this, _BrowserWindow_browserFrame, "f").window.location.origin,
      source: __classPrivateFieldGet48(this, _BrowserWindow_browserFrame, "f").parentFrame ? __classPrivateFieldGet48(this, _BrowserWindow_browserFrame, "f").parentFrame.window : __classPrivateFieldGet48(this, _BrowserWindow_browserFrame, "f").window,
      lastEventId: ""
    })));
  }
  resizeTo(width2, height2) {
    if (!width2 || !height2) {
      throw new DOMException(`Failed to execute 'resizeTo' on 'Window': 2 arguments required, but only ${arguments.length} present.`);
    }
    if (__classPrivateFieldGet48(this, _BrowserWindow_browserFrame, "f")[popup]) {
      __classPrivateFieldGet48(this, _BrowserWindow_browserFrame, "f").page.setViewport({ width: width2, height: height2 });
    }
  }
  resizeBy(width2, height2) {
    if (!width2 || !height2) {
      throw new DOMException(`Failed to execute 'resizeBy' on 'Window': 2 arguments required, but only ${arguments.length} present.`);
    }
    if (__classPrivateFieldGet48(this, _BrowserWindow_browserFrame, "f")[popup]) {
      const viewport2 = __classPrivateFieldGet48(this, _BrowserWindow_browserFrame, "f").page.viewport;
      __classPrivateFieldGet48(this, _BrowserWindow_browserFrame, "f").page.setViewport({
        width: viewport2.width + width2,
        height: viewport2.height + height2
      });
    }
  }
  [(_BrowserWindow_browserFrame = new WeakMap, _BrowserWindow_innerWidth = new WeakMap, _BrowserWindow_innerHeight = new WeakMap, _BrowserWindow_outerWidth = new WeakMap, _BrowserWindow_outerHeight = new WeakMap, _BrowserWindow_devicePixelRatio = new WeakMap, _BrowserWindow_zeroTimeouts = new WeakMap, _BrowserWindow_instances = new WeakSet, _b27 = captureEventListenerCount, _c22 = mutationObservers, _d15 = readyStateManager, _e13 = asyncTaskManager, location, history, navigator2, screen, sessionStorage, localStorage, setupVMContext)]() {
    if (!vm_default.isContext(this)) {
      vm_default.createContext(this);
      VMGlobalPropertyScript_default.runInContext(this);
    }
  }
  [destroy]() {
    if (!this.Audio[ownerDocument]) {
      return;
    }
    this.closed = true;
    this[asyncTaskManager] = null;
    this.Audio[ownerDocument] = null;
    this.Image[ownerDocument] = null;
    this.DocumentFragment[ownerDocument] = null;
    this.Text[ownerDocument] = null;
    this.Comment[ownerDocument] = null;
    const mutationObservers2 = this[mutationObservers];
    for (const mutationObserver of mutationObservers2) {
      mutationObserver.disconnect();
    }
    this[mutationObservers] = [];
    for (const node2 of this.document[childNodes].slice()) {
      if (node2.disconnectedCallback) {
        delete node2.disconnectedCallback;
      }
      this.document.removeChild(node2);
    }
    if (this.customElements[destroy]) {
      this.customElements[destroy]();
    }
    this.document[activeElement] = null;
    this.document[nextActiveElement] = null;
    this.document[currentScript] = null;
    this.document[selection] = null;
    WindowBrowserSettingsReader_default.removeSettings(this);
  }
}
_a46 = BrowserWindow2, _BrowserWindow_bindToThisScope = function _BrowserWindow_bindToThisScope2() {
  const propertyDescriptors = Object.assign(Object.getOwnPropertyDescriptors(EventTarget_default.prototype), Object.getOwnPropertyDescriptors(_a46.prototype));
  for (const key of Object.keys(propertyDescriptors)) {
    const descriptor = propertyDescriptors[key];
    if (descriptor.get || descriptor.set) {
      Object.defineProperty(this, key, {
        configurable: true,
        enumerable: true,
        get: descriptor.get?.bind(this),
        set: descriptor.set?.bind(this)
      });
    } else if (key !== "constructor" && key[0] !== "_" && key[0] === key[0].toLowerCase() && typeof this[key] === "function" && !this[key].toString().startsWith("class ")) {
      this[key] = this[key].bind(this);
    }
  }
};
var BrowserWindow_default = BrowserWindow2;

// node_modules/happy-dom-without-node/lib/browser/BrowserFrame.js
var _a47;
var _b28;
var _c23;
var _d16;
var _e14;
var _f11;
_a47 = asyncTaskManager, _b28 = exceptionObserver, _c23 = listeners, _d16 = openerFrame, _e14 = openerWindow, _f11 = popup;

// node_modules/happy-dom-without-node/lib/console/VirtualConsole.js
var __classPrivateFieldSet43 = function(receiver, state, value2, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
};
var __classPrivateFieldGet49 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _VirtualConsole_printer;
var _VirtualConsole_count;
var _VirtualConsole_time;
var _VirtualConsole_groupID;
var _VirtualConsole_groups;

class VirtualConsole {
  constructor(printer) {
    _VirtualConsole_printer.set(this, undefined);
    _VirtualConsole_count.set(this, {});
    _VirtualConsole_time.set(this, {});
    _VirtualConsole_groupID.set(this, 0);
    _VirtualConsole_groups.set(this, []);
    __classPrivateFieldSet43(this, _VirtualConsole_printer, printer, "f");
  }
  assert(assertion, ...args) {
    if (!assertion) {
      __classPrivateFieldGet49(this, _VirtualConsole_printer, "f").print({
        type: VirtualConsoleLogTypeEnum_default.assert,
        level: VirtualConsoleLogLevelEnum_default.error,
        message: ["Assertion failed:", ...args],
        group: __classPrivateFieldGet49(this, _VirtualConsole_groups, "f")[__classPrivateFieldGet49(this, _VirtualConsole_groups, "f").length - 1] || null
      });
    }
  }
  clear() {
    __classPrivateFieldGet49(this, _VirtualConsole_printer, "f").clear();
  }
  count(label = "default") {
    if (!__classPrivateFieldGet49(this, _VirtualConsole_count, "f")[label]) {
      __classPrivateFieldGet49(this, _VirtualConsole_count, "f")[label] = 0;
    }
    __classPrivateFieldGet49(this, _VirtualConsole_count, "f")[label]++;
    __classPrivateFieldGet49(this, _VirtualConsole_printer, "f").print({
      type: VirtualConsoleLogTypeEnum_default.count,
      level: VirtualConsoleLogLevelEnum_default.info,
      message: [`${label}: ${__classPrivateFieldGet49(this, _VirtualConsole_count, "f")[label]}`],
      group: __classPrivateFieldGet49(this, _VirtualConsole_groups, "f")[__classPrivateFieldGet49(this, _VirtualConsole_groups, "f").length - 1] || null
    });
  }
  countReset(label = "default") {
    delete __classPrivateFieldGet49(this, _VirtualConsole_count, "f")[label];
    __classPrivateFieldGet49(this, _VirtualConsole_printer, "f").print({
      type: VirtualConsoleLogTypeEnum_default.countReset,
      level: VirtualConsoleLogLevelEnum_default.warn,
      message: [`${label}: 0`],
      group: __classPrivateFieldGet49(this, _VirtualConsole_groups, "f")[__classPrivateFieldGet49(this, _VirtualConsole_groups, "f").length - 1] || null
    });
  }
  debug(...args) {
    __classPrivateFieldGet49(this, _VirtualConsole_printer, "f").print({
      type: VirtualConsoleLogTypeEnum_default.debug,
      level: VirtualConsoleLogLevelEnum_default.log,
      message: args,
      group: __classPrivateFieldGet49(this, _VirtualConsole_groups, "f")[__classPrivateFieldGet49(this, _VirtualConsole_groups, "f").length - 1] || null
    });
  }
  dir(data2) {
    __classPrivateFieldGet49(this, _VirtualConsole_printer, "f").print({
      type: VirtualConsoleLogTypeEnum_default.dir,
      level: VirtualConsoleLogLevelEnum_default.log,
      message: [data2],
      group: __classPrivateFieldGet49(this, _VirtualConsole_groups, "f")[__classPrivateFieldGet49(this, _VirtualConsole_groups, "f").length - 1] || null
    });
  }
  dirxml(data2) {
    __classPrivateFieldGet49(this, _VirtualConsole_printer, "f").print({
      type: VirtualConsoleLogTypeEnum_default.dirxml,
      level: VirtualConsoleLogLevelEnum_default.log,
      message: [data2],
      group: __classPrivateFieldGet49(this, _VirtualConsole_groups, "f")[__classPrivateFieldGet49(this, _VirtualConsole_groups, "f").length - 1] || null
    });
  }
  error(...args) {
    __classPrivateFieldGet49(this, _VirtualConsole_printer, "f").print({
      type: VirtualConsoleLogTypeEnum_default.error,
      level: VirtualConsoleLogLevelEnum_default.error,
      message: args,
      group: __classPrivateFieldGet49(this, _VirtualConsole_groups, "f")[__classPrivateFieldGet49(this, _VirtualConsole_groups, "f").length - 1] || null
    });
  }
  exception(...args) {
    this.error(...args);
  }
  group(label) {
    var _a48;
    __classPrivateFieldSet43(this, _VirtualConsole_groupID, (_a48 = __classPrivateFieldGet49(this, _VirtualConsole_groupID, "f"), _a48++, _a48), "f");
    const group = {
      id: __classPrivateFieldGet49(this, _VirtualConsole_groupID, "f"),
      label: label || "default",
      collapsed: false,
      parent: __classPrivateFieldGet49(this, _VirtualConsole_groups, "f")[__classPrivateFieldGet49(this, _VirtualConsole_groups, "f").length - 1] || null
    };
    __classPrivateFieldGet49(this, _VirtualConsole_groups, "f").push(group);
    __classPrivateFieldGet49(this, _VirtualConsole_printer, "f").print({
      type: VirtualConsoleLogTypeEnum_default.group,
      level: VirtualConsoleLogLevelEnum_default.log,
      message: [label || "default"],
      group
    });
  }
  groupCollapsed(label) {
    var _a48;
    __classPrivateFieldSet43(this, _VirtualConsole_groupID, (_a48 = __classPrivateFieldGet49(this, _VirtualConsole_groupID, "f"), _a48++, _a48), "f");
    const group = {
      id: __classPrivateFieldGet49(this, _VirtualConsole_groupID, "f"),
      label: label || "default",
      collapsed: true,
      parent: __classPrivateFieldGet49(this, _VirtualConsole_groups, "f")[__classPrivateFieldGet49(this, _VirtualConsole_groups, "f").length - 1] || null
    };
    __classPrivateFieldGet49(this, _VirtualConsole_groups, "f").push(group);
    __classPrivateFieldGet49(this, _VirtualConsole_printer, "f").print({
      type: VirtualConsoleLogTypeEnum_default.groupCollapsed,
      level: VirtualConsoleLogLevelEnum_default.log,
      message: [label || "default"],
      group
    });
  }
  groupEnd() {
    if (__classPrivateFieldGet49(this, _VirtualConsole_groups, "f").length === 0) {
      return;
    }
    __classPrivateFieldGet49(this, _VirtualConsole_groups, "f").pop();
  }
  info(...args) {
    __classPrivateFieldGet49(this, _VirtualConsole_printer, "f").print({
      type: VirtualConsoleLogTypeEnum_default.info,
      level: VirtualConsoleLogLevelEnum_default.info,
      message: args,
      group: __classPrivateFieldGet49(this, _VirtualConsole_groups, "f")[__classPrivateFieldGet49(this, _VirtualConsole_groups, "f").length - 1] || null
    });
  }
  log(...args) {
    __classPrivateFieldGet49(this, _VirtualConsole_printer, "f").print({
      type: VirtualConsoleLogTypeEnum_default.log,
      level: VirtualConsoleLogLevelEnum_default.log,
      message: args,
      group: __classPrivateFieldGet49(this, _VirtualConsole_groups, "f")[__classPrivateFieldGet49(this, _VirtualConsole_groups, "f").length - 1] || null
    });
  }
  profile() {
    throw new Error("Method not implemented.");
  }
  profileEnd() {
    throw new Error("Method not implemented.");
  }
  table(data2) {
    __classPrivateFieldGet49(this, _VirtualConsole_printer, "f").print({
      type: VirtualConsoleLogTypeEnum_default.table,
      level: VirtualConsoleLogLevelEnum_default.log,
      message: [data2],
      group: __classPrivateFieldGet49(this, _VirtualConsole_groups, "f")[__classPrivateFieldGet49(this, _VirtualConsole_groups, "f").length - 1] || null
    });
  }
  time(label = "default") {
    __classPrivateFieldGet49(this, _VirtualConsole_time, "f")[label] = performance.now();
  }
  timeEnd(label = "default") {
    const time = __classPrivateFieldGet49(this, _VirtualConsole_time, "f")[label];
    if (time) {
      const duration2 = performance.now() - time;
      __classPrivateFieldGet49(this, _VirtualConsole_printer, "f").print({
        type: VirtualConsoleLogTypeEnum_default.timeEnd,
        level: VirtualConsoleLogLevelEnum_default.info,
        message: [`${label}: ${duration2}ms - timer ended`],
        group: __classPrivateFieldGet49(this, _VirtualConsole_groups, "f")[__classPrivateFieldGet49(this, _VirtualConsole_groups, "f").length - 1] || null
      });
    }
  }
  timeLog(label = "default", ...args) {
    const time = __classPrivateFieldGet49(this, _VirtualConsole_time, "f")[label];
    if (time) {
      const duration2 = performance.now() - time;
      __classPrivateFieldGet49(this, _VirtualConsole_printer, "f").print({
        type: VirtualConsoleLogTypeEnum_default.timeLog,
        level: VirtualConsoleLogLevelEnum_default.info,
        message: [`${label}: ${duration2}ms`, ...args],
        group: __classPrivateFieldGet49(this, _VirtualConsole_groups, "f")[__classPrivateFieldGet49(this, _VirtualConsole_groups, "f").length - 1] || null
      });
    }
  }
  timeStamp() {
    throw new Error("Method not implemented.");
  }
  trace(...args) {
    __classPrivateFieldGet49(this, _VirtualConsole_printer, "f").print({
      type: VirtualConsoleLogTypeEnum_default.trace,
      level: VirtualConsoleLogLevelEnum_default.log,
      message: [...args, new Error("stack").stack.replace("Error: stack", "")],
      group: __classPrivateFieldGet49(this, _VirtualConsole_groups, "f")[__classPrivateFieldGet49(this, _VirtualConsole_groups, "f").length - 1] || null
    });
  }
  warn(...args) {
    __classPrivateFieldGet49(this, _VirtualConsole_printer, "f").print({
      type: VirtualConsoleLogTypeEnum_default.warn,
      level: VirtualConsoleLogLevelEnum_default.warn,
      message: args,
      group: __classPrivateFieldGet49(this, _VirtualConsole_groups, "f")[__classPrivateFieldGet49(this, _VirtualConsole_groups, "f").length - 1] || null
    });
  }
}
_VirtualConsole_printer = new WeakMap, _VirtualConsole_count = new WeakMap, _VirtualConsole_time = new WeakMap, _VirtualConsole_groupID = new WeakMap, _VirtualConsole_groups = new WeakMap;
var VirtualConsole_default = VirtualConsole;

// node_modules/happy-dom-without-node/lib/browser/utilities/BrowserPageUtility.js
class BrowserPageUtility {
  static getFrames(page) {
    return this.findFrames(page.mainFrame);
  }
  static closePage(page) {
    return new Promise((resolve3, reject) => {
      if (!page.mainFrame) {
        resolve3();
        return;
      }
      const index = page.context.pages.indexOf(page);
      if (index !== -1) {
        page.context.pages.splice(index, 1);
      }
      BrowserFrameFactory.destroyFrame(page.mainFrame).then(() => {
        page.virtualConsolePrinter = null;
        page.mainFrame = null;
        page.context = null;
        resolve3();
      }).catch((error4) => reject(error4));
    });
  }
  static findFrames(parentFrame) {
    let frames = [parentFrame];
    for (const frame of parentFrame.childFrames) {
      frames = frames.concat(this.findFrames(frame));
    }
    return frames;
  }
}

// node_modules/happy-dom-without-node/lib/browser/DefaultBrowserPageViewport.js
var DefaultBrowserPageViewport_default = {
  width: 1024,
  height: 768,
  devicePixelRatio: 1
};

// node_modules/happy-dom-without-node/lib/fetch/cache/preflight/PreflightResponseCache.js
class NotSupported13 {
}

// node_modules/happy-dom-without-node/lib/version.js
var version_default = { version: "0.0.0" };

// node_modules/happy-dom-without-node/lib/browser/DefaultBrowserSettings.js
var DefaultBrowserSettings_default = {
  disableJavaScriptEvaluation: false,
  disableJavaScriptFileLoading: false,
  disableCSSFileLoading: false,
  disableIframePageLoading: false,
  disableComputedStyleRendering: false,
  disableErrorCapturing: false,
  errorCapture: BrowserErrorCaptureEnum_default.tryAndCatch,
  enableFileSystemHttpRequests: false,
  timer: {
    maxTimeout: -1,
    maxIntervalTime: -1,
    maxIntervalIterations: -1
  },
  navigation: {
    disableMainFrameNavigation: false,
    disableChildFrameNavigation: false,
    disableChildPageNavigation: false,
    disableFallbackToSetURL: false,
    crossOriginPolicy: BrowserNavigationCrossOriginPolicyEnum_default.anyOrigin
  },
  navigator: {
    userAgent: `Mozilla/5.0 (X11; ${"Unknown".charAt(0).toUpperCase() + "Unknown".slice(1) + " Unknown"}) AppleWebKit/537.36 (KHTML, like Gecko) HappyDOM/${version_default.version}`,
    maxTouchPoints: 0
  },
  device: {
    prefersColorScheme: "light",
    mediaType: "screen"
  }
};

// node_modules/happy-dom-without-node/lib/browser/BrowserSettingsFactory.js
class BrowserSettingsFactory {
  static createSettings(settings) {
    return {
      ...DefaultBrowserSettings_default,
      ...settings,
      navigation: {
        ...DefaultBrowserSettings_default.navigation,
        ...settings?.navigation
      },
      navigator: {
        ...DefaultBrowserSettings_default.navigator,
        ...settings?.navigator
      },
      timer: {
        ...DefaultBrowserSettings_default.timer,
        ...settings?.timer
      },
      device: {
        ...DefaultBrowserSettings_default.device,
        ...settings?.device
      }
    };
  }
}

// node_modules/happy-dom-without-node/lib/browser/detached-browser/DetachedBrowserPage.js
class DetachedBrowserPage {
  constructor(context) {
    this.virtualConsolePrinter = new VirtualConsolePrinter_default;
    this.viewport = Object.assign({}, DefaultBrowserPageViewport_default);
    this.context = context;
    this.console = context.browser.console ?? new VirtualConsole_default(this.virtualConsolePrinter);
    this.mainFrame = new DetachedBrowserFrame_default(this);
  }
  get frames() {
    return BrowserPageUtility.getFrames(this);
  }
  get content() {
    return this.mainFrame.content;
  }
  set content(content2) {
    this.mainFrame.content = content2;
  }
  get url() {
    return this.mainFrame.url;
  }
  set url(url10) {
    this.mainFrame.url = url10;
  }
  close() {
    return new Promise((resolve3, reject) => {
      const context = this.context;
      BrowserPageUtility.closePage(this).then(() => {
        if (context.pages[0] === this) {
          context.close().then(resolve3).catch(reject);
        } else {
          resolve3();
        }
      }).catch(reject);
    });
  }
  waitUntilComplete() {
    return this.mainFrame.waitUntilComplete();
  }
  waitForNavigation() {
    return this.mainFrame.waitForNavigation();
  }
  abort() {
    return this.mainFrame.abort();
  }
  evaluate(script) {
    return this.mainFrame.evaluate(script);
  }
  setViewport(viewport2) {
    const previousViewport = Object.assign({}, this.viewport);
    Object.assign(this.viewport, viewport2);
    if (previousViewport.width !== this.viewport.width || previousViewport.height !== this.viewport.height || previousViewport.devicePixelRatio !== this.viewport.devicePixelRatio) {
      this.mainFrame.window.dispatchEvent(new Event_default("resize"));
    }
  }
  goto(url10, options3) {
    return this.mainFrame.goto(url10, options3);
  }
  reload(options3) {
    return this.mainFrame.reload(options3);
  }
}

// node_modules/happy-dom-without-node/lib/browser/detached-browser/DetachedBrowserContext.js
class DetachedBrowserContext {
  constructor(browser) {
    this.cookieContainer = new CookieContainer_default;
    this.responseCache = new NotSupported;
    this.preflightResponseCache = new NotSupported13;
    this.browser = browser;
    this.pages = [];
    this.pages.push(new DetachedBrowserPage(this));
  }
  async close() {
    if (!this.browser) {
      return;
    }
    await Promise.all(this.pages.slice().map((page) => page.close()));
    const browser = this.browser;
    const index = browser.contexts.indexOf(this);
    if (index !== -1) {
      browser.contexts.splice(index, 1);
    }
    this.pages = [];
    this.browser = null;
    this.cookieContainer = null;
    this.responseCache.clear();
    this.preflightResponseCache.clear();
    this.responseCache = null;
    this.preflightResponseCache = null;
    if (browser.contexts.length === 0) {
      browser.close();
    }
  }
  async waitUntilComplete() {
    await Promise.all(this.pages.map((page) => page.waitUntilComplete()));
  }
  abort() {
    return new Promise((resolve3, reject) => {
      if (!this.pages.length) {
        resolve3();
        return;
      }
      Promise.all(this.pages.slice().map((page) => page.abort())).then(() => resolve3()).catch((error4) => reject(error4));
    });
  }
  newPage() {
    const page = new DetachedBrowserPage(this);
    this.pages.push(page);
    return page;
  }
}

// node_modules/happy-dom-without-node/lib/browser/detached-browser/DetachedBrowser.js
class DetachedBrowser {
  constructor(windowClass, options3) {
    this.windowClass = windowClass;
    this.console = options3?.console || null;
    this.settings = BrowserSettingsFactory.createSettings(options3?.settings);
    this.contexts = [];
    this.contexts.push(new DetachedBrowserContext(this));
  }
  get defaultContext() {
    if (this.contexts.length === 0) {
      throw new Error("No default context. The browser has been closed.");
    }
    return this.contexts[0];
  }
  async close() {
    await Promise.all(this.contexts.slice().map((context) => context.close()));
    this.contexts = [];
    this.console = null;
    this.windowClass = null;
  }
  async waitUntilComplete() {
    await Promise.all(this.contexts.map((page) => page.waitUntilComplete()));
  }
  abort() {
    return new Promise((resolve3, reject) => {
      if (!this.contexts.length) {
        resolve3();
        return;
      }
      Promise.all(this.contexts.slice().map((context) => context.abort())).then(() => resolve3()).catch((error4) => reject(error4));
    });
  }
  newIncognitoContext() {
    throw new Error("Not possible to create a new context on a detached browser.");
  }
  newPage() {
    if (this.contexts.length === 0) {
      throw new Error("No default context. The browser has been closed.");
    }
    return this.contexts[0].newPage();
  }
}

// node_modules/happy-dom-without-node/lib/window/DetachedWindowAPI.js
var __classPrivateFieldSet44 = function(receiver, state, value2, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
};
var __classPrivateFieldGet50 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _DetachedWindowAPI_browserFrame;

class DetachedWindowAPI {
  constructor(browserFrame) {
    _DetachedWindowAPI_browserFrame.set(this, undefined);
    __classPrivateFieldSet44(this, _DetachedWindowAPI_browserFrame, browserFrame, "f");
  }
  get settings() {
    return __classPrivateFieldGet50(this, _DetachedWindowAPI_browserFrame, "f").page.context.browser.settings;
  }
  get virtualConsolePrinter() {
    return __classPrivateFieldGet50(this, _DetachedWindowAPI_browserFrame, "f").page.virtualConsolePrinter;
  }
  waitUntilComplete() {
    return __classPrivateFieldGet50(this, _DetachedWindowAPI_browserFrame, "f").waitUntilComplete();
  }
  whenAsyncComplete() {
    return this.waitUntilComplete();
  }
  abort() {
    return __classPrivateFieldGet50(this, _DetachedWindowAPI_browserFrame, "f").abort();
  }
  cancelAsync() {
    return this.abort();
  }
  close() {
    return __classPrivateFieldGet50(this, _DetachedWindowAPI_browserFrame, "f").page.close();
  }
  setURL(url10) {
    __classPrivateFieldGet50(this, _DetachedWindowAPI_browserFrame, "f").url = url10;
  }
  setViewport(viewport2) {
    __classPrivateFieldGet50(this, _DetachedWindowAPI_browserFrame, "f").page.setViewport(viewport2);
  }
  setWindowSize(options3) {
    this.setViewport({
      width: options3?.width,
      height: options3?.height
    });
  }
  setInnerWidth(width2) {
    this.setViewport({ width: width2 });
  }
  setInnerHeight(height2) {
    this.setViewport({ height: height2 });
  }
}
_DetachedWindowAPI_browserFrame = new WeakMap;
var DetachedWindowAPI_default = DetachedWindowAPI;

// node_modules/happy-dom-without-node/lib/window/Window.js
class Window extends BrowserWindow_default {
  constructor(options3) {
    const browser = new DetachedBrowser(BrowserWindow_default, {
      console: options3?.console,
      settings: options3?.settings
    });
    const browserPage = browser.defaultContext.pages[0];
    const browserFrame = browserPage.mainFrame;
    if (options3 && (options3.width || options3.height || options3.innerWidth || options3.innerHeight)) {
      Object.assign(browserPage.viewport, {
        width: options3.width || options3.innerWidth || browserPage.viewport.width,
        height: options3.height || options3.innerHeight || browserPage.viewport.height
      });
    }
    super(browserFrame, {
      url: options3?.url
    });
    browserFrame.window = this;
    this.happyDOM = new DetachedWindowAPI_default(browserFrame);
  }
}

// node_modules/@yankeeinlondon/happy-wrapper/dist/index.js
var function4 = __toESM(require_function(), 1);
var callsites = function() {
  const _prepareStackTrace = Error.prepareStackTrace;
  try {
    let result = [];
    Error.prepareStackTrace = (_, callSites) => {
      const callSitesWithoutCurrent = callSites.slice(1);
      result = callSitesWithoutCurrent;
      return callSitesWithoutCurrent;
    };
    new Error().stack;
    return result;
  } finally {
    Error.prepareStackTrace = _prepareStackTrace;
  }
};

// node_modules/@yankeeinlondon/happy-wrapper/node_modules/inferred-types/dist/constants/createConstant.js
function createConstant2(kind) {
  return {
    _type: "Constant",
    kind
  };
}

// node_modules/@yankeeinlondon/happy-wrapper/node_modules/inferred-types/dist/constants/Never.js
var Never2 = createConstant2("never");

// node_modules/@yankeeinlondon/happy-wrapper/node_modules/inferred-types/dist/runtime/type-guards/isString.js
function isString8(value2) {
  return typeof value2 === "string";
}

// node_modules/@yankeeinlondon/happy-wrapper/node_modules/inferred-types/dist/runtime/type-guards/isFunction.js
function isFunction4(value2) {
  return typeof value2 === "function" ? true : false;
}

// node_modules/@yankeeinlondon/happy-wrapper/dist/index.js
var function5 = __toESM(require_function(), 1);
var isHappyWrapperError = function(err) {
  return typeof err === "object" && err.kind === "HappyWrapper";
};
var isDocument = function(dom) {
  return typeof dom === "object" && dom !== null && !isElement2(dom) && "body" in dom;
};
var isFragment = function(dom) {
  return typeof dom === "object" && dom !== null && !isElement2(dom) && !isTextNode(dom) && !("body" in dom);
};
var isElement2 = function(el) {
  return typeof el === "object" && el !== null && "outerHTML" in el && el.nodeType === 1;
};
var isTextNodeLike = function(node2) {
  return (isDocument(node2) || isFragment(node2)) && node2?.childNodes?.length === 1 && isTextNode(node2.firstChild);
};
var isTextNode = function(node2) {
  if (typeof node2 === "string") {
    const test = createFragment(node2);
    return isTextNodeLike(test);
  } else {
    return typeof node2 === "object" && node2 !== null && !("firstElementChild" in node2);
  }
};
var toHtml = function(node2) {
  if (node2 === null) {
    return "";
  }
  const n = Array.isArray(node2) ? node2 : [node2];
  try {
    const results = n.map((i) => {
      const convert = solveForNodeType().outputType().solver({
        html: (h) => h,
        text: (t) => t.textContent,
        comment: (h) => `<!-- ${h.textContent} -->`,
        element: (e) => e.outerHTML,
        node: (ne) => {
          if (isElement2(ne)) {
            convert(ne);
          }
          if (isTextNode(ne)) {
            convert(ne);
          }
          throw new Error(`Unknown node type detected while converting to HTML: [ name: ${ne.nodeName}, type: ${ne.nodeType}, value: ${ne.nodeValue} ]`);
        },
        document: (d) => `<html>${d.head.hasChildNodes() ? d.head.outerHTML : ""}${d.body.outerHTML}</html>`,
        fragment: (f) => {
          return isElementLike(f) ? f.firstElementChild.outerHTML : f.childNodes.map((c) => convert(c, f)).join("");
        }
      });
      return convert(i);
    });
    return results.join("");
  } catch (error_) {
    const error4 = Array.isArray(node2) ? new HappyMishap(`Problem converting an array of ${n.length} nodes [${n.map((i) => getNodeType(i)).join(", ")}] to HTML`, {
      name: "toHTML([...])",
      inspect: ["first node", node2[0]],
      error: error_
    }) : new HappyMishap(`Problem converting "${getNodeType(node2)}" to HTML!`, {
      name: "toHTML(getNodeType(node))",
      inspect: node2,
      error: error_
    });
    throw error4;
  }
};
var clone = function(container) {
  const clone2 = solveForNodeType().mirror().solver({
    html: (h) => `${h}`,
    fragment: function5.flow(toHtml, createFragment),
    document: (d) => {
      return createDocument(d.body.innerHTML, d.head.innerHTML);
    },
    element: (e) => function5.pipe(e, toHtml, createElement2),
    node: (n) => {
      throw new HappyMishap("Can't clone an unknown node!", { inspect: n });
    },
    text: function5.flow(toHtml, createTextNode),
    comment: function5.flow(toHtml, createCommentNode)
  });
  return clone2(container);
};
var descClass = function(n) {
  const list2 = getClassList(n);
  return list2.length > 0 ? `{ ${list2.join(" ")} }` : "";
};
var descFrag = function(n) {
  const children2 = getChildren(n).map((i) => describeNode(i));
  return isElementLike(n) ? `[el: ${n.firstElementChild.tagName.toLowerCase()}]${descClass}` : isTextNodeLike(n) ? `[text: ${n.textContent.slice(0, 4).replace(/\n+/g, "")}...]` : `[children: ${children2.length > 0 ? `${children2.join(", ")}` : "none"}]`;
};
var createDocument = function(body, head) {
  const window3 = new Window;
  const document2 = window3.document;
  document2.body.innerHTML = body;
  if (head) {
    document2.head.innerHTML = head;
  }
  return document2;
};
var createFragment = function(content2) {
  const window3 = new Window;
  const document2 = window3.document;
  const fragment = document2.createDocumentFragment();
  if (content2) {
    fragment.append(clone(content2));
  }
  return fragment;
};
var createTextNode = function(text2) {
  if (!text2) {
    return new Text("");
  }
  const frag = createFragment(text2);
  if (isTextNodeLike(frag)) {
    return frag.firstChild;
  } else {
    throw new HappyMishap(`The HTML passed in cannot be converted to a single text node: "${text2}".`, { name: "createFragment(text)", inspect: frag });
  }
};
var createCommentNode = function(comment2) {
  return new Comment(comment2);
};
var isInspectionTuple = (thing) => {
  return Array.isArray(thing) && thing.length === 2 && typeof thing[0] === "string" && !Array.isArray(thing[1]);
};
var isElementLike = (container) => {
  if (isDocument(container)) {
    return container.body.childNodes.length === 1 && container.body.firstChild === container.body.firstElementChild;
  }
  return isFragment(container) && container.childNodes.length === 1 && container.firstChild === container.firstElementChild;
};
var isUpdateSignature = (args) => {
  return Array.isArray(args) && args.length === 3 && typeof args[1] === "number" && typeof args[2] === "number";
};
var isContainer2 = (thing) => {
  return isDocument(thing) || isFragment(thing) || isElement2(thing) || isTextNode(thing);
};
var nodeTypeLookup = (type) => {
  switch (type) {
    case 1: {
      return "element";
    }
    case 3: {
      return "text";
    }
    case 8: {
      return "comment";
    }
    case 11: {
      return "fragment";
    }
  }
};
var getNodeType = (node2) => {
  if (typeof node2 === "string") {
    return "html";
  }
  const byType = nodeTypeLookup(node2.nodeType);
  if (byType) {
    return byType;
  }
  return isTextNode(node2) ? "text" : isElement2(node2) ? "element" : isDocument(node2) ? "document" : isFragment(node2) ? "fragment" : "node";
};
var solveForNodeType = (_ = undefined) => {
  const solver = () => ({
    solver: (s2) => (node2, parent) => {
      if (node2 === null) {
        throw new Error("Value passed into solver was NULL!");
      }
      if (node2 === undefined) {
        throw new Error("Value passed into solver was UNDEFINED!");
      }
      const type = getNodeType(node2);
      if (type in s2) {
        const fn2 = s2[type];
        return fn2(node2, parent);
      } else {
        if (type === "node" && "element" in s2 && isElement2(node2)) {
          const fn2 = s2.element;
          return fn2(node2, parent);
        } else if (type === "node" && "text" in s2 && isTextNode(node2)) {
          const fn2 = s2.text;
          return fn2(node2);
        }
        throw new HappyMishap(`Problem finding "${type}" in solver.`, {
          name: `solveForNodeType(${type})`
        });
      }
    }
  });
  return {
    outputType: () => solver(),
    mirror: () => solver()
  };
};
var getChildren = (el) => {
  if (!el.hasChildNodes()) {
    return [];
  }
  const output = [];
  let child = el.firstChild;
  for (let idx = 0;idx < el.childNodes.length; idx++) {
    if (isElement2(child) || isTextNode(child)) {
      output.push(child);
    } else if (isFragment(child) || isDocument(child)) {
      for (const fragChild of getChildren(child)) {
        output.push(fragChild);
      }
    } else {
      throw new HappyMishap(`unknown node type [${getNodeType(child)}] found while trying to convert children to an array`, { name: "getChildrenAsArray", inspect: child });
    }
    child = child.nextSibling;
  }
  return output;
};
var describeNode = (node2) => {
  if (!node2) {
    return node2 === null ? "[null]" : "undefined";
  } else if (isUpdateSignature(node2)) {
    return `UpdateSignature(${describeNode(node2[0])})`;
  } else if (Array.isArray(node2)) {
    return node2.map((i) => describeNode(i)).join("\n");
  }
  return solveForNodeType().outputType().solver({
    html: (h) => function4.pipe(h, createFragment, describeNode),
    node: (n) => `node${descClass(n)}`,
    text: (t) => `text[${t.textContent.slice(0, 5).replace("\n", "")}...]`,
    comment: (t) => `comment[${t.textContent.slice(0, 5).replace("\n", "")}...]`,
    element: (e) => `element[${e.tagName.toLowerCase()}]${descClass(e)}`,
    fragment: (f) => `fragment${descFrag(f)}`,
    document: (d) => `doc[head: ${!!d.head}, body: ${!!d.body}]: ${describeNode(createFragment(d.body))}`
  })(node2);
};
var inspect = (item2, toJSON = false) => {
  const solver = Array.isArray(item2) ? () => item2.map((i) => describeNode(i)) : solveForNodeType().outputType().solver({
    html: (h) => function4.pipe(h, createFragment, (f) => inspect(f)),
    fragment: (x2) => ({
      kind: "Fragment",
      children: `${x2.children.length} / ${x2.childNodes.length}`,
      ...x2.childNodes.length > 1 ? {
        leadsWith: isElement2(x2.firstChild) ? "element" : isTextNode(x2.firstChild) ? "text" : "other",
        endsWith: isElement2(x2.lastChild) ? "element" : isTextNode(x2.lastChild) ? "text" : "other"
      } : {
        childNode: inspect(x2.firstChild)
      },
      content: x2.textContent.length > 128 ? `${x2.textContent.slice(0, 128)} ...` : x2.textContent,
      childDetails: x2.childNodes.map((i) => {
        try {
          return {
            html: toHtml(i),
            nodeType: getNodeType(i),
            hasParentElement: !!i.parentElement,
            hasParentNode: i.parentNode ? `${getNodeType(i.parentNode)} [type:${i.parentNode.nodeType}]` : false,
            childNodes: i.childNodes.length
          };
        } catch {
          return "N/A";
        }
      }),
      html: toHtml(x2)
    }),
    document: (x2) => ({
      kind: "Document",
      headerChildren: x2.head.childNodes?.length,
      bodyChildren: x2.body.childNodes?.length,
      body: toHtml(x2.body),
      children: `${x2.body.children?.length} / ${x2.body.childNodes?.length}`,
      childTextContent: x2.body.childNodes.map((i) => i.textContent),
      childDetails: x2.childNodes.map((i) => {
        try {
          return {
            html: toHtml(i),
            nodeType: getNodeType(i),
            hasParentElement: !!i.parentElement,
            hasParentNode: i.parentNode ? `${getNodeType(i.parentNode)} [type:${i.parentNode.nodeType}]` : false,
            childNodes: i.childNodes.length
          };
        } catch {
          return "N/A";
        }
      })
    }),
    text: (x2) => ({
      kind: "IText node",
      textContent: x2.textContent.length > 128 ? `${x2.textContent.slice(0, 128)} ...` : x2.textContent,
      children: x2.childNodes?.length,
      childContent: x2?.childNodes?.map((i) => i.textContent) || []
    }),
    comment: (c) => ({
      kind: "IComment node",
      textContent: c.textContent.length > 128 ? `${c.textContent.slice(0, 128)} ...` : c.textContent,
      children: c.childNodes?.length,
      childContent: c?.childNodes?.map((i) => i.textContent) || []
    }),
    element: (x2) => ({
      kind: "IElement node",
      tagName: x2.tagName,
      classes: getClassList(x2),
      hasNaturalParent: !!x2.parentElement,
      ...x2.parentElement ? { parent: describeNode(x2.parentElement) } : {},
      textContent: x2.textContent,
      children: `${x2.children.length} / ${x2.childNodes.length}`,
      childContent: x2.childNodes?.map((i) => i.textContent) || [],
      childDetails: x2?.childNodes?.map((i) => {
        try {
          return {
            html: toHtml(i),
            nodeType: getNodeType(i),
            hasParentElement: !!i.parentElement,
            hasParentNode: i.parentNode ? `${getNodeType(i.parentNode)} [type:${i.parentNode.nodeType}]` : false,
            childNodes: i.childNodes.length
          };
        } catch {
          return "N/A";
        }
      }) || [],
      html: truncate(512)(toHtml(x2))
    }),
    node: (n) => ({
      kind: "INode (generic)",
      looksLike: isElement2(n) ? "element" : isTextNode(n) ? "text" : "unknown",
      children: `${n.childNodes?.length}`,
      childContent: n?.childNodes?.map((i) => truncate(128)(i.textContent)) || [],
      html: truncate(512)(n.toString())
    })
  });
  const result = isContainer2(item2) || typeof item2 === "string" ? solver(item2) : {
    result: "not found",
    type: typeof item2,
    ...typeof item2 === "object" && item2 !== null ? { keys: Object.keys(item2) } : { value: JSON.stringify(item2) }
  };
  return toJSON ? JSON.stringify(result, null, 2) : result;
};
var truncate = (maxLength) => (input) => input.slice(0, maxLength);
var HappyMishap = class extends Error {
  name = "HappyWrapper";
  kind = "HappyWrapper";
  trace = [];
  line;
  fn;
  file;
  structuredStack;
  toJSON() {
    return {
      name: this.name,
      message: this.message
    };
  }
  toString() {
    return {
      name: this.name,
      message: this.message
    };
  }
  constructor(message, options3 = {}) {
    super();
    this.message = `
${message}`;
    if (options3.name) {
      this.name = `HappyWrapper::${options3.name || "unknown"}`;
    }
    try {
      const sites = callsites();
      this.structuredStack = (sites || []).slice(1).map((i) => {
        return {
          fn: i.getFunctionName() || i.getMethodName() || i.getFunction()?.name || undefined,
          line: i.getLineNumber() || undefined,
          file: i.getFileName() ? i.getFileName() : null
        };
      }) || [];
    } catch {
      this.structuredStack = [];
    }
    this.fn = this.structuredStack[0].fn || "";
    this.file = this.structuredStack[0].file || "";
    this.line = this.structuredStack[0].line || null;
    if (isHappyWrapperError(options3.error)) {
      this.name = `[file: ${this.file}, line: ${this.line}] HappyWrapper::${options3.name || options3.error.name}`;
    }
    if (options3.error) {
      const name2 = options3.error instanceof Error ? options3.error.name.replace("HappyWrapper::", "") : "unknown";
      const underlying = `

The underlying error message [${name2}] was:
${options3.error instanceof Error ? options3.error.message : String(options3.error)}`;
      this.message = `${this.message}${underlying}`;
      this.trace = [...this.trace, name2];
    } else {
      if (options3.inspect) {
        const inspections = isInspectionTuple(options3.inspect) ? [options3.inspect] : Array.isArray(options3.inspect) ? options3.inspect : [options3.inspect];
        for (const [idx, i] of inspections.entries()) {
          const intro = isInspectionTuple(i) ? `${i[0]}
` : `${[idx]}:
`;
          const container = isInspectionTuple(i) ? i[1] : i;
          this.message = `${this.message}

${intro}${JSON.stringify(inspect(container), null, 2)}`;
        }
      }
      if (this.trace.length > 1) {
        this.message = `${this.message}

Trace:${this.trace.map((i, idx) => `${idx}. ${i}`)}`;
      }
    }
    this.message = `${this.message}
`;
    for (const l of this.structuredStack) {
      this.message = l.file?.includes(".pnpm") ? this.message : `${this.message}
  - ${l.fn ? `${l.fn}() ` : ""}${l.file}:${l.line}`;
    }
    this.structuredStack = [];
  }
};
var createElement2 = (el, parent) => solveForNodeType().outputType().solver({
  node: (n) => {
    if (isElement2(n)) {
      return createElement2(n);
    } else {
      throw new HappyMishap("can't create an IElement from an INode node because it doesn't have a tagName property", { inspect: n });
    }
  },
  html: (h) => {
    const frag = createFragment(h);
    if (isElementLike(frag)) {
      if (parent) {
        parent.append(frag.firstElementChild);
        return parent?.lastElementChild.cloneNode();
      }
      return frag.firstElementChild;
    } else {
      throw new HappyMishap("The HTML passed into createElement() is not convertible to a IElement node!", { name: "createElement(html)", inspect: frag });
    }
  },
  element: function3.identity,
  text: (t) => {
    throw new HappyMishap("An IElement can not be created from a IText node because element's require a wrapping tag name!", { name: "createElement(text)", inspect: t });
  },
  comment: (t) => {
    throw new HappyMishap("An IElement can not be created from a IComment node because element's require a wrapping tag name!", { name: "createElement(comment)", inspect: t });
  },
  fragment: (f) => {
    if (isElement2(f.firstElementChild)) {
      return f.firstElementChild;
    } else {
      throw new HappyMishap(`Unable to create a IElement node from: 

${toHtml(f)}`, { name: "createElement()" });
    }
  },
  document: (d) => {
    if (isElementLike(d)) {
      if (parent) {
        throw new HappyMishap("A Document and a parent IElement were passed into createElement. This is not a valid combination!");
      }
      return d.firstElementChild;
    } else {
      throw new HappyMishap("Can not create an Element from passed in Document", { name: "createElement(document)", inspect: d });
    }
  }
})(el);
var setAttribute = (attr) => (value2) => (node2) => {
  const invalidNode = (n) => {
    throw new HappyMishap(`You can not use the setAttribute() utility on a node of type: "${getNodeType(n)}"`, { name: `setAttribute(${attr})(${value2})(INVALID)` });
  };
  const result = solveForNodeType().mirror().solver({
    html: (h) => function2.pipe(h, createFragment, (f) => setAttribute(attr)(value2)(f), toHtml),
    text: (t) => invalidNode(t),
    comment: (t) => invalidNode(t),
    node: (n) => invalidNode(n),
    fragment: (f) => {
      f.firstElementChild.setAttribute(attr, value2);
      return f;
    },
    document: (d) => {
      d.body.firstElementChild.setAttribute(attr, value2);
      return d;
    },
    element: (e) => {
      e.setAttribute(attr, value2);
      return e;
    }
  })(node2);
  return result;
};
var getAttribute = (attr) => {
  return solveForNodeType("text", "node", "comment").outputType().solver({
    html: (h) => function2.pipe(h, createFragment, getAttribute(attr)),
    fragment: (f) => f.firstElementChild.getAttribute(attr),
    document: (doc) => doc.body.firstElementChild.getAttribute(attr),
    element: (el) => el.getAttribute(attr)
  });
};
var getClass = getAttribute("class");
var setClass = setAttribute("class");
var getClassList = (container) => {
  if (!container) {
    return [];
  }
  return solveForNodeType().outputType().solver({
    html: (h) => function2.pipe(h, createFragment, getClassList),
    document: (d) => getClass(d.body.firstElementChild)?.split(/\s+/) || [],
    fragment: (f) => getClass(f.firstElementChild)?.split(/\s+/) || [],
    element: (e) => getClass(e)?.split(/\s+/) || [],
    text: (n) => {
      throw new HappyMishap("Passed in a text node to getClassList!", {
        name: "getClassList",
        inspect: n
      });
    },
    comment: (n) => {
      throw new HappyMishap("Passed in a comment node to getClassList!", {
        name: "getClassList",
        inspect: n
      });
    },
    node: (n) => {
      throw new HappyMishap("Passed in an unknown node type to getClassList!", { name: "getClassList", inspect: n });
    }
  })(container).filter(Boolean);
};
var hasSelector = (source, sel) => {
  let container;
  if (typeof source === "string") {
    if (source.includes("<html>")) {
      container = createDocument(source);
    } else {
      container = createFragment(source);
    }
  } else if (isDocument(source)) {
    container = source.body;
  } else if (isElement2(source)) {
    container = source;
  } else {
    container = source;
  }
  const result = container.querySelector(sel);
  return result ? true : false;
};
var containerName = (node2) => {
  return isElement2(node2) ? "IElement" : isDocument(node2) ? "HappyDoc" : isString8(node2) ? node2.includes("<html>") ? "HappyDoc" : "IFragment" : "IElement";
};
var query = (node2, sel, handling = "empty") => {
  let container;
  if (typeof node2 === "string") {
    if (node2.includes("<html>")) {
      container = createDocument(node2);
    } else {
      container = createFragment(node2);
    }
  } else if (isDocument(node2)) {
    container = node2.body;
  } else if (isElement2(node2)) {
    container = node2;
  } else {
    container = node2;
  }
  const result = container.querySelector(sel);
  if (handling === "throw" && !result) {
    const err = new Error(`Failed to find an HTML element for the selector "${sel}"`);
    err.name = "DomError";
    err.container = containerName(node2);
    err.selector = sel;
    throw err;
  }
  return result !== undefined ? result : handling === "empty" ? {} : handling === "undefined" ? undefined : isFunction4(handling) ? handling() : Never2;
};
var queryAll = (dom, sel) => {
  let container;
  if (typeof dom === "string") {
    if (dom.includes("<html>")) {
      container = createDocument(dom);
    } else {
      container = createFragment(dom);
    }
  } else if (isDocument(dom)) {
    container = dom.body;
  } else if (isElement2(dom)) {
    container = dom;
  } else {
    container = dom;
  }
  let result = [];
  container.querySelectorAll(sel).forEach((i) => {
    if (isElement2(i)) {
      result.push(i);
    }
  });
  return result;
};
var findWhere = (source, selector, handling, ...text2) => {
  const results = Array.from(queryAll(source, selector)).filter((i) => isElement2(i));
  const [criteria, comparator] = text2;
  let found = results.find((r) => {
    const txt = r.textContent;
    switch (criteria) {
      case "callback":
        return comparator(r);
      case "contains":
        return txt.includes(comparator);
      case "endsWith":
        return txt.endsWith(comparator);
      case "startsWith":
        return txt.startsWith(comparator);
      case "doesNotContain":
        return !txt.includes(comparator);
      case "regex":
        return comparator.test(txt);
    }
  });
  if (!found && handling === "throw") {
    const err = new Error(`Failed to find any elements which met the selector "${selector}" as well as the "${criteria}" criteria of "${String(comparator)}"`);
    err.name = "DomError";
    err.container = containerName(source);
    err.selector = selector;
    err.criteria = criteria;
    err.comparator = comparator;
    throw err;
  }
  return found ? found : handling === "undefined" ? undefined : handling === "empty" ? {} : isFunction4(handling) ? handling() : Never2;
};

// node_modules/luxon/src/errors.js
class LuxonError extends Error {
}

class InvalidDateTimeError extends LuxonError {
  constructor(reason) {
    super(`Invalid DateTime: ${reason.toMessage()}`);
  }
}

class InvalidIntervalError extends LuxonError {
  constructor(reason) {
    super(`Invalid Interval: ${reason.toMessage()}`);
  }
}

class InvalidDurationError extends LuxonError {
  constructor(reason) {
    super(`Invalid Duration: ${reason.toMessage()}`);
  }
}

class ConflictingSpecificationError extends LuxonError {
}

class InvalidUnitError extends LuxonError {
  constructor(unit) {
    super(`Invalid unit ${unit}`);
  }
}

class InvalidArgumentError extends LuxonError {
}

class ZoneIsAbstractError extends LuxonError {
  constructor() {
    super("Zone is an abstract class");
  }
}

// node_modules/luxon/src/impl/formats.js
var n = "numeric";
var s2 = "short";
var l = "long";
var DATE_SHORT = {
  year: n,
  month: n,
  day: n
};
var DATE_MED = {
  year: n,
  month: s2,
  day: n
};
var DATE_MED_WITH_WEEKDAY = {
  year: n,
  month: s2,
  day: n,
  weekday: s2
};
var DATE_FULL = {
  year: n,
  month: l,
  day: n
};
var DATE_HUGE = {
  year: n,
  month: l,
  day: n,
  weekday: l
};
var TIME_SIMPLE = {
  hour: n,
  minute: n
};
var TIME_WITH_SECONDS = {
  hour: n,
  minute: n,
  second: n
};
var TIME_WITH_SHORT_OFFSET = {
  hour: n,
  minute: n,
  second: n,
  timeZoneName: s2
};
var TIME_WITH_LONG_OFFSET = {
  hour: n,
  minute: n,
  second: n,
  timeZoneName: l
};
var TIME_24_SIMPLE = {
  hour: n,
  minute: n,
  hourCycle: "h23"
};
var TIME_24_WITH_SECONDS = {
  hour: n,
  minute: n,
  second: n,
  hourCycle: "h23"
};
var TIME_24_WITH_SHORT_OFFSET = {
  hour: n,
  minute: n,
  second: n,
  hourCycle: "h23",
  timeZoneName: s2
};
var TIME_24_WITH_LONG_OFFSET = {
  hour: n,
  minute: n,
  second: n,
  hourCycle: "h23",
  timeZoneName: l
};
var DATETIME_SHORT = {
  year: n,
  month: n,
  day: n,
  hour: n,
  minute: n
};
var DATETIME_SHORT_WITH_SECONDS = {
  year: n,
  month: n,
  day: n,
  hour: n,
  minute: n,
  second: n
};
var DATETIME_MED = {
  year: n,
  month: s2,
  day: n,
  hour: n,
  minute: n
};
var DATETIME_MED_WITH_SECONDS = {
  year: n,
  month: s2,
  day: n,
  hour: n,
  minute: n,
  second: n
};
var DATETIME_MED_WITH_WEEKDAY = {
  year: n,
  month: s2,
  day: n,
  weekday: s2,
  hour: n,
  minute: n
};
var DATETIME_FULL = {
  year: n,
  month: l,
  day: n,
  hour: n,
  minute: n,
  timeZoneName: s2
};
var DATETIME_FULL_WITH_SECONDS = {
  year: n,
  month: l,
  day: n,
  hour: n,
  minute: n,
  second: n,
  timeZoneName: s2
};
var DATETIME_HUGE = {
  year: n,
  month: l,
  day: n,
  weekday: l,
  hour: n,
  minute: n,
  timeZoneName: l
};
var DATETIME_HUGE_WITH_SECONDS = {
  year: n,
  month: l,
  day: n,
  weekday: l,
  hour: n,
  minute: n,
  second: n,
  timeZoneName: l
};

// node_modules/luxon/src/zone.js
class Zone {
  get type() {
    throw new ZoneIsAbstractError;
  }
  get name() {
    throw new ZoneIsAbstractError;
  }
  get ianaName() {
    return this.name;
  }
  get isUniversal() {
    throw new ZoneIsAbstractError;
  }
  offsetName(ts, opts) {
    throw new ZoneIsAbstractError;
  }
  formatOffset(ts, format2) {
    throw new ZoneIsAbstractError;
  }
  offset(ts) {
    throw new ZoneIsAbstractError;
  }
  equals(otherZone) {
    throw new ZoneIsAbstractError;
  }
  get isValid() {
    throw new ZoneIsAbstractError;
  }
}

// node_modules/luxon/src/zones/systemZone.js
var singleton = null;

class SystemZone extends Zone {
  static get instance() {
    if (singleton === null) {
      singleton = new SystemZone;
    }
    return singleton;
  }
  get type() {
    return "system";
  }
  get name() {
    return new Intl.DateTimeFormat().resolvedOptions().timeZone;
  }
  get isUniversal() {
    return false;
  }
  offsetName(ts, { format: format2, locale }) {
    return parseZoneInfo(ts, format2, locale);
  }
  formatOffset(ts, format2) {
    return formatOffset(this.offset(ts), format2);
  }
  offset(ts) {
    return -new Date(ts).getTimezoneOffset();
  }
  equals(otherZone) {
    return otherZone.type === "system";
  }
  get isValid() {
    return true;
  }
}

// node_modules/luxon/src/zones/IANAZone.js
var makeDTF = function(zone3) {
  if (!dtfCache[zone3]) {
    dtfCache[zone3] = new Intl.DateTimeFormat("en-US", {
      hour12: false,
      timeZone: zone3,
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit",
      era: "short"
    });
  }
  return dtfCache[zone3];
};
var hackyOffset = function(dtf, date) {
  const formatted = dtf.format(date).replace(/\u200E/g, ""), parsed = /(\d+)\/(\d+)\/(\d+) (AD|BC),? (\d+):(\d+):(\d+)/.exec(formatted), [, fMonth, fDay, fYear, fadOrBc, fHour, fMinute, fSecond] = parsed;
  return [fYear, fMonth, fDay, fadOrBc, fHour, fMinute, fSecond];
};
var partsOffset = function(dtf, date) {
  const formatted = dtf.formatToParts(date);
  const filled = [];
  for (let i = 0;i < formatted.length; i++) {
    const { type, value: value2 } = formatted[i];
    const pos = typeToPos[type];
    if (type === "era") {
      filled[pos] = value2;
    } else if (!isUndefined2(pos)) {
      filled[pos] = parseInt(value2, 10);
    }
  }
  return filled;
};
var dtfCache = {};
var typeToPos = {
  year: 0,
  month: 1,
  day: 2,
  era: 3,
  hour: 4,
  minute: 5,
  second: 6
};
var ianaZoneCache = {};

class IANAZone extends Zone {
  static create(name2) {
    if (!ianaZoneCache[name2]) {
      ianaZoneCache[name2] = new IANAZone(name2);
    }
    return ianaZoneCache[name2];
  }
  static resetCache() {
    ianaZoneCache = {};
    dtfCache = {};
  }
  static isValidSpecifier(s3) {
    return this.isValidZone(s3);
  }
  static isValidZone(zone3) {
    if (!zone3) {
      return false;
    }
    try {
      new Intl.DateTimeFormat("en-US", { timeZone: zone3 }).format();
      return true;
    } catch (e) {
      return false;
    }
  }
  constructor(name2) {
    super();
    this.zoneName = name2;
    this.valid = IANAZone.isValidZone(name2);
  }
  get type() {
    return "iana";
  }
  get name() {
    return this.zoneName;
  }
  get isUniversal() {
    return false;
  }
  offsetName(ts, { format: format2, locale }) {
    return parseZoneInfo(ts, format2, locale, this.name);
  }
  formatOffset(ts, format2) {
    return formatOffset(this.offset(ts), format2);
  }
  offset(ts) {
    const date = new Date(ts);
    if (isNaN(date))
      return NaN;
    const dtf = makeDTF(this.name);
    let [year, month, day, adOrBc, hour, minute, second] = dtf.formatToParts ? partsOffset(dtf, date) : hackyOffset(dtf, date);
    if (adOrBc === "BC") {
      year = -Math.abs(year) + 1;
    }
    const adjustedHour = hour === 24 ? 0 : hour;
    const asUTC = objToLocalTS({
      year,
      month,
      day,
      hour: adjustedHour,
      minute,
      second,
      millisecond: 0
    });
    let asTS = +date;
    const over = asTS % 1000;
    asTS -= over >= 0 ? over : 1000 + over;
    return (asUTC - asTS) / (60 * 1000);
  }
  equals(otherZone) {
    return otherZone.type === "iana" && otherZone.name === this.name;
  }
  get isValid() {
    return this.valid;
  }
}

// node_modules/luxon/src/impl/locale.js
var getCachedLF = function(locString, opts = {}) {
  const key = JSON.stringify([locString, opts]);
  let dtf = intlLFCache[key];
  if (!dtf) {
    dtf = new Intl.ListFormat(locString, opts);
    intlLFCache[key] = dtf;
  }
  return dtf;
};
var getCachedDTF = function(locString, opts = {}) {
  const key = JSON.stringify([locString, opts]);
  let dtf = intlDTCache[key];
  if (!dtf) {
    dtf = new Intl.DateTimeFormat(locString, opts);
    intlDTCache[key] = dtf;
  }
  return dtf;
};
var getCachedINF = function(locString, opts = {}) {
  const key = JSON.stringify([locString, opts]);
  let inf = intlNumCache[key];
  if (!inf) {
    inf = new Intl.NumberFormat(locString, opts);
    intlNumCache[key] = inf;
  }
  return inf;
};
var getCachedRTF = function(locString, opts = {}) {
  const { base, ...cacheKeyOpts } = opts;
  const key = JSON.stringify([locString, cacheKeyOpts]);
  let inf = intlRelCache[key];
  if (!inf) {
    inf = new Intl.RelativeTimeFormat(locString, opts);
    intlRelCache[key] = inf;
  }
  return inf;
};
var systemLocale = function() {
  if (sysLocaleCache) {
    return sysLocaleCache;
  } else {
    sysLocaleCache = new Intl.DateTimeFormat().resolvedOptions().locale;
    return sysLocaleCache;
  }
};
var getCachedWeekInfo = function(locString) {
  let data2 = weekInfoCache[locString];
  if (!data2) {
    const locale = new Intl.Locale(locString);
    data2 = "getWeekInfo" in locale ? locale.getWeekInfo() : locale.weekInfo;
    weekInfoCache[locString] = data2;
  }
  return data2;
};
var parseLocaleString = function(localeStr) {
  const xIndex = localeStr.indexOf("-x-");
  if (xIndex !== -1) {
    localeStr = localeStr.substring(0, xIndex);
  }
  const uIndex = localeStr.indexOf("-u-");
  if (uIndex === -1) {
    return [localeStr];
  } else {
    let options3;
    let selectedStr;
    try {
      options3 = getCachedDTF(localeStr).resolvedOptions();
      selectedStr = localeStr;
    } catch (e) {
      const smaller = localeStr.substring(0, uIndex);
      options3 = getCachedDTF(smaller).resolvedOptions();
      selectedStr = smaller;
    }
    const { numberingSystem, calendar } = options3;
    return [selectedStr, numberingSystem, calendar];
  }
};
var intlConfigString = function(localeStr, numberingSystem, outputCalendar) {
  if (outputCalendar || numberingSystem) {
    if (!localeStr.includes("-u-")) {
      localeStr += "-u";
    }
    if (outputCalendar) {
      localeStr += `-ca-${outputCalendar}`;
    }
    if (numberingSystem) {
      localeStr += `-nu-${numberingSystem}`;
    }
    return localeStr;
  } else {
    return localeStr;
  }
};
var mapMonths = function(f) {
  const ms = [];
  for (let i = 1;i <= 12; i++) {
    const dt = DateTime.utc(2009, i, 1);
    ms.push(f(dt));
  }
  return ms;
};
var mapWeekdays = function(f) {
  const ms = [];
  for (let i = 1;i <= 7; i++) {
    const dt = DateTime.utc(2016, 11, 13 + i);
    ms.push(f(dt));
  }
  return ms;
};
var listStuff = function(loc, length2, englishFn, intlFn) {
  const mode2 = loc.listingMode();
  if (mode2 === "error") {
    return null;
  } else if (mode2 === "en") {
    return englishFn(length2);
  } else {
    return intlFn(length2);
  }
};
var supportsFastNumbers = function(loc) {
  if (loc.numberingSystem && loc.numberingSystem !== "latn") {
    return false;
  } else {
    return loc.numberingSystem === "latn" || !loc.locale || loc.locale.startsWith("en") || new Intl.DateTimeFormat(loc.intl).resolvedOptions().numberingSystem === "latn";
  }
};
var intlLFCache = {};
var intlDTCache = {};
var intlNumCache = {};
var intlRelCache = {};
var sysLocaleCache = null;
var weekInfoCache = {};

class PolyNumberFormatter {
  constructor(intl, forceSimple, opts) {
    this.padTo = opts.padTo || 0;
    this.floor = opts.floor || false;
    const { padTo, floor, ...otherOpts } = opts;
    if (!forceSimple || Object.keys(otherOpts).length > 0) {
      const intlOpts = { useGrouping: false, ...opts };
      if (opts.padTo > 0)
        intlOpts.minimumIntegerDigits = opts.padTo;
      this.inf = getCachedINF(intl, intlOpts);
    }
  }
  format(i) {
    if (this.inf) {
      const fixed = this.floor ? Math.floor(i) : i;
      return this.inf.format(fixed);
    } else {
      const fixed = this.floor ? Math.floor(i) : roundTo(i, 3);
      return padStart(fixed, this.padTo);
    }
  }
}

class PolyDateFormatter {
  constructor(dt, intl, opts) {
    this.opts = opts;
    this.originalZone = undefined;
    let z = undefined;
    if (this.opts.timeZone) {
      this.dt = dt;
    } else if (dt.zone.type === "fixed") {
      const gmtOffset = -1 * (dt.offset / 60);
      const offsetZ = gmtOffset >= 0 ? `Etc/GMT+${gmtOffset}` : `Etc/GMT${gmtOffset}`;
      if (dt.offset !== 0 && IANAZone.create(offsetZ).valid) {
        z = offsetZ;
        this.dt = dt;
      } else {
        z = "UTC";
        this.dt = dt.offset === 0 ? dt : dt.setZone("UTC").plus({ minutes: dt.offset });
        this.originalZone = dt.zone;
      }
    } else if (dt.zone.type === "system") {
      this.dt = dt;
    } else if (dt.zone.type === "iana") {
      this.dt = dt;
      z = dt.zone.name;
    } else {
      z = "UTC";
      this.dt = dt.setZone("UTC").plus({ minutes: dt.offset });
      this.originalZone = dt.zone;
    }
    const intlOpts = { ...this.opts };
    intlOpts.timeZone = intlOpts.timeZone || z;
    this.dtf = getCachedDTF(intl, intlOpts);
  }
  format() {
    if (this.originalZone) {
      return this.formatToParts().map(({ value: value2 }) => value2).join("");
    }
    return this.dtf.format(this.dt.toJSDate());
  }
  formatToParts() {
    const parts = this.dtf.formatToParts(this.dt.toJSDate());
    if (this.originalZone) {
      return parts.map((part) => {
        if (part.type === "timeZoneName") {
          const offsetName = this.originalZone.offsetName(this.dt.ts, {
            locale: this.dt.locale,
            format: this.opts.timeZoneName
          });
          return {
            ...part,
            value: offsetName
          };
        } else {
          return part;
        }
      });
    }
    return parts;
  }
  resolvedOptions() {
    return this.dtf.resolvedOptions();
  }
}

class PolyRelFormatter {
  constructor(intl, isEnglish, opts) {
    this.opts = { style: "long", ...opts };
    if (!isEnglish && hasRelative()) {
      this.rtf = getCachedRTF(intl, opts);
    }
  }
  format(count, unit) {
    if (this.rtf) {
      return this.rtf.format(count, unit);
    } else {
      return formatRelativeTime(unit, count, this.opts.numeric, this.opts.style !== "long");
    }
  }
  formatToParts(count, unit) {
    if (this.rtf) {
      return this.rtf.formatToParts(count, unit);
    } else {
      return [];
    }
  }
}
var fallbackWeekSettings = {
  firstDay: 1,
  minimalDays: 4,
  weekend: [6, 7]
};

class Locale {
  static fromOpts(opts) {
    return Locale.create(opts.locale, opts.numberingSystem, opts.outputCalendar, opts.weekSettings, opts.defaultToEN);
  }
  static create(locale, numberingSystem, outputCalendar, weekSettings, defaultToEN = false) {
    const specifiedLocale = locale || Settings.defaultLocale;
    const localeR = specifiedLocale || (defaultToEN ? "en-US" : systemLocale());
    const numberingSystemR = numberingSystem || Settings.defaultNumberingSystem;
    const outputCalendarR = outputCalendar || Settings.defaultOutputCalendar;
    const weekSettingsR = validateWeekSettings(weekSettings) || Settings.defaultWeekSettings;
    return new Locale(localeR, numberingSystemR, outputCalendarR, weekSettingsR, specifiedLocale);
  }
  static resetCache() {
    sysLocaleCache = null;
    intlDTCache = {};
    intlNumCache = {};
    intlRelCache = {};
  }
  static fromObject({ locale, numberingSystem, outputCalendar, weekSettings } = {}) {
    return Locale.create(locale, numberingSystem, outputCalendar, weekSettings);
  }
  constructor(locale, numbering, outputCalendar, weekSettings, specifiedLocale) {
    const [parsedLocale, parsedNumberingSystem, parsedOutputCalendar] = parseLocaleString(locale);
    this.locale = parsedLocale;
    this.numberingSystem = numbering || parsedNumberingSystem || null;
    this.outputCalendar = outputCalendar || parsedOutputCalendar || null;
    this.weekSettings = weekSettings;
    this.intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);
    this.weekdaysCache = { format: {}, standalone: {} };
    this.monthsCache = { format: {}, standalone: {} };
    this.meridiemCache = null;
    this.eraCache = {};
    this.specifiedLocale = specifiedLocale;
    this.fastNumbersCached = null;
  }
  get fastNumbers() {
    if (this.fastNumbersCached == null) {
      this.fastNumbersCached = supportsFastNumbers(this);
    }
    return this.fastNumbersCached;
  }
  listingMode() {
    const isActuallyEn = this.isEnglish();
    const hasNoWeirdness = (this.numberingSystem === null || this.numberingSystem === "latn") && (this.outputCalendar === null || this.outputCalendar === "gregory");
    return isActuallyEn && hasNoWeirdness ? "en" : "intl";
  }
  clone(alts) {
    if (!alts || Object.getOwnPropertyNames(alts).length === 0) {
      return this;
    } else {
      return Locale.create(alts.locale || this.specifiedLocale, alts.numberingSystem || this.numberingSystem, alts.outputCalendar || this.outputCalendar, validateWeekSettings(alts.weekSettings) || this.weekSettings, alts.defaultToEN || false);
    }
  }
  redefaultToEN(alts = {}) {
    return this.clone({ ...alts, defaultToEN: true });
  }
  redefaultToSystem(alts = {}) {
    return this.clone({ ...alts, defaultToEN: false });
  }
  months(length2, format2 = false) {
    return listStuff(this, length2, months, () => {
      const intl = format2 ? { month: length2, day: "numeric" } : { month: length2 }, formatStr = format2 ? "format" : "standalone";
      if (!this.monthsCache[formatStr][length2]) {
        this.monthsCache[formatStr][length2] = mapMonths((dt) => this.extract(dt, intl, "month"));
      }
      return this.monthsCache[formatStr][length2];
    });
  }
  weekdays(length2, format2 = false) {
    return listStuff(this, length2, weekdays, () => {
      const intl = format2 ? { weekday: length2, year: "numeric", month: "long", day: "numeric" } : { weekday: length2 }, formatStr = format2 ? "format" : "standalone";
      if (!this.weekdaysCache[formatStr][length2]) {
        this.weekdaysCache[formatStr][length2] = mapWeekdays((dt) => this.extract(dt, intl, "weekday"));
      }
      return this.weekdaysCache[formatStr][length2];
    });
  }
  meridiems() {
    return listStuff(this, undefined, () => meridiems, () => {
      if (!this.meridiemCache) {
        const intl = { hour: "numeric", hourCycle: "h12" };
        this.meridiemCache = [DateTime.utc(2016, 11, 13, 9), DateTime.utc(2016, 11, 13, 19)].map((dt) => this.extract(dt, intl, "dayperiod"));
      }
      return this.meridiemCache;
    });
  }
  eras(length2) {
    return listStuff(this, length2, eras, () => {
      const intl = { era: length2 };
      if (!this.eraCache[length2]) {
        this.eraCache[length2] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map((dt) => this.extract(dt, intl, "era"));
      }
      return this.eraCache[length2];
    });
  }
  extract(dt, intlOpts, field) {
    const df = this.dtFormatter(dt, intlOpts), results = df.formatToParts(), matching = results.find((m) => m.type.toLowerCase() === field);
    return matching ? matching.value : null;
  }
  numberFormatter(opts = {}) {
    return new PolyNumberFormatter(this.intl, opts.forceSimple || this.fastNumbers, opts);
  }
  dtFormatter(dt, intlOpts = {}) {
    return new PolyDateFormatter(dt, this.intl, intlOpts);
  }
  relFormatter(opts = {}) {
    return new PolyRelFormatter(this.intl, this.isEnglish(), opts);
  }
  listFormatter(opts = {}) {
    return getCachedLF(this.intl, opts);
  }
  isEnglish() {
    return this.locale === "en" || this.locale.toLowerCase() === "en-us" || new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith("en-us");
  }
  getWeekSettings() {
    if (this.weekSettings) {
      return this.weekSettings;
    } else if (!hasLocaleWeekInfo()) {
      return fallbackWeekSettings;
    } else {
      return getCachedWeekInfo(this.locale);
    }
  }
  getStartOfWeek() {
    return this.getWeekSettings().firstDay;
  }
  getMinDaysInFirstWeek() {
    return this.getWeekSettings().minimalDays;
  }
  getWeekendDays() {
    return this.getWeekSettings().weekend;
  }
  equals(other) {
    return this.locale === other.locale && this.numberingSystem === other.numberingSystem && this.outputCalendar === other.outputCalendar;
  }
}

// node_modules/luxon/src/zones/fixedOffsetZone.js
var singleton2 = null;

class FixedOffsetZone extends Zone {
  static get utcInstance() {
    if (singleton2 === null) {
      singleton2 = new FixedOffsetZone(0);
    }
    return singleton2;
  }
  static instance(offset3) {
    return offset3 === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset3);
  }
  static parseSpecifier(s3) {
    if (s3) {
      const r = s3.match(/^utc(?:([+-]\d{1,2})(?::(\d{2}))?)?$/i);
      if (r) {
        return new FixedOffsetZone(signedOffset(r[1], r[2]));
      }
    }
    return null;
  }
  constructor(offset3) {
    super();
    this.fixed = offset3;
  }
  get type() {
    return "fixed";
  }
  get name() {
    return this.fixed === 0 ? "UTC" : `UTC${formatOffset(this.fixed, "narrow")}`;
  }
  get ianaName() {
    if (this.fixed === 0) {
      return "Etc/UTC";
    } else {
      return `Etc/GMT${formatOffset(-this.fixed, "narrow")}`;
    }
  }
  offsetName() {
    return this.name;
  }
  formatOffset(ts, format2) {
    return formatOffset(this.fixed, format2);
  }
  get isUniversal() {
    return true;
  }
  offset() {
    return this.fixed;
  }
  equals(otherZone) {
    return otherZone.type === "fixed" && otherZone.fixed === this.fixed;
  }
  get isValid() {
    return true;
  }
}

// node_modules/luxon/src/zones/invalidZone.js
class InvalidZone extends Zone {
  constructor(zoneName) {
    super();
    this.zoneName = zoneName;
  }
  get type() {
    return "invalid";
  }
  get name() {
    return this.zoneName;
  }
  get isUniversal() {
    return false;
  }
  offsetName() {
    return null;
  }
  formatOffset() {
    return "";
  }
  offset() {
    return NaN;
  }
  equals() {
    return false;
  }
  get isValid() {
    return false;
  }
}

// node_modules/luxon/src/impl/zoneUtil.js
function normalizeZone(input, defaultZone) {
  let offset3;
  if (isUndefined2(input) || input === null) {
    return defaultZone;
  } else if (input instanceof Zone) {
    return input;
  } else if (isString9(input)) {
    const lowered = input.toLowerCase();
    if (lowered === "default")
      return defaultZone;
    else if (lowered === "local" || lowered === "system")
      return SystemZone.instance;
    else if (lowered === "utc" || lowered === "gmt")
      return FixedOffsetZone.utcInstance;
    else
      return FixedOffsetZone.parseSpecifier(lowered) || IANAZone.create(input);
  } else if (isNumber4(input)) {
    return FixedOffsetZone.instance(input);
  } else if (typeof input === "object" && "offset" in input && typeof input.offset === "function") {
    return input;
  } else {
    return new InvalidZone(input);
  }
}

// node_modules/luxon/src/settings.js
var now = () => Date.now();
var defaultZone = "system";
var defaultLocale = null;
var defaultNumberingSystem = null;
var defaultOutputCalendar = null;
var twoDigitCutoffYear = 60;
var throwOnInvalid;
var defaultWeekSettings = null;

class Settings {
  static get now() {
    return now;
  }
  static set now(n2) {
    now = n2;
  }
  static set defaultZone(zone6) {
    defaultZone = zone6;
  }
  static get defaultZone() {
    return normalizeZone(defaultZone, SystemZone.instance);
  }
  static get defaultLocale() {
    return defaultLocale;
  }
  static set defaultLocale(locale2) {
    defaultLocale = locale2;
  }
  static get defaultNumberingSystem() {
    return defaultNumberingSystem;
  }
  static set defaultNumberingSystem(numberingSystem) {
    defaultNumberingSystem = numberingSystem;
  }
  static get defaultOutputCalendar() {
    return defaultOutputCalendar;
  }
  static set defaultOutputCalendar(outputCalendar) {
    defaultOutputCalendar = outputCalendar;
  }
  static get defaultWeekSettings() {
    return defaultWeekSettings;
  }
  static set defaultWeekSettings(weekSettings) {
    defaultWeekSettings = validateWeekSettings(weekSettings);
  }
  static get twoDigitCutoffYear() {
    return twoDigitCutoffYear;
  }
  static set twoDigitCutoffYear(cutoffYear) {
    twoDigitCutoffYear = cutoffYear % 100;
  }
  static get throwOnInvalid() {
    return throwOnInvalid;
  }
  static set throwOnInvalid(t) {
    throwOnInvalid = t;
  }
  static resetCaches() {
    Locale.resetCache();
    IANAZone.resetCache();
  }
}

// node_modules/luxon/src/impl/invalid.js
class Invalid {
  constructor(reason, explanation) {
    this.reason = reason;
    this.explanation = explanation;
  }
  toMessage() {
    if (this.explanation) {
      return `${this.reason}: ${this.explanation}`;
    } else {
      return this.reason;
    }
  }
}

// node_modules/luxon/src/impl/conversions.js
var unitOutOfRange = function(unit, value2) {
  return new Invalid("unit out of range", `you specified ${value2} (of type ${typeof value2}) as a ${unit}, which is invalid`);
};
function dayOfWeek(year, month, day) {
  const d = new Date(Date.UTC(year, month - 1, day));
  if (year < 100 && year >= 0) {
    d.setUTCFullYear(d.getUTCFullYear() - 1900);
  }
  const js = d.getUTCDay();
  return js === 0 ? 7 : js;
}
var computeOrdinal = function(year, month, day) {
  return day + (isLeapYear(year) ? leapLadder : nonLeapLadder)[month - 1];
};
var uncomputeOrdinal = function(year, ordinal) {
  const table3 = isLeapYear(year) ? leapLadder : nonLeapLadder, month0 = table3.findIndex((i) => i < ordinal), day = ordinal - table3[month0];
  return { month: month0 + 1, day };
};
function isoWeekdayToLocal(isoWeekday, startOfWeek) {
  return (isoWeekday - startOfWeek + 7) % 7 + 1;
}
function gregorianToWeek(gregObj, minDaysInFirstWeek = 4, startOfWeek = 1) {
  const { year, month, day } = gregObj, ordinal = computeOrdinal(year, month, day), weekday = isoWeekdayToLocal(dayOfWeek(year, month, day), startOfWeek);
  let weekNumber = Math.floor((ordinal - weekday + 14 - minDaysInFirstWeek) / 7), weekYear;
  if (weekNumber < 1) {
    weekYear = year - 1;
    weekNumber = weeksInWeekYear(weekYear, minDaysInFirstWeek, startOfWeek);
  } else if (weekNumber > weeksInWeekYear(year, minDaysInFirstWeek, startOfWeek)) {
    weekYear = year + 1;
    weekNumber = 1;
  } else {
    weekYear = year;
  }
  return { weekYear, weekNumber, weekday, ...timeObject(gregObj) };
}
function weekToGregorian(weekData, minDaysInFirstWeek = 4, startOfWeek = 1) {
  const { weekYear, weekNumber, weekday } = weekData, weekdayOfJan4 = isoWeekdayToLocal(dayOfWeek(weekYear, 1, minDaysInFirstWeek), startOfWeek), yearInDays = daysInYear(weekYear);
  let ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 7 + minDaysInFirstWeek, year;
  if (ordinal < 1) {
    year = weekYear - 1;
    ordinal += daysInYear(year);
  } else if (ordinal > yearInDays) {
    year = weekYear + 1;
    ordinal -= daysInYear(weekYear);
  } else {
    year = weekYear;
  }
  const { month, day } = uncomputeOrdinal(year, ordinal);
  return { year, month, day, ...timeObject(weekData) };
}
function gregorianToOrdinal(gregData) {
  const { year, month, day } = gregData;
  const ordinal = computeOrdinal(year, month, day);
  return { year, ordinal, ...timeObject(gregData) };
}
function ordinalToGregorian(ordinalData) {
  const { year, ordinal } = ordinalData;
  const { month, day } = uncomputeOrdinal(year, ordinal);
  return { year, month, day, ...timeObject(ordinalData) };
}
function usesLocalWeekValues(obj, loc) {
  const hasLocaleWeekData = !isUndefined2(obj.localWeekday) || !isUndefined2(obj.localWeekNumber) || !isUndefined2(obj.localWeekYear);
  if (hasLocaleWeekData) {
    const hasIsoWeekData = !isUndefined2(obj.weekday) || !isUndefined2(obj.weekNumber) || !isUndefined2(obj.weekYear);
    if (hasIsoWeekData) {
      throw new ConflictingSpecificationError("Cannot mix locale-based week fields with ISO-based week fields");
    }
    if (!isUndefined2(obj.localWeekday))
      obj.weekday = obj.localWeekday;
    if (!isUndefined2(obj.localWeekNumber))
      obj.weekNumber = obj.localWeekNumber;
    if (!isUndefined2(obj.localWeekYear))
      obj.weekYear = obj.localWeekYear;
    delete obj.localWeekday;
    delete obj.localWeekNumber;
    delete obj.localWeekYear;
    return {
      minDaysInFirstWeek: loc.getMinDaysInFirstWeek(),
      startOfWeek: loc.getStartOfWeek()
    };
  } else {
    return { minDaysInFirstWeek: 4, startOfWeek: 1 };
  }
}
function hasInvalidWeekData(obj, minDaysInFirstWeek = 4, startOfWeek = 1) {
  const validYear = isInteger(obj.weekYear), validWeek = integerBetween(obj.weekNumber, 1, weeksInWeekYear(obj.weekYear, minDaysInFirstWeek, startOfWeek)), validWeekday = integerBetween(obj.weekday, 1, 7);
  if (!validYear) {
    return unitOutOfRange("weekYear", obj.weekYear);
  } else if (!validWeek) {
    return unitOutOfRange("week", obj.weekNumber);
  } else if (!validWeekday) {
    return unitOutOfRange("weekday", obj.weekday);
  } else
    return false;
}
function hasInvalidOrdinalData(obj) {
  const validYear = isInteger(obj.year), validOrdinal = integerBetween(obj.ordinal, 1, daysInYear(obj.year));
  if (!validYear) {
    return unitOutOfRange("year", obj.year);
  } else if (!validOrdinal) {
    return unitOutOfRange("ordinal", obj.ordinal);
  } else
    return false;
}
function hasInvalidGregorianData(obj) {
  const validYear = isInteger(obj.year), validMonth = integerBetween(obj.month, 1, 12), validDay = integerBetween(obj.day, 1, daysInMonth(obj.year, obj.month));
  if (!validYear) {
    return unitOutOfRange("year", obj.year);
  } else if (!validMonth) {
    return unitOutOfRange("month", obj.month);
  } else if (!validDay) {
    return unitOutOfRange("day", obj.day);
  } else
    return false;
}
function hasInvalidTimeData(obj) {
  const { hour, minute, second, millisecond } = obj;
  const validHour = integerBetween(hour, 0, 23) || hour === 24 && minute === 0 && second === 0 && millisecond === 0, validMinute = integerBetween(minute, 0, 59), validSecond = integerBetween(second, 0, 59), validMillisecond = integerBetween(millisecond, 0, 999);
  if (!validHour) {
    return unitOutOfRange("hour", hour);
  } else if (!validMinute) {
    return unitOutOfRange("minute", minute);
  } else if (!validSecond) {
    return unitOutOfRange("second", second);
  } else if (!validMillisecond) {
    return unitOutOfRange("millisecond", millisecond);
  } else
    return false;
}
var nonLeapLadder = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
var leapLadder = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];

// node_modules/luxon/src/impl/util.js
function isUndefined2(o) {
  return typeof o === "undefined";
}
function isNumber4(o) {
  return typeof o === "number";
}
function isInteger(o) {
  return typeof o === "number" && o % 1 === 0;
}
function isString9(o) {
  return typeof o === "string";
}
function isDate(o) {
  return Object.prototype.toString.call(o) === "[object Date]";
}
function hasRelative() {
  try {
    return typeof Intl !== "undefined" && !!Intl.RelativeTimeFormat;
  } catch (e) {
    return false;
  }
}
function hasLocaleWeekInfo() {
  try {
    return typeof Intl !== "undefined" && !!Intl.Locale && (("weekInfo" in Intl.Locale.prototype) || ("getWeekInfo" in Intl.Locale.prototype));
  } catch (e) {
    return false;
  }
}
function maybeArray(thing) {
  return Array.isArray(thing) ? thing : [thing];
}
function bestBy(arr, by, compare) {
  if (arr.length === 0) {
    return;
  }
  return arr.reduce((best, next) => {
    const pair = [by(next), next];
    if (!best) {
      return pair;
    } else if (compare(best[0], pair[0]) === best[0]) {
      return best;
    } else {
      return pair;
    }
  }, null)[1];
}
function pick(obj, keys) {
  return keys.reduce((a, k) => {
    a[k] = obj[k];
    return a;
  }, {});
}
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}
function validateWeekSettings(settings3) {
  if (settings3 == null) {
    return null;
  } else if (typeof settings3 !== "object") {
    throw new InvalidArgumentError("Week settings must be an object");
  } else {
    if (!integerBetween(settings3.firstDay, 1, 7) || !integerBetween(settings3.minimalDays, 1, 7) || !Array.isArray(settings3.weekend) || settings3.weekend.some((v) => !integerBetween(v, 1, 7))) {
      throw new InvalidArgumentError("Invalid week settings");
    }
    return {
      firstDay: settings3.firstDay,
      minimalDays: settings3.minimalDays,
      weekend: Array.from(settings3.weekend)
    };
  }
}
function integerBetween(thing, bottom2, top2) {
  return isInteger(thing) && thing >= bottom2 && thing <= top2;
}
function floorMod(x2, n2) {
  return x2 - n2 * Math.floor(x2 / n2);
}
function padStart(input, n2 = 2) {
  const isNeg = input < 0;
  let padded;
  if (isNeg) {
    padded = "-" + ("" + -input).padStart(n2, "0");
  } else {
    padded = ("" + input).padStart(n2, "0");
  }
  return padded;
}
function parseInteger(string) {
  if (isUndefined2(string) || string === null || string === "") {
    return;
  } else {
    return parseInt(string, 10);
  }
}
function parseFloating(string) {
  if (isUndefined2(string) || string === null || string === "") {
    return;
  } else {
    return parseFloat(string);
  }
}
function parseMillis(fraction) {
  if (isUndefined2(fraction) || fraction === null || fraction === "") {
    return;
  } else {
    const f = parseFloat("0." + fraction) * 1000;
    return Math.floor(f);
  }
}
function roundTo(number, digits, towardZero = false) {
  const factor = 10 ** digits, rounder = towardZero ? Math.trunc : Math.round;
  return rounder(number * factor) / factor;
}
function isLeapYear(year) {
  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
}
function daysInYear(year) {
  return isLeapYear(year) ? 366 : 365;
}
function daysInMonth(year, month) {
  const modMonth = floorMod(month - 1, 12) + 1, modYear = year + (month - modMonth) / 12;
  if (modMonth === 2) {
    return isLeapYear(modYear) ? 29 : 28;
  } else {
    return [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][modMonth - 1];
  }
}
function objToLocalTS(obj) {
  let d = Date.UTC(obj.year, obj.month - 1, obj.day, obj.hour, obj.minute, obj.second, obj.millisecond);
  if (obj.year < 100 && obj.year >= 0) {
    d = new Date(d);
    d.setUTCFullYear(obj.year, obj.month - 1, obj.day);
  }
  return +d;
}
var firstWeekOffset = function(year, minDaysInFirstWeek, startOfWeek) {
  const fwdlw = isoWeekdayToLocal(dayOfWeek(year, 1, minDaysInFirstWeek), startOfWeek);
  return -fwdlw + minDaysInFirstWeek - 1;
};
function weeksInWeekYear(weekYear, minDaysInFirstWeek = 4, startOfWeek = 1) {
  const weekOffset = firstWeekOffset(weekYear, minDaysInFirstWeek, startOfWeek);
  const weekOffsetNext = firstWeekOffset(weekYear + 1, minDaysInFirstWeek, startOfWeek);
  return (daysInYear(weekYear) - weekOffset + weekOffsetNext) / 7;
}
function untruncateYear(year) {
  if (year > 99) {
    return year;
  } else
    return year > Settings.twoDigitCutoffYear ? 1900 + year : 2000 + year;
}
function parseZoneInfo(ts, offsetFormat, locale2, timeZone = null) {
  const date = new Date(ts), intlOpts = {
    hourCycle: "h23",
    year: "numeric",
    month: "2-digit",
    day: "2-digit",
    hour: "2-digit",
    minute: "2-digit"
  };
  if (timeZone) {
    intlOpts.timeZone = timeZone;
  }
  const modified = { timeZoneName: offsetFormat, ...intlOpts };
  const parsed = new Intl.DateTimeFormat(locale2, modified).formatToParts(date).find((m) => m.type.toLowerCase() === "timezonename");
  return parsed ? parsed.value : null;
}
function signedOffset(offHourStr, offMinuteStr) {
  let offHour = parseInt(offHourStr, 10);
  if (Number.isNaN(offHour)) {
    offHour = 0;
  }
  const offMin = parseInt(offMinuteStr, 10) || 0, offMinSigned = offHour < 0 || Object.is(offHour, -0) ? -offMin : offMin;
  return offHour * 60 + offMinSigned;
}
function asNumber(value2) {
  const numericValue = Number(value2);
  if (typeof value2 === "boolean" || value2 === "" || Number.isNaN(numericValue))
    throw new InvalidArgumentError(`Invalid unit value ${value2}`);
  return numericValue;
}
function normalizeObject(obj, normalizer) {
  const normalized = {};
  for (const u in obj) {
    if (hasOwnProperty(obj, u)) {
      const v = obj[u];
      if (v === undefined || v === null)
        continue;
      normalized[normalizer(u)] = asNumber(v);
    }
  }
  return normalized;
}
function formatOffset(offset3, format2) {
  const hours = Math.trunc(Math.abs(offset3 / 60)), minutes = Math.trunc(Math.abs(offset3 % 60)), sign = offset3 >= 0 ? "+" : "-";
  switch (format2) {
    case "short":
      return `${sign}${padStart(hours, 2)}:${padStart(minutes, 2)}`;
    case "narrow":
      return `${sign}${hours}${minutes > 0 ? `:${minutes}` : ""}`;
    case "techie":
      return `${sign}${padStart(hours, 2)}${padStart(minutes, 2)}`;
    default:
      throw new RangeError(`Value format ${format2} is out of range for property format`);
  }
}
function timeObject(obj) {
  return pick(obj, ["hour", "minute", "second", "millisecond"]);
}

// node_modules/luxon/src/impl/english.js
function months(length2) {
  switch (length2) {
    case "narrow":
      return [...monthsNarrow];
    case "short":
      return [...monthsShort];
    case "long":
      return [...monthsLong];
    case "numeric":
      return ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"];
    case "2-digit":
      return ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"];
    default:
      return null;
  }
}
function weekdays(length2) {
  switch (length2) {
    case "narrow":
      return [...weekdaysNarrow];
    case "short":
      return [...weekdaysShort];
    case "long":
      return [...weekdaysLong];
    case "numeric":
      return ["1", "2", "3", "4", "5", "6", "7"];
    default:
      return null;
  }
}
function eras(length2) {
  switch (length2) {
    case "narrow":
      return [...erasNarrow];
    case "short":
      return [...erasShort];
    case "long":
      return [...erasLong];
    default:
      return null;
  }
}
function meridiemForDateTime(dt) {
  return meridiems[dt.hour < 12 ? 0 : 1];
}
function weekdayForDateTime(dt, length2) {
  return weekdays(length2)[dt.weekday - 1];
}
function monthForDateTime(dt, length2) {
  return months(length2)[dt.month - 1];
}
function eraForDateTime(dt, length2) {
  return eras(length2)[dt.year < 0 ? 0 : 1];
}
function formatRelativeTime(unit, count, numeric = "always", narrow = false) {
  const units = {
    years: ["year", "yr."],
    quarters: ["quarter", "qtr."],
    months: ["month", "mo."],
    weeks: ["week", "wk."],
    days: ["day", "day", "days"],
    hours: ["hour", "hr."],
    minutes: ["minute", "min."],
    seconds: ["second", "sec."]
  };
  const lastable = ["hours", "minutes", "seconds"].indexOf(unit) === -1;
  if (numeric === "auto" && lastable) {
    const isDay = unit === "days";
    switch (count) {
      case 1:
        return isDay ? "tomorrow" : `next ${units[unit][0]}`;
      case -1:
        return isDay ? "yesterday" : `last ${units[unit][0]}`;
      case 0:
        return isDay ? "today" : `this ${units[unit][0]}`;
      default:
    }
  }
  const isInPast = Object.is(count, -0) || count < 0, fmtValue = Math.abs(count), singular = fmtValue === 1, lilUnits = units[unit], fmtUnit = narrow ? singular ? lilUnits[1] : lilUnits[2] || lilUnits[1] : singular ? units[unit][0] : unit;
  return isInPast ? `${fmtValue} ${fmtUnit} ago` : `in ${fmtValue} ${fmtUnit}`;
}
var monthsLong = [
  "January",
  "February",
  "March",
  "April",
  "May",
  "June",
  "July",
  "August",
  "September",
  "October",
  "November",
  "December"
];
var monthsShort = [
  "Jan",
  "Feb",
  "Mar",
  "Apr",
  "May",
  "Jun",
  "Jul",
  "Aug",
  "Sep",
  "Oct",
  "Nov",
  "Dec"
];
var monthsNarrow = ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"];
var weekdaysLong = [
  "Monday",
  "Tuesday",
  "Wednesday",
  "Thursday",
  "Friday",
  "Saturday",
  "Sunday"
];
var weekdaysShort = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];
var weekdaysNarrow = ["M", "T", "W", "T", "F", "S", "S"];
var meridiems = ["AM", "PM"];
var erasLong = ["Before Christ", "Anno Domini"];
var erasShort = ["BC", "AD"];
var erasNarrow = ["B", "A"];

// node_modules/luxon/src/impl/formatter.js
var stringifyTokens = function(splits, tokenToString) {
  let s3 = "";
  for (const token of splits) {
    if (token.literal) {
      s3 += token.val;
    } else {
      s3 += tokenToString(token.val);
    }
  }
  return s3;
};
var macroTokenToFormatOpts = {
  D: DATE_SHORT,
  DD: DATE_MED,
  DDD: DATE_FULL,
  DDDD: DATE_HUGE,
  t: TIME_SIMPLE,
  tt: TIME_WITH_SECONDS,
  ttt: TIME_WITH_SHORT_OFFSET,
  tttt: TIME_WITH_LONG_OFFSET,
  T: TIME_24_SIMPLE,
  TT: TIME_24_WITH_SECONDS,
  TTT: TIME_24_WITH_SHORT_OFFSET,
  TTTT: TIME_24_WITH_LONG_OFFSET,
  f: DATETIME_SHORT,
  ff: DATETIME_MED,
  fff: DATETIME_FULL,
  ffff: DATETIME_HUGE,
  F: DATETIME_SHORT_WITH_SECONDS,
  FF: DATETIME_MED_WITH_SECONDS,
  FFF: DATETIME_FULL_WITH_SECONDS,
  FFFF: DATETIME_HUGE_WITH_SECONDS
};

class Formatter {
  static create(locale2, opts = {}) {
    return new Formatter(locale2, opts);
  }
  static parseFormat(fmt3) {
    let current = null, currentFull = "", bracketed = false;
    const splits = [];
    for (let i = 0;i < fmt3.length; i++) {
      const c = fmt3.charAt(i);
      if (c === "'") {
        if (currentFull.length > 0) {
          splits.push({ literal: bracketed || /^\s+$/.test(currentFull), val: currentFull });
        }
        current = null;
        currentFull = "";
        bracketed = !bracketed;
      } else if (bracketed) {
        currentFull += c;
      } else if (c === current) {
        currentFull += c;
      } else {
        if (currentFull.length > 0) {
          splits.push({ literal: /^\s+$/.test(currentFull), val: currentFull });
        }
        currentFull = c;
        current = c;
      }
    }
    if (currentFull.length > 0) {
      splits.push({ literal: bracketed || /^\s+$/.test(currentFull), val: currentFull });
    }
    return splits;
  }
  static macroTokenToFormatOpts(token) {
    return macroTokenToFormatOpts[token];
  }
  constructor(locale2, formatOpts) {
    this.opts = formatOpts;
    this.loc = locale2;
    this.systemLoc = null;
  }
  formatWithSystemDefault(dt, opts) {
    if (this.systemLoc === null) {
      this.systemLoc = this.loc.redefaultToSystem();
    }
    const df = this.systemLoc.dtFormatter(dt, { ...this.opts, ...opts });
    return df.format();
  }
  dtFormatter(dt, opts = {}) {
    return this.loc.dtFormatter(dt, { ...this.opts, ...opts });
  }
  formatDateTime(dt, opts) {
    return this.dtFormatter(dt, opts).format();
  }
  formatDateTimeParts(dt, opts) {
    return this.dtFormatter(dt, opts).formatToParts();
  }
  formatInterval(interval, opts) {
    const df = this.dtFormatter(interval.start, opts);
    return df.dtf.formatRange(interval.start.toJSDate(), interval.end.toJSDate());
  }
  resolvedOptions(dt, opts) {
    return this.dtFormatter(dt, opts).resolvedOptions();
  }
  num(n2, p = 0) {
    if (this.opts.forceSimple) {
      return padStart(n2, p);
    }
    const opts = { ...this.opts };
    if (p > 0) {
      opts.padTo = p;
    }
    return this.loc.numberFormatter(opts).format(n2);
  }
  formatDateTimeFromString(dt, fmt3) {
    const knownEnglish = this.loc.listingMode() === "en", useDateTimeFormatter = this.loc.outputCalendar && this.loc.outputCalendar !== "gregory", string = (opts, extract) => this.loc.extract(dt, opts, extract), formatOffset2 = (opts) => {
      if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {
        return "Z";
      }
      return dt.isValid ? dt.zone.formatOffset(dt.ts, opts.format) : "";
    }, meridiem = () => knownEnglish ? meridiemForDateTime(dt) : string({ hour: "numeric", hourCycle: "h12" }, "dayperiod"), month = (length2, standalone) => knownEnglish ? monthForDateTime(dt, length2) : string(standalone ? { month: length2 } : { month: length2, day: "numeric" }, "month"), weekday = (length2, standalone) => knownEnglish ? weekdayForDateTime(dt, length2) : string(standalone ? { weekday: length2 } : { weekday: length2, month: "long", day: "numeric" }, "weekday"), maybeMacro = (token) => {
      const formatOpts = Formatter.macroTokenToFormatOpts(token);
      if (formatOpts) {
        return this.formatWithSystemDefault(dt, formatOpts);
      } else {
        return token;
      }
    }, era = (length2) => knownEnglish ? eraForDateTime(dt, length2) : string({ era: length2 }, "era"), tokenToString = (token) => {
      switch (token) {
        case "S":
          return this.num(dt.millisecond);
        case "u":
        case "SSS":
          return this.num(dt.millisecond, 3);
        case "s":
          return this.num(dt.second);
        case "ss":
          return this.num(dt.second, 2);
        case "uu":
          return this.num(Math.floor(dt.millisecond / 10), 2);
        case "uuu":
          return this.num(Math.floor(dt.millisecond / 100));
        case "m":
          return this.num(dt.minute);
        case "mm":
          return this.num(dt.minute, 2);
        case "h":
          return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12);
        case "hh":
          return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12, 2);
        case "H":
          return this.num(dt.hour);
        case "HH":
          return this.num(dt.hour, 2);
        case "Z":
          return formatOffset2({ format: "narrow", allowZ: this.opts.allowZ });
        case "ZZ":
          return formatOffset2({ format: "short", allowZ: this.opts.allowZ });
        case "ZZZ":
          return formatOffset2({ format: "techie", allowZ: this.opts.allowZ });
        case "ZZZZ":
          return dt.zone.offsetName(dt.ts, { format: "short", locale: this.loc.locale });
        case "ZZZZZ":
          return dt.zone.offsetName(dt.ts, { format: "long", locale: this.loc.locale });
        case "z":
          return dt.zoneName;
        case "a":
          return meridiem();
        case "d":
          return useDateTimeFormatter ? string({ day: "numeric" }, "day") : this.num(dt.day);
        case "dd":
          return useDateTimeFormatter ? string({ day: "2-digit" }, "day") : this.num(dt.day, 2);
        case "c":
          return this.num(dt.weekday);
        case "ccc":
          return weekday("short", true);
        case "cccc":
          return weekday("long", true);
        case "ccccc":
          return weekday("narrow", true);
        case "E":
          return this.num(dt.weekday);
        case "EEE":
          return weekday("short", false);
        case "EEEE":
          return weekday("long", false);
        case "EEEEE":
          return weekday("narrow", false);
        case "L":
          return useDateTimeFormatter ? string({ month: "numeric", day: "numeric" }, "month") : this.num(dt.month);
        case "LL":
          return useDateTimeFormatter ? string({ month: "2-digit", day: "numeric" }, "month") : this.num(dt.month, 2);
        case "LLL":
          return month("short", true);
        case "LLLL":
          return month("long", true);
        case "LLLLL":
          return month("narrow", true);
        case "M":
          return useDateTimeFormatter ? string({ month: "numeric" }, "month") : this.num(dt.month);
        case "MM":
          return useDateTimeFormatter ? string({ month: "2-digit" }, "month") : this.num(dt.month, 2);
        case "MMM":
          return month("short", false);
        case "MMMM":
          return month("long", false);
        case "MMMMM":
          return month("narrow", false);
        case "y":
          return useDateTimeFormatter ? string({ year: "numeric" }, "year") : this.num(dt.year);
        case "yy":
          return useDateTimeFormatter ? string({ year: "2-digit" }, "year") : this.num(dt.year.toString().slice(-2), 2);
        case "yyyy":
          return useDateTimeFormatter ? string({ year: "numeric" }, "year") : this.num(dt.year, 4);
        case "yyyyyy":
          return useDateTimeFormatter ? string({ year: "numeric" }, "year") : this.num(dt.year, 6);
        case "G":
          return era("short");
        case "GG":
          return era("long");
        case "GGGGG":
          return era("narrow");
        case "kk":
          return this.num(dt.weekYear.toString().slice(-2), 2);
        case "kkkk":
          return this.num(dt.weekYear, 4);
        case "W":
          return this.num(dt.weekNumber);
        case "WW":
          return this.num(dt.weekNumber, 2);
        case "n":
          return this.num(dt.localWeekNumber);
        case "nn":
          return this.num(dt.localWeekNumber, 2);
        case "ii":
          return this.num(dt.localWeekYear.toString().slice(-2), 2);
        case "iiii":
          return this.num(dt.localWeekYear, 4);
        case "o":
          return this.num(dt.ordinal);
        case "ooo":
          return this.num(dt.ordinal, 3);
        case "q":
          return this.num(dt.quarter);
        case "qq":
          return this.num(dt.quarter, 2);
        case "X":
          return this.num(Math.floor(dt.ts / 1000));
        case "x":
          return this.num(dt.ts);
        default:
          return maybeMacro(token);
      }
    };
    return stringifyTokens(Formatter.parseFormat(fmt3), tokenToString);
  }
  formatDurationFromString(dur, fmt3) {
    const tokenToField = (token) => {
      switch (token[0]) {
        case "S":
          return "millisecond";
        case "s":
          return "second";
        case "m":
          return "minute";
        case "h":
          return "hour";
        case "d":
          return "day";
        case "w":
          return "week";
        case "M":
          return "month";
        case "y":
          return "year";
        default:
          return null;
      }
    }, tokenToString = (lildur) => (token) => {
      const mapped = tokenToField(token);
      if (mapped) {
        return this.num(lildur.get(mapped), token.length);
      } else {
        return token;
      }
    }, tokens2 = Formatter.parseFormat(fmt3), realTokens = tokens2.reduce((found, { literal, val }) => literal ? found : found.concat(val), []), collapsed = dur.shiftTo(...realTokens.map(tokenToField).filter((t) => t));
    return stringifyTokens(tokens2, tokenToString(collapsed));
  }
}

// node_modules/luxon/src/impl/regexParser.js
var combineRegexes = function(...regexes) {
  const full = regexes.reduce((f, r) => f + r.source, "");
  return RegExp(`^${full}\$`);
};
var combineExtractors = function(...extractors) {
  return (m) => extractors.reduce(([mergedVals, mergedZone, cursor], ex) => {
    const [val, zone6, next] = ex(m, cursor);
    return [{ ...mergedVals, ...val }, zone6 || mergedZone, next];
  }, [{}, null, 1]).slice(0, 2);
};
var parse = function(s3, ...patterns) {
  if (s3 == null) {
    return [null, null];
  }
  for (const [regex, extractor] of patterns) {
    const m = regex.exec(s3);
    if (m) {
      return extractor(m);
    }
  }
  return [null, null];
};
var simpleParse = function(...keys) {
  return (match, cursor) => {
    const ret = {};
    let i;
    for (i = 0;i < keys.length; i++) {
      ret[keys[i]] = parseInteger(match[cursor + i]);
    }
    return [ret, null, cursor + i];
  };
};
var int = function(match, pos, fallback) {
  const m = match[pos];
  return isUndefined2(m) ? fallback : parseInteger(m);
};
var extractISOYmd = function(match, cursor) {
  const item2 = {
    year: int(match, cursor),
    month: int(match, cursor + 1, 1),
    day: int(match, cursor + 2, 1)
  };
  return [item2, null, cursor + 3];
};
var extractISOTime = function(match, cursor) {
  const item2 = {
    hours: int(match, cursor, 0),
    minutes: int(match, cursor + 1, 0),
    seconds: int(match, cursor + 2, 0),
    milliseconds: parseMillis(match[cursor + 3])
  };
  return [item2, null, cursor + 4];
};
var extractISOOffset = function(match, cursor) {
  const local = !match[cursor] && !match[cursor + 1], fullOffset = signedOffset(match[cursor + 1], match[cursor + 2]), zone6 = local ? null : FixedOffsetZone.instance(fullOffset);
  return [{}, zone6, cursor + 3];
};
var extractIANAZone = function(match, cursor) {
  const zone6 = match[cursor] ? IANAZone.create(match[cursor]) : null;
  return [{}, zone6, cursor + 1];
};
var extractISODuration = function(match) {
  const [s3, yearStr, monthStr, weekStr, dayStr, hourStr, minuteStr, secondStr, millisecondsStr] = match;
  const hasNegativePrefix = s3[0] === "-";
  const negativeSeconds = secondStr && secondStr[0] === "-";
  const maybeNegate = (num, force = false) => num !== undefined && (force || num && hasNegativePrefix) ? -num : num;
  return [
    {
      years: maybeNegate(parseFloating(yearStr)),
      months: maybeNegate(parseFloating(monthStr)),
      weeks: maybeNegate(parseFloating(weekStr)),
      days: maybeNegate(parseFloating(dayStr)),
      hours: maybeNegate(parseFloating(hourStr)),
      minutes: maybeNegate(parseFloating(minuteStr)),
      seconds: maybeNegate(parseFloating(secondStr), secondStr === "-0"),
      milliseconds: maybeNegate(parseMillis(millisecondsStr), negativeSeconds)
    }
  ];
};
var fromStrings = function(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
  const result = {
    year: yearStr.length === 2 ? untruncateYear(parseInteger(yearStr)) : parseInteger(yearStr),
    month: monthsShort.indexOf(monthStr) + 1,
    day: parseInteger(dayStr),
    hour: parseInteger(hourStr),
    minute: parseInteger(minuteStr)
  };
  if (secondStr)
    result.second = parseInteger(secondStr);
  if (weekdayStr) {
    result.weekday = weekdayStr.length > 3 ? weekdaysLong.indexOf(weekdayStr) + 1 : weekdaysShort.indexOf(weekdayStr) + 1;
  }
  return result;
};
var extractRFC2822 = function(match) {
  const [
    ,
    weekdayStr,
    dayStr,
    monthStr,
    yearStr,
    hourStr,
    minuteStr,
    secondStr,
    obsOffset,
    milOffset,
    offHourStr,
    offMinuteStr
  ] = match, result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
  let offset3;
  if (obsOffset) {
    offset3 = obsOffsets[obsOffset];
  } else if (milOffset) {
    offset3 = 0;
  } else {
    offset3 = signedOffset(offHourStr, offMinuteStr);
  }
  return [result, new FixedOffsetZone(offset3)];
};
var preprocessRFC2822 = function(s3) {
  return s3.replace(/\([^()]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").trim();
};
var extractRFC1123Or850 = function(match) {
  const [, weekdayStr, dayStr, monthStr, yearStr, hourStr, minuteStr, secondStr] = match, result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
  return [result, FixedOffsetZone.utcInstance];
};
var extractASCII = function(match) {
  const [, weekdayStr, monthStr, dayStr, hourStr, minuteStr, secondStr, yearStr] = match, result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
  return [result, FixedOffsetZone.utcInstance];
};
function parseISODate(s3) {
  return parse(s3, [isoYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset], [isoWeekWithTimeExtensionRegex, extractISOWeekTimeAndOffset], [isoOrdinalWithTimeExtensionRegex, extractISOOrdinalDateAndTime], [isoTimeCombinedRegex, extractISOTimeAndOffset]);
}
function parseRFC2822Date(s3) {
  return parse(preprocessRFC2822(s3), [rfc2822, extractRFC2822]);
}
function parseHTTPDate(s3) {
  return parse(s3, [rfc1123, extractRFC1123Or850], [rfc850, extractRFC1123Or850], [ascii, extractASCII]);
}
function parseISODuration(s3) {
  return parse(s3, [isoDuration, extractISODuration]);
}
function parseISOTimeOnly(s3) {
  return parse(s3, [isoTimeOnly, extractISOTimeOnly]);
}
function parseSQL(s3) {
  return parse(s3, [sqlYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset], [sqlTimeCombinedRegex, extractISOTimeOffsetAndIANAZone]);
}
var ianaRegex = /[A-Za-z_+-]{1,256}(?::?\/[A-Za-z0-9_+-]{1,256}(?:\/[A-Za-z0-9_+-]{1,256})?)?/;
var offsetRegex = /(?:(Z)|([+-]\d\d)(?::?(\d\d))?)/;
var isoExtendedZone = `(?:${offsetRegex.source}?(?:\\[(${ianaRegex.source})\\])?)?`;
var isoTimeBaseRegex = /(\d\d)(?::?(\d\d)(?::?(\d\d)(?:[.,](\d{1,30}))?)?)?/;
var isoTimeRegex = RegExp(`${isoTimeBaseRegex.source}${isoExtendedZone}`);
var isoTimeExtensionRegex = RegExp(`(?:T${isoTimeRegex.source})?`);
var isoYmdRegex = /([+-]\d{6}|\d{4})(?:-?(\d\d)(?:-?(\d\d))?)?/;
var isoWeekRegex = /(\d{4})-?W(\d\d)(?:-?(\d))?/;
var isoOrdinalRegex = /(\d{4})-?(\d{3})/;
var extractISOWeekData = simpleParse("weekYear", "weekNumber", "weekDay");
var extractISOOrdinalData = simpleParse("year", "ordinal");
var sqlYmdRegex = /(\d{4})-(\d\d)-(\d\d)/;
var sqlTimeRegex = RegExp(`${isoTimeBaseRegex.source} ?(?:${offsetRegex.source}|(${ianaRegex.source}))?`);
var sqlTimeExtensionRegex = RegExp(`(?: ${sqlTimeRegex.source})?`);
var isoTimeOnly = RegExp(`^T?${isoTimeBaseRegex.source}\$`);
var isoDuration = /^-?P(?:(?:(-?\d{1,20}(?:\.\d{1,20})?)Y)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20}(?:\.\d{1,20})?)W)?(?:(-?\d{1,20}(?:\.\d{1,20})?)D)?(?:T(?:(-?\d{1,20}(?:\.\d{1,20})?)H)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20})(?:[.,](-?\d{1,20}))?S)?)?)$/;
var obsOffsets = {
  GMT: 0,
  EDT: -4 * 60,
  EST: -5 * 60,
  CDT: -5 * 60,
  CST: -6 * 60,
  MDT: -6 * 60,
  MST: -7 * 60,
  PDT: -7 * 60,
  PST: -8 * 60
};
var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\d\d)(\d\d)))$/;
var rfc1123 = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d\d):(\d\d):(\d\d) GMT$/;
var rfc850 = /^(Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d\d) (\d\d):(\d\d):(\d\d) GMT$/;
var ascii = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \d|\d\d) (\d\d):(\d\d):(\d\d) (\d{4})$/;
var isoYmdWithTimeExtensionRegex = combineRegexes(isoYmdRegex, isoTimeExtensionRegex);
var isoWeekWithTimeExtensionRegex = combineRegexes(isoWeekRegex, isoTimeExtensionRegex);
var isoOrdinalWithTimeExtensionRegex = combineRegexes(isoOrdinalRegex, isoTimeExtensionRegex);
var isoTimeCombinedRegex = combineRegexes(isoTimeRegex);
var extractISOYmdTimeAndOffset = combineExtractors(extractISOYmd, extractISOTime, extractISOOffset, extractIANAZone);
var extractISOWeekTimeAndOffset = combineExtractors(extractISOWeekData, extractISOTime, extractISOOffset, extractIANAZone);
var extractISOOrdinalDateAndTime = combineExtractors(extractISOOrdinalData, extractISOTime, extractISOOffset, extractIANAZone);
var extractISOTimeAndOffset = combineExtractors(extractISOTime, extractISOOffset, extractIANAZone);
var extractISOTimeOnly = combineExtractors(extractISOTime);
var sqlYmdWithTimeExtensionRegex = combineRegexes(sqlYmdRegex, sqlTimeExtensionRegex);
var sqlTimeCombinedRegex = combineRegexes(sqlTimeRegex);
var extractISOTimeOffsetAndIANAZone = combineExtractors(extractISOTime, extractISOOffset, extractIANAZone);

// node_modules/luxon/src/duration.js
var clone2 = function(dur, alts, clear = false) {
  const conf = {
    values: clear ? alts.values : { ...dur.values, ...alts.values || {} },
    loc: dur.loc.clone(alts.loc),
    conversionAccuracy: alts.conversionAccuracy || dur.conversionAccuracy,
    matrix: alts.matrix || dur.matrix
  };
  return new Duration(conf);
};
var durationToMillis = function(matrix, vals) {
  let sum = vals.milliseconds ?? 0;
  for (const unit of reverseUnits.slice(1)) {
    if (vals[unit]) {
      sum += vals[unit] * matrix[unit]["milliseconds"];
    }
  }
  return sum;
};
var normalizeValues = function(matrix, vals) {
  const factor = durationToMillis(matrix, vals) < 0 ? -1 : 1;
  orderedUnits.reduceRight((previous, current) => {
    if (!isUndefined2(vals[current])) {
      if (previous) {
        const previousVal = vals[previous] * factor;
        const conv = matrix[current][previous];
        const rollUp = Math.floor(previousVal / conv);
        vals[current] += rollUp * factor;
        vals[previous] -= rollUp * conv * factor;
      }
      return current;
    } else {
      return previous;
    }
  }, null);
  orderedUnits.reduce((previous, current) => {
    if (!isUndefined2(vals[current])) {
      if (previous) {
        const fraction = vals[previous] % 1;
        vals[previous] -= fraction;
        vals[current] += fraction * matrix[previous][current];
      }
      return current;
    } else {
      return previous;
    }
  }, null);
};
var removeZeroes = function(vals) {
  const newVals = {};
  for (const [key, value2] of Object.entries(vals)) {
    if (value2 !== 0) {
      newVals[key] = value2;
    }
  }
  return newVals;
};
var INVALID = "Invalid Duration";
var lowOrderMatrix = {
  weeks: {
    days: 7,
    hours: 7 * 24,
    minutes: 7 * 24 * 60,
    seconds: 7 * 24 * 60 * 60,
    milliseconds: 7 * 24 * 60 * 60 * 1000
  },
  days: {
    hours: 24,
    minutes: 24 * 60,
    seconds: 24 * 60 * 60,
    milliseconds: 24 * 60 * 60 * 1000
  },
  hours: { minutes: 60, seconds: 60 * 60, milliseconds: 60 * 60 * 1000 },
  minutes: { seconds: 60, milliseconds: 60 * 1000 },
  seconds: { milliseconds: 1000 }
};
var casualMatrix = {
  years: {
    quarters: 4,
    months: 12,
    weeks: 52,
    days: 365,
    hours: 365 * 24,
    minutes: 365 * 24 * 60,
    seconds: 365 * 24 * 60 * 60,
    milliseconds: 365 * 24 * 60 * 60 * 1000
  },
  quarters: {
    months: 3,
    weeks: 13,
    days: 91,
    hours: 91 * 24,
    minutes: 91 * 24 * 60,
    seconds: 91 * 24 * 60 * 60,
    milliseconds: 91 * 24 * 60 * 60 * 1000
  },
  months: {
    weeks: 4,
    days: 30,
    hours: 30 * 24,
    minutes: 30 * 24 * 60,
    seconds: 30 * 24 * 60 * 60,
    milliseconds: 30 * 24 * 60 * 60 * 1000
  },
  ...lowOrderMatrix
};
var daysInYearAccurate = 146097 / 400;
var daysInMonthAccurate = 146097 / 4800;
var accurateMatrix = {
  years: {
    quarters: 4,
    months: 12,
    weeks: daysInYearAccurate / 7,
    days: daysInYearAccurate,
    hours: daysInYearAccurate * 24,
    minutes: daysInYearAccurate * 24 * 60,
    seconds: daysInYearAccurate * 24 * 60 * 60,
    milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000
  },
  quarters: {
    months: 3,
    weeks: daysInYearAccurate / 28,
    days: daysInYearAccurate / 4,
    hours: daysInYearAccurate * 24 / 4,
    minutes: daysInYearAccurate * 24 * 60 / 4,
    seconds: daysInYearAccurate * 24 * 60 * 60 / 4,
    milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000 / 4
  },
  months: {
    weeks: daysInMonthAccurate / 7,
    days: daysInMonthAccurate,
    hours: daysInMonthAccurate * 24,
    minutes: daysInMonthAccurate * 24 * 60,
    seconds: daysInMonthAccurate * 24 * 60 * 60,
    milliseconds: daysInMonthAccurate * 24 * 60 * 60 * 1000
  },
  ...lowOrderMatrix
};
var orderedUnits = [
  "years",
  "quarters",
  "months",
  "weeks",
  "days",
  "hours",
  "minutes",
  "seconds",
  "milliseconds"
];
var reverseUnits = orderedUnits.slice(0).reverse();

class Duration {
  constructor(config) {
    const accurate = config.conversionAccuracy === "longterm" || false;
    let matrix = accurate ? accurateMatrix : casualMatrix;
    if (config.matrix) {
      matrix = config.matrix;
    }
    this.values = config.values;
    this.loc = config.loc || Locale.create();
    this.conversionAccuracy = accurate ? "longterm" : "casual";
    this.invalid = config.invalid || null;
    this.matrix = matrix;
    this.isLuxonDuration = true;
  }
  static fromMillis(count, opts) {
    return Duration.fromObject({ milliseconds: count }, opts);
  }
  static fromObject(obj, opts = {}) {
    if (obj == null || typeof obj !== "object") {
      throw new InvalidArgumentError(`Duration.fromObject: argument expected to be an object, got ${obj === null ? "null" : typeof obj}`);
    }
    return new Duration({
      values: normalizeObject(obj, Duration.normalizeUnit),
      loc: Locale.fromObject(opts),
      conversionAccuracy: opts.conversionAccuracy,
      matrix: opts.matrix
    });
  }
  static fromDurationLike(durationLike) {
    if (isNumber4(durationLike)) {
      return Duration.fromMillis(durationLike);
    } else if (Duration.isDuration(durationLike)) {
      return durationLike;
    } else if (typeof durationLike === "object") {
      return Duration.fromObject(durationLike);
    } else {
      throw new InvalidArgumentError(`Unknown duration argument ${durationLike} of type ${typeof durationLike}`);
    }
  }
  static fromISO(text2, opts) {
    const [parsed] = parseISODuration(text2);
    if (parsed) {
      return Duration.fromObject(parsed, opts);
    } else {
      return Duration.invalid("unparsable", `the input "${text2}" can't be parsed as ISO 8601`);
    }
  }
  static fromISOTime(text2, opts) {
    const [parsed] = parseISOTimeOnly(text2);
    if (parsed) {
      return Duration.fromObject(parsed, opts);
    } else {
      return Duration.invalid("unparsable", `the input "${text2}" can't be parsed as ISO 8601`);
    }
  }
  static invalid(reason, explanation = null) {
    if (!reason) {
      throw new InvalidArgumentError("need to specify a reason the Duration is invalid");
    }
    const invalid3 = reason instanceof Invalid ? reason : new Invalid(reason, explanation);
    if (Settings.throwOnInvalid) {
      throw new InvalidDurationError(invalid3);
    } else {
      return new Duration({ invalid: invalid3 });
    }
  }
  static normalizeUnit(unit) {
    const normalized = {
      year: "years",
      years: "years",
      quarter: "quarters",
      quarters: "quarters",
      month: "months",
      months: "months",
      week: "weeks",
      weeks: "weeks",
      day: "days",
      days: "days",
      hour: "hours",
      hours: "hours",
      minute: "minutes",
      minutes: "minutes",
      second: "seconds",
      seconds: "seconds",
      millisecond: "milliseconds",
      milliseconds: "milliseconds"
    }[unit ? unit.toLowerCase() : unit];
    if (!normalized)
      throw new InvalidUnitError(unit);
    return normalized;
  }
  static isDuration(o) {
    return o && o.isLuxonDuration || false;
  }
  get locale() {
    return this.isValid ? this.loc.locale : null;
  }
  get numberingSystem() {
    return this.isValid ? this.loc.numberingSystem : null;
  }
  toFormat(fmt3, opts = {}) {
    const fmtOpts = {
      ...opts,
      floor: opts.round !== false && opts.floor !== false
    };
    return this.isValid ? Formatter.create(this.loc, fmtOpts).formatDurationFromString(this, fmt3) : INVALID;
  }
  toHuman(opts = {}) {
    if (!this.isValid)
      return INVALID;
    const l2 = orderedUnits.map((unit) => {
      const val = this.values[unit];
      if (isUndefined2(val)) {
        return null;
      }
      return this.loc.numberFormatter({ style: "unit", unitDisplay: "long", ...opts, unit: unit.slice(0, -1) }).format(val);
    }).filter((n2) => n2);
    return this.loc.listFormatter({ type: "conjunction", style: opts.listStyle || "narrow", ...opts }).format(l2);
  }
  toObject() {
    if (!this.isValid)
      return {};
    return { ...this.values };
  }
  toISO() {
    if (!this.isValid)
      return null;
    let s3 = "P";
    if (this.years !== 0)
      s3 += this.years + "Y";
    if (this.months !== 0 || this.quarters !== 0)
      s3 += this.months + this.quarters * 3 + "M";
    if (this.weeks !== 0)
      s3 += this.weeks + "W";
    if (this.days !== 0)
      s3 += this.days + "D";
    if (this.hours !== 0 || this.minutes !== 0 || this.seconds !== 0 || this.milliseconds !== 0)
      s3 += "T";
    if (this.hours !== 0)
      s3 += this.hours + "H";
    if (this.minutes !== 0)
      s3 += this.minutes + "M";
    if (this.seconds !== 0 || this.milliseconds !== 0)
      s3 += roundTo(this.seconds + this.milliseconds / 1000, 3) + "S";
    if (s3 === "P")
      s3 += "T0S";
    return s3;
  }
  toISOTime(opts = {}) {
    if (!this.isValid)
      return null;
    const millis = this.toMillis();
    if (millis < 0 || millis >= 86400000)
      return null;
    opts = {
      suppressMilliseconds: false,
      suppressSeconds: false,
      includePrefix: false,
      format: "extended",
      ...opts,
      includeOffset: false
    };
    const dateTime = DateTime.fromMillis(millis, { zone: "UTC" });
    return dateTime.toISOTime(opts);
  }
  toJSON() {
    return this.toISO();
  }
  toString() {
    return this.toISO();
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    if (this.isValid) {
      return `Duration { values: ${JSON.stringify(this.values)} }`;
    } else {
      return `Duration { Invalid, reason: ${this.invalidReason} }`;
    }
  }
  toMillis() {
    if (!this.isValid)
      return NaN;
    return durationToMillis(this.matrix, this.values);
  }
  valueOf() {
    return this.toMillis();
  }
  plus(duration2) {
    if (!this.isValid)
      return this;
    const dur = Duration.fromDurationLike(duration2), result = {};
    for (const k of orderedUnits) {
      if (hasOwnProperty(dur.values, k) || hasOwnProperty(this.values, k)) {
        result[k] = dur.get(k) + this.get(k);
      }
    }
    return clone2(this, { values: result }, true);
  }
  minus(duration2) {
    if (!this.isValid)
      return this;
    const dur = Duration.fromDurationLike(duration2);
    return this.plus(dur.negate());
  }
  mapUnits(fn2) {
    if (!this.isValid)
      return this;
    const result = {};
    for (const k of Object.keys(this.values)) {
      result[k] = asNumber(fn2(this.values[k], k));
    }
    return clone2(this, { values: result }, true);
  }
  get(unit) {
    return this[Duration.normalizeUnit(unit)];
  }
  set(values) {
    if (!this.isValid)
      return this;
    const mixed = { ...this.values, ...normalizeObject(values, Duration.normalizeUnit) };
    return clone2(this, { values: mixed });
  }
  reconfigure({ locale: locale3, numberingSystem, conversionAccuracy, matrix } = {}) {
    const loc = this.loc.clone({ locale: locale3, numberingSystem });
    const opts = { loc, matrix, conversionAccuracy };
    return clone2(this, opts);
  }
  as(unit) {
    return this.isValid ? this.shiftTo(unit).get(unit) : NaN;
  }
  normalize() {
    if (!this.isValid)
      return this;
    const vals = this.toObject();
    normalizeValues(this.matrix, vals);
    return clone2(this, { values: vals }, true);
  }
  rescale() {
    if (!this.isValid)
      return this;
    const vals = removeZeroes(this.normalize().shiftToAll().toObject());
    return clone2(this, { values: vals }, true);
  }
  shiftTo(...units) {
    if (!this.isValid)
      return this;
    if (units.length === 0) {
      return this;
    }
    units = units.map((u) => Duration.normalizeUnit(u));
    const built = {}, accumulated = {}, vals = this.toObject();
    let lastUnit;
    for (const k of orderedUnits) {
      if (units.indexOf(k) >= 0) {
        lastUnit = k;
        let own = 0;
        for (const ak in accumulated) {
          own += this.matrix[ak][k] * accumulated[ak];
          accumulated[ak] = 0;
        }
        if (isNumber4(vals[k])) {
          own += vals[k];
        }
        const i = Math.trunc(own);
        built[k] = i;
        accumulated[k] = (own * 1000 - i * 1000) / 1000;
      } else if (isNumber4(vals[k])) {
        accumulated[k] = vals[k];
      }
    }
    for (const key in accumulated) {
      if (accumulated[key] !== 0) {
        built[lastUnit] += key === lastUnit ? accumulated[key] : accumulated[key] / this.matrix[lastUnit][key];
      }
    }
    normalizeValues(this.matrix, built);
    return clone2(this, { values: built }, true);
  }
  shiftToAll() {
    if (!this.isValid)
      return this;
    return this.shiftTo("years", "months", "weeks", "days", "hours", "minutes", "seconds", "milliseconds");
  }
  negate() {
    if (!this.isValid)
      return this;
    const negated = {};
    for (const k of Object.keys(this.values)) {
      negated[k] = this.values[k] === 0 ? 0 : -this.values[k];
    }
    return clone2(this, { values: negated }, true);
  }
  get years() {
    return this.isValid ? this.values.years || 0 : NaN;
  }
  get quarters() {
    return this.isValid ? this.values.quarters || 0 : NaN;
  }
  get months() {
    return this.isValid ? this.values.months || 0 : NaN;
  }
  get weeks() {
    return this.isValid ? this.values.weeks || 0 : NaN;
  }
  get days() {
    return this.isValid ? this.values.days || 0 : NaN;
  }
  get hours() {
    return this.isValid ? this.values.hours || 0 : NaN;
  }
  get minutes() {
    return this.isValid ? this.values.minutes || 0 : NaN;
  }
  get seconds() {
    return this.isValid ? this.values.seconds || 0 : NaN;
  }
  get milliseconds() {
    return this.isValid ? this.values.milliseconds || 0 : NaN;
  }
  get isValid() {
    return this.invalid === null;
  }
  get invalidReason() {
    return this.invalid ? this.invalid.reason : null;
  }
  get invalidExplanation() {
    return this.invalid ? this.invalid.explanation : null;
  }
  equals(other) {
    if (!this.isValid || !other.isValid) {
      return false;
    }
    if (!this.loc.equals(other.loc)) {
      return false;
    }
    function eq(v1, v2) {
      if (v1 === undefined || v1 === 0)
        return v2 === undefined || v2 === 0;
      return v1 === v2;
    }
    for (const u of orderedUnits) {
      if (!eq(this.values[u], other.values[u])) {
        return false;
      }
    }
    return true;
  }
}

// node_modules/luxon/src/interval.js
var validateStartEnd = function(start3, end3) {
  if (!start3 || !start3.isValid) {
    return Interval.invalid("missing or invalid start");
  } else if (!end3 || !end3.isValid) {
    return Interval.invalid("missing or invalid end");
  } else if (end3 < start3) {
    return Interval.invalid("end before start", `The end of an interval must be after its start, but you had start=${start3.toISO()} and end=${end3.toISO()}`);
  } else {
    return null;
  }
};
var INVALID2 = "Invalid Interval";

class Interval {
  constructor(config) {
    this.s = config.start;
    this.e = config.end;
    this.invalid = config.invalid || null;
    this.isLuxonInterval = true;
  }
  static invalid(reason, explanation = null) {
    if (!reason) {
      throw new InvalidArgumentError("need to specify a reason the Interval is invalid");
    }
    const invalid4 = reason instanceof Invalid ? reason : new Invalid(reason, explanation);
    if (Settings.throwOnInvalid) {
      throw new InvalidIntervalError(invalid4);
    } else {
      return new Interval({ invalid: invalid4 });
    }
  }
  static fromDateTimes(start3, end3) {
    const builtStart = friendlyDateTime(start3), builtEnd = friendlyDateTime(end3);
    const validateError = validateStartEnd(builtStart, builtEnd);
    if (validateError == null) {
      return new Interval({
        start: builtStart,
        end: builtEnd
      });
    } else {
      return validateError;
    }
  }
  static after(start3, duration3) {
    const dur = Duration.fromDurationLike(duration3), dt = friendlyDateTime(start3);
    return Interval.fromDateTimes(dt, dt.plus(dur));
  }
  static before(end3, duration3) {
    const dur = Duration.fromDurationLike(duration3), dt = friendlyDateTime(end3);
    return Interval.fromDateTimes(dt.minus(dur), dt);
  }
  static fromISO(text2, opts) {
    const [s3, e] = (text2 || "").split("/", 2);
    if (s3 && e) {
      let start3, startIsValid;
      try {
        start3 = DateTime.fromISO(s3, opts);
        startIsValid = start3.isValid;
      } catch (e2) {
        startIsValid = false;
      }
      let end3, endIsValid;
      try {
        end3 = DateTime.fromISO(e, opts);
        endIsValid = end3.isValid;
      } catch (e2) {
        endIsValid = false;
      }
      if (startIsValid && endIsValid) {
        return Interval.fromDateTimes(start3, end3);
      }
      if (startIsValid) {
        const dur = Duration.fromISO(e, opts);
        if (dur.isValid) {
          return Interval.after(start3, dur);
        }
      } else if (endIsValid) {
        const dur = Duration.fromISO(s3, opts);
        if (dur.isValid) {
          return Interval.before(end3, dur);
        }
      }
    }
    return Interval.invalid("unparsable", `the input "${text2}" can't be parsed as ISO 8601`);
  }
  static isInterval(o) {
    return o && o.isLuxonInterval || false;
  }
  get start() {
    return this.isValid ? this.s : null;
  }
  get end() {
    return this.isValid ? this.e : null;
  }
  get isValid() {
    return this.invalidReason === null;
  }
  get invalidReason() {
    return this.invalid ? this.invalid.reason : null;
  }
  get invalidExplanation() {
    return this.invalid ? this.invalid.explanation : null;
  }
  length(unit = "milliseconds") {
    return this.isValid ? this.toDuration(...[unit]).get(unit) : NaN;
  }
  count(unit = "milliseconds", opts) {
    if (!this.isValid)
      return NaN;
    const start3 = this.start.startOf(unit, opts);
    let end3;
    if (opts?.useLocaleWeeks) {
      end3 = this.end.reconfigure({ locale: start3.locale });
    } else {
      end3 = this.end;
    }
    end3 = end3.startOf(unit, opts);
    return Math.floor(end3.diff(start3, unit).get(unit)) + (end3.valueOf() !== this.end.valueOf());
  }
  hasSame(unit) {
    return this.isValid ? this.isEmpty() || this.e.minus(1).hasSame(this.s, unit) : false;
  }
  isEmpty() {
    return this.s.valueOf() === this.e.valueOf();
  }
  isAfter(dateTime) {
    if (!this.isValid)
      return false;
    return this.s > dateTime;
  }
  isBefore(dateTime) {
    if (!this.isValid)
      return false;
    return this.e <= dateTime;
  }
  contains(dateTime) {
    if (!this.isValid)
      return false;
    return this.s <= dateTime && this.e > dateTime;
  }
  set({ start: start3, end: end3 } = {}) {
    if (!this.isValid)
      return this;
    return Interval.fromDateTimes(start3 || this.s, end3 || this.e);
  }
  splitAt(...dateTimes) {
    if (!this.isValid)
      return [];
    const sorted = dateTimes.map(friendlyDateTime).filter((d) => this.contains(d)).sort((a, b) => a.toMillis() - b.toMillis()), results = [];
    let { s: s3 } = this, i = 0;
    while (s3 < this.e) {
      const added = sorted[i] || this.e, next = +added > +this.e ? this.e : added;
      results.push(Interval.fromDateTimes(s3, next));
      s3 = next;
      i += 1;
    }
    return results;
  }
  splitBy(duration3) {
    const dur = Duration.fromDurationLike(duration3);
    if (!this.isValid || !dur.isValid || dur.as("milliseconds") === 0) {
      return [];
    }
    let { s: s3 } = this, idx = 1, next;
    const results = [];
    while (s3 < this.e) {
      const added = this.start.plus(dur.mapUnits((x2) => x2 * idx));
      next = +added > +this.e ? this.e : added;
      results.push(Interval.fromDateTimes(s3, next));
      s3 = next;
      idx += 1;
    }
    return results;
  }
  divideEqually(numberOfParts) {
    if (!this.isValid)
      return [];
    return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);
  }
  overlaps(other) {
    return this.e > other.s && this.s < other.e;
  }
  abutsStart(other) {
    if (!this.isValid)
      return false;
    return +this.e === +other.s;
  }
  abutsEnd(other) {
    if (!this.isValid)
      return false;
    return +other.e === +this.s;
  }
  engulfs(other) {
    if (!this.isValid)
      return false;
    return this.s <= other.s && this.e >= other.e;
  }
  equals(other) {
    if (!this.isValid || !other.isValid) {
      return false;
    }
    return this.s.equals(other.s) && this.e.equals(other.e);
  }
  intersection(other) {
    if (!this.isValid)
      return this;
    const s3 = this.s > other.s ? this.s : other.s, e = this.e < other.e ? this.e : other.e;
    if (s3 >= e) {
      return null;
    } else {
      return Interval.fromDateTimes(s3, e);
    }
  }
  union(other) {
    if (!this.isValid)
      return this;
    const s3 = this.s < other.s ? this.s : other.s, e = this.e > other.e ? this.e : other.e;
    return Interval.fromDateTimes(s3, e);
  }
  static merge(intervals) {
    const [found, final] = intervals.sort((a, b) => a.s - b.s).reduce(([sofar, current], item2) => {
      if (!current) {
        return [sofar, item2];
      } else if (current.overlaps(item2) || current.abutsStart(item2)) {
        return [sofar, current.union(item2)];
      } else {
        return [sofar.concat([current]), item2];
      }
    }, [[], null]);
    if (final) {
      found.push(final);
    }
    return found;
  }
  static xor(intervals) {
    let start3 = null, currentCount = 0;
    const results = [], ends = intervals.map((i) => [
      { time: i.s, type: "s" },
      { time: i.e, type: "e" }
    ]), flattened = Array.prototype.concat(...ends), arr = flattened.sort((a, b) => a.time - b.time);
    for (const i of arr) {
      currentCount += i.type === "s" ? 1 : -1;
      if (currentCount === 1) {
        start3 = i.time;
      } else {
        if (start3 && +start3 !== +i.time) {
          results.push(Interval.fromDateTimes(start3, i.time));
        }
        start3 = null;
      }
    }
    return Interval.merge(results);
  }
  difference(...intervals) {
    return Interval.xor([this].concat(intervals)).map((i) => this.intersection(i)).filter((i) => i && !i.isEmpty());
  }
  toString() {
    if (!this.isValid)
      return INVALID2;
    return `[${this.s.toISO()} \u2013 ${this.e.toISO()})`;
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    if (this.isValid) {
      return `Interval { start: ${this.s.toISO()}, end: ${this.e.toISO()} }`;
    } else {
      return `Interval { Invalid, reason: ${this.invalidReason} }`;
    }
  }
  toLocaleString(formatOpts = DATE_SHORT, opts = {}) {
    return this.isValid ? Formatter.create(this.s.loc.clone(opts), formatOpts).formatInterval(this) : INVALID2;
  }
  toISO(opts) {
    if (!this.isValid)
      return INVALID2;
    return `${this.s.toISO(opts)}/${this.e.toISO(opts)}`;
  }
  toISODate() {
    if (!this.isValid)
      return INVALID2;
    return `${this.s.toISODate()}/${this.e.toISODate()}`;
  }
  toISOTime(opts) {
    if (!this.isValid)
      return INVALID2;
    return `${this.s.toISOTime(opts)}/${this.e.toISOTime(opts)}`;
  }
  toFormat(dateFormat, { separator = " \u2013 " } = {}) {
    if (!this.isValid)
      return INVALID2;
    return `${this.s.toFormat(dateFormat)}${separator}${this.e.toFormat(dateFormat)}`;
  }
  toDuration(unit, opts) {
    if (!this.isValid) {
      return Duration.invalid(this.invalidReason);
    }
    return this.e.diff(this.s, unit, opts);
  }
  mapEndpoints(mapFn) {
    return Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));
  }
}

// node_modules/luxon/src/info.js
class Info {
  static hasDST(zone6 = Settings.defaultZone) {
    const proto = DateTime.now().setZone(zone6).set({ month: 12 });
    return !zone6.isUniversal && proto.offset !== proto.set({ month: 6 }).offset;
  }
  static isValidIANAZone(zone6) {
    return IANAZone.isValidZone(zone6);
  }
  static normalizeZone(input) {
    return normalizeZone(input, Settings.defaultZone);
  }
  static getStartOfWeek({ locale: locale4 = null, locObj = null } = {}) {
    return (locObj || Locale.create(locale4)).getStartOfWeek();
  }
  static getMinimumDaysInFirstWeek({ locale: locale4 = null, locObj = null } = {}) {
    return (locObj || Locale.create(locale4)).getMinDaysInFirstWeek();
  }
  static getWeekendWeekdays({ locale: locale4 = null, locObj = null } = {}) {
    return (locObj || Locale.create(locale4)).getWeekendDays().slice();
  }
  static months(length2 = "long", { locale: locale4 = null, numberingSystem = null, locObj = null, outputCalendar = "gregory" } = {}) {
    return (locObj || Locale.create(locale4, numberingSystem, outputCalendar)).months(length2);
  }
  static monthsFormat(length2 = "long", { locale: locale4 = null, numberingSystem = null, locObj = null, outputCalendar = "gregory" } = {}) {
    return (locObj || Locale.create(locale4, numberingSystem, outputCalendar)).months(length2, true);
  }
  static weekdays(length2 = "long", { locale: locale4 = null, numberingSystem = null, locObj = null } = {}) {
    return (locObj || Locale.create(locale4, numberingSystem, null)).weekdays(length2);
  }
  static weekdaysFormat(length2 = "long", { locale: locale4 = null, numberingSystem = null, locObj = null } = {}) {
    return (locObj || Locale.create(locale4, numberingSystem, null)).weekdays(length2, true);
  }
  static meridiems({ locale: locale4 = null } = {}) {
    return Locale.create(locale4).meridiems();
  }
  static eras(length2 = "short", { locale: locale4 = null } = {}) {
    return Locale.create(locale4, null, "gregory").eras(length2);
  }
  static features() {
    return { relative: hasRelative(), localeWeek: hasLocaleWeekInfo() };
  }
}

// node_modules/luxon/src/impl/diff.js
var dayDiff = function(earlier, later) {
  const utcDayStart = (dt) => dt.toUTC(0, { keepLocalTime: true }).startOf("day").valueOf(), ms = utcDayStart(later) - utcDayStart(earlier);
  return Math.floor(Duration.fromMillis(ms).as("days"));
};
var highOrderDiffs = function(cursor, later, units) {
  const differs = [
    ["years", (a, b) => b.year - a.year],
    ["quarters", (a, b) => b.quarter - a.quarter + (b.year - a.year) * 4],
    ["months", (a, b) => b.month - a.month + (b.year - a.year) * 12],
    [
      "weeks",
      (a, b) => {
        const days = dayDiff(a, b);
        return (days - days % 7) / 7;
      }
    ],
    ["days", dayDiff]
  ];
  const results = {};
  const earlier = cursor;
  let lowestOrder, highWater;
  for (const [unit, differ] of differs) {
    if (units.indexOf(unit) >= 0) {
      lowestOrder = unit;
      results[unit] = differ(cursor, later);
      highWater = earlier.plus(results);
      if (highWater > later) {
        results[unit]--;
        cursor = earlier.plus(results);
        if (cursor > later) {
          highWater = cursor;
          results[unit]--;
          cursor = earlier.plus(results);
        }
      } else {
        cursor = highWater;
      }
    }
  }
  return [cursor, results, highWater, lowestOrder];
};
function diff_default(earlier, later, units, opts) {
  let [cursor, results, highWater, lowestOrder] = highOrderDiffs(earlier, later, units);
  const remainingMillis = later - cursor;
  const lowerOrderUnits = units.filter((u) => ["hours", "minutes", "seconds", "milliseconds"].indexOf(u) >= 0);
  if (lowerOrderUnits.length === 0) {
    if (highWater < later) {
      highWater = cursor.plus({ [lowestOrder]: 1 });
    }
    if (highWater !== cursor) {
      results[lowestOrder] = (results[lowestOrder] || 0) + remainingMillis / (highWater - cursor);
    }
  }
  const duration4 = Duration.fromObject(results, opts);
  if (lowerOrderUnits.length > 0) {
    return Duration.fromMillis(remainingMillis, opts).shiftTo(...lowerOrderUnits).plus(duration4);
  } else {
    return duration4;
  }
}

// node_modules/luxon/src/impl/digits.js
function parseDigits(str) {
  let value2 = parseInt(str, 10);
  if (isNaN(value2)) {
    value2 = "";
    for (let i = 0;i < str.length; i++) {
      const code2 = str.charCodeAt(i);
      if (str[i].search(numberingSystems.hanidec) !== -1) {
        value2 += hanidecChars.indexOf(str[i]);
      } else {
        for (const key in numberingSystemsUTF16) {
          const [min2, max3] = numberingSystemsUTF16[key];
          if (code2 >= min2 && code2 <= max3) {
            value2 += code2 - min2;
          }
        }
      }
    }
    return parseInt(value2, 10);
  } else {
    return value2;
  }
}
function digitRegex({ numberingSystem }, append = "") {
  return new RegExp(`${numberingSystems[numberingSystem || "latn"]}${append}`);
}
var numberingSystems = {
  arab: "[\u0660-\u0669]",
  arabext: "[\u06F0-\u06F9]",
  bali: "[\u1B50-\u1B59]",
  beng: "[\u09E6-\u09EF]",
  deva: "[\u0966-\u096F]",
  fullwide: "[\uFF10-\uFF19]",
  gujr: "[\u0AE6-\u0AEF]",
  hanidec: "[\u3007|\u4E00|\u4E8C|\u4E09|\u56DB|\u4E94|\u516D|\u4E03|\u516B|\u4E5D]",
  khmr: "[\u17E0-\u17E9]",
  knda: "[\u0CE6-\u0CEF]",
  laoo: "[\u0ED0-\u0ED9]",
  limb: "[\u1946-\u194F]",
  mlym: "[\u0D66-\u0D6F]",
  mong: "[\u1810-\u1819]",
  mymr: "[\u1040-\u1049]",
  orya: "[\u0B66-\u0B6F]",
  tamldec: "[\u0BE6-\u0BEF]",
  telu: "[\u0C66-\u0C6F]",
  thai: "[\u0E50-\u0E59]",
  tibt: "[\u0F20-\u0F29]",
  latn: "\\d"
};
var numberingSystemsUTF16 = {
  arab: [1632, 1641],
  arabext: [1776, 1785],
  bali: [6992, 7001],
  beng: [2534, 2543],
  deva: [2406, 2415],
  fullwide: [65296, 65303],
  gujr: [2790, 2799],
  khmr: [6112, 6121],
  knda: [3302, 3311],
  laoo: [3792, 3801],
  limb: [6470, 6479],
  mlym: [3430, 3439],
  mong: [6160, 6169],
  mymr: [4160, 4169],
  orya: [2918, 2927],
  tamldec: [3046, 3055],
  telu: [3174, 3183],
  thai: [3664, 3673],
  tibt: [3872, 3881]
};
var hanidecChars = numberingSystems.hanidec.replace(/[\[|\]]/g, "").split("");

// node_modules/luxon/src/impl/tokenParser.js
var intUnit = function(regex, post = (i) => i) {
  return { regex, deser: ([s3]) => post(parseDigits(s3)) };
};
var fixListRegex = function(s3) {
  return s3.replace(/\./g, "\\.?").replace(spaceOrNBSPRegExp, spaceOrNBSP);
};
var stripInsensitivities = function(s3) {
  return s3.replace(/\./g, "").replace(spaceOrNBSPRegExp, " ").toLowerCase();
};
var oneOf = function(strings, startIndex) {
  if (strings === null) {
    return null;
  } else {
    return {
      regex: RegExp(strings.map(fixListRegex).join("|")),
      deser: ([s3]) => strings.findIndex((i) => stripInsensitivities(s3) === stripInsensitivities(i)) + startIndex
    };
  }
};
var offset3 = function(regex, groups) {
  return { regex, deser: ([, h, m]) => signedOffset(h, m), groups };
};
var simple = function(regex) {
  return { regex, deser: ([s3]) => s3 };
};
var escapeToken = function(value2) {
  return value2.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
};
var unitForToken = function(token, loc) {
  const one = digitRegex(loc), two = digitRegex(loc, "{2}"), three = digitRegex(loc, "{3}"), four = digitRegex(loc, "{4}"), six = digitRegex(loc, "{6}"), oneOrTwo = digitRegex(loc, "{1,2}"), oneToThree = digitRegex(loc, "{1,3}"), oneToSix = digitRegex(loc, "{1,6}"), oneToNine = digitRegex(loc, "{1,9}"), twoToFour = digitRegex(loc, "{2,4}"), fourToSix = digitRegex(loc, "{4,6}"), literal = (t) => ({ regex: RegExp(escapeToken(t.val)), deser: ([s3]) => s3, literal: true }), unitate = (t) => {
    if (token.literal) {
      return literal(t);
    }
    switch (t.val) {
      case "G":
        return oneOf(loc.eras("short"), 0);
      case "GG":
        return oneOf(loc.eras("long"), 0);
      case "y":
        return intUnit(oneToSix);
      case "yy":
        return intUnit(twoToFour, untruncateYear);
      case "yyyy":
        return intUnit(four);
      case "yyyyy":
        return intUnit(fourToSix);
      case "yyyyyy":
        return intUnit(six);
      case "M":
        return intUnit(oneOrTwo);
      case "MM":
        return intUnit(two);
      case "MMM":
        return oneOf(loc.months("short", true), 1);
      case "MMMM":
        return oneOf(loc.months("long", true), 1);
      case "L":
        return intUnit(oneOrTwo);
      case "LL":
        return intUnit(two);
      case "LLL":
        return oneOf(loc.months("short", false), 1);
      case "LLLL":
        return oneOf(loc.months("long", false), 1);
      case "d":
        return intUnit(oneOrTwo);
      case "dd":
        return intUnit(two);
      case "o":
        return intUnit(oneToThree);
      case "ooo":
        return intUnit(three);
      case "HH":
        return intUnit(two);
      case "H":
        return intUnit(oneOrTwo);
      case "hh":
        return intUnit(two);
      case "h":
        return intUnit(oneOrTwo);
      case "mm":
        return intUnit(two);
      case "m":
        return intUnit(oneOrTwo);
      case "q":
        return intUnit(oneOrTwo);
      case "qq":
        return intUnit(two);
      case "s":
        return intUnit(oneOrTwo);
      case "ss":
        return intUnit(two);
      case "S":
        return intUnit(oneToThree);
      case "SSS":
        return intUnit(three);
      case "u":
        return simple(oneToNine);
      case "uu":
        return simple(oneOrTwo);
      case "uuu":
        return intUnit(one);
      case "a":
        return oneOf(loc.meridiems(), 0);
      case "kkkk":
        return intUnit(four);
      case "kk":
        return intUnit(twoToFour, untruncateYear);
      case "W":
        return intUnit(oneOrTwo);
      case "WW":
        return intUnit(two);
      case "E":
      case "c":
        return intUnit(one);
      case "EEE":
        return oneOf(loc.weekdays("short", false), 1);
      case "EEEE":
        return oneOf(loc.weekdays("long", false), 1);
      case "ccc":
        return oneOf(loc.weekdays("short", true), 1);
      case "cccc":
        return oneOf(loc.weekdays("long", true), 1);
      case "Z":
      case "ZZ":
        return offset3(new RegExp(`([+-]${oneOrTwo.source})(?::(${two.source}))?`), 2);
      case "ZZZ":
        return offset3(new RegExp(`([+-]${oneOrTwo.source})(${two.source})?`), 2);
      case "z":
        return simple(/[a-z_+-/]{1,256}?/i);
      case " ":
        return simple(/[^\S\n\r]/);
      default:
        return literal(t);
    }
  };
  const unit = unitate(token) || {
    invalidReason: MISSING_FTP
  };
  unit.token = token;
  return unit;
};
var tokenForPart = function(part, formatOpts, resolvedOpts) {
  const { type, value: value2 } = part;
  if (type === "literal") {
    const isSpace = /^\s+$/.test(value2);
    return {
      literal: !isSpace,
      val: isSpace ? " " : value2
    };
  }
  const style3 = formatOpts[type];
  let actualType = type;
  if (type === "hour") {
    if (formatOpts.hour12 != null) {
      actualType = formatOpts.hour12 ? "hour12" : "hour24";
    } else if (formatOpts.hourCycle != null) {
      if (formatOpts.hourCycle === "h11" || formatOpts.hourCycle === "h12") {
        actualType = "hour12";
      } else {
        actualType = "hour24";
      }
    } else {
      actualType = resolvedOpts.hour12 ? "hour12" : "hour24";
    }
  }
  let val = partTypeStyleToTokenVal[actualType];
  if (typeof val === "object") {
    val = val[style3];
  }
  if (val) {
    return {
      literal: false,
      val
    };
  }
  return;
};
var buildRegex = function(units) {
  const re = units.map((u) => u.regex).reduce((f, r) => `${f}(${r.source})`, "");
  return [`^${re}\$`, units];
};
var match = function(input, regex, handlers) {
  const matches = input.match(regex);
  if (matches) {
    const all = {};
    let matchIndex = 1;
    for (const i in handlers) {
      if (hasOwnProperty(handlers, i)) {
        const h = handlers[i], groups = h.groups ? h.groups + 1 : 1;
        if (!h.literal && h.token) {
          all[h.token.val[0]] = h.deser(matches.slice(matchIndex, matchIndex + groups));
        }
        matchIndex += groups;
      }
    }
    return [matches, all];
  } else {
    return [matches, {}];
  }
};
var dateTimeFromMatches = function(matches) {
  const toField = (token) => {
    switch (token) {
      case "S":
        return "millisecond";
      case "s":
        return "second";
      case "m":
        return "minute";
      case "h":
      case "H":
        return "hour";
      case "d":
        return "day";
      case "o":
        return "ordinal";
      case "L":
      case "M":
        return "month";
      case "y":
        return "year";
      case "E":
      case "c":
        return "weekday";
      case "W":
        return "weekNumber";
      case "k":
        return "weekYear";
      case "q":
        return "quarter";
      default:
        return null;
    }
  };
  let zone6 = null;
  let specificOffset;
  if (!isUndefined2(matches.z)) {
    zone6 = IANAZone.create(matches.z);
  }
  if (!isUndefined2(matches.Z)) {
    if (!zone6) {
      zone6 = new FixedOffsetZone(matches.Z);
    }
    specificOffset = matches.Z;
  }
  if (!isUndefined2(matches.q)) {
    matches.M = (matches.q - 1) * 3 + 1;
  }
  if (!isUndefined2(matches.h)) {
    if (matches.h < 12 && matches.a === 1) {
      matches.h += 12;
    } else if (matches.h === 12 && matches.a === 0) {
      matches.h = 0;
    }
  }
  if (matches.G === 0 && matches.y) {
    matches.y = -matches.y;
  }
  if (!isUndefined2(matches.u)) {
    matches.S = parseMillis(matches.u);
  }
  const vals = Object.keys(matches).reduce((r, k) => {
    const f = toField(k);
    if (f) {
      r[f] = matches[k];
    }
    return r;
  }, {});
  return [vals, zone6, specificOffset];
};
var getDummyDateTime = function() {
  if (!dummyDateTimeCache) {
    dummyDateTimeCache = DateTime.fromMillis(1555555555555);
  }
  return dummyDateTimeCache;
};
var maybeExpandMacroToken = function(token, locale4) {
  if (token.literal) {
    return token;
  }
  const formatOpts = Formatter.macroTokenToFormatOpts(token.val);
  const tokens2 = formatOptsToTokens(formatOpts, locale4);
  if (tokens2 == null || tokens2.includes(undefined)) {
    return token;
  }
  return tokens2;
};
function expandMacroTokens(tokens2, locale4) {
  return Array.prototype.concat(...tokens2.map((t) => maybeExpandMacroToken(t, locale4)));
}
function explainFromTokens(locale4, input, format2) {
  const tokens2 = expandMacroTokens(Formatter.parseFormat(format2), locale4), units = tokens2.map((t) => unitForToken(t, locale4)), disqualifyingUnit = units.find((t) => t.invalidReason);
  if (disqualifyingUnit) {
    return { input, tokens: tokens2, invalidReason: disqualifyingUnit.invalidReason };
  } else {
    const [regexString, handlers] = buildRegex(units), regex = RegExp(regexString, "i"), [rawMatches, matches] = match(input, regex, handlers), [result, zone6, specificOffset] = matches ? dateTimeFromMatches(matches) : [null, null, undefined];
    if (hasOwnProperty(matches, "a") && hasOwnProperty(matches, "H")) {
      throw new ConflictingSpecificationError("Can't include meridiem when specifying 24-hour format");
    }
    return { input, tokens: tokens2, regex, rawMatches, matches, result, zone: zone6, specificOffset };
  }
}
function parseFromTokens(locale4, input, format2) {
  const { result, zone: zone6, specificOffset, invalidReason } = explainFromTokens(locale4, input, format2);
  return [result, zone6, specificOffset, invalidReason];
}
function formatOptsToTokens(formatOpts, locale4) {
  if (!formatOpts) {
    return null;
  }
  const formatter4 = Formatter.create(locale4, formatOpts);
  const df = formatter4.dtFormatter(getDummyDateTime());
  const parts = df.formatToParts();
  const resolvedOpts = df.resolvedOptions();
  return parts.map((p) => tokenForPart(p, formatOpts, resolvedOpts));
}
var MISSING_FTP = "missing Intl.DateTimeFormat.formatToParts support";
var NBSP = String.fromCharCode(160);
var spaceOrNBSP = `[ ${NBSP}]`;
var spaceOrNBSPRegExp = new RegExp(spaceOrNBSP, "g");
var partTypeStyleToTokenVal = {
  year: {
    "2-digit": "yy",
    numeric: "yyyyy"
  },
  month: {
    numeric: "M",
    "2-digit": "MM",
    short: "MMM",
    long: "MMMM"
  },
  day: {
    numeric: "d",
    "2-digit": "dd"
  },
  weekday: {
    short: "EEE",
    long: "EEEE"
  },
  dayperiod: "a",
  dayPeriod: "a",
  hour12: {
    numeric: "h",
    "2-digit": "hh"
  },
  hour24: {
    numeric: "H",
    "2-digit": "HH"
  },
  minute: {
    numeric: "m",
    "2-digit": "mm"
  },
  second: {
    numeric: "s",
    "2-digit": "ss"
  },
  timeZoneName: {
    long: "ZZZZZ",
    short: "ZZZ"
  }
};
var dummyDateTimeCache = null;

// node_modules/luxon/src/datetime.js
var unsupportedZone = function(zone6) {
  return new Invalid("unsupported zone", `the zone "${zone6.name}" is not supported`);
};
var possiblyCachedWeekData = function(dt) {
  if (dt.weekData === null) {
    dt.weekData = gregorianToWeek(dt.c);
  }
  return dt.weekData;
};
var possiblyCachedLocalWeekData = function(dt) {
  if (dt.localWeekData === null) {
    dt.localWeekData = gregorianToWeek(dt.c, dt.loc.getMinDaysInFirstWeek(), dt.loc.getStartOfWeek());
  }
  return dt.localWeekData;
};
var clone3 = function(inst, alts) {
  const current = {
    ts: inst.ts,
    zone: inst.zone,
    c: inst.c,
    o: inst.o,
    loc: inst.loc,
    invalid: inst.invalid
  };
  return new DateTime({ ...current, ...alts, old: current });
};
var fixOffset = function(localTS, o, tz) {
  let utcGuess = localTS - o * 60 * 1000;
  const o2 = tz.offset(utcGuess);
  if (o === o2) {
    return [utcGuess, o];
  }
  utcGuess -= (o2 - o) * 60 * 1000;
  const o3 = tz.offset(utcGuess);
  if (o2 === o3) {
    return [utcGuess, o2];
  }
  return [localTS - Math.min(o2, o3) * 60 * 1000, Math.max(o2, o3)];
};
var tsToObj = function(ts, offset4) {
  ts += offset4 * 60 * 1000;
  const d = new Date(ts);
  return {
    year: d.getUTCFullYear(),
    month: d.getUTCMonth() + 1,
    day: d.getUTCDate(),
    hour: d.getUTCHours(),
    minute: d.getUTCMinutes(),
    second: d.getUTCSeconds(),
    millisecond: d.getUTCMilliseconds()
  };
};
var objToTS = function(obj, offset4, zone6) {
  return fixOffset(objToLocalTS(obj), offset4, zone6);
};
var adjustTime = function(inst, dur) {
  const oPre = inst.o, year = inst.c.year + Math.trunc(dur.years), month = inst.c.month + Math.trunc(dur.months) + Math.trunc(dur.quarters) * 3, c = {
    ...inst.c,
    year,
    month,
    day: Math.min(inst.c.day, daysInMonth(year, month)) + Math.trunc(dur.days) + Math.trunc(dur.weeks) * 7
  }, millisToAdd = Duration.fromObject({
    years: dur.years - Math.trunc(dur.years),
    quarters: dur.quarters - Math.trunc(dur.quarters),
    months: dur.months - Math.trunc(dur.months),
    weeks: dur.weeks - Math.trunc(dur.weeks),
    days: dur.days - Math.trunc(dur.days),
    hours: dur.hours,
    minutes: dur.minutes,
    seconds: dur.seconds,
    milliseconds: dur.milliseconds
  }).as("milliseconds"), localTS = objToLocalTS(c);
  let [ts, o] = fixOffset(localTS, oPre, inst.zone);
  if (millisToAdd !== 0) {
    ts += millisToAdd;
    o = inst.zone.offset(ts);
  }
  return { ts, o };
};
var parseDataToDateTime = function(parsed, parsedZone, opts, format2, text2, specificOffset) {
  const { setZone, zone: zone6 } = opts;
  if (parsed && Object.keys(parsed).length !== 0 || parsedZone) {
    const interpretationZone = parsedZone || zone6, inst = DateTime.fromObject(parsed, {
      ...opts,
      zone: interpretationZone,
      specificOffset
    });
    return setZone ? inst : inst.setZone(zone6);
  } else {
    return DateTime.invalid(new Invalid("unparsable", `the input "${text2}" can't be parsed as ${format2}`));
  }
};
var toTechFormat = function(dt, format2, allowZ = true) {
  return dt.isValid ? Formatter.create(Locale.create("en-US"), {
    allowZ,
    forceSimple: true
  }).formatDateTimeFromString(dt, format2) : null;
};
var toISODate = function(o, extended) {
  const longFormat = o.c.year > 9999 || o.c.year < 0;
  let c = "";
  if (longFormat && o.c.year >= 0)
    c += "+";
  c += padStart(o.c.year, longFormat ? 6 : 4);
  if (extended) {
    c += "-";
    c += padStart(o.c.month);
    c += "-";
    c += padStart(o.c.day);
  } else {
    c += padStart(o.c.month);
    c += padStart(o.c.day);
  }
  return c;
};
var toISOTime = function(o, extended, suppressSeconds, suppressMilliseconds, includeOffset, extendedZone) {
  let c = padStart(o.c.hour);
  if (extended) {
    c += ":";
    c += padStart(o.c.minute);
    if (o.c.millisecond !== 0 || o.c.second !== 0 || !suppressSeconds) {
      c += ":";
    }
  } else {
    c += padStart(o.c.minute);
  }
  if (o.c.millisecond !== 0 || o.c.second !== 0 || !suppressSeconds) {
    c += padStart(o.c.second);
    if (o.c.millisecond !== 0 || !suppressMilliseconds) {
      c += ".";
      c += padStart(o.c.millisecond, 3);
    }
  }
  if (includeOffset) {
    if (o.isOffsetFixed && o.offset === 0 && !extendedZone) {
      c += "Z";
    } else if (o.o < 0) {
      c += "-";
      c += padStart(Math.trunc(-o.o / 60));
      c += ":";
      c += padStart(Math.trunc(-o.o % 60));
    } else {
      c += "+";
      c += padStart(Math.trunc(o.o / 60));
      c += ":";
      c += padStart(Math.trunc(o.o % 60));
    }
  }
  if (extendedZone) {
    c += "[" + o.zone.ianaName + "]";
  }
  return c;
};
var normalizeUnit = function(unit) {
  const normalized = {
    year: "year",
    years: "year",
    month: "month",
    months: "month",
    day: "day",
    days: "day",
    hour: "hour",
    hours: "hour",
    minute: "minute",
    minutes: "minute",
    quarter: "quarter",
    quarters: "quarter",
    second: "second",
    seconds: "second",
    millisecond: "millisecond",
    milliseconds: "millisecond",
    weekday: "weekday",
    weekdays: "weekday",
    weeknumber: "weekNumber",
    weeksnumber: "weekNumber",
    weeknumbers: "weekNumber",
    weekyear: "weekYear",
    weekyears: "weekYear",
    ordinal: "ordinal"
  }[unit.toLowerCase()];
  if (!normalized)
    throw new InvalidUnitError(unit);
  return normalized;
};
var normalizeUnitWithLocalWeeks = function(unit) {
  switch (unit.toLowerCase()) {
    case "localweekday":
    case "localweekdays":
      return "localWeekday";
    case "localweeknumber":
    case "localweeknumbers":
      return "localWeekNumber";
    case "localweekyear":
    case "localweekyears":
      return "localWeekYear";
    default:
      return normalizeUnit(unit);
  }
};
var quickDT = function(obj, opts) {
  const zone6 = normalizeZone(opts.zone, Settings.defaultZone), loc = Locale.fromObject(opts), tsNow = Settings.now();
  let ts, o;
  if (!isUndefined2(obj.year)) {
    for (const u of orderedUnits2) {
      if (isUndefined2(obj[u])) {
        obj[u] = defaultUnitValues[u];
      }
    }
    const invalid5 = hasInvalidGregorianData(obj) || hasInvalidTimeData(obj);
    if (invalid5) {
      return DateTime.invalid(invalid5);
    }
    const offsetProvis = zone6.offset(tsNow);
    [ts, o] = objToTS(obj, offsetProvis, zone6);
  } else {
    ts = tsNow;
  }
  return new DateTime({ ts, zone: zone6, loc, o });
};
var diffRelative = function(start3, end3, opts) {
  const round2 = isUndefined2(opts.round) ? true : opts.round, format2 = (c, unit) => {
    c = roundTo(c, round2 || opts.calendary ? 0 : 2, true);
    const formatter5 = end3.loc.clone(opts).relFormatter(opts);
    return formatter5.format(c, unit);
  }, differ = (unit) => {
    if (opts.calendary) {
      if (!end3.hasSame(start3, unit)) {
        return end3.startOf(unit).diff(start3.startOf(unit), unit).get(unit);
      } else
        return 0;
    } else {
      return end3.diff(start3, unit).get(unit);
    }
  };
  if (opts.unit) {
    return format2(differ(opts.unit), opts.unit);
  }
  for (const unit of opts.units) {
    const count = differ(unit);
    if (Math.abs(count) >= 1) {
      return format2(count, unit);
    }
  }
  return format2(start3 > end3 ? -0 : 0, opts.units[opts.units.length - 1]);
};
var lastOpts = function(argList) {
  let opts = {}, args;
  if (argList.length > 0 && typeof argList[argList.length - 1] === "object") {
    opts = argList[argList.length - 1];
    args = Array.from(argList).slice(0, argList.length - 1);
  } else {
    args = Array.from(argList);
  }
  return [opts, args];
};
function friendlyDateTime(dateTimeish) {
  if (DateTime.isDateTime(dateTimeish)) {
    return dateTimeish;
  } else if (dateTimeish && dateTimeish.valueOf && isNumber4(dateTimeish.valueOf())) {
    return DateTime.fromJSDate(dateTimeish);
  } else if (dateTimeish && typeof dateTimeish === "object") {
    return DateTime.fromObject(dateTimeish);
  } else {
    throw new InvalidArgumentError(`Unknown datetime argument: ${dateTimeish}, of type ${typeof dateTimeish}`);
  }
}
var INVALID3 = "Invalid DateTime";
var MAX_DATE = 8640000000000000;
var defaultUnitValues = {
  month: 1,
  day: 1,
  hour: 0,
  minute: 0,
  second: 0,
  millisecond: 0
};
var defaultWeekUnitValues = {
  weekNumber: 1,
  weekday: 1,
  hour: 0,
  minute: 0,
  second: 0,
  millisecond: 0
};
var defaultOrdinalUnitValues = {
  ordinal: 1,
  hour: 0,
  minute: 0,
  second: 0,
  millisecond: 0
};
var orderedUnits2 = ["year", "month", "day", "hour", "minute", "second", "millisecond"];
var orderedWeekUnits = [
  "weekYear",
  "weekNumber",
  "weekday",
  "hour",
  "minute",
  "second",
  "millisecond"
];
var orderedOrdinalUnits = ["year", "ordinal", "hour", "minute", "second", "millisecond"];

class DateTime {
  constructor(config) {
    const zone6 = config.zone || Settings.defaultZone;
    let invalid5 = config.invalid || (Number.isNaN(config.ts) ? new Invalid("invalid input") : null) || (!zone6.isValid ? unsupportedZone(zone6) : null);
    this.ts = isUndefined2(config.ts) ? Settings.now() : config.ts;
    let c = null, o = null;
    if (!invalid5) {
      const unchanged = config.old && config.old.ts === this.ts && config.old.zone.equals(zone6);
      if (unchanged) {
        [c, o] = [config.old.c, config.old.o];
      } else {
        const ot = zone6.offset(this.ts);
        c = tsToObj(this.ts, ot);
        invalid5 = Number.isNaN(c.year) ? new Invalid("invalid input") : null;
        c = invalid5 ? null : c;
        o = invalid5 ? null : ot;
      }
    }
    this._zone = zone6;
    this.loc = config.loc || Locale.create();
    this.invalid = invalid5;
    this.weekData = null;
    this.localWeekData = null;
    this.c = c;
    this.o = o;
    this.isLuxonDateTime = true;
  }
  static now() {
    return new DateTime({});
  }
  static local() {
    const [opts, args] = lastOpts(arguments), [year, month, day, hour, minute, second, millisecond] = args;
    return quickDT({ year, month, day, hour, minute, second, millisecond }, opts);
  }
  static utc() {
    const [opts, args] = lastOpts(arguments), [year, month, day, hour, minute, second, millisecond] = args;
    opts.zone = FixedOffsetZone.utcInstance;
    return quickDT({ year, month, day, hour, minute, second, millisecond }, opts);
  }
  static fromJSDate(date, options3 = {}) {
    const ts = isDate(date) ? date.valueOf() : NaN;
    if (Number.isNaN(ts)) {
      return DateTime.invalid("invalid input");
    }
    const zoneToUse = normalizeZone(options3.zone, Settings.defaultZone);
    if (!zoneToUse.isValid) {
      return DateTime.invalid(unsupportedZone(zoneToUse));
    }
    return new DateTime({
      ts,
      zone: zoneToUse,
      loc: Locale.fromObject(options3)
    });
  }
  static fromMillis(milliseconds, options3 = {}) {
    if (!isNumber4(milliseconds)) {
      throw new InvalidArgumentError(`fromMillis requires a numerical input, but received a ${typeof milliseconds} with value ${milliseconds}`);
    } else if (milliseconds < -MAX_DATE || milliseconds > MAX_DATE) {
      return DateTime.invalid("Timestamp out of range");
    } else {
      return new DateTime({
        ts: milliseconds,
        zone: normalizeZone(options3.zone, Settings.defaultZone),
        loc: Locale.fromObject(options3)
      });
    }
  }
  static fromSeconds(seconds, options3 = {}) {
    if (!isNumber4(seconds)) {
      throw new InvalidArgumentError("fromSeconds requires a numerical input");
    } else {
      return new DateTime({
        ts: seconds * 1000,
        zone: normalizeZone(options3.zone, Settings.defaultZone),
        loc: Locale.fromObject(options3)
      });
    }
  }
  static fromObject(obj, opts = {}) {
    obj = obj || {};
    const zoneToUse = normalizeZone(opts.zone, Settings.defaultZone);
    if (!zoneToUse.isValid) {
      return DateTime.invalid(unsupportedZone(zoneToUse));
    }
    const loc = Locale.fromObject(opts);
    const normalized = normalizeObject(obj, normalizeUnitWithLocalWeeks);
    const { minDaysInFirstWeek, startOfWeek } = usesLocalWeekValues(normalized, loc);
    const tsNow = Settings.now(), offsetProvis = !isUndefined2(opts.specificOffset) ? opts.specificOffset : zoneToUse.offset(tsNow), containsOrdinal = !isUndefined2(normalized.ordinal), containsGregorYear = !isUndefined2(normalized.year), containsGregorMD = !isUndefined2(normalized.month) || !isUndefined2(normalized.day), containsGregor = containsGregorYear || containsGregorMD, definiteWeekDef = normalized.weekYear || normalized.weekNumber;
    if ((containsGregor || containsOrdinal) && definiteWeekDef) {
      throw new ConflictingSpecificationError("Can't mix weekYear/weekNumber units with year/month/day or ordinals");
    }
    if (containsGregorMD && containsOrdinal) {
      throw new ConflictingSpecificationError("Can't mix ordinal dates with month/day");
    }
    const useWeekData = definiteWeekDef || normalized.weekday && !containsGregor;
    let units, defaultValues, objNow = tsToObj(tsNow, offsetProvis);
    if (useWeekData) {
      units = orderedWeekUnits;
      defaultValues = defaultWeekUnitValues;
      objNow = gregorianToWeek(objNow, minDaysInFirstWeek, startOfWeek);
    } else if (containsOrdinal) {
      units = orderedOrdinalUnits;
      defaultValues = defaultOrdinalUnitValues;
      objNow = gregorianToOrdinal(objNow);
    } else {
      units = orderedUnits2;
      defaultValues = defaultUnitValues;
    }
    let foundFirst = false;
    for (const u of units) {
      const v = normalized[u];
      if (!isUndefined2(v)) {
        foundFirst = true;
      } else if (foundFirst) {
        normalized[u] = defaultValues[u];
      } else {
        normalized[u] = objNow[u];
      }
    }
    const higherOrderInvalid = useWeekData ? hasInvalidWeekData(normalized, minDaysInFirstWeek, startOfWeek) : containsOrdinal ? hasInvalidOrdinalData(normalized) : hasInvalidGregorianData(normalized), invalid5 = higherOrderInvalid || hasInvalidTimeData(normalized);
    if (invalid5) {
      return DateTime.invalid(invalid5);
    }
    const gregorian = useWeekData ? weekToGregorian(normalized, minDaysInFirstWeek, startOfWeek) : containsOrdinal ? ordinalToGregorian(normalized) : normalized, [tsFinal, offsetFinal] = objToTS(gregorian, offsetProvis, zoneToUse), inst = new DateTime({
      ts: tsFinal,
      zone: zoneToUse,
      o: offsetFinal,
      loc
    });
    if (normalized.weekday && containsGregor && obj.weekday !== inst.weekday) {
      return DateTime.invalid("mismatched weekday", `you can't specify both a weekday of ${normalized.weekday} and a date of ${inst.toISO()}`);
    }
    return inst;
  }
  static fromISO(text2, opts = {}) {
    const [vals, parsedZone] = parseISODate(text2);
    return parseDataToDateTime(vals, parsedZone, opts, "ISO 8601", text2);
  }
  static fromRFC2822(text2, opts = {}) {
    const [vals, parsedZone] = parseRFC2822Date(text2);
    return parseDataToDateTime(vals, parsedZone, opts, "RFC 2822", text2);
  }
  static fromHTTP(text2, opts = {}) {
    const [vals, parsedZone] = parseHTTPDate(text2);
    return parseDataToDateTime(vals, parsedZone, opts, "HTTP", opts);
  }
  static fromFormat(text2, fmt3, opts = {}) {
    if (isUndefined2(text2) || isUndefined2(fmt3)) {
      throw new InvalidArgumentError("fromFormat requires an input string and a format");
    }
    const { locale: locale5 = null, numberingSystem = null } = opts, localeToUse = Locale.fromOpts({
      locale: locale5,
      numberingSystem,
      defaultToEN: true
    }), [vals, parsedZone, specificOffset, invalid5] = parseFromTokens(localeToUse, text2, fmt3);
    if (invalid5) {
      return DateTime.invalid(invalid5);
    } else {
      return parseDataToDateTime(vals, parsedZone, opts, `format ${fmt3}`, text2, specificOffset);
    }
  }
  static fromString(text2, fmt3, opts = {}) {
    return DateTime.fromFormat(text2, fmt3, opts);
  }
  static fromSQL(text2, opts = {}) {
    const [vals, parsedZone] = parseSQL(text2);
    return parseDataToDateTime(vals, parsedZone, opts, "SQL", text2);
  }
  static invalid(reason, explanation = null) {
    if (!reason) {
      throw new InvalidArgumentError("need to specify a reason the DateTime is invalid");
    }
    const invalid5 = reason instanceof Invalid ? reason : new Invalid(reason, explanation);
    if (Settings.throwOnInvalid) {
      throw new InvalidDateTimeError(invalid5);
    } else {
      return new DateTime({ invalid: invalid5 });
    }
  }
  static isDateTime(o) {
    return o && o.isLuxonDateTime || false;
  }
  static parseFormatForOpts(formatOpts, localeOpts = {}) {
    const tokenList = formatOptsToTokens(formatOpts, Locale.fromObject(localeOpts));
    return !tokenList ? null : tokenList.map((t) => t ? t.val : null).join("");
  }
  static expandFormat(fmt3, localeOpts = {}) {
    const expanded = expandMacroTokens(Formatter.parseFormat(fmt3), Locale.fromObject(localeOpts));
    return expanded.map((t) => t.val).join("");
  }
  get(unit) {
    return this[unit];
  }
  get isValid() {
    return this.invalid === null;
  }
  get invalidReason() {
    return this.invalid ? this.invalid.reason : null;
  }
  get invalidExplanation() {
    return this.invalid ? this.invalid.explanation : null;
  }
  get locale() {
    return this.isValid ? this.loc.locale : null;
  }
  get numberingSystem() {
    return this.isValid ? this.loc.numberingSystem : null;
  }
  get outputCalendar() {
    return this.isValid ? this.loc.outputCalendar : null;
  }
  get zone() {
    return this._zone;
  }
  get zoneName() {
    return this.isValid ? this.zone.name : null;
  }
  get year() {
    return this.isValid ? this.c.year : NaN;
  }
  get quarter() {
    return this.isValid ? Math.ceil(this.c.month / 3) : NaN;
  }
  get month() {
    return this.isValid ? this.c.month : NaN;
  }
  get day() {
    return this.isValid ? this.c.day : NaN;
  }
  get hour() {
    return this.isValid ? this.c.hour : NaN;
  }
  get minute() {
    return this.isValid ? this.c.minute : NaN;
  }
  get second() {
    return this.isValid ? this.c.second : NaN;
  }
  get millisecond() {
    return this.isValid ? this.c.millisecond : NaN;
  }
  get weekYear() {
    return this.isValid ? possiblyCachedWeekData(this).weekYear : NaN;
  }
  get weekNumber() {
    return this.isValid ? possiblyCachedWeekData(this).weekNumber : NaN;
  }
  get weekday() {
    return this.isValid ? possiblyCachedWeekData(this).weekday : NaN;
  }
  get isWeekend() {
    return this.isValid && this.loc.getWeekendDays().includes(this.weekday);
  }
  get localWeekday() {
    return this.isValid ? possiblyCachedLocalWeekData(this).weekday : NaN;
  }
  get localWeekNumber() {
    return this.isValid ? possiblyCachedLocalWeekData(this).weekNumber : NaN;
  }
  get localWeekYear() {
    return this.isValid ? possiblyCachedLocalWeekData(this).weekYear : NaN;
  }
  get ordinal() {
    return this.isValid ? gregorianToOrdinal(this.c).ordinal : NaN;
  }
  get monthShort() {
    return this.isValid ? Info.months("short", { locObj: this.loc })[this.month - 1] : null;
  }
  get monthLong() {
    return this.isValid ? Info.months("long", { locObj: this.loc })[this.month - 1] : null;
  }
  get weekdayShort() {
    return this.isValid ? Info.weekdays("short", { locObj: this.loc })[this.weekday - 1] : null;
  }
  get weekdayLong() {
    return this.isValid ? Info.weekdays("long", { locObj: this.loc })[this.weekday - 1] : null;
  }
  get offset() {
    return this.isValid ? +this.o : NaN;
  }
  get offsetNameShort() {
    if (this.isValid) {
      return this.zone.offsetName(this.ts, {
        format: "short",
        locale: this.locale
      });
    } else {
      return null;
    }
  }
  get offsetNameLong() {
    if (this.isValid) {
      return this.zone.offsetName(this.ts, {
        format: "long",
        locale: this.locale
      });
    } else {
      return null;
    }
  }
  get isOffsetFixed() {
    return this.isValid ? this.zone.isUniversal : null;
  }
  get isInDST() {
    if (this.isOffsetFixed) {
      return false;
    } else {
      return this.offset > this.set({ month: 1, day: 1 }).offset || this.offset > this.set({ month: 5 }).offset;
    }
  }
  getPossibleOffsets() {
    if (!this.isValid || this.isOffsetFixed) {
      return [this];
    }
    const dayMs = 86400000;
    const minuteMs = 60000;
    const localTS = objToLocalTS(this.c);
    const oEarlier = this.zone.offset(localTS - dayMs);
    const oLater = this.zone.offset(localTS + dayMs);
    const o1 = this.zone.offset(localTS - oEarlier * minuteMs);
    const o2 = this.zone.offset(localTS - oLater * minuteMs);
    if (o1 === o2) {
      return [this];
    }
    const ts1 = localTS - o1 * minuteMs;
    const ts2 = localTS - o2 * minuteMs;
    const c1 = tsToObj(ts1, o1);
    const c2 = tsToObj(ts2, o2);
    if (c1.hour === c2.hour && c1.minute === c2.minute && c1.second === c2.second && c1.millisecond === c2.millisecond) {
      return [clone3(this, { ts: ts1 }), clone3(this, { ts: ts2 })];
    }
    return [this];
  }
  get isInLeapYear() {
    return isLeapYear(this.year);
  }
  get daysInMonth() {
    return daysInMonth(this.year, this.month);
  }
  get daysInYear() {
    return this.isValid ? daysInYear(this.year) : NaN;
  }
  get weeksInWeekYear() {
    return this.isValid ? weeksInWeekYear(this.weekYear) : NaN;
  }
  get weeksInLocalWeekYear() {
    return this.isValid ? weeksInWeekYear(this.localWeekYear, this.loc.getMinDaysInFirstWeek(), this.loc.getStartOfWeek()) : NaN;
  }
  resolvedLocaleOptions(opts = {}) {
    const { locale: locale5, numberingSystem, calendar } = Formatter.create(this.loc.clone(opts), opts).resolvedOptions(this);
    return { locale: locale5, numberingSystem, outputCalendar: calendar };
  }
  toUTC(offset4 = 0, opts = {}) {
    return this.setZone(FixedOffsetZone.instance(offset4), opts);
  }
  toLocal() {
    return this.setZone(Settings.defaultZone);
  }
  setZone(zone6, { keepLocalTime = false, keepCalendarTime = false } = {}) {
    zone6 = normalizeZone(zone6, Settings.defaultZone);
    if (zone6.equals(this.zone)) {
      return this;
    } else if (!zone6.isValid) {
      return DateTime.invalid(unsupportedZone(zone6));
    } else {
      let newTS = this.ts;
      if (keepLocalTime || keepCalendarTime) {
        const offsetGuess = zone6.offset(this.ts);
        const asObj = this.toObject();
        [newTS] = objToTS(asObj, offsetGuess, zone6);
      }
      return clone3(this, { ts: newTS, zone: zone6 });
    }
  }
  reconfigure({ locale: locale5, numberingSystem, outputCalendar } = {}) {
    const loc = this.loc.clone({ locale: locale5, numberingSystem, outputCalendar });
    return clone3(this, { loc });
  }
  setLocale(locale5) {
    return this.reconfigure({ locale: locale5 });
  }
  set(values) {
    if (!this.isValid)
      return this;
    const normalized = normalizeObject(values, normalizeUnitWithLocalWeeks);
    const { minDaysInFirstWeek, startOfWeek } = usesLocalWeekValues(normalized, this.loc);
    const settingWeekStuff = !isUndefined2(normalized.weekYear) || !isUndefined2(normalized.weekNumber) || !isUndefined2(normalized.weekday), containsOrdinal = !isUndefined2(normalized.ordinal), containsGregorYear = !isUndefined2(normalized.year), containsGregorMD = !isUndefined2(normalized.month) || !isUndefined2(normalized.day), containsGregor = containsGregorYear || containsGregorMD, definiteWeekDef = normalized.weekYear || normalized.weekNumber;
    if ((containsGregor || containsOrdinal) && definiteWeekDef) {
      throw new ConflictingSpecificationError("Can't mix weekYear/weekNumber units with year/month/day or ordinals");
    }
    if (containsGregorMD && containsOrdinal) {
      throw new ConflictingSpecificationError("Can't mix ordinal dates with month/day");
    }
    let mixed;
    if (settingWeekStuff) {
      mixed = weekToGregorian({ ...gregorianToWeek(this.c, minDaysInFirstWeek, startOfWeek), ...normalized }, minDaysInFirstWeek, startOfWeek);
    } else if (!isUndefined2(normalized.ordinal)) {
      mixed = ordinalToGregorian({ ...gregorianToOrdinal(this.c), ...normalized });
    } else {
      mixed = { ...this.toObject(), ...normalized };
      if (isUndefined2(normalized.day)) {
        mixed.day = Math.min(daysInMonth(mixed.year, mixed.month), mixed.day);
      }
    }
    const [ts, o] = objToTS(mixed, this.o, this.zone);
    return clone3(this, { ts, o });
  }
  plus(duration5) {
    if (!this.isValid)
      return this;
    const dur = Duration.fromDurationLike(duration5);
    return clone3(this, adjustTime(this, dur));
  }
  minus(duration5) {
    if (!this.isValid)
      return this;
    const dur = Duration.fromDurationLike(duration5).negate();
    return clone3(this, adjustTime(this, dur));
  }
  startOf(unit, { useLocaleWeeks = false } = {}) {
    if (!this.isValid)
      return this;
    const o = {}, normalizedUnit = Duration.normalizeUnit(unit);
    switch (normalizedUnit) {
      case "years":
        o.month = 1;
      case "quarters":
      case "months":
        o.day = 1;
      case "weeks":
      case "days":
        o.hour = 0;
      case "hours":
        o.minute = 0;
      case "minutes":
        o.second = 0;
      case "seconds":
        o.millisecond = 0;
        break;
      case "milliseconds":
        break;
    }
    if (normalizedUnit === "weeks") {
      if (useLocaleWeeks) {
        const startOfWeek = this.loc.getStartOfWeek();
        const { weekday } = this;
        if (weekday < startOfWeek) {
          o.weekNumber = this.weekNumber - 1;
        }
        o.weekday = startOfWeek;
      } else {
        o.weekday = 1;
      }
    }
    if (normalizedUnit === "quarters") {
      const q = Math.ceil(this.month / 3);
      o.month = (q - 1) * 3 + 1;
    }
    return this.set(o);
  }
  endOf(unit, opts) {
    return this.isValid ? this.plus({ [unit]: 1 }).startOf(unit, opts).minus(1) : this;
  }
  toFormat(fmt3, opts = {}) {
    return this.isValid ? Formatter.create(this.loc.redefaultToEN(opts)).formatDateTimeFromString(this, fmt3) : INVALID3;
  }
  toLocaleString(formatOpts = DATE_SHORT, opts = {}) {
    return this.isValid ? Formatter.create(this.loc.clone(opts), formatOpts).formatDateTime(this) : INVALID3;
  }
  toLocaleParts(opts = {}) {
    return this.isValid ? Formatter.create(this.loc.clone(opts), opts).formatDateTimeParts(this) : [];
  }
  toISO({
    format: format2 = "extended",
    suppressSeconds = false,
    suppressMilliseconds = false,
    includeOffset = true,
    extendedZone = false
  } = {}) {
    if (!this.isValid) {
      return null;
    }
    const ext = format2 === "extended";
    let c = toISODate(this, ext);
    c += "T";
    c += toISOTime(this, ext, suppressSeconds, suppressMilliseconds, includeOffset, extendedZone);
    return c;
  }
  toISODate({ format: format2 = "extended" } = {}) {
    if (!this.isValid) {
      return null;
    }
    return toISODate(this, format2 === "extended");
  }
  toISOWeekDate() {
    return toTechFormat(this, "kkkk-'W'WW-c");
  }
  toISOTime({
    suppressMilliseconds = false,
    suppressSeconds = false,
    includeOffset = true,
    includePrefix = false,
    extendedZone = false,
    format: format2 = "extended"
  } = {}) {
    if (!this.isValid) {
      return null;
    }
    let c = includePrefix ? "T" : "";
    return c + toISOTime(this, format2 === "extended", suppressSeconds, suppressMilliseconds, includeOffset, extendedZone);
  }
  toRFC2822() {
    return toTechFormat(this, "EEE, dd LLL yyyy HH:mm:ss ZZZ", false);
  }
  toHTTP() {
    return toTechFormat(this.toUTC(), "EEE, dd LLL yyyy HH:mm:ss 'GMT'");
  }
  toSQLDate() {
    if (!this.isValid) {
      return null;
    }
    return toISODate(this, true);
  }
  toSQLTime({ includeOffset = true, includeZone = false, includeOffsetSpace = true } = {}) {
    let fmt3 = "HH:mm:ss.SSS";
    if (includeZone || includeOffset) {
      if (includeOffsetSpace) {
        fmt3 += " ";
      }
      if (includeZone) {
        fmt3 += "z";
      } else if (includeOffset) {
        fmt3 += "ZZ";
      }
    }
    return toTechFormat(this, fmt3, true);
  }
  toSQL(opts = {}) {
    if (!this.isValid) {
      return null;
    }
    return `${this.toSQLDate()} ${this.toSQLTime(opts)}`;
  }
  toString() {
    return this.isValid ? this.toISO() : INVALID3;
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    if (this.isValid) {
      return `DateTime { ts: ${this.toISO()}, zone: ${this.zone.name}, locale: ${this.locale} }`;
    } else {
      return `DateTime { Invalid, reason: ${this.invalidReason} }`;
    }
  }
  valueOf() {
    return this.toMillis();
  }
  toMillis() {
    return this.isValid ? this.ts : NaN;
  }
  toSeconds() {
    return this.isValid ? this.ts / 1000 : NaN;
  }
  toUnixInteger() {
    return this.isValid ? Math.floor(this.ts / 1000) : NaN;
  }
  toJSON() {
    return this.toISO();
  }
  toBSON() {
    return this.toJSDate();
  }
  toObject(opts = {}) {
    if (!this.isValid)
      return {};
    const base = { ...this.c };
    if (opts.includeConfig) {
      base.outputCalendar = this.outputCalendar;
      base.numberingSystem = this.loc.numberingSystem;
      base.locale = this.loc.locale;
    }
    return base;
  }
  toJSDate() {
    return new Date(this.isValid ? this.ts : NaN);
  }
  diff(otherDateTime, unit = "milliseconds", opts = {}) {
    if (!this.isValid || !otherDateTime.isValid) {
      return Duration.invalid("created by diffing an invalid DateTime");
    }
    const durOpts = { locale: this.locale, numberingSystem: this.numberingSystem, ...opts };
    const units = maybeArray(unit).map(Duration.normalizeUnit), otherIsLater = otherDateTime.valueOf() > this.valueOf(), earlier = otherIsLater ? this : otherDateTime, later = otherIsLater ? otherDateTime : this, diffed = diff_default(earlier, later, units, durOpts);
    return otherIsLater ? diffed.negate() : diffed;
  }
  diffNow(unit = "milliseconds", opts = {}) {
    return this.diff(DateTime.now(), unit, opts);
  }
  until(otherDateTime) {
    return this.isValid ? Interval.fromDateTimes(this, otherDateTime) : this;
  }
  hasSame(otherDateTime, unit, opts) {
    if (!this.isValid)
      return false;
    const inputMs = otherDateTime.valueOf();
    const adjustedToZone = this.setZone(otherDateTime.zone, { keepLocalTime: true });
    return adjustedToZone.startOf(unit, opts) <= inputMs && inputMs <= adjustedToZone.endOf(unit, opts);
  }
  equals(other) {
    return this.isValid && other.isValid && this.valueOf() === other.valueOf() && this.zone.equals(other.zone) && this.loc.equals(other.loc);
  }
  toRelative(options3 = {}) {
    if (!this.isValid)
      return null;
    const base = options3.base || DateTime.fromObject({}, { zone: this.zone }), padding = options3.padding ? this < base ? -options3.padding : options3.padding : 0;
    let units = ["years", "months", "days", "hours", "minutes", "seconds"];
    let unit = options3.unit;
    if (Array.isArray(options3.unit)) {
      units = options3.unit;
      unit = undefined;
    }
    return diffRelative(base, this.plus(padding), {
      ...options3,
      numeric: "always",
      units,
      unit
    });
  }
  toRelativeCalendar(options3 = {}) {
    if (!this.isValid)
      return null;
    return diffRelative(options3.base || DateTime.fromObject({}, { zone: this.zone }), this, {
      ...options3,
      numeric: "auto",
      units: ["years", "months", "days"],
      calendary: true
    });
  }
  static min(...dateTimes) {
    if (!dateTimes.every(DateTime.isDateTime)) {
      throw new InvalidArgumentError("min requires all arguments be DateTimes");
    }
    return bestBy(dateTimes, (i) => i.valueOf(), Math.min);
  }
  static max(...dateTimes) {
    if (!dateTimes.every(DateTime.isDateTime)) {
      throw new InvalidArgumentError("max requires all arguments be DateTimes");
    }
    return bestBy(dateTimes, (i) => i.valueOf(), Math.max);
  }
  static fromFormatExplain(text2, fmt3, options3 = {}) {
    const { locale: locale5 = null, numberingSystem = null } = options3, localeToUse = Locale.fromOpts({
      locale: locale5,
      numberingSystem,
      defaultToEN: true
    });
    return explainFromTokens(localeToUse, text2, fmt3);
  }
  static fromStringExplain(text2, fmt3, options3 = {}) {
    return DateTime.fromFormatExplain(text2, fmt3, options3);
  }
  static get DATE_SHORT() {
    return DATE_SHORT;
  }
  static get DATE_MED() {
    return DATE_MED;
  }
  static get DATE_MED_WITH_WEEKDAY() {
    return DATE_MED_WITH_WEEKDAY;
  }
  static get DATE_FULL() {
    return DATE_FULL;
  }
  static get DATE_HUGE() {
    return DATE_HUGE;
  }
  static get TIME_SIMPLE() {
    return TIME_SIMPLE;
  }
  static get TIME_WITH_SECONDS() {
    return TIME_WITH_SECONDS;
  }
  static get TIME_WITH_SHORT_OFFSET() {
    return TIME_WITH_SHORT_OFFSET;
  }
  static get TIME_WITH_LONG_OFFSET() {
    return TIME_WITH_LONG_OFFSET;
  }
  static get TIME_24_SIMPLE() {
    return TIME_24_SIMPLE;
  }
  static get TIME_24_WITH_SECONDS() {
    return TIME_24_WITH_SECONDS;
  }
  static get TIME_24_WITH_SHORT_OFFSET() {
    return TIME_24_WITH_SHORT_OFFSET;
  }
  static get TIME_24_WITH_LONG_OFFSET() {
    return TIME_24_WITH_LONG_OFFSET;
  }
  static get DATETIME_SHORT() {
    return DATETIME_SHORT;
  }
  static get DATETIME_SHORT_WITH_SECONDS() {
    return DATETIME_SHORT_WITH_SECONDS;
  }
  static get DATETIME_MED() {
    return DATETIME_MED;
  }
  static get DATETIME_MED_WITH_SECONDS() {
    return DATETIME_MED_WITH_SECONDS;
  }
  static get DATETIME_MED_WITH_WEEKDAY() {
    return DATETIME_MED_WITH_WEEKDAY;
  }
  static get DATETIME_FULL() {
    return DATETIME_FULL;
  }
  static get DATETIME_FULL_WITH_SECONDS() {
    return DATETIME_FULL_WITH_SECONDS;
  }
  static get DATETIME_HUGE() {
    return DATETIME_HUGE;
  }
  static get DATETIME_HUGE_WITH_SECONDS() {
    return DATETIME_HUGE_WITH_SECONDS;
  }
}

// src/helpers/obsidian.ts
var requestUrl = async (req) => {
  let resp = await globalThis.requestUrl(req);
  resp.url = req.url;
  return resp;
};

// src/helpers/scrapers.ts
var WORLD_CAT_URL = `https://search.worldcat.org/search`;
var worldCatBookPage = async (p, book) => {
  const qp = [];
  if (book.isbn13) {
    qp.push(`bn:${book.isbn13}`);
  } else if (book.isbn10) {
    qp.push(`bn:${book.isbn10}`);
  } else if ("isbn" in book && [10, 13].includes(String(book.isbn).length)) {
    qp.push(`bn:${book.isbn}`);
  }
  if (book.title) {
    qp.push(`ti:${book.title}`);
  }
  if (book.authors.length > 0) {
    qp.push(`au:${book.authors[0]}`);
  }
  const encode = (s3) => s3.map((i) => i.replaceAll(" ", "+")).join("+AND+");
  const url11 = `${WORLD_CAT_URL}?q=${encode(qp)}`;
  p.debug(`World Catalog: ${url11}`);
  const resp = await requestUrl({
    url: url11,
    method: "GET",
    headers: {
      Accept: "*/*",
      "Accept-Encoding": "gzip, deflate, br",
      "Cache-Control": "no-cache",
      "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
      Connection: "keep-alive"
    }
  });
  if (resp.status === 200) {
    let html = resp.text;
    p.debug({ resp, html });
  }
  return url11;
};
var AmazonBook = async (p, book) => {
  const url11 = `https://www.amazon.com/dp/${book.asin}`;
  p.debug(`Scraping ${url11}`, book);
  let html;
  try {
    let req = await requestUrl({
      url: url11,
      method: "GET",
      headers: {
        Accept: "*/*",
        "Accept-Encoding": "gzip, deflate, br",
        "Content-Type": "text/html",
        "Cache-Control": "no-cache",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
        Connection: "keep-alive"
      }
    });
    html = req.text;
    p.debug("Returned from Amazon API call", html);
  } catch (e) {
    p.error(`Problems loading book information from Amazon (${url11})`, e?.msg);
    return book;
  }
  let page = createDocument(html);
  p.debug("page created");
  let amazonRating = Number(stripAfter(query(page, "span .a-icon-alt").textContent || "", " "));
  let goodReadsRating = Number(query(page, ""));
  let reviewsAmazon = hasSelector(page, "span .arcCustomerReviewText") ? Number(stripAfter(query(page, "span .arcCustomerReviewText", "throw")?.textContent, " ")) : undefined;
  let histogram = query(page, "#histogramTable", "undefined");
  if (histogram) {
  }
  let isKindleBook = query(page, "#rpi-attribute-book_details-ebook_pages", "undefined") ? true : false;
  let description = query(page, "div[data-a-expander-name=book_description_expander] p span")?.textContent;
  let isbn10 = findWhere(page, "span.a-text-bold", "undefined", "contains", "ISBN-10")?.nextElementSibling?.textContent;
  let isbn13 = findWhere(page, "span.a-text-bold", "undefined", "contains", "ISBN-13")?.nextElementSibling?.textContent;
  let [publisher, publicationDate] = findWhere(page, "span.a-text-bold", "undefined", "contains", "Item Weight")?.nextElementSibling?.textContent.split("(") || [undefined, undefined];
  let weight = findWhere(page, "span.a-text-bold", "undefined", "contains", "Item Weight")?.nextElementSibling?.textContent;
  let kindleVariantAvailable = isKindleBook === true ? true : query(page, "#tmm-grid-swatch-KINDLE", undefined) === undefined ? false : true;
  let numOfRatings = stripAfter(query(page, "#acrCustomerReviewText")?.textContent || "", " ratings");
  let pages = isKindleBook ? stripAfter(query(page, "#rpi-attribute-book_details-ebook_pages .a-declarative")?.textContent || "", " ") : retainWhile(stripUntil(query(page, "#rpi-attribute-book_details-fiona_pages")?.textContent || "", ...NUMERIC_CHAR), ...NUMERIC_CHAR);
  p.debug("Amazon", {
    url: url11,
    isKindleBook,
    kindleVariantAvailable,
    pages,
    numOfRatings,
    weight,
    publisher,
    publicationDate,
    isbn10,
    isbn13,
    description,
    rating: amazonRating,
    reviewsAmazon
  });
  return {
    ...book,
    ratingsAmazon: amazonRating,
    totalPages: book.totalPages ? book.totalPages : pages,
    description: book.description ? book.description : description,
    isKindleBook,
    kindleVariantAvailable,
    reviewsAmazon,
    isbn10: book.isbn10 ? book.isbn10 : isbn10,
    isbn13: book.isbn13 ? book.isbn13 : isbn13,
    weight: book.weight ? book.weight : weight,
    publisher: book.publisher ? book.publisher : publisher?.trim(),
    publishDate: book.publishDate ? book.publishDate : publicationDate ? DateTime.fromFormat(stripTrailing(publicationDate, ")"), "DATE_MED").toFormat("yyyy-mm-dd") : undefined
  };
};

// src/utils/type_guards/isDateTime.ts
var isDateTime = (val) => {
  return isObject(val) && "toFormat" in val;
};

// src/dv_queries/book.ts
var book = (p) => async (source, container, component, filePath) => {
  const dv = p.api.dv_page(source, container, component, filePath);
  const { fmt: fmt3 } = dv;
  const current = dv.current;
  let book2 = {
    title: current.title || current["kindle-sync"]?.title || "unknown",
    subtitle: current.subtitle,
    authors: current.authors ? current.authors.split(",").map((i) => i.trim()) : current.author ? current.author.split(",").map((i) => i.trim()) : current["kindle-sync"].author ? current["kindle-sync"].author.split(",").map((i) => i.trim()) : [],
    bookCategory: current.category,
    publisher: current.publisher,
    publishDate: current.publishDate,
    totalPages: current.totalPage,
    description: current.description,
    isbn13: current.isbn13,
    isbn10: current.isbn10,
    asin: current["kindle-sync"]?.asin ? current["kindle-sync"].asin : typeof current?.asin === "string" ? String(current?.asin) : undefined,
    coverImages: [
      ...current.coverUrl ? [current.coverUrl] : [],
      ...current["kindle-sync"]?.bookImageUrl ? [
        current["kindle-sync"]?.bookImageUrl
      ] : []
    ],
    worldCatSubjects: [],
    googleBookLink: current.link,
    worldCatBookLink: undefined,
    otherBooks: current.otherBooks,
    kindleHighlightCount: current["kindle-sync"]?.highlightsCount
  };
  if (!book2.title && (!book2.isbn10 || !book2.isbn13 || !book2.asin)) {
    p.error(`Book() query requested on a page without necessary metadata! Page must have at least a title and some book identifier (e.g., ISBN10, ISBN13, or ASIN).`);
    fmt3.callout("warning", "No Book metadata found!", { content: `A kind-model query for a book summary was made but we rely on at least a "title" and some book identifier (isbn10, isbn13, or asin are all ok)` });
  } else {
    book2.worldCatBookLink = await worldCatBookPage(p, book2);
    book2 = await AmazonBook(p, book2);
    p.debug("Book after Amazon Scrape", { book: book2 });
    const cover = [
      `<div class="book-cover" style="padding-bottom: 8px;">`,
      book2.coverImages.length > 0 ? `<img src="${book2.coverImages[0]}" style="">` : ``,
      `</div>`
    ];
    const publisher = book2.publisher ? [
      fmt3.medium("Publisher:"),
      fmt3.html_ul([book2.publisher], { indentation: "default", my: "tight" })
    ] : [];
    const publicationDate = book2.publishDate ? [
      fmt3.medium("Publication Date:"),
      isDateTime(book2.publishDate) ? fmt3.html_ul([book2?.publishDate?.toFormat("LLL yyyy")], { indentation: "default", my: "tight" }) : "unknown format"
    ] : [];
    const pages = book2.totalPages ? [
      fmt3.medium("Length:&nbsp;"),
      fmt3.html_ul([`${fmt3.normal(book2.totalPages)} ${fmt3.light("pages", { ts: "sm" })}`], { indentation: "default", my: "tight" })
    ] : [];
    const author = book2.authors.length > 0 ? [
      fmt3.medium("Written By:"),
      fmt3.html_ul(book2.authors, { indentation: "default", my: "tight" })
    ] : [];
    const book_ids = [
      `<div class="book-ids">`,
      fmt3.medium("Book Identifiers:"),
      fmt3.html_ul([
        book2.isbn10 ? `${fmt3.light(book2.isbn10, { ts: "sm" })}&nbsp;${fmt3.medium("&nbsp;isbn10", { ts: "xs" })}` : undefined,
        book2.isbn13 ? `${fmt3.light(book2.isbn13, { ts: "sm" })}&nbsp;${fmt3.medium("&nbsp;isbn13", { ts: "xs" })}` : undefined,
        book2.asin ? `${fmt3.light(book2.asin, { ts: "sm" })}&nbsp;${fmt3.medium("&nbsp;asin", { ts: "xs" })}` : undefined
      ], { indentation: "default", my: "tight" }),
      `</div>`
    ];
    const summary = fmt3.blockquote("example", "Summary", {
      content: fmt3.wrap([
        ...cover,
        ...author,
        ...publisher,
        ...publicationDate,
        ...pages,
        ...book_ids
      ], { my: "4px", px: "8px" }),
      style: {
        mr: "8px",
        ml: "8px"
      }
    });
    const description = fmt3.blockquote("info", "Book Description", {
      fold: "+",
      content: book2.description || "no description found"
    });
    const otherBooks = book2.otherBooks ? [
      fmt3.blockquote("info", `Books by ${book2.authors[0]}`, {
        content: book2.otherBooks.map((b) => {
          return fmt3.link(b.title, b.titleLink, { iconUrl: b.imageLink });
        }).join("\n") || "&nbsp;",
        icon: BOOK_ICON,
        fold: "-"
      })
    ] : [];
    const actions = fmt3.blockquote("info", "Actions / Links", {
      content: fmt3.wrap([
        book2.asin ? fmt3.link("Open in Kindle", `kindle://book?action=open&asin=${book2.asin}`, { svgInline: KINDLE_ICON }) : undefined,
        book2.asin ? fmt3.link("Amazon", `https://www.amazon.com/dp/${book2.asin}`, { svgInline: AMAZON }) : undefined,
        book2.googleBookLink ? fmt3.link("Google", book2.googleBookLink, { svgInline: BOOK_ICON }) : undefined,
        book2.worldCatBookLink ? fmt3.link("WorldCat", book2.worldCatBookLink, { svgInline: BOOK_CATALOG }) : undefined,
        fmt3.link("Search", `https://google.com/search?q=${book2.title} by ${book2.authors.join(", ")}`, { svgInline: SEARCH_BOOK })
      ], { flex: true, direction: "row", ts: "sm", gap: "12px" }),
      fold: "+"
    });
    const reviews = fmt3.blockquote("info", "Reviews", {
      content: "not available currently",
      fold: "-",
      icon: TIP_ICON
    });
    const details = fmt3.wrap([
      description,
      reviews,
      ...otherBooks,
      actions,
      fmt3.empty_callout({ flex: true, grow: 1 })
    ], { flex: true, direction: "column" });
    const html = [
      `<div class="book-summary">`,
      ...book2.subtitle ? [
        `<div class="book-subtitle" style="display:block; width: 100%">`,
        fmt3.blockquote("quote", book2.subtitle, { style: { mb: "8px" } }),
        `</div>`
      ] : [],
      `<div class="book-cols" style="display:flex; flex-direction: cols; width: 100%;">`,
      `<div class="summary-col" style="display:flex; flex-grow:0; max-width: 30%;">${summary}</div>`,
      details,
      `</div`
    ];
    await fmt3.render(html.join("\n"));
  }
};

// src/dv_queries/kind_table.ts
var kind_table = (p) => (source, container, component, filePath) => async (params_str) => {
  const dv = p.api.dv_page(source, container, component, filePath);
  const table3 = dv.table;
  const { createFileLink, show_when, show_desc, show_links: show_links2, fmt: fmt3 } = dv;
  const [kind, category, opts] = params_str;
  const pages = opts.subcategory ? dv.pages(`#${kind}/${category}/${opts.subcategory}`) : category ? dv.pages(`#${kind}/${category}`) : dv.pages(`#${kind}`);
  if (pages.length > 0) {
    table3(["Repo", "When", "Desc", "Links"], pages.sort((p2) => p2.file.mday).map((p2) => {
      const pg = isDvPage(p2) ? p2 : dv.page(p2);
      return [
        createFileLink(pg),
        show_when(pg),
        show_desc(pg),
        show_links2(pg)
      ];
    }));
  } else {
    const msg2 = opts.subcategory ? fmt3.as_tag(`${kind}/${category}/${opts.subcategory}`) : category ? fmt3.as_tag(`${kind}/${category}`) : `${fmt3.as_tag(kind)}`;
    fmt3.callout("note", `none found currently<span style="font-weight: 150; position: absolute; right: 8px;">${msg2}</span>`);
  }
};

// src/helpers/pageContent.ts
function traverse(tree, cb) {
  if (isObject(tree) && "children" in tree && isArray(tree.children)) {
    for (let child of tree.children) {
      if (isObject(child) && child) {
        let node2 = { ...child, parent: tree };
        traverse(node2, cb);
      }
    }
  }
  cb(tree);
}
var linksInFrontmatter = function(fm) {
  let links = [];
  Object.keys(fm).forEach((k) => {
    const prop = fm[k];
    if (isArray(prop)) {
      prop.forEach((p) => {
        if (isUrl(p)) {
          links.push({ url: p, property: k });
        }
      });
    } else {
      if (isUrl(prop)) {
        links.push({ url: prop, property: k });
      }
    }
  });
  return links;
};
var find_links = (links, fm_links, page) => (t) => {
  if (isObject(t) && isUrl(t?.attributes?.src))
    links.push({
      url: t.attributes.src,
      title: t.attributes?.alt || page.file.name,
      in_content: true,
      in_frontmatter: fm_links.map((i) => i.url).includes(t.attributes.src),
      tagName: t.name,
      domain: isYouTubeCreatorUrl(t.attributes.src) ? "youtube-creator" : isYouTubeVideoUrl(t.attributes.src) ? "youtube-video" : isGithubRepoUrl(t.attributes.src) ? "github-repo" : undefined
    });
  return links;
};
var pageContent = (p) => async (ref) => {
  const path = isLink(ref) ? ref.path : isTFile(ref) ? ref.path : isString(ref) ? ref : isDvPage(ref) ? ref.file.path : undefined;
  if (!path) {
    p.error("invalid path reference sent into pageContent()", ref);
    return;
  }
  const content2 = await p.dv.io.load(path);
  if (!content2) {
    p.error(`the path passed to pageContent(${path}) was not a valid file in the vault`);
    return;
  }
  p.debug({ [`content [${typeof content2}]`]: content2 });
  const { yaml, body, blocks, h1, preH1, postH1 } = splitContent(content2);
  const ast = Markdoc.parse(content2);
  const renderableTree = () => {
    const result = Markdoc.transform(ast);
    return isString(result) ? JSON.parse(result) : result;
  };
  const page = isDvPage(ref) ? ref : p.dv.page(path);
  return {
    filepath: path,
    content: content2,
    yaml,
    body,
    h1,
    preH1,
    postH1,
    blocks,
    ast,
    page,
    renderableTree,
    externalLinks: () => {
      let links = [];
      let tree = renderableTree();
      let fm_links = linksInFrontmatter(page.file.frontmatter);
      traverse(tree, find_links(links, fm_links, page));
      return [links, fm_links];
    },
    internalLinks: () => {
      return isDvPage(ref) ? Array.from(ref.file.outlinks) : Array.from(p.dv.page(path).file.outlinks);
    }
  };
};

// src/dv_queries/video_gallery.ts
var isVideoGalleryOptions = (val) => {
  return isObject(val) && Object.keys(val).every((k) => ["size", "exclude"].includes(k)) && ["S", "M", "L", undefined].includes(val?.size);
};
var defaultOptions = {
  size: "M",
  exclude: []
};
var video_gallery = (p) => (source, container, component, filePath) => async (params_str) => {
  let params = [];
  const dv = p.api.dv_page(source, container, component, filePath);
  const { current, fmt: fmt3 } = dv;
  try {
    params = params_str === "" ? {} : JSON.parse(`[ ${params_str} ]`);
  } catch {
    fmt3.callout("error", "Invalid Videos() query!", {
      content: `Videos(${params_str ? `${params_str}` : ""}) is not valid:`
    });
    return;
  }
  let videos = [];
  let backlinks = dv.as_array(current.file.inlinks);
  let backPages = await Promise.all(backlinks.map((i) => pageContent(p)(i))).then((pgs) => pgs.filter((i) => i));
  backPages.forEach((pg) => {
    let [links] = pg.externalLinks();
    videos = [
      ...videos,
      ...links.filter((i) => i.domain === "youtube-video").map((i) => ({
        ...i,
        title: i.title.toLowerCase() === "video" ? pg.page.file.name : i.title,
        filepath: pg.filepath
      }))
    ];
    p.debug("Videos", { links, videos, ...pg, tree: pg.renderableTree() });
  });
  if (isVideoGalleryOptions(params[0] || {})) {
    const opts = {
      ...defaultOptions,
      ...params[0] || {}
    };
    const grid_cols = opts.size == "L" ? 2 : opts.size == "M" ? 3 : opts.size == "S" ? 4 : 5;
    const dom = [
      `<div class="video-gallery" style="display: grid; grid-template-columns: repeat(${grid_cols}, minmax(0, 1fr)); gap: 8px;">`,
      ...videos.map((v) => {
        const src = youtubeEmbed(v.url);
        const node2 = [
          `<div class="video-stack" style="display: flex; flex-direction: column; aspect-ratio: 1.75 auto">`,
          `<iframe class="video-ref" content-editable="false" aria-multiline="true" allow="fullscreen" frameborder="0" sandbox="allow-same-origin allow-modals allow-popups allow-presentation allow-forms" src="${src}"></iframe>`,
          `<a data-tooltip-position="top" aria-label="${v.filepath}" data-href="${v.filepath}" class="internal-link data-link-icon data-link-text" _target="_blank" rel="noopener" data-link-path="${v.filepath}" style="">${v.title}</a>`,
          `</div>`
        ].join("\n");
        return node2;
      }),
      "</div>"
    ].join("\n");
    fmt3.render(dom);
  }
};

// src/utils/base_api/api.ts
var api = (plugin4) => ({
  dv_page: dv_page(plugin4),
  back_links: back_links(plugin4),
  page_entry: page_entry(plugin4),
  book: book(plugin4),
  kind_table: kind_table(plugin4),
  video_gallery: video_gallery(plugin4),
  kinds: async () => {
    return [];
  },
  kind_tags: () => {
    return plugin4.settings.cache?.kind_tags ? plugin4.settings.cache?.kind_tags : plugin4.error(`Call to kind_tags() prior to cache having this set!`);
  },
  types: async () => {
    return [];
  },
  categories: (kind) => {
    return [];
  },
  subcategories: async (category) => {
    const sub = await plugin4._cache["subcategories"];
    const name2 = isString(category) ? category : category?.name;
    return category ? sub.filter((i) => i.name === name2) : sub;
  },
  page_blocks: () => {
    return [];
  },
  icon_sets: () => {
    return [];
  },
  get_dv_page: (page) => {
    if (isDataviewPage(page)) {
      return page;
    } else {
      const dataview_page = isTFile(page) ? plugin4.dv.page(page.path) : isFileLink(page) ? plugin4.dv.page(page.path) : isMarkdownView(page) && typeof page.file === "string" ? plugin4.dv.page(page.file) : isMarkdownView(page) && isTFile(page.file) ? plugin4.dv.page(page.file.path) : isString(page) ? plugin4.dv.page(page) : null;
      return isDataviewPage(dataview_page) ? dataview_page : null;
    }
  },
  get_kinded_page: (page) => {
    const context = getBasePageContext(plugin4, page);
    return null;
  },
  create_link: (text2, path, hover) => {
  },
  create_link_ext: (text2, uri, hover) => {
    return "";
  },
  set_page_icon: (page, icon) => {
  }
});

// src/utils/getDataviewPageCache.ts
var getDataviewPageCache = (plugin4) => {
  const base = "DataviewAPI" in globalThis ? globalThis.DataviewAPI : null;
  if (!base) {
    plugin4.error(`Unable to reach the Dataview root API!`);
  } else {
    return base;
  }
};

// src/utils/on_load/initialize_cache.ts
var build_cache = (plugin4) => {
  const dv_api = getDataviewPageCache(plugin4);
  const cache = {
    kinds: new Map,
    kind_tags: new Set,
    pages: new Map,
    tag_lookup: new Map,
    kind_lookup: new Map,
    name_lookup: new Map
  };
  if (dv_api) {
    plugin4.info("pages", dv_api.pages);
  } else {
    plugin4.error(`The Dataview Root API was not available and therefore was not able to build the cache for Kind Models.`);
  }
  return cache;
};
var initialize_cache = async (plugin4) => {
  const cache = plugin4.get_cache() || build_cache(plugin4);
  if (!cache) {
    plugin4.error(`Error creating cache!`);
  }
  return cache;
};

// src/utils/on_load/csv.ts
var csv = (plugin4) => {
  plugin4.registerMarkdownCodeBlockProcessor("csv", (source, el, ctx) => {
    const rows = source.split("\n").filter((row) => row.length > 0);
    const table3 = el.createEl("table");
    const body = table3.createEl("tbody");
    for (let i = 0;i < rows.length; i++) {
      const cols = rows[i].split(",");
      const row = body.createEl("tr");
      for (let j = 0;j < cols.length; j++) {
        row.createEl("td", { text: cols[j] });
      }
    }
  });
};

// src/utils/on_load/on_editor_change.ts
var on_editor_change = (plugin4) => {
  plugin4.registerEvent(plugin4.app.workspace.on("editor-change", (editor, _info) => {
    let content2 = editor.getValue();
    const attributed = /\n::\s*quote\s*\(\s*"(.+?)"\s{0,1},\s{0,1}"(.+?)"\s*\)/sg;
    const quote = /\n::\s{0,1}quote\s{0,1}\("(.+?)"\s*\)/sg;
    const warn2 = /\n::\s{0,1}warn\s{0,1}\("(.+?)"\s*\)/sg;
    const warnWithCode = /\n::\s*warn\s*\(\s*"(.+?)"\s{0,1},\s{0,1}(.+?)\s*\)/sg;
    const err = /\n::\s{0,1}err(or){0,1}\s{0,1}\("(.+?)"\s*\)/sg;
    const errWithCode = /\n::\s*err(or){0,1}\s*\(\s*"(.+?)"\s{0,1},\s{0,1}(.+?)\s*\)/sg;
    const cur = editor.getCursor();
    if (attributed.test(content2)) {
      const text2 = content2.replaceAll(attributed, `\n> [!quote] ${"$1".trim()}\n> - \$2\n\n`);
      editor.setValue(text2);
      editor.setCursor({ ch: 0, line: cur.line + 2 });
      content2 = editor.getValue();
    }
    if (quote.test(content2)) {
      const text2 = content2.replaceAll(quote, `\n> [!quote] ${"$1".trim()}\n`);
      editor.setValue(text2);
      editor.setCursor(cur);
      editor.setCursor({ ch: 0, line: cur.line + 1 });
      content2 = editor.getValue();
    }
    if (warnWithCode.test(content2)) {
      const text2 = content2.replaceAll(warnWithCode, `\n> [!warning] Warning [ ${"$3".trim()} ]\n> - \$1\n\n`);
      editor.setValue(text2);
      editor.setCursor({ ch: 0, line: cur.line + 2 });
      content2 = editor.getValue();
    }
    if (warn2.test(content2)) {
      const text2 = content2.replaceAll(warn2, `\n> [!warning] ${"$1".trim()}\n`);
      editor.setValue(text2);
      editor.setCursor({ ch: 0, line: cur.line + 1 });
      content2 = editor.getValue();
    }
    if (errWithCode.test(content2)) {
      const text2 = content2.replaceAll(errWithCode, `\n> [!error] Error [ ${"$3".trim()} ]\n> <li style="color: #F38BA8">\$2</li>\n\n`);
      editor.setValue(text2);
      editor.setCursor({ ch: 0, line: cur.line + 2 });
      content2 = editor.getValue();
    }
    if (err.test(content2)) {
      const text2 = content2.replaceAll(err, `\n> [!error] ${"$2".trim()}\n`);
      editor.setValue(text2);
      editor.setCursor({ ch: 0, line: cur.line + 1 });
      content2 = editor.getValue();
    }
    const emoji_lookup = {
      "thumbs-up": "\uD83D\uDC4D",
      "thumbs-down": "\uD83D\uDC4E",
      sunglasses: "\uD83D\uDE0E",
      smile: "\uD83D\uDE04",
      rocket: "\uD83D\uDE80"
    };
    const emoji_pattern = /\(\(\s*(smile|thumbs-up|sunglasses){1}\s*\)\)/s;
    if (emoji_pattern.test(content2)) {
      plugin4.warn("emoji detected", emoji_pattern.test(content2));
      while (emoji_pattern.test(content2)) {
        const match2 = content2.match(emoji_pattern);
        plugin4.warn("match:", match2);
        if (match2) {
          const [all, first, next] = match2;
          plugin4.debug("emoji pattern", { all, first, next, match: match2 });
          const replacement = `<span class="emoji">${emoji_lookup[first]}</span>`;
          content2 = content2.replace(emoji_pattern, replacement);
        }
      }
      editor.setValue(content2);
      editor.setCursor({ ch: 0, line: cur.line + 1 });
    }
  }));
};

// src/utils/type_guards/isBasePageContext.ts
var isBasePageContext = (v) => {
  return typeof v === "object" && v !== null && v?.__kind === "BasePageContext" ? true : false;
};

// src/utils/type_guards/isCategoryPage.ts
var isCategoryPage = (v) => {
  return isBasePageContext(v) && v.kind === "Category Page";
};

// src/commands/update_kinded_page.ts
var update_kinded_page = (plugin4) => async (editor, view) => {
  const p = getBasePageContext(plugin4, view);
  plugin4.info("update-kinded-page", p);
  if (view.getViewType() !== "markdown") {
    plugin4.warn("non-markdown file", `update-kinded-page[${view.file?.name || view.file?.basename}] was run on a non-markdown page so nothing to do`);
  } else {
    if (isCategoryPage(p)) {
    }
  }
};

// src/utils/on_load/add_commands.ts
var add_commands = (plugin4) => {
  plugin4.addCommand({
    id: "create-new-kinded-page",
    name: "create a new (kinded) page",
    editorCallback: (editor, view) => {
      const content2 = view.getViewData();
      plugin4.info("create-new-kinded-page", { content: content2 });
    }
  });
  plugin4.addCommand({
    id: "create-new-classification-page",
    name: "add a classification for a (kinded) page",
    editorCallback: (editor, view) => {
      const content2 = view.getViewData();
      plugin4.info("create-new-classification-page", { content: content2 });
    }
  });
  plugin4.addCommand({
    id: "add-url-props-for-kinded-page",
    name: "add links to (kinded) page",
    editorCallback: (editor, view) => {
      const content2 = view.getViewData();
      plugin4.info("add-url-props-for-kinded-page", { content: content2 });
    }
  });
  plugin4.addCommand({
    id: "update-kinded-page",
    name: "update this (kinded) page",
    editorCallback: update_kinded_page(plugin4)
  });
};

// src/utils/on_load/on_file_deleted.ts
import {Notice} from "obsidian";
var on_file_deleted = (plugin4) => {
  plugin4.registerEvent(plugin4.app.vault.on("delete", (evt) => {
    const kind_folder = plugin4.settings.kind_folder;
    const find = new RegExp(`^${kind_folder}\$`);
    if (find.test(evt.path)) {
      new Notice("Kind file deleted");
    }
  }));
};

// src/utils/on_load/on_file_created.ts
import {Notice as Notice2} from "obsidian";
var on_file_created = (plugin4) => {
  plugin4.registerEvent(plugin4.app.vault.on("create", (evt) => {
    const kind_folder = plugin4.settings.kind_folder;
    const find = new RegExp(`^${kind_folder}\$`);
    if (find.test(evt.path)) {
      new Notice2("Kind file added");
    }
  }));
};

// src/utils/on_load/on_file_modified.ts
import {Notice as Notice3} from "obsidian";
var on_file_modified = (plugin4) => {
  plugin4.registerEvent(plugin4.app.vault.on("modify", (evt) => {
    const kind_folder = plugin4.settings.kind_folder;
    const find = new RegExp(`^${kind_folder}`);
    if (find.test(evt.path)) {
      new Notice3("Kind file modified");
    }
  }));
};

// src/utils/on_load/km_codeblock_parser.ts
var km_codeblock_parser = (plugin4) => {
  let processor = async (source, el, ctx) => {
    el.style.overflowX = "auto";
    const back_links3 = /BackLinks\((.*)\)/;
    const page_entry3 = /PageEntry\((.*)\)/;
    const book3 = /Book\((.*)\)/;
    const kind = /Kind\((.*)\)/;
    const videos = /Videos\((.*)\)/;
    if (back_links3.test(source)) {
      const [_, params] = Array.from(source.match(back_links3) || []);
      await plugin4.api.back_links(source, el, ctx, ctx.sourcePath)(params);
      plugin4.debug(`backlinks rendered on "${ctx.sourcePath}"`);
    } else if (page_entry3.test(source)) {
      await plugin4.api.page_entry(source, el, ctx, ctx.sourcePath);
      plugin4.debug(`page entry rendered on "${ctx.sourcePath}"`);
    } else if (book3.test(source)) {
      await plugin4.api.book(source, el, ctx, ctx.sourcePath);
      plugin4.debug(`book rendered on "${ctx.sourcePath}"`);
    } else if (kind.test(source)) {
      const kindParams = parseParams("string AS Kind", "opt(string) AS Category", "opt(string) AS Subcategory")((o) => o.strings("category", "subcategory").stringArrays("categories", "subcategories", "show_cols", "hide_cols").numerics("max"))(source.match(kind));
      if (isOkUserParam(kindParams)) {
        plugin4.debug("OK", kindParams);
      } else {
        plugin4.debug("ERR", kindParams);
      }
      if (kindParams.isOk) {
        await plugin4.api.kind_table(source, el, ctx, ctx.sourcePath)(kindParams.kind === "no-parameters" ? [] : kindParams.params);
        plugin4.debug(`Kind Table rendered on "${ctx.sourcePath}"`);
      }
    } else if (videos.test(source)) {
      const outcome = parseParams()((o) => o.enums("size", "S", "M", "L").stringArrays("exclude"))(source.match(videos));
      if (outcome.isOk) {
        await plugin4.api.video_gallery(source, el, ctx, ctx.sourcePath)("");
        plugin4.debug(`Video Gallery rendered on ${ctx.sourcePath}`);
      } else {
      }
    } else {
    }
  };
  let registration = plugin4.registerMarkdownCodeBlockProcessor("km", processor);
  registration.sortOrder = -100;
};

// src/main.ts
class KindModelPlugin extends Plugin3 {
  settings;
  dv = globalThis["DataviewAPI"];
  api;
  config;
  log;
  debug;
  info;
  warn;
  error;
  get_cache() {
    return this.settings.cache?.pages ? this.settings.cache : null;
  }
  get ready() {
    return this.settings.cache && this.settings.cache?.pages !== null;
  }
  async onload() {
    await this.loadSettings();
    const log = logger(this.settings.log_level);
    const { debug: debug3, info: info3, warn: warn2, error: error4 } = log;
    this.log = log;
    this.debug = debug3;
    this.info = info3;
    this.warn = warn2;
    this.error = error4;
    this.dv = getAPI(this.app);
    this.api = api(this);
    initialize_cache(this);
    csv(this);
    on_editor_change(this);
    add_commands(this);
    on_file_deleted(this);
    on_file_created(this);
    on_file_modified(this);
    km_codeblock_parser(this);
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setText("Kind Models");
    statusBarItemEl.addClass("clickable");
    this.addSettingTab(new SettingsTab2(this.app, this));
    this.info(`Kind Model has reloaded`);
    this.mount();
  }
  mount() {
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    const { debug: debug3, error: error4 } = logger(this.settings.log_level);
    if (typeof this.saveData !== "function") {
      error4("the 'this' context appear to have been lost when trying to call saveSettings()", this);
      return;
    } else {
      debug3("saving settings", this.settings);
    }
    await this.saveData(this.settings);
  }
}
export {
  KindModelPlugin as default
};
